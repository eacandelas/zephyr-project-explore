
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <__start>:
 * to __memory_pool_quad_block_size absolute symbol.
 * This function does not get called, but compiler calculates the value and
 * assigns it to the absolute symbol, that, in turn is used by assembler macros.
 */
static void __attribute__ ((used)) __k_mem_pool_quad_block_size_define(void)
{
       0:	2000283c 	.word	0x2000283c
	__asm__(".globl __memory_pool_quad_block_size\n\t"
       4:	0000c6f1 	.word	0x0000c6f1

	return r;
}

int printf(const char *_Restrict format, ...)
{
       8:	0000c72d 	.word	0x0000c72d
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf(fputc, DESC(stdout), format, vargs);
       c:	0000c5a1 	.word	0x0000c5a1

	return r;
}

int printf(const char *_Restrict format, ...)
{
      10:	0000c5a1 	.word	0x0000c5a1
	va_list vargs;
	int     r;

	va_start(vargs, format);
      14:	0000c5a1 	.word	0x0000c5a1
	r = _prf(fputc, DESC(stdout), format, vargs);
      18:	0000c5a1 	.word	0x0000c5a1
	va_end(vargs);

	return r;
}
      1c:	0000c5a1 	.word	0x0000c5a1
      20:	0000c5a1 	.word	0x0000c5a1
      24:	0000c5a1 	.word	0x0000c5a1
      28:	0000c5a1 	.word	0x0000c5a1
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
		if (c != '%') {
      2c:	0000c1a5 	.word	0x0000c1a5
			if ((*func) (c, dest) == EOF) {
      30:	0000c5a1 	.word	0x0000c5a1
      34:	0000c5a1 	.word	0x0000c5a1
      38:	0000c15d 	.word	0x0000c15d
				return EOF;
      3c:	0000c5a1 	.word	0x0000c5a1

00000040 <_irq_vector_table>:
      40:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
				case '+':
					fplus = true;
					break;

				case ' ':
					fspace = true;
      50:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
      60:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
					fspace = true;
					break;

				case '#':
					falt = true;
					break;
      70:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
      80:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
				case '\0':
					return count;
				}
			}

			if (c == '*') {
      90:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
				if (width < 0) {
					fminus = true;
      a0:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
					width = -width;
				}
				c = *format++;
      b0:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
      c0:	0000c5c9 0000c5c9 0000c5c9 0000c5c9     ................
		i = 10 * i + *p++ - '0';
      d0:	0000c5c9 0000c5c9 0000c5c9              ............

000000dc <_sw_isr_table>:
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
				width = MAXFLD;
      dc:	00000000 00000c99                       ........

000000e4 <_isr_irq1.9500>:
      e4:	00000000 0000af2d                       ....-...

000000ec <_isr_irq2>:
			}

			if (c == '.') {
      ec:	abad1dea 0000c52d                       ....-...

000000f4 <_isr_irq3>:
				c = *format++;
				if (c == '*') {
      f4:	abad1dea 0000c52d                       ....-...

000000fc <_isr_irq4>:

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
		i = 10 * i + *p++ - '0';
      fc:	abad1dea 0000c52d                       ....-...

00000104 <_isr_irq5>:
			}

			if (c == '.') {
				c = *format++;
				if (c == '*') {
					precision = (int32_t)
     104:	abad1dea 0000c52d                       ....-...

0000010c <_isr_irq6.7879>:
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
     10c:	20000308 00000a33                       ... 3...

00000114 <_isr_irq7>:
     114:	abad1dea 0000c52d                       ....-...

0000011c <_isr_irq8>:
		i = 10 * i + *p++ - '0';
     11c:	abad1dea 0000c52d                       ....-...

00000124 <_isr_irq9>:
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);

				if (precision > MAXFLD)
					precision = -1;
     124:	abad1dea 0000c52d                       ....-...

0000012c <_isr_irq10>:
				c = *format++;
     12c:	abad1dea 0000c52d                       ....-...

00000134 <_isr_irq11.9504>:
			 *    L: long double
			 *    z: size_t or ssize_t
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
     134:	00000000 0000af39                       ....9...

0000013c <_isr_irq12>:
     13c:	abad1dea 0000c52d                       ....-...

00000144 <_isr_irq13.9508>:
				i = c;
				c = *format++;
     144:	00000000 0000af83                       ........

0000014c <_isr_irq14>:
				 */
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
     14c:	abad1dea 0000c52d                       ....-...

00000154 <_isr_irq15>:
     154:	abad1dea 0000c52d                       ....-...

0000015c <_isr_irq16>:
     15c:	abad1dea 0000c52d                       ....-...

00000164 <_isr_irq17.7706>:
     164:	00000000 0000079d                       ........

0000016c <_isr_irq18>:
     16c:	abad1dea 0000c52d                       ....-...

00000174 <_isr_irq19>:
     174:	abad1dea 0000c52d                       ....-...

0000017c <_isr_irq20>:
     17c:	abad1dea 0000c52d                       ....-...

00000184 <_isr_irq21>:
     184:	abad1dea 0000c52d                       ....-...

0000018c <_isr_irq22>:
     18c:	abad1dea 0000c52d                       ....-...

00000194 <_isr_irq23>:
     194:	abad1dea 0000c52d                       ....-...

0000019c <_isr_irq24.9512>:
     19c:	00000000 0000af75                       ....u...

000001a4 <_isr_irq25>:
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
     1a4:	abad1dea 0000c52d                       ....-...

000001ac <_isr_irq26>:

			need_justifying = false;
			prefix = 0;
			switch (c) {
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
     1ac:	abad1dea 0000c52d                       ....-...

000001b4 <_isr_irq27>:
				buf[1] = '\0';
     1b4:	abad1dea 0000c52d                       ....-...

000001bc <_isr_irq28>:
				c = 1;
				break;

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
     1bc:	abad1dea 0000c52d                       ....-...

000001c4 <_isr_irq29>:

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
     1c4:	abad1dea 0000c52d                       ....-...

000001cc <_isr_irq30>:
		*buf++ = '-';
     1cc:	abad1dea 0000c52d                       ....-...

000001d4 <_isr_irq31>:
		if (value != 0x80000000)
			value = -value;
     1d4:	abad1dea 0000c52d                       ....-...

000001dc <_isr_irq32>:
	} else if (fplus)
		*buf++ = '+';
     1dc:	abad1dea 0000c52d                       ....-...

000001e4 <_isr_irq33>:
	else if (fspace)
		*buf++ = ' ';
     1e4:	abad1dea 0000c52d                       ....-...

000001ec <_isr_irq34>:
     1ec:	abad1dea 0000c52d                       ....-...

000001f4 <_isr_irq35>:
		*buf++ = '-';
		if (value != 0x80000000)
			value = -value;
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
     1f4:	abad1dea 0000c52d                       ....-...

000001fc <_isr_irq36>:
	return (buf - buf0) + _to_x(buf, value, 8, precision);
}

static int _to_udec(char *buf, uint32_t value, int precision)
{
	return _to_x(buf, value, 10, precision);
     1fc:	abad1dea 0000c52d                       ....-...

00000204 <_isr_irq37>:
	} else if (fplus)
		*buf++ = '+';
	else if (fspace)
		*buf++ = ' ';

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
     204:	abad1dea 0000c52d                       ....-...

0000020c <_isr_irq38>:

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
     20c:	abad1dea 0000c52d                       ....-...

00000214 <_isr_irq39>:
				 * optimized out.
				 */
			}

			need_justifying = false;
			prefix = 0;
     214:	abad1dea 0000c52d                       ....-...

0000021c <__aeabi_uldivmod>:
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     21c:	b953      	cbnz	r3, 234 <__aeabi_uldivmod+0x18>
     21e:	b94a      	cbnz	r2, 234 <__aeabi_uldivmod+0x18>
				double_temp = u.i;
     220:	2900      	cmp	r1, #0
     222:	bf08      	it	eq
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
     224:	2800      	cmpeq	r0, #0
     226:	bf1c      	itt	ne
     228:	f04f 31ff 	movne.w	r1, #4294967295
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     22c:	f04f 30ff 	movne.w	r0, #4294967295
     230:	f000 b992 	b.w	558 <__aeabi_idiv0>
     234:	f1ad 0c08 	sub.w	ip, sp, #8
     238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     23c:	f000 f81a 	bl	274 <__udivmoddi4>
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
     240:	f8dd e004 	ldr.w	lr, [sp, #4]
	fract = (double_temp << 11) & ~HIGHBIT64;
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     248:	b004      	add	sp, #16
     24a:	4770      	bx	lr

0000024c <__popcountsi2>:
	sign = !!(double_temp & HIGHBIT64);


	if (exp == 0x7ff) {
     24c:	0843      	lsrs	r3, r0, #1
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
	fract = (double_temp << 11) & ~HIGHBIT64;
     24e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
	sign = !!(double_temp & HIGHBIT64);
     252:	1ac0      	subs	r0, r0, r3


	if (exp == 0x7ff) {
     254:	0883      	lsrs	r3, r0, #2
		if (!fract) {
     256:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
			*buf++ = sign ? '-' : '+';
     25a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     25e:	4418      	add	r0, r3
     260:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     264:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     268:	eb00 2000 	add.w	r0, r0, r0, lsl #8
			*buf++ = 'I';
     26c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
			*buf++ = 'N';
     270:	0e00      	lsrs	r0, r0, #24
     272:	4770      	bx	lr

00000274 <__udivmoddi4>:
     274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			*buf++ = 'F';
     278:	468c      	mov	ip, r1
     27a:	460e      	mov	r6, r1
     27c:	4604      	mov	r4, r0
     27e:	9d08      	ldr	r5, [sp, #32]
     280:	2b00      	cmp	r3, #0
		} else {
			*buf++ = 'N';
     282:	d150      	bne.n	326 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xa6>
			*buf++ = 'a';
     284:	428a      	cmp	r2, r1
			*buf++ = sign ? '-' : '+';
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
     286:	4617      	mov	r7, r2
     288:	d96c      	bls.n	364 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xe4>
			*buf++ = 'a';
			*buf++ = 'N';
     28a:	fab2 fe82 	clz	lr, r2
			*buf++ = 'I';
			*buf++ = 'N';
			*buf++ = 'F';
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
     28e:	f1be 0f00 	cmp.w	lr, #0
			*buf++ = 'N';
     292:	d00b      	beq.n	2ac <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x2c>
     294:	f1ce 0420 	rsb	r4, lr, #32
		}
		*buf = 0;
		return buf - start;
     298:	fa20 f404 	lsr.w	r4, r0, r4
		} else {
			*buf++ = 'N';
			*buf++ = 'a';
			*buf++ = 'N';
		}
		*buf = 0;
     29c:	fa01 f60e 	lsl.w	r6, r1, lr
		return buf - start;
     2a0:	ea44 0c06 	orr.w	ip, r4, r6
	}

	if ((exp | fract) != 0) {
     2a4:	fa02 f70e 	lsl.w	r7, r2, lr
     2a8:	fa00 f40e 	lsl.w	r4, r0, lr
     2ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
		fract |= HIGHBIT64;
     2b0:	0c22      	lsrs	r2, r4, #16
     2b2:	fbbc f0f9 	udiv	r0, ip, r9
     2b6:	fa1f f887 	uxth.w	r8, r7
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     2ba:	fb09 c610 	mls	r6, r9, r0, ip
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
     2be:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
		fract |= HIGHBIT64;
		decexp = true;		/* Wasn't zero */
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
     2c2:	fb00 f308 	mul.w	r3, r0, r8
		*buf++ = '-';
     2c6:	42b3      	cmp	r3, r6
		}
		*buf = 0;
		return buf - start;
	}

	if ((exp | fract) != 0) {
     2c8:	d909      	bls.n	2de <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x5e>
	} else
		decexp = false;		/* It was zero */

	if (decexp && sign) {
		*buf++ = '-';
	} else if (fplus) {
     2ca:	19f6      	adds	r6, r6, r7
     2cc:	f100 32ff 	add.w	r2, r0, #4294967295
		*buf++ = '+';
     2d0:	f080 8122 	bcs.w	518 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x118>
	} else if (fspace) {
     2d4:	42b3      	cmp	r3, r6
		*buf++ = ' ';
     2d6:	f240 811f 	bls.w	518 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x118>
     2da:	3802      	subs	r0, #2
     2dc:	443e      	add	r6, r7
     2de:	1af6      	subs	r6, r6, r3
     2e0:	b2a2      	uxth	r2, r4

	if (decexp && sign) {
		*buf++ = '-';
	} else if (fplus) {
		*buf++ = '+';
	} else if (fspace) {
     2e2:	fbb6 f3f9 	udiv	r3, r6, r9
		*buf++ = ' ';
	}

	decexp = 0;
     2e6:	fb09 6613 	mls	r6, r9, r3, r6
	while (exp <= -3) {
     2ea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
		while ((fract >> 32) >= (MAXFP1 / 5)) {
     2ee:	fb03 f808 	mul.w	r8, r3, r8
     2f2:	45a0      	cmp	r8, r4
     2f4:	d909      	bls.n	30a <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x8a>
     2f6:	19e4      	adds	r4, r4, r7
     2f8:	f103 32ff 	add.w	r2, r3, #4294967295
     2fc:	f080 810a 	bcs.w	514 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x114>
     300:	45a0      	cmp	r8, r4
     302:	f240 8107 	bls.w	514 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x114>
     306:	3b02      	subs	r3, #2
     308:	443c      	add	r4, r7
     30a:	ebc8 0404 	rsb	r4, r8, r4
			_rlrshift(&fract);
     30e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     312:	2100      	movs	r1, #0
     314:	2d00      	cmp	r5, #0
			exp++;
     316:	d062      	beq.n	3de <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x15e>
     318:	fa24 f40e 	lsr.w	r4, r4, lr
     31c:	2300      	movs	r3, #0
     31e:	602c      	str	r4, [r5, #0]
     320:	606b      	str	r3, [r5, #4]
     322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     326:	428b      	cmp	r3, r1
		}
		fract *= 5;
     328:	d907      	bls.n	33a <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xba>
     32a:	2d00      	cmp	r5, #0
     32c:	d055      	beq.n	3da <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x15a>
     32e:	2100      	movs	r1, #0
     330:	e885 0041 	stmia.w	r5, {r0, r6}
     334:	4608      	mov	r0, r1
		exp++;
     336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		decexp--;
     33a:	fab3 f183 	clz	r1, r3
     33e:	2900      	cmp	r1, #0

		while ((fract >> 32) <= (MAXFP1 / 2)) {
     340:	f040 8090 	bne.w	464 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x64>
     344:	42b3      	cmp	r3, r6
     346:	d302      	bcc.n	34e <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xce>
     348:	4282      	cmp	r2, r0
     34a:	f200 80f8 	bhi.w	53e <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x13e>
     34e:	1a84      	subs	r4, r0, r2
     350:	eb66 0603 	sbc.w	r6, r6, r3
     354:	2001      	movs	r0, #1
     356:	46b4      	mov	ip, r6
     358:	2d00      	cmp	r5, #0
			fract <<= 1;
     35a:	d040      	beq.n	3de <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x15e>
     35c:	e885 1010 	stmia.w	r5, {r4, ip}
			exp--;
     360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     364:	b912      	cbnz	r2, 36c <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xec>
     366:	2701      	movs	r7, #1
     368:	fbb7 f7f2 	udiv	r7, r7, r2
     36c:	fab7 fe87 	clz	lr, r7
     370:	f1be 0f00 	cmp.w	lr, #0
     374:	d135      	bne.n	3e2 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x162>
     376:	1bf3      	subs	r3, r6, r7
     378:	ea4f 4817 	mov.w	r8, r7, lsr #16
		}
	}

	while (exp > 0) {
     37c:	fa1f fc87 	uxth.w	ip, r7
		_ldiv5(&fract);
     380:	2101      	movs	r1, #1
     382:	fbb3 f0f8 	udiv	r0, r3, r8
     386:	0c22      	lsrs	r2, r4, #16
     388:	fb08 3610 	mls	r6, r8, r0, r3
		exp--;
     38c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
		decexp++;
     390:	fb0c f300 	mul.w	r3, ip, r0
     394:	42b3      	cmp	r3, r6
		while ((fract >> 32) <= (MAXFP1 / 2)) {
     396:	d907      	bls.n	3a8 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x128>
     398:	19f6      	adds	r6, r6, r7
     39a:	f100 32ff 	add.w	r2, r0, #4294967295
     39e:	d202      	bcs.n	3a6 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x126>
     3a0:	42b3      	cmp	r3, r6
     3a2:	f200 80ce 	bhi.w	542 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x142>
     3a6:	4610      	mov	r0, r2
     3a8:	1af6      	subs	r6, r6, r3
     3aa:	b2a2      	uxth	r2, r4
     3ac:	fbb6 f3f8 	udiv	r3, r6, r8
			fract <<= 1;
     3b0:	fb08 6613 	mls	r6, r8, r3, r6
			exp--;
     3b4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
     3b8:	fb0c fc03 	mul.w	ip, ip, r3
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     3bc:	45a4      	cmp	ip, r4
     3be:	d907      	bls.n	3d0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x150>
		exp++;
     3c0:	19e4      	adds	r4, r4, r7
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
     3c2:	f103 32ff 	add.w	r2, r3, #4294967295
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
     3c6:	d202      	bcs.n	3ce <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x14e>
     3c8:	45a4      	cmp	ip, r4
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
     3ca:	f200 80b5 	bhi.w	538 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x138>
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     3ce:	4613      	mov	r3, r2
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
     3d0:	ebcc 0404 	rsb	r4, ip, r4
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
     3d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
		if (!falt && (precision > 0))
     3d8:	e79c      	b.n	314 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x94>
     3da:	4629      	mov	r1, r5
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     3dc:	4628      	mov	r0, r5
     3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3e2:	f1ce 0120 	rsb	r1, lr, #32
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
     3e6:	fa06 f30e 	lsl.w	r3, r6, lr
     3ea:	fa07 f70e 	lsl.w	r7, r7, lr
     3ee:	fa20 f901 	lsr.w	r9, r0, r1
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
     3f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     3f6:	40ce      	lsrs	r6, r1
     3f8:	ea49 0903 	orr.w	r9, r9, r3
		} else
			c = 'f';
	}

	if (c == 'f') {
     3fc:	fbb6 faf8 	udiv	sl, r6, r8
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
     400:	ea4f 4419 	mov.w	r4, r9, lsr #16
		} else
			c = 'f';
	}

	if (c == 'f') {
		exp = precision + decexp;
     404:	fb08 661a 	mls	r6, r8, sl, r6
     408:	fa1f fc87 	uxth.w	ip, r7
     40c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
		if (exp < 0)
			exp = 0;
	} else
		exp = precision + 1;
     410:	fb0a f20c 	mul.w	r2, sl, ip
	digit_count = 16;
     414:	429a      	cmp	r2, r3
     416:	fa00 f40e 	lsl.w	r4, r0, lr
     41a:	d90a      	bls.n	432 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x32>
     41c:	19db      	adds	r3, r3, r7
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
     41e:	f10a 31ff 	add.w	r1, sl, #4294967295
     422:	f080 8087 	bcs.w	534 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x134>
     426:	429a      	cmp	r2, r3
     428:	f240 8084 	bls.w	534 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x134>
	while (exp--) {
     42c:	f1aa 0a02 	sub.w	sl, sl, #2
     430:	443b      	add	r3, r7
		_ldiv5(&ltemp);
     432:	1a9b      	subs	r3, r3, r2
     434:	fa1f f989 	uxth.w	r9, r9
     438:	fbb3 f1f8 	udiv	r1, r3, r8
		_rlrshift(&ltemp);
     43c:	fb08 3311 	mls	r3, r8, r1, r3
     440:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
     444:	fb01 f60c 	mul.w	r6, r1, ip
	}

	fract += ltemp;
     448:	429e      	cmp	r6, r3
     44a:	d907      	bls.n	45c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5c>
     44c:	19db      	adds	r3, r3, r7
     44e:	f101 32ff 	add.w	r2, r1, #4294967295
     452:	d26b      	bcs.n	52c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12c>
     454:	429e      	cmp	r6, r3
	if ((fract >> 32) & 0xF0000000) {
     456:	d969      	bls.n	52c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x12c>
     458:	3902      	subs	r1, #2
     45a:	443b      	add	r3, r7
     45c:	1b9b      	subs	r3, r3, r6
     45e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
     462:	e78e      	b.n	382 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x102>
     464:	f1c1 0e20 	rsb	lr, r1, #32
     468:	fa22 f40e 	lsr.w	r4, r2, lr
		_ldiv5(&fract);
     46c:	408b      	lsls	r3, r1
     46e:	4323      	orrs	r3, r4
     470:	fa20 f70e 	lsr.w	r7, r0, lr
		_rlrshift(&fract);
     474:	fa06 f401 	lsl.w	r4, r6, r1
     478:	ea4f 4c13 	mov.w	ip, r3, lsr #16
		decexp++;
     47c:	fa26 f60e 	lsr.w	r6, r6, lr
	}

	if (c == 'f') {
     480:	433c      	orrs	r4, r7
		if (decexp > 0) {
     482:	fbb6 f9fc 	udiv	r9, r6, ip
     486:	0c27      	lsrs	r7, r4, #16
     488:	fb0c 6619 	mls	r6, ip, r9, r6
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
     48c:	fa1f f883 	uxth.w	r8, r3
     490:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
     494:	fb09 f708 	mul.w	r7, r9, r8
     498:	42b7      	cmp	r7, r6
     49a:	fa02 f201 	lsl.w	r2, r2, r1
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
     49e:	fa00 fa01 	lsl.w	sl, r0, r1
     4a2:	d908      	bls.n	4b6 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xb6>
     4a4:	18f6      	adds	r6, r6, r3
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
     4a6:	f109 30ff 	add.w	r0, r9, #4294967295
     4aa:	d241      	bcs.n	530 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x130>
     4ac:	42b7      	cmp	r7, r6
     4ae:	d93f      	bls.n	530 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x130>
		if (falt || (precision > 0))
     4b0:	f1a9 0902 	sub.w	r9, r9, #2
     4b4:	441e      	add	r6, r3
     4b6:	1bf6      	subs	r6, r6, r7
     4b8:	b2a0      	uxth	r0, r4
			*buf++ = '.';
     4ba:	fbb6 f4fc 	udiv	r4, r6, ip
     4be:	fb0c 6614 	mls	r6, ip, r4, r6
		while (precision-- > 0) {
			if (decexp < 0) {
				*buf++ = '0';
     4c2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
			}
		} else
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
     4c6:	fb04 f808 	mul.w	r8, r4, r8
     4ca:	45b8      	cmp	r8, r7
			if (decexp < 0) {
     4cc:	d907      	bls.n	4de <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xde>
     4ce:	18ff      	adds	r7, r7, r3
     4d0:	f104 30ff 	add.w	r0, r4, #4294967295
				*buf++ = '0';
     4d4:	d228      	bcs.n	528 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x128>
				decexp++;
     4d6:	45b8      	cmp	r8, r7
     4d8:	d926      	bls.n	528 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x128>
     4da:	3c02      	subs	r4, #2
			} else
				*buf++ = _get_digit(&fract, &digit_count);
     4dc:	441f      	add	r7, r3
     4de:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
     4e2:	ebc8 0707 	rsb	r7, r8, r7
     4e6:	fba0 8902 	umull	r8, r9, r0, r2
     4ea:	454f      	cmp	r7, r9
     4ec:	4644      	mov	r4, r8
     4ee:	464e      	mov	r6, r9
     4f0:	d314      	bcc.n	51c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x11c>
     4f2:	d029      	beq.n	548 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x148>
     4f4:	b365      	cbz	r5, 550 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x150>
     4f6:	ebba 0304 	subs.w	r3, sl, r4
     4fa:	eb67 0706 	sbc.w	r7, r7, r6
     4fe:	fa07 fe0e 	lsl.w	lr, r7, lr
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
     502:	40cb      	lsrs	r3, r1
     504:	40cf      	lsrs	r7, r1
     506:	ea4e 0303 	orr.w	r3, lr, r3
     50a:	e885 0088 	stmia.w	r5, {r3, r7}
     50e:	2100      	movs	r1, #0
     510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (*buf++ != '0')
			decexp--;
     514:	4613      	mov	r3, r2
     516:	e6f8      	b.n	30a <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x8a>
     518:	4610      	mov	r0, r2
		if (falt || (precision > 0))
     51a:	e6e0      	b.n	2de <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x5e>
     51c:	ebb8 0402 	subs.w	r4, r8, r2
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
     520:	eb69 0603 	sbc.w	r6, r9, r3
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
     524:	3801      	subs	r0, #1
     526:	e7e5      	b.n	4f4 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xf4>
     528:	4604      	mov	r4, r0
     52a:	e7d8      	b.n	4de <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xde>
     52c:	4611      	mov	r1, r2
     52e:	e795      	b.n	45c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x5c>
     530:	4681      	mov	r9, r0
		while (precision-- > 0)
     532:	e7c0      	b.n	4b6 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xb6>
     534:	468a      	mov	sl, r1
			*buf++ = _get_digit(&fract, &digit_count);
     536:	e77c      	b.n	432 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x32>
     538:	3b02      	subs	r3, #2
     53a:	443c      	add	r4, r7
     53c:	e748      	b.n	3d0 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x150>
     53e:	4608      	mov	r0, r1
     540:	e70a      	b.n	358 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0xd8>
     542:	3802      	subs	r0, #2
     544:	443e      	add	r6, r7
     546:	e72f      	b.n	3a8 <CONFIG_BLUETOOTH_HCI_TX_STACK_SIZE+0x128>
     548:	45c2      	cmp	sl, r8
     54a:	d3e7      	bcc.n	51c <CONFIG_BLUETOOTH_RX_STACK_SIZE+0x11c>
	}

	if (prune_zero) {
     54c:	463e      	mov	r6, r7
		while (*--buf == '0')
     54e:	e7d1      	b.n	4f4 <CONFIG_BLUETOOTH_RX_STACK_SIZE+0xf4>
     550:	4629      	mov	r1, r5
     552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     556:	bf00      	nop

00000558 <__aeabi_idiv0>:
			;
		if (*buf != '.')
     558:	4770      	bx	lr
     55a:	bf00      	nop

0000055c <bt_ready>:
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void bt_ready(int err)
{
     55c:	b590      	push	{r4, r7, lr}
     55e:	b087      	sub	sp, #28
	if (err) {
     560:	4604      	mov	r4, r0
static const struct bt_data sd[] = {
	BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static void bt_ready(int err)
{
     562:	af02      	add	r7, sp, #8
	if (err) {
     564:	b110      	cbz	r0, 56c <bt_ready+0x10>
		printk("Bluetooth init failed (err %d)\n", err);
     566:	4601      	mov	r1, r0
     568:	4810      	ldr	r0, [pc, #64]	; (5ac <bt_ready+0x50>)
     56a:	e015      	b.n	598 <bt_ready+0x3c>
		return;
	}

	printk("Bluetooth initialized\n");
     56c:	4810      	ldr	r0, [pc, #64]	; (5b0 <bt_ready+0x54>)
     56e:	f000 fe1d 	bl	11ac <printk>

	/* Start advertising */
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
     572:	22a0      	movs	r2, #160	; 0xa0
     574:	607c      	str	r4, [r7, #4]
     576:	2301      	movs	r3, #1
     578:	80fa      	strh	r2, [r7, #6]
     57a:	22f0      	movs	r2, #240	; 0xf0
     57c:	60bc      	str	r4, [r7, #8]
     57e:	713b      	strb	r3, [r7, #4]
     580:	813a      	strh	r2, [r7, #8]
     582:	9300      	str	r3, [sp, #0]
     584:	490b      	ldr	r1, [pc, #44]	; (5b4 <bt_ready+0x58>)
     586:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <bt_ready+0x5c>)
     588:	60fc      	str	r4, [r7, #12]
     58a:	2202      	movs	r2, #2
     58c:	1d38      	adds	r0, r7, #4
     58e:	f002 f995 	bl	28bc <bt_le_adv_start>
			      sd, ARRAY_SIZE(sd));
	if (err) {
     592:	4601      	mov	r1, r0
     594:	b118      	cbz	r0, 59e <bt_ready+0x42>
		printk("Advertising failed to start (err %d)\n", err);
     596:	4809      	ldr	r0, [pc, #36]	; (5bc <bt_ready+0x60>)
     598:	f000 fe08 	bl	11ac <printk>
     59c:	e002      	b.n	5a4 <bt_ready+0x48>
		return;
	}

	printk("Beacon started\n");
     59e:	4808      	ldr	r0, [pc, #32]	; (5c0 <bt_ready+0x64>)
     5a0:	f000 fe04 	bl	11ac <printk>
}
     5a4:	3714      	adds	r7, #20
     5a6:	46bd      	mov	sp, r7
     5a8:	bd90      	pop	{r4, r7, pc}
     5aa:	bf00      	nop
     5ac:	0000dab3 	.word	0x0000dab3
     5b0:	0000dad3 	.word	0x0000dad3
     5b4:	0000db44 	.word	0x0000db44
     5b8:	0000db3c 	.word	0x0000db3c
     5bc:	0000daea 	.word	0x0000daea
     5c0:	0000db10 	.word	0x0000db10

000005c4 <main>:

void main(void)
{
     5c4:	b580      	push	{r7, lr}
	int err;

	printk("Beacon testBLE\n");
     5c6:	4808      	ldr	r0, [pc, #32]	; (5e8 <main+0x24>)

	printk("Beacon started\n");
}

void main(void)
{
     5c8:	af00      	add	r7, sp, #0
	int err;

	printk("Beacon testBLE\n");
     5ca:	f000 fdef 	bl	11ac <printk>


	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
     5ce:	4807      	ldr	r0, [pc, #28]	; (5ec <main+0x28>)
     5d0:	f002 f8f6 	bl	27c0 <bt_enable>
	if (err) {
     5d4:	4601      	mov	r1, r0
     5d6:	b128      	cbz	r0, 5e4 <main+0x20>
		printk("Bluetooth init failed (err %d)\n", err);
     5d8:	4805      	ldr	r0, [pc, #20]	; (5f0 <main+0x2c>)
	}
}
     5da:	46bd      	mov	sp, r7
     5dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}


	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(bt_ready);
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
     5e0:	f000 bde4 	b.w	11ac <printk>
     5e4:	bd80      	pop	{r7, pc}
     5e6:	bf00      	nop
     5e8:	0000db20 	.word	0x0000db20
     5ec:	0000055d 	.word	0x0000055d
     5f0:	0000dab3 	.word	0x0000dab3

000005f4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     5f4:	b5b0      	push	{r4, r5, r7, lr}
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     5f6:	280a      	cmp	r0, #10
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
     5f8:	af00      	add	r7, sp, #0
     5fa:	4604      	mov	r4, r0
     5fc:	4d06      	ldr	r5, [pc, #24]	; (618 <console_out+0x24>)
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
     5fe:	d104      	bne.n	60a <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
     600:	6828      	ldr	r0, [r5, #0]
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;

	return api->poll_out(dev, out_char);
     602:	6843      	ldr	r3, [r0, #4]
     604:	210d      	movs	r1, #13
     606:	685b      	ldr	r3, [r3, #4]
     608:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
     60a:	6828      	ldr	r0, [r5, #0]
     60c:	6843      	ldr	r3, [r0, #4]
     60e:	b2e1      	uxtb	r1, r4
     610:	685b      	ldr	r3, [r3, #4]
     612:	4798      	blx	r3

	return c;
}
     614:	4620      	mov	r0, r4
     616:	bdb0      	pop	{r4, r5, r7, pc}
     618:	20000370 	.word	0x20000370

0000061c <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     61c:	b480      	push	{r7}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     61e:	4803      	ldr	r0, [pc, #12]	; (62c <uart_console_hook_install+0x10>)
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
     620:	af00      	add	r7, sp, #0
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
}
     622:	46bd      	mov	sp, r7
     624:	bc80      	pop	{r7}
 */

void uart_console_hook_install(void)
{
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
     626:	f000 bccf 	b.w	fc8 <__printk_hook_install>
     62a:	bf00      	nop
     62c:	000005f5 	.word	0x000005f5

00000630 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     630:	b580      	push	{r7, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     632:	4805      	ldr	r0, [pc, #20]	; (648 <uart_console_init+0x18>)
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     634:	af00      	add	r7, sp, #0

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     636:	f00c f899 	bl	c76c <device_get_binding>
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <uart_console_init+0x1c>)
     63c:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
     63e:	f7ff ffed 	bl	61c <uart_console_hook_install>

	return 0;
}
     642:	2000      	movs	r0, #0
     644:	bd80      	pop	{r7, pc}
     646:	bf00      	nop
     648:	0000db54 	.word	0x0000db54
     64c:	20000370 	.word	0x20000370

00000650 <uart_nrf5_poll_in>:
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
     650:	b580      	push	{r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     652:	6803      	ldr	r3, [r0, #0]
     654:	689b      	ldr	r3, [r3, #8]
     656:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
     658:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
     65c:	af00      	add	r7, sp, #0
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
     65e:	b132      	cbz	r2, 66e <uart_nrf5_poll_in+0x1e>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
     660:	2000      	movs	r0, #0
     662:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
     666:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
     66a:	700b      	strb	r3, [r1, #0]

	return 0;
     66c:	bd80      	pop	{r7, pc}
static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);

	if (!uart->EVENTS_RXDRDY) {
		return -1;
     66e:	f04f 30ff 	mov.w	r0, #4294967295

	/* got a character */
	*c = (unsigned char)uart->RXD;

	return 0;
}
     672:	bd80      	pop	{r7, pc}

00000674 <uart_nrf5_poll_out>:
 *
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
     674:	b580      	push	{r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     676:	6803      	ldr	r3, [r0, #0]
     678:	689b      	ldr	r3, [r3, #8]
     67a:	681b      	ldr	r3, [r3, #0]
 *
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
     67c:	af00      	add	r7, sp, #0
	volatile struct _uart *uart = UART_STRUCT(dev);

	/* send a character */
	uart->TXD = (uint8_t)c;
     67e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
     682:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
     686:	2a00      	cmp	r2, #0
     688:	d0fb      	beq.n	682 <uart_nrf5_poll_out+0xe>
	}

	uart->EVENTS_TXDRDY = 0;
     68a:	2200      	movs	r2, #0
     68c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

	return c;
}
     690:	4608      	mov	r0, r1
     692:	bd80      	pop	{r7, pc}

00000694 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
     694:	b580      	push	{r7, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     696:	6803      	ldr	r3, [r0, #0]
     698:	689b      	ldr	r3, [r3, #8]
     69a:	681b      	ldr	r3, [r3, #0]
	uint32_t error = 0;

	if (uart->EVENTS_ERROR) {
     69c:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
	return c;
}

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
     6a0:	af00      	add	r7, sp, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
	uint32_t error = 0;

	if (uart->EVENTS_ERROR) {
     6a2:	b118      	cbz	r0, 6ac <uart_nrf5_err_check+0x18>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
     6a4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
     6a8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
     6ac:	f000 000f 	and.w	r0, r0, #15
     6b0:	bd80      	pop	{r7, pc}
	...

000006b4 <uart_nrf5_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile struct _uart *uart = UART_STRUCT(dev);
     6b8:	6803      	ldr	r3, [r0, #0]
     6ba:	689b      	ldr	r3, [r3, #8]
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
     6bc:	4605      	mov	r5, r0
     6be:	af00      	add	r7, sp, #0
	volatile struct _uart *uart = UART_STRUCT(dev);
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     6c0:	481a      	ldr	r0, [pc, #104]	; (72c <uart_nrf5_init+0x78>)
 *
 * @return 0 on success
 */
static int uart_nrf5_init(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     6c2:	681c      	ldr	r4, [r3, #0]
	struct device *gpio_dev;
	int err;

	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
     6c4:	f00c f852 	bl	c76c <device_get_binding>
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
     6c8:	6843      	ldr	r3, [r0, #4]
     6ca:	4606      	mov	r6, r0
     6cc:	f8d3 8000 	ldr.w	r8, [r3]
     6d0:	220d      	movs	r2, #13
     6d2:	f240 1301 	movw	r3, #257	; 0x101
     6d6:	2100      	movs	r1, #0
     6d8:	47c0      	blx	r8
     6da:	6873      	ldr	r3, [r6, #4]
     6dc:	f8d3 8000 	ldr.w	r8, [r3]
     6e0:	2300      	movs	r3, #0
     6e2:	4619      	mov	r1, r3
     6e4:	220f      	movs	r2, #15
     6e6:	4630      	mov	r0, r6
     6e8:	47c0      	blx	r8
				  (GPIO_DIR_OUT | GPIO_PUD_PULL_UP));
	(void) gpio_pin_configure(gpio_dev,
				  CONFIG_UART_NRF5_GPIO_RX_PIN,
				  (GPIO_DIR_IN));

	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
     6ea:	230d      	movs	r3, #13
     6ec:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
     6f0:	230f      	movs	r3, #15
     6f2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	uart->PSELCTS = CONFIG_UART_NRF5_GPIO_CTS_PIN;
	uart->CONFIG = (UART_CONFIG_HWFC_Enabled << UART_CONFIG_HWFC_Pos);

#endif /* CONFIG_UART_NRF5_FLOW_CONTROL */

	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
     6f6:	68ab      	ldr	r3, [r5, #8]
     6f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     6fc:	601a      	str	r2, [r3, #0]
 */

static int baudrate_set(struct device *dev,
			 uint32_t baudrate, uint32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
     6fe:	682b      	ldr	r3, [r5, #0]
     700:	689b      	ldr	r3, [r3, #8]
     702:	681b      	ldr	r3, [r3, #0]
		break;
	default:
		return -EINVAL;
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
     704:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
     708:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	if (err) {
		return err;
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
     70c:	2304      	movs	r3, #4
     70e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

	uart->EVENTS_TXDRDY = 0;
     712:	2000      	movs	r0, #0
	uart->EVENTS_RXDRDY = 0;

	uart->TASKS_STARTTX = 1;
     714:	2301      	movs	r3, #1
	}

	/* Enable receiver and transmitter */
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);

	uart->EVENTS_TXDRDY = 0;
     716:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
     71a:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

	uart->TASKS_STARTTX = 1;
     71e:	60a3      	str	r3, [r4, #8]
	uart->TASKS_STARTRX = 1;
     720:	6023      	str	r3, [r4, #0]

	dev->driver_api = &uart_nrf5_driver_api;
     722:	4b03      	ldr	r3, [pc, #12]	; (730 <uart_nrf5_init+0x7c>)
     724:	606b      	str	r3, [r5, #4]
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	DEV_CFG(dev)->irq_config_func(dev);
#endif

	return 0;
}
     726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     72a:	bf00      	nop
     72c:	0000db5b 	.word	0x0000db5b
     730:	0000db84 	.word	0x0000db84

00000734 <rtc_compare_set>:
static uint8_t volatile isr_req;
static uint8_t isr_ack;
#endif /* CONFIG_TICKLESS_IDLE */

static uint32_t rtc_compare_set(uint32_t rtc_ticks)
{
     734:	b5b0      	push	{r4, r5, r7, lr}
	uint32_t prev, cc, elapsed_ticks;
	uint8_t retry = 10;

	prev = NRF_RTC1->COUNTER;
     736:	4914      	ldr	r1, [pc, #80]	; (788 <rtc_compare_set+0x54>)
		/* Assert if retries failed to set compare in the future */
		__ASSERT_NO_MSG(retry);
		retry--;

		/* update with elapsed ticks from h/w */
		elapsed_ticks = (prev - rtc_clock_tick_count) & 0x00FFFFFF;
     738:	4b14      	ldr	r3, [pc, #80]	; (78c <rtc_compare_set+0x58>)
static uint32_t rtc_compare_set(uint32_t rtc_ticks)
{
	uint32_t prev, cc, elapsed_ticks;
	uint8_t retry = 10;

	prev = NRF_RTC1->COUNTER;
     73a:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
		/* Assert if retries failed to set compare in the future */
		__ASSERT_NO_MSG(retry);
		retry--;

		/* update with elapsed ticks from h/w */
		elapsed_ticks = (prev - rtc_clock_tick_count) & 0x00FFFFFF;
     73e:	681d      	ldr	r5, [r3, #0]
static uint8_t volatile isr_req;
static uint8_t isr_ack;
#endif /* CONFIG_TICKLESS_IDLE */

static uint32_t rtc_compare_set(uint32_t rtc_ticks)
{
     740:	af00      	add	r7, sp, #0
     742:	4604      	mov	r4, r0
		/* Assert if retries failed to set compare in the future */
		__ASSERT_NO_MSG(retry);
		retry--;

		/* update with elapsed ticks from h/w */
		elapsed_ticks = (prev - rtc_clock_tick_count) & 0x00FFFFFF;
     744:	1b52      	subs	r2, r2, r5
     746:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000

		/* setup next RTC compare event by ticks */
		cc = (rtc_clock_tick_count + elapsed_ticks + rtc_ticks) &
     74a:	1903      	adds	r3, r0, r4
     74c:	442b      	add	r3, r5
     74e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		     0x00FFFFFF;

		NRF_RTC1->CC[0] = cc;
     752:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540

		prev = NRF_RTC1->COUNTER;
     756:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
	} while (((cc - prev) & 0x00FFFFFF) < 3);
     75a:	1a9b      	subs	r3, r3, r2
     75c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     760:	2b02      	cmp	r3, #2
     762:	d9ef      	bls.n	744 <rtc_compare_set+0x10>

#ifdef CONFIG_TICKLESS_IDLE
	/* If system clock ticks have elapsed, pend RTC IRQ which will
	 * call announce
	 */
	if (elapsed_ticks >= rtc_ticks) {
     764:	42a0      	cmp	r0, r4
     766:	d30d      	bcc.n	784 <rtc_compare_set+0x50>

		/* pending the interrupt does not trigger the RTC event, hence
		 * use a request/ack mechanism to let the ISR know that the
		 * interrupt was requested
		 */
		req = isr_req + 1;
     768:	4a09      	ldr	r2, [pc, #36]	; (790 <rtc_compare_set+0x5c>)
		if (req != isr_ack) {
     76a:	490a      	ldr	r1, [pc, #40]	; (794 <rtc_compare_set+0x60>)

		/* pending the interrupt does not trigger the RTC event, hence
		 * use a request/ack mechanism to let the ISR know that the
		 * interrupt was requested
		 */
		req = isr_req + 1;
     76c:	7813      	ldrb	r3, [r2, #0]
		if (req != isr_ack) {
     76e:	7809      	ldrb	r1, [r1, #0]

		/* pending the interrupt does not trigger the RTC event, hence
		 * use a request/ack mechanism to let the ISR know that the
		 * interrupt was requested
		 */
		req = isr_req + 1;
     770:	3301      	adds	r3, #1
     772:	b2db      	uxtb	r3, r3
		if (req != isr_ack) {
     774:	4299      	cmp	r1, r3
			isr_req = req;
     776:	bf18      	it	ne
     778:	7013      	strbne	r3, [r2, #0]
 * @return N/A
 */

static inline void _NvicIrqPend(unsigned int irq)
{
	__scs.nvic.ispr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <rtc_compare_set+0x64>)
     77c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     780:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		_NvicIrqPend(NRF5_IRQ_RTC1_IRQn);
	}
#endif /* CONFIG_TICKLESS_IDLE */

	return elapsed_ticks;
}
     784:	bdb0      	pop	{r4, r5, r7, pc}
     786:	bf00      	nop
     788:	40011000 	.word	0x40011000
     78c:	20000378 	.word	0x20000378
     790:	2000037c 	.word	0x2000037c
     794:	20000374 	.word	0x20000374
     798:	e000e000 	.word	0xe000e000

0000079c <rtc1_nrf5_isr>:
	rtc_compare_set(RTC_TICKS);
}
#endif /* CONFIG_TICKLESS_IDLE */

static void rtc1_nrf5_isr(void *arg)
{
     79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#ifdef CONFIG_TICKLESS_IDLE
	uint8_t req;

	ARG_UNUSED(arg);

	req = isr_req;
     7a0:	4d1d      	ldr	r5, [pc, #116]	; (818 <CONFIG_ISR_STACK_SIZE+0x18>)
	/* iterate here since pending the interrupt can be done from higher
	 * priority, and thus queuing multiple triggers
	 */
	while (NRF_RTC1->EVENTS_COMPARE[0] || (req != isr_ack)) {
     7a2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 820 <CONFIG_ISR_STACK_SIZE+0x20>
#ifdef CONFIG_TICKLESS_IDLE
	uint8_t req;

	ARG_UNUSED(arg);

	req = isr_req;
     7a6:	782c      	ldrb	r4, [r5, #0]
     7a8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 824 <CONFIG_ISR_STACK_SIZE+0x24>
	rtc_compare_set(RTC_TICKS);
}
#endif /* CONFIG_TICKLESS_IDLE */

static void rtc1_nrf5_isr(void *arg)
{
     7ac:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_IDLE
	uint8_t req;

	ARG_UNUSED(arg);

	req = isr_req;
     7ae:	b2e4      	uxtb	r4, r4
     7b0:	464e      	mov	r6, r9
	/* iterate here since pending the interrupt can be done from higher
	 * priority, and thus queuing multiple triggers
	 */
	while (NRF_RTC1->EVENTS_COMPARE[0] || (req != isr_ack)) {
     7b2:	f8d9 3140 	ldr.w	r3, [r9, #320]	; 0x140
     7b6:	b343      	cbz	r3, 80a <CONFIG_ISR_STACK_SIZE+0xa>
		uint32_t elapsed_ticks;

		NRF_RTC1->EVENTS_COMPARE[0] = 0;
     7b8:	2300      	movs	r3, #0
     7ba:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140

		if (req != isr_ack) {
     7be:	f898 3000 	ldrb.w	r3, [r8]
     7c2:	f8df a064 	ldr.w	sl, [pc, #100]	; 828 <CONFIG_ISR_STACK_SIZE+0x28>
     7c6:	42a3      	cmp	r3, r4
     7c8:	d00b      	beq.n	7e2 <rtc1_nrf5_isr+0x46>
			isr_ack = req;
     7ca:	f888 4000 	strb.w	r4, [r8]
			req = isr_req;

			elapsed_ticks = (NRF_RTC1->COUNTER -
     7ce:	f8da 3000 	ldr.w	r3, [sl]

		NRF_RTC1->EVENTS_COMPARE[0] = 0;

		if (req != isr_ack) {
			isr_ack = req;
			req = isr_req;
     7d2:	782c      	ldrb	r4, [r5, #0]

			elapsed_ticks = (NRF_RTC1->COUNTER -
     7d4:	f8d9 0504 	ldr.w	r0, [r9, #1284]	; 0x504
     7d8:	1ac0      	subs	r0, r0, r3

		NRF_RTC1->EVENTS_COMPARE[0] = 0;

		if (req != isr_ack) {
			isr_ack = req;
			req = isr_req;
     7da:	b2e4      	uxtb	r4, r4

			elapsed_ticks = (NRF_RTC1->COUNTER -
     7dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7e0:	e003      	b.n	7ea <rtc1_nrf5_isr+0x4e>
					 rtc_clock_tick_count)
					& 0x00FFFFFF;
		} else {
			elapsed_ticks = rtc_compare_set(RTC_TICKS);
     7e2:	f240 1047 	movw	r0, #327	; 0x147
     7e6:	f7ff ffa5 	bl	734 <rtc_compare_set>

		elapsed_ticks = rtc_compare_set(RTC_TICKS);
#endif

		rtc_clock_tick_count += elapsed_ticks;
		rtc_clock_tick_count &= 0x00FFFFFF;
     7ea:	f8da 3000 	ldr.w	r3, [sl]
     7ee:	4403      	add	r3, r0
     7f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     7f4:	f8ca 3000 	str.w	r3, [sl]

		/* update with elapsed ticks from the hardware */
		_sys_idle_elapsed_ticks = elapsed_ticks / RTC_TICKS;
     7f8:	f240 1347 	movw	r3, #327	; 0x147
     7fc:	fbb0 f0f3 	udiv	r0, r0, r3
     800:	4b06      	ldr	r3, [pc, #24]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     802:	6018      	str	r0, [r3, #0]

		_sys_clock_tick_announce();
     804:	f00c fe2a 	bl	d45c <_nano_sys_clock_tick_announce>
     808:	e7d3      	b.n	7b2 <rtc1_nrf5_isr+0x16>

	req = isr_req;
	/* iterate here since pending the interrupt can be done from higher
	 * priority, and thus queuing multiple triggers
	 */
	while (NRF_RTC1->EVENTS_COMPARE[0] || (req != isr_ack)) {
     80a:	f898 3000 	ldrb.w	r3, [r8]
     80e:	42a3      	cmp	r3, r4
     810:	d1d2      	bne.n	7b8 <rtc1_nrf5_isr+0x1c>
		/* update with elapsed ticks from the hardware */
		_sys_idle_elapsed_ticks = elapsed_ticks / RTC_TICKS;

		_sys_clock_tick_announce();
	}
}
     812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     816:	bf00      	nop
     818:	2000037c 	.word	0x2000037c
     81c:	200002c8 	.word	0x200002c8
     820:	40011000 	.word	0x40011000
     824:	20000374 	.word	0x20000374
     828:	20000378 	.word	0x20000378

0000082c <_timer_idle_enter>:
	return elapsed_ticks;
}

#ifdef CONFIG_TICKLESS_IDLE
void _timer_idle_enter(int32_t ticks)
{
     82c:	b480      	push	{r7}
	/* restrict ticks to max supported by RTC */
	if ((ticks < 0) || (ticks > (0x00FFFFFF / RTC_TICKS))) {
     82e:	f64c 036a 	movw	r3, #51306	; 0xc86a
		ticks = 0x00FFFFFF / RTC_TICKS;
     832:	4298      	cmp	r0, r3
     834:	bf28      	it	cs
     836:	4618      	movcs	r0, r3
	}

	/* Postpone RTC compare event by requested system clock ticks */
	rtc_compare_set(ticks * RTC_TICKS);
     838:	f240 1347 	movw	r3, #327	; 0x147
	return elapsed_ticks;
}

#ifdef CONFIG_TICKLESS_IDLE
void _timer_idle_enter(int32_t ticks)
{
     83c:	af00      	add	r7, sp, #0
	if ((ticks < 0) || (ticks > (0x00FFFFFF / RTC_TICKS))) {
		ticks = 0x00FFFFFF / RTC_TICKS;
	}

	/* Postpone RTC compare event by requested system clock ticks */
	rtc_compare_set(ticks * RTC_TICKS);
     83e:	4358      	muls	r0, r3
}
     840:	46bd      	mov	sp, r7
     842:	bc80      	pop	{r7}
	if ((ticks < 0) || (ticks > (0x00FFFFFF / RTC_TICKS))) {
		ticks = 0x00FFFFFF / RTC_TICKS;
	}

	/* Postpone RTC compare event by requested system clock ticks */
	rtc_compare_set(ticks * RTC_TICKS);
     844:	f7ff bf76 	b.w	734 <rtc_compare_set>

00000848 <_timer_idle_exit>:
}

void _timer_idle_exit(void)
{
     848:	b480      	push	{r7}
	/* Advance RTC compare event to next system clock tick */
	rtc_compare_set(RTC_TICKS);
     84a:	f240 1047 	movw	r0, #327	; 0x147
	/* Postpone RTC compare event by requested system clock ticks */
	rtc_compare_set(ticks * RTC_TICKS);
}

void _timer_idle_exit(void)
{
     84e:	af00      	add	r7, sp, #0
	/* Advance RTC compare event to next system clock tick */
	rtc_compare_set(RTC_TICKS);
}
     850:	46bd      	mov	sp, r7
     852:	bc80      	pop	{r7}
}

void _timer_idle_exit(void)
{
	/* Advance RTC compare event to next system clock tick */
	rtc_compare_set(RTC_TICKS);
     854:	f7ff bf6e 	b.w	734 <rtc_compare_set>

00000858 <_sys_clock_driver_init>:
		_sys_clock_tick_announce();
	}
}

int _sys_clock_driver_init(struct device *device)
{
     858:	b5b0      	push	{r4, r5, r7, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     85a:	4813      	ldr	r0, [pc, #76]	; (8a8 <_sys_clock_driver_init+0x50>)
		_sys_clock_tick_announce();
	}
}

int _sys_clock_driver_init(struct device *device)
{
     85c:	af00      	add	r7, sp, #0
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
     85e:	f00b ff85 	bl	c76c <device_get_binding>
	if (!clock) {
     862:	b1e8      	cbz	r0, 8a0 <_sys_clock_driver_init+0x48>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
     864:	6843      	ldr	r3, [r0, #4]
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: replace with counter driver to access RTC */
	NRF_RTC1->PRESCALER = 0;
     866:	4d11      	ldr	r5, [pc, #68]	; (8ac <_sys_clock_driver_init+0x54>)
     868:	681b      	ldr	r3, [r3, #0]
     86a:	2101      	movs	r1, #1
     86c:	4798      	blx	r3
     86e:	2400      	movs	r4, #0
	NRF_RTC1->CC[0] = RTC_TICKS;
     870:	f240 1347 	movw	r3, #327	; 0x147
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: replace with counter driver to access RTC */
	NRF_RTC1->PRESCALER = 0;
     874:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	NRF_RTC1->CC[0] = RTC_TICKS;
     878:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	NRF_RTC1->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
     87c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     880:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	NRF_RTC1->INTENSET = RTC_INTENSET_COMPARE0_Msk;

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     884:	4622      	mov	r2, r4

	/* TODO: replace with counter driver to access RTC */
	NRF_RTC1->PRESCALER = 0;
	NRF_RTC1->CC[0] = RTC_TICKS;
	NRF_RTC1->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
	NRF_RTC1->INTENSET = RTC_INTENSET_COMPARE0_Msk;
     886:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
     88a:	2101      	movs	r1, #1
     88c:	2011      	movs	r0, #17
     88e:	f00b fe41 	bl	c514 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
     892:	2011      	movs	r0, #17
     894:	f00b fe0e 	bl	c4b4 <_arch_irq_enable>

	NRF_RTC1->TASKS_START = 1;
     898:	2301      	movs	r3, #1
     89a:	602b      	str	r3, [r5, #0]

	return 0;
     89c:	4620      	mov	r0, r4
     89e:	bdb0      	pop	{r4, r5, r7, pc}

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
	if (!clock) {
		return -1;
     8a0:	f04f 30ff 	mov.w	r0, #4294967295
	irq_enable(NRF5_IRQ_RTC1_IRQn);

	NRF_RTC1->TASKS_START = 1;

	return 0;
}
     8a4:	bdb0      	pop	{r4, r5, r7, pc}
     8a6:	bf00      	nop
     8a8:	0000db62 	.word	0x0000db62
     8ac:	40011000 	.word	0x40011000

000008b0 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, uint32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     8b0:	6803      	ldr	r3, [r0, #0]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, uint32_t pin)
{
     8b2:	b590      	push	{r4, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     8b4:	689b      	ldr	r3, [r3, #8]
     8b6:	689a      	ldr	r2, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     8b8:	6883      	ldr	r3, [r0, #8]
     8ba:	68dc      	ldr	r4, [r3, #12]
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, uint32_t pin)
{
     8bc:	af00      	add	r7, sp, #0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     8be:	2000      	movs	r0, #0
		if ((data->gpiote_chan_mask & BIT(i)) &&
     8c0:	fa24 f300 	lsr.w	r3, r4, r0
     8c4:	07db      	lsls	r3, r3, #31
     8c6:	d507      	bpl.n	8d8 <gpiote_find_channel+0x28>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
     8c8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
     8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if ((data->gpiote_chan_mask & BIT(i)) &&
     8d0:	f3c3 2304 	ubfx	r3, r3, #8, #5
     8d4:	428b      	cmp	r3, r1
     8d6:	d004      	beq.n	8e2 <gpiote_find_channel+0x32>
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     8d8:	3001      	adds	r0, #1
     8da:	2808      	cmp	r0, #8
     8dc:	d1f0      	bne.n	8c0 <gpiote_find_channel+0x10>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
			return i;
		}
	}

	return -ENODEV;
     8de:	f06f 0012 	mvn.w	r0, #18
}
     8e2:	bd90      	pop	{r4, r7, pc}

000008e4 <gpio_nrf5_read>:
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, uint32_t pin, uint32_t *value)
{
     8e4:	b590      	push	{r4, r7, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     8e6:	6800      	ldr	r0, [r0, #0]
     8e8:	6880      	ldr	r0, [r0, #8]
	return 0;
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, uint32_t pin, uint32_t *value)
{
     8ea:	af00      	add	r7, sp, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     8ec:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     8ee:	b941      	cbnz	r1, 902 <gpio_nrf5_read+0x1e>
		*value = gpio->IN & BIT(pin);
     8f0:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
     8f4:	2401      	movs	r4, #1
     8f6:	fa04 f202 	lsl.w	r2, r4, r2
     8fa:	4002      	ands	r2, r0
     8fc:	601a      	str	r2, [r3, #0]
	} else { /* GPIO_ACCESS_BY_PORT */
		return -ENOTSUP;
	}
	return 0;
     8fe:	4608      	mov	r0, r1
     900:	bd90      	pop	{r4, r7, pc}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		*value = gpio->IN & BIT(pin);
	} else { /* GPIO_ACCESS_BY_PORT */
		return -ENOTSUP;
     902:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}
	return 0;
}
     906:	bd90      	pop	{r4, r7, pc}

00000908 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, uint32_t pin, uint32_t value)
{
     908:	b5b0      	push	{r4, r5, r7, lr}
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     90a:	6800      	ldr	r0, [r0, #0]
     90c:	6880      	ldr	r0, [r0, #8]
	return 0;
}

static int gpio_nrf5_write(struct device *dev,
			   int access_op, uint32_t pin, uint32_t value)
{
     90e:	af00      	add	r7, sp, #0
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     910:	6805      	ldr	r5, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     912:	b951      	cbnz	r1, 92a <gpio_nrf5_write+0x22>
     914:	2401      	movs	r4, #1
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
     916:	4094      	lsls	r4, r2
			   int access_op, uint32_t pin, uint32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
     918:	b11b      	cbz	r3, 922 <gpio_nrf5_write+0x1a>
			gpio->OUTSET = BIT(pin);
     91a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			gpio->OUTCLR = BIT(pin);
		}
	} else { /* GPIO_ACCESS_BY_PORT */
		return -ENOTSUP;
	}
	return 0;
     91e:	4608      	mov	r0, r1
     920:	bdb0      	pop	{r4, r5, r7, pc}

	if (access_op == GPIO_ACCESS_BY_PIN) {
		if (value) { /* 1 */
			gpio->OUTSET = BIT(pin);
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
     922:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		}
	} else { /* GPIO_ACCESS_BY_PORT */
		return -ENOTSUP;
	}
	return 0;
     926:	4618      	mov	r0, r3
     928:	bdb0      	pop	{r4, r5, r7, pc}
			gpio->OUTSET = BIT(pin);
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
		}
	} else { /* GPIO_ACCESS_BY_PORT */
		return -ENOTSUP;
     92a:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}
	return 0;
}
     92e:	bdb0      	pop	{r4, r5, r7, pc}

00000930 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
     930:	b590      	push	{r4, r7, lr}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     932:	6883      	ldr	r3, [r0, #8]
	return 0;
}

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
     934:	af00      	add	r7, sp, #0
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
     936:	b132      	cbz	r2, 946 <gpio_nrf5_manage_callback+0x16>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
     938:	681a      	ldr	r2, [r3, #0]
     93a:	600a      	str	r2, [r1, #0]
	list->head = node;

	if (!list->tail) {
     93c:	685a      	ldr	r2, [r3, #4]
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
	list->head = node;
     93e:	6019      	str	r1, [r3, #0]

	if (!list->tail) {
     940:	b9ba      	cbnz	r2, 972 <gpio_nrf5_manage_callback+0x42>
		list->tail = list->head;
     942:	6059      	str	r1, [r3, #4]
     944:	e015      	b.n	972 <gpio_nrf5_manage_callback+0x42>
     946:	6818      	ldr	r0, [r3, #0]
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
     948:	b198      	cbz	r0, 972 <gpio_nrf5_manage_callback+0x42>
		if (test == node) {
     94a:	4281      	cmp	r1, r0
     94c:	d10e      	bne.n	96c <gpio_nrf5_manage_callback+0x3c>
     94e:	685c      	ldr	r4, [r3, #4]
     950:	6808      	ldr	r0, [r1, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
     952:	b922      	cbnz	r2, 95e <gpio_nrf5_manage_callback+0x2e>
		list->head = node->next;

		/* Was node also the tail? */
		if (list->tail == node) {
     954:	42a1      	cmp	r1, r4
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
		list->head = node->next;
     956:	6018      	str	r0, [r3, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
     958:	d105      	bne.n	966 <gpio_nrf5_manage_callback+0x36>
			list->tail = list->head;
     95a:	6058      	str	r0, [r3, #4]
     95c:	e003      	b.n	966 <gpio_nrf5_manage_callback+0x36>
		}
	} else {
		prev_node->next = node->next;

		/* Was node the tail? */
		if (list->tail == node) {
     95e:	42a1      	cmp	r1, r4
		/* Was node also the tail? */
		if (list->tail == node) {
			list->tail = list->head;
		}
	} else {
		prev_node->next = node->next;
     960:	6010      	str	r0, [r2, #0]

		/* Was node the tail? */
		if (list->tail == node) {
			list->tail = prev_node;
     962:	bf08      	it	eq
     964:	605a      	streq	r2, [r3, #4]
		}
	}

	node->next = NULL;
     966:	2300      	movs	r3, #0
     968:	600b      	str	r3, [r1, #0]
     96a:	e002      	b.n	972 <gpio_nrf5_manage_callback+0x42>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return !node ? NULL : node->next;
     96c:	4602      	mov	r2, r0
     96e:	6800      	ldr	r0, [r0, #0]
     970:	e7ea      	b.n	948 <gpio_nrf5_manage_callback+0x18>
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
     972:	2000      	movs	r0, #0
     974:	bd90      	pop	{r4, r7, pc}

00000976 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, uint32_t pin)
{
     976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     97a:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     97c:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     97e:	f8d0 8008 	ldr.w	r8, [r0, #8]


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, uint32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     982:	6892      	ldr	r2, [r2, #8]
}


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, uint32_t pin)
{
     984:	af00      	add	r7, sp, #0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     986:	6896      	ldr	r6, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     988:	460d      	mov	r5, r1
     98a:	b9d1      	cbnz	r1, 9c2 <gpio_nrf5_enable_callback+0x4c>

		i = gpiote_find_channel(dev, pin);
     98c:	4621      	mov	r1, r4
     98e:	f7ff ff8f 	bl	8b0 <gpiote_find_channel>
		if (i < 0) {
     992:	2800      	cmp	r0, #0
     994:	db17      	blt.n	9c6 <gpio_nrf5_enable_callback+0x50>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     996:	f8d8 2008 	ldr.w	r2, [r8, #8]
     99a:	2301      	movs	r3, #1
     99c:	fa03 f404 	lsl.w	r4, r3, r4
     9a0:	4314      	orrs	r4, r2
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     9a2:	f100 0240 	add.w	r2, r0, #64	; 0x40
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
     9a6:	f8c8 4008 	str.w	r4, [r8, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
     9aa:	f846 5022 	str.w	r5, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET |= BIT(i);
     9ae:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
     9b2:	fa03 f000 	lsl.w	r0, r3, r0
     9b6:	4310      	orrs	r0, r2
     9b8:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
     9bc:	4628      	mov	r0, r5
     9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET |= BIT(i);
	} else {
		return -ENOTSUP;
     9c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}

	return 0;
}
     9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000009ca <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, uint32_t pin)
{
     9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     9ce:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     9d0:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     9d2:	f8d0 8008 	ldr.w	r8, [r0, #8]


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, uint32_t pin)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     9d6:	6892      	ldr	r2, [r2, #8]
}


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, uint32_t pin)
{
     9d8:	af00      	add	r7, sp, #0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     9da:	6896      	ldr	r6, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
     9dc:	460d      	mov	r5, r1
     9de:	b9c1      	cbnz	r1, a12 <gpio_nrf5_disable_callback+0x48>
		i = gpiote_find_channel(dev, pin);
     9e0:	4621      	mov	r1, r4
     9e2:	f7ff ff65 	bl	8b0 <gpiote_find_channel>
		if (i < 0) {
     9e6:	2800      	cmp	r0, #0
     9e8:	db15      	blt.n	a16 <gpio_nrf5_disable_callback+0x4c>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     9ea:	f8d8 2008 	ldr.w	r2, [r8, #8]
     9ee:	2301      	movs	r3, #1
     9f0:	fa03 f404 	lsl.w	r4, r3, r4
     9f4:	ea22 0404 	bic.w	r4, r2, r4
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR &= ~(BIT(i));
     9f8:	f8d6 2308 	ldr.w	r2, [r6, #776]	; 0x308
		i = gpiote_find_channel(dev, pin);
		if (i < 0) {
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
     9fc:	f8c8 4008 	str.w	r4, [r8, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR &= ~(BIT(i));
     a00:	fa03 f000 	lsl.w	r0, r3, r0
     a04:	ea22 0000 	bic.w	r0, r2, r0
     a08:	f8c6 0308 	str.w	r0, [r6, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
     a0c:	4628      	mov	r0, r5
     a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		data->pin_callback_enables &= ~(BIT(pin));
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR &= ~(BIT(i));
	} else {
		return -ENOTSUP;
     a12:	f06f 0022 	mvn.w	r0, #34	; 0x22
	}

	return 0;
}
     a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000a1a <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
     a1a:	b580      	push	{r7, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
     a1c:	2200      	movs	r2, #0
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
     a1e:	af00      	add	r7, sp, #0
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
     a20:	2101      	movs	r1, #1
     a22:	2006      	movs	r0, #6
     a24:	f00b fd76 	bl	c514 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     a28:	2006      	movs	r0, #6
     a2a:	f00b fd43 	bl	c4b4 <_arch_irq_enable>

	return 0;
}
     a2e:	2000      	movs	r0, #0
     a30:	bd80      	pop	{r7, pc}

00000a32 <gpio_nrf5_port_isr>:
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a34:	6803      	ldr	r3, [r0, #0]
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     a36:	4606      	mov	r6, r0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a38:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     a3a:	68b4      	ldr	r4, [r6, #8]
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a3c:	6898      	ldr	r0, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	uint32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     a3e:	2300      	movs	r3, #0
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_nrf5_port_isr(void *arg)
{
     a40:	af00      	add	r7, sp, #0
	struct device *dev = arg;
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	uint32_t enabled_int, int_status = 0;
     a42:	461d      	mov	r5, r3
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
			gpiote->EVENTS_IN[i] = 0;
     a44:	469e      	mov	lr, r3
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     a46:	f04f 0c01 	mov.w	ip, #1
     a4a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	uint32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
		if (gpiote->EVENTS_IN[i]) {
     a4e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
     a52:	b141      	cbz	r1, a66 <gpio_nrf5_port_isr+0x34>
			gpiote->EVENTS_IN[i] = 0;
     a54:	f8c2 e100 	str.w	lr, [r2, #256]	; 0x100
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
     a58:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
     a5c:	f3c1 2104 	ubfx	r1, r1, #8, #5
     a60:	fa0c f101 	lsl.w	r1, ip, r1
     a64:	430d      	orrs	r5, r1
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	uint32_t enabled_int, int_status = 0;
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
     a66:	3301      	adds	r3, #1
     a68:	2b08      	cmp	r3, #8
     a6a:	d1ee      	bne.n	a4a <gpio_nrf5_port_isr+0x18>
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     a6c:	68a3      	ldr	r3, [r4, #8]

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     a6e:	2006      	movs	r0, #6
			gpiote->EVENTS_IN[i] = 0;
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
		}
	}

	enabled_int = int_status & data->pin_callback_enables;
     a70:	401d      	ands	r5, r3

	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
     a72:	f00b fd2f 	bl	c4d4 <_arch_irq_disable>
     a76:	6824      	ldr	r4, [r4, #0]
					uint32_t pins)
{
	struct gpio_callback *cb;
	sys_snode_t *node;

	SYS_SLIST_FOR_EACH_NODE(list, node) {
     a78:	b144      	cbz	r4, a8c <gpio_nrf5_port_isr+0x5a>
		cb = (struct gpio_callback *)node;

		if (cb->pin_mask & pins) {
     a7a:	68a3      	ldr	r3, [r4, #8]
     a7c:	421d      	tst	r5, r3
     a7e:	d0fa      	beq.n	a76 <gpio_nrf5_port_isr+0x44>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
     a80:	6863      	ldr	r3, [r4, #4]
     a82:	462a      	mov	r2, r5
     a84:	4621      	mov	r1, r4
     a86:	4630      	mov	r0, r6
     a88:	4798      	blx	r3
     a8a:	e7f4      	b.n	a76 <gpio_nrf5_port_isr+0x44>

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     a8c:	2006      	movs	r0, #6
}
     a8e:	46bd      	mov	sp, r7
     a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	/* Call the registered callbacks */
	_gpio_fire_callbacks(&data->callbacks, (struct device *)dev,
			     enabled_int);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
     a94:	f00b bd0e 	b.w	c4b4 <_arch_irq_enable>

00000a98 <gpio_nrf5_config>:
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, uint32_t pin, int flags)
{
     a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a9c:	4614      	mov	r4, r2
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     a9e:	6802      	ldr	r2, [r0, #0]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
     aa0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, uint32_t pin, int flags)
{
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     aa4:	6892      	ldr	r2, [r2, #8]
/**
 * @brief Configure pin or port
 */
static int gpio_nrf5_config(struct device *dev,
			    int access_op, uint32_t pin, int flags)
{
     aa6:	4681      	mov	r9, r0
     aa8:	af00      	add	r7, sp, #0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
     aaa:	6895      	ldr	r5, [r2, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
     aac:	6810      	ldr	r0, [r2, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
     aae:	b119      	cbz	r1, ab8 <gpio_nrf5_config+0x20>
					     pull               |
					     GPIO_INPUT_CONNECT |
					     GPIO_DIR_INPUT;
		}
	} else {
		return -ENOTSUP;
     ab0:	f06f 0022 	mvn.w	r0, #34	; 0x22
     ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		uint8_t pull = GPIO_PULL_DISABLE;

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
     ab8:	f403 7240 	and.w	r2, r3, #768	; 0x300
     abc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
     ac0:	d005      	beq.n	ace <gpio_nrf5_config+0x36>
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);

	if (access_op == GPIO_ACCESS_BY_PIN) {

		/* Check pull */
		uint8_t pull = GPIO_PULL_DISABLE;
     ac2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     ac6:	bf0c      	ite	eq
     ac8:	2204      	moveq	r2, #4
     aca:	2200      	movne	r2, #0
     acc:	e000      	b.n	ad0 <gpio_nrf5_config+0x38>

		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
			pull = GPIO_PULL_UP;
     ace:	220c      	movs	r2, #12
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
			pull = GPIO_PULL_DOWN;
		}

		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
     ad0:	f013 0f01 	tst.w	r3, #1
     ad4:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
			/* Config as output */
			gpio->PIN_CNF[pin] = GPIO_SENSE_DISABLE |
     ad8:	bf18      	it	ne
     ada:	f042 0203 	orrne.w	r2, r2, #3
					     pull               |
					     GPIO_INPUT_DISCONNECT |
					     GPIO_DIR_OUTPUT;
		} else {
			/* Config as input */
			gpio->PIN_CNF[pin] = GPIO_SENSE_DISABLE |
     ade:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
		}
	} else {
		return -ENOTSUP;
	}

	if (flags & GPIO_INT) {
     ae2:	f013 0002 	ands.w	r0, r3, #2
     ae6:	d038      	beq.n	b5a <gpio_nrf5_config+0xc2>
		uint32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
     ae8:	0699      	lsls	r1, r3, #26
     aea:	d5e1      	bpl.n	ab0 <gpio_nrf5_config+0x18>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
     aec:	065a      	lsls	r2, r3, #25
     aee:	d407      	bmi.n	b00 <gpio_nrf5_config+0x68>
				config |= GPIOTE_CFG_POL_TOGG;
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
				config |= GPIOTE_CFG_POL_L2H;
			} else {
				config |= GPIOTE_CFG_POL_H2L;
     af0:	f013 0f04 	tst.w	r3, #4
     af4:	bf14      	ite	ne
     af6:	f44f 3680 	movne.w	r6, #65536	; 0x10000
     afa:	f44f 3600 	moveq.w	r6, #131072	; 0x20000
     afe:	e001      	b.n	b04 <gpio_nrf5_config+0x6c>
	if (flags & GPIO_INT) {
		uint32_t config = 0;

		if (flags & GPIO_INT_EDGE) {
			if (flags & GPIO_INT_DOUBLE_EDGE) {
				config |= GPIOTE_CFG_POL_TOGG;
     b00:	f44f 3640 	mov.w	r6, #196608	; 0x30000
			}
		} else { /* GPIO_INT_LEVEL */
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
     b04:	f8d8 000c 	ldr.w	r0, [r8, #12]
     b08:	f7ff fba0 	bl	24c <__popcountsi2>
     b0c:	2808      	cmp	r0, #8
     b0e:	d022      	beq.n	b56 <gpio_nrf5_config+0xbe>
				GPIOTE_CHAN_COUNT) {
			return -EIO;
		}

		/* check if already allocated to replace */
		int i = gpiote_find_channel(dev, pin);
     b10:	4621      	mov	r1, r4
     b12:	4648      	mov	r0, r9
     b14:	f7ff fecc 	bl	8b0 <gpiote_find_channel>

		if (i < 0) {
     b18:	2800      	cmp	r0, #0
     b1a:	f8d8 200c 	ldr.w	r2, [r8, #12]
     b1e:	da08      	bge.n	b32 <gpio_nrf5_config+0x9a>
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
     b20:	43d3      	mvns	r3, r2
     b22:	fa93 f0a3 	rbit	r0, r3
     b26:	2b00      	cmp	r3, #0
     b28:	fab0 f080 	clz	r0, r0
     b2c:	bf08      	it	eq
     b2e:	f04f 30ff 	moveq.w	r0, #4294967295

		data->gpiote_chan_mask |= BIT(i);

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     b32:	0224      	lsls	r4, r4, #8
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     b34:	2301      	movs	r3, #1

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     b36:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     b3a:	4083      	lsls	r3, r0

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     b3c:	f044 0401 	orr.w	r4, r4, #1

		gpiote->CONFIG[i] = config;
     b40:	f500 70a2 	add.w	r0, r0, #324	; 0x144
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     b44:	4313      	orrs	r3, r2

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);
     b46:	4334      	orrs	r4, r6
		if (i < 0) {
			/* allocate a GPIOTE channel */
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
		}

		data->gpiote_chan_mask |= BIT(i);
     b48:	f8c8 300c 	str.w	r3, [r8, #12]

		/* configure GPIOTE channel */
		config |= GPIOTE_CFG_EVT;
		config |= GPIOTE_CFG_PIN(pin);

		gpiote->CONFIG[i] = config;
     b4c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
	}


	return 0;
     b50:	2000      	movs	r0, #0
     b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			/*@todo: use SENSE for this? */
			return -ENOTSUP;
		}
		if (__builtin_popcount(data->gpiote_chan_mask) ==
				GPIOTE_CHAN_COUNT) {
			return -EIO;
     b56:	f06f 0004 	mvn.w	r0, #4
		gpiote->CONFIG[i] = config;
	}


	return 0;
}
     b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00000b60 <_m16src_stop>:
		return -EINPROGRESS;
	}
}

static int _m16src_stop(struct device *dev, clock_control_subsys_t sub_system)
{
     b60:	b590      	push	{r4, r7, lr}
     b62:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
     b64:	f04f 0220 	mov.w	r2, #32
     b68:	f3ef 8311 	mrs	r3, BASEPRI
     b6c:	f382 8811 	msr	BASEPRI, r2
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
     b70:	4910      	ldr	r1, [pc, #64]	; (bb4 <_m16src_stop+0x54>)
     b72:	780c      	ldrb	r4, [r1, #0]
     b74:	b924      	cbnz	r4, b80 <_m16src_stop+0x20>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     b76:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EALREADY;
     b7a:	f06f 0044 	mvn.w	r0, #68	; 0x44
     b7e:	bd90      	pop	{r4, r7, pc}
	}

	if (--m16src_ref) {
     b80:	1e62      	subs	r2, r4, #1
     b82:	b2d2      	uxtb	r2, r2
     b84:	700a      	strb	r2, [r1, #0]
     b86:	b11a      	cbz	r2, b90 <_m16src_stop+0x30>
     b88:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return 0;
     b8c:	2000      	movs	r0, #0
     b8e:	bd90      	pop	{r4, r7, pc}
	}

	if (m16src_grd) {
     b90:	4a09      	ldr	r2, [pc, #36]	; (bb8 <_m16src_stop+0x58>)
     b92:	7810      	ldrb	r0, [r2, #0]
     b94:	b128      	cbz	r0, ba2 <_m16src_stop+0x42>
		m16src_ref++;
     b96:	700c      	strb	r4, [r1, #0]
     b98:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EAGAIN;
     b9c:	f06f 000a 	mvn.w	r0, #10
     ba0:	bd90      	pop	{r4, r7, pc}
	}

	m16src_grd = 1;
     ba2:	2101      	movs	r1, #1
     ba4:	7011      	strb	r1, [r2, #0]
     ba6:	f383 8811 	msr	BASEPRI, r3

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     bae:	6059      	str	r1, [r3, #4]

	/* release resource guard */
	m16src_grd = 0;
     bb0:	7010      	strb	r0, [r2, #0]

	return 0;
}
     bb2:	bd90      	pop	{r4, r7, pc}
     bb4:	20000390 	.word	0x20000390
     bb8:	20000391 	.word	0x20000391

00000bbc <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
     bbc:	b580      	push	{r7, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     bbe:	2200      	movs	r2, #0
     bc0:	4610      	mov	r0, r2
		}
	}
}

static int _clock_control_init(struct device *dev)
{
     bc2:	af00      	add	r7, sp, #0
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
     bc4:	2101      	movs	r1, #1
     bc6:	f00b fca5 	bl	c514 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
     bca:	2000      	movs	r0, #0
     bcc:	f00b fc72 	bl	c4b4 <_arch_irq_enable>

	return 0;
}
     bd0:	2000      	movs	r0, #0
     bd2:	bd80      	pop	{r7, pc}

00000bd4 <_m16src_start>:

static uint8_t m16src_ref;
static uint8_t m16src_grd;

static int _m16src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bd8:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
     bda:	f04f 0220 	mov.w	r2, #32
     bde:	f3ef 8311 	mrs	r3, BASEPRI
     be2:	f382 8811 	msr	BASEPRI, r2

	/* Test for reference increment from zero and resource guard not taken.
	 */
	imask = irq_lock();

	if (m16src_ref++) {
     be6:	4a29      	ldr	r2, [pc, #164]	; (c8c <_m16src_start+0xb8>)
     be8:	7810      	ldrb	r0, [r2, #0]
     bea:	1c44      	adds	r4, r0, #1
     bec:	7014      	strb	r4, [r2, #0]
     bee:	b110      	cbz	r0, bf6 <_m16src_start+0x22>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
     bf0:	f383 8811 	msr	BASEPRI, r3
     bf4:	e03d      	b.n	c72 <_m16src_start+0x9e>
		irq_unlock(imask);
		goto hf_already_started;
	}

	if (m16src_grd) {
     bf6:	4d26      	ldr	r5, [pc, #152]	; (c90 <_m16src_start+0xbc>)
     bf8:	f895 8000 	ldrb.w	r8, [r5]
     bfc:	f1b8 0f00 	cmp.w	r8, #0
     c00:	d006      	beq.n	c10 <_m16src_start+0x3c>
		m16src_ref--;
     c02:	7010      	strb	r0, [r2, #0]
     c04:	f383 8811 	msr	BASEPRI, r3
		irq_unlock(imask);
		return -EAGAIN;
     c08:	f06f 000a 	mvn.w	r0, #10
     c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	m16src_grd = 1;
     c10:	2601      	movs	r6, #1
     c12:	702e      	strb	r6, [r5, #0]
     c14:	f383 8811 	msr	BASEPRI, r3
     c18:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000

	irq_unlock(imask);

	/* If blocking then spin-wait in CPU sleep until 16MHz clock settles. */
	blocking = POINTER_TO_UINT(sub_system);
	if (blocking) {
     c1c:	b321      	cbz	r1, c68 <_m16src_start+0x94>
		uint32_t intenset;

		irq_disable(POWER_CLOCK_IRQn);
     c1e:	4640      	mov	r0, r8
     c20:	f00b fc58 	bl	c4d4 <_arch_irq_disable>

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     c24:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100

		intenset = NRF_CLOCK->INTENSET;
     c28:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     c2c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     c30:	6026      	str	r6, [r4, #0]

		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
     c32:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
     c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c3a:	b919      	cbnz	r1, c44 <_m16src_start+0x70>
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     c3c:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     c3e:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     c40:	bf20      	wfe
     c42:	e7f6      	b.n	c32 <_m16src_start+0x5e>
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
     c44:	f013 0f01 	tst.w	r3, #1
			__WFE();
			__SEV();
			__WFE();
		}

		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     c48:	f04f 0100 	mov.w	r1, #0
     c4c:	f04f 0301 	mov.w	r3, #1
     c50:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100

		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     c54:	bf08      	it	eq
     c56:	f8c2 3308 	streq.w	r3, [r2, #776]	; 0x308
 * @return N/A
 */

static inline void _NvicIrqUnpend(unsigned int irq)
{
	__scs.nvic.icpr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
     c5a:	4a0e      	ldr	r2, [pc, #56]	; (c94 <_m16src_start+0xc0>)
		}

		_NvicIrqUnpend(POWER_CLOCK_IRQn);

		irq_enable(POWER_CLOCK_IRQn);
     c5c:	2000      	movs	r0, #0
     c5e:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
     c62:	f00b fc27 	bl	c4b4 <_arch_irq_enable>
     c66:	e002      	b.n	c6e <_m16src_start+0x9a>
	} else {
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     c68:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100

		NRF_CLOCK->TASKS_HFCLKSTART = 1;
     c6c:	6026      	str	r6, [r4, #0]
	}

	/* release resource guard */
	m16src_grd = 0;
     c6e:	2300      	movs	r3, #0
     c70:	702b      	strb	r3, [r5, #0]
	/* rollover should not happen as start and stop shall be
	 * called in pairs.
	 */
	__ASSERT_NO_MSG(m16src_ref);

	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
     c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     c76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		return 0;
	} else {
		return -EINPROGRESS;
     c7a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
     c7e:	bf14      	ite	ne
     c80:	2000      	movne	r0, #0
     c82:	f06f 0043 	mvneq.w	r0, #67	; 0x43
	}
}
     c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     c8a:	bf00      	nop
     c8c:	20000390 	.word	0x20000390
     c90:	20000391 	.word	0x20000391
     c94:	e000e000 	.word	0xe000e000

00000c98 <_power_clock_isr>:

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     c9e:	4605      	mov	r5, r0
	uint8_t pof, hf_intenset, hf_stat, hf, lf, done, ctto;
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);
     ca0:	f8d3 c108 	ldr.w	ip, [r3, #264]	; 0x108

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     ca4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
     ca8:	f8d3 440c 	ldr.w	r4, [r3, #1036]	; 0x40c
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
     cac:	f8d3 e100 	ldr.w	lr, [r3, #256]	; 0x100

	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
     cb0:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104

	done = (NRF_CLOCK->EVENTS_DONE != 0);
     cb4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
     cb8:	f8d3 6110 	ldr.w	r6, [r3, #272]	; 0x110

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}

static void _power_clock_isr(void *arg)
{
     cbc:	af00      	add	r7, sp, #0
	struct device *dev = arg;

	pof = (NRF_POWER->EVENTS_POFWARN != 0);

	hf_intenset =
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
     cbe:	f002 0201 	and.w	r2, r2, #1
	done = (NRF_CLOCK->EVENTS_DONE != 0);
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);

	__ASSERT_NO_MSG(pof || hf || hf_intenset || lf || done || ctto);

	if (pof) {
     cc2:	f1bc 0f00 	cmp.w	ip, #0
     cc6:	d003      	beq.n	cd0 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
     cc8:	f04f 0c00 	mov.w	ip, #0
     ccc:	f8c3 c108 	str.w	ip, [r3, #264]	; 0x108
	}

	if (hf) {
     cd0:	f1be 0f00 	cmp.w	lr, #0
     cd4:	d005      	beq.n	ce2 <_power_clock_isr+0x4a>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     cda:	f04f 0e00 	mov.w	lr, #0
     cde:	f8c3 e100 	str.w	lr, [r3, #256]	; 0x100
	}

	if (hf_intenset && hf_stat) {
     ce2:	b13a      	cbz	r2, cf4 <_power_clock_isr+0x5c>
     ce4:	03e3      	lsls	r3, r4, #15
		/* INTENSET is used as state flag to start calibration,
		 * hence clear it here.
		 */
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
     ce6:	bf41      	itttt	mi
     ce8:	f04f 4380 	movmi.w	r3, #1073741824	; 0x40000000
     cec:	2201      	movmi	r2, #1
     cee:	f8c3 2308 	strmi.w	r2, [r3, #776]	; 0x308

		/* Start Calibration */
		NRF_CLOCK->TASKS_CAL = 1;
     cf2:	611a      	strmi	r2, [r3, #16]
	}

	if (lf) {
     cf4:	b120      	cbz	r0, d00 <_power_clock_isr+0x68>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     cfa:	2200      	movs	r2, #0
     cfc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

		__ASSERT_NO_MSG(0);
	}

	if (done) {
     d00:	b149      	cbz	r1, d16 <_power_clock_isr+0x7e>
		int err;

		NRF_CLOCK->EVENTS_DONE = 0;
     d02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     d06:	2100      	movs	r1, #0
     d08:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c

		/* Calibration done, stop 16M Xtal. */
		err = _m16src_stop(dev, NULL);
     d0c:	4628      	mov	r0, r5
     d0e:	f7ff ff27 	bl	b60 <_m16src_stop>
		__ASSERT_NO_MSG(!err);

		/* Start timer for next calibration. */
		NRF_CLOCK->TASKS_CTSTART = 1;
     d12:	2301      	movs	r3, #1
     d14:	6163      	str	r3, [r4, #20]
	}

	if (ctto) {
     d16:	b176      	cbz	r6, d36 <_power_clock_isr+0x9e>
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     d1c:	2100      	movs	r1, #0

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     d1e:	2401      	movs	r4, #1
	}

	if (ctto) {
		int err;

		NRF_CLOCK->EVENTS_CTTO = 0;
     d20:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;

		err = _m16src_start(dev, false);
     d24:	4628      	mov	r0, r5

		/* Start HF clock, if already started
		 * then explicitly assert IRQ; we use the INTENSET
		 * as a state flag to start calibration.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     d26:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304

		err = _m16src_start(dev, false);
     d2a:	f7ff ff53 	bl	bd4 <_m16src_start>
		if (!err) {
     d2e:	b910      	cbnz	r0, d36 <_power_clock_isr+0x9e>
 * @return N/A
 */

static inline void _NvicIrqPend(unsigned int irq)
{
	__scs.nvic.ispr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
     d30:	4b01      	ldr	r3, [pc, #4]	; (d38 <_power_clock_isr+0xa0>)
     d32:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
     d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d38:	e000e000 	.word	0xe000e000

00000d3c <_k32src_start>:

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     d40:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     d44:	af00      	add	r7, sp, #0

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     d46:	f8d4 6418 	ldr.w	r6, [r4, #1048]	; 0x418
     d4a:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000

	return 0;
}

static int _k32src_start(struct device *dev, clock_control_subsys_t sub_system)
{
     d4e:	4680      	mov	r8, r0
     d50:	460d      	mov	r5, r1

	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
     d52:	d14c      	bne.n	dee <_k32src_start+0xb2>
		return 0;
	}

	irq_disable(POWER_CLOCK_IRQn);
     d54:	4630      	mov	r0, r6
     d56:	f00b fbbd 	bl	c4d4 <_arch_irq_disable>

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     d5a:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104

	intenset = NRF_CLOCK->INTENSET;
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     d5e:	2302      	movs	r3, #2

	irq_disable(POWER_CLOCK_IRQn);

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	intenset = NRF_CLOCK->INTENSET;
     d60:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
     d64:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     d68:	2301      	movs	r3, #1
	intenset = NRF_CLOCK->INTENSET;
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;

	/* Set LF Clock Source */
	lf_clk_src = POINTER_TO_UINT(sub_system);
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
     d6a:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518

	/* Start and spin-wait until clock settles */
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
     d6e:	60a3      	str	r3, [r4, #8]

	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
     d70:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
     d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     d78:	b919      	cbnz	r1, d82 <_k32src_start+0x46>
     d7a:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
     d7c:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
     d7e:	bf20      	wfe
     d80:	e7f6      	b.n	d70 <_k32src_start+0x34>
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
     d82:	0792      	lsls	r2, r2, #30
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     d84:	bf58      	it	pl
     d86:	2202      	movpl	r2, #2
		__WFE();
		__SEV();
		__WFE();
	}

	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     d88:	f04f 0100 	mov.w	r1, #0
 * @return N/A
 */

static inline void _NvicIrqUnpend(unsigned int irq)
{
	__scs.nvic.icpr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
     d8c:	4e19      	ldr	r6, [pc, #100]	; (df4 <_k32src_start+0xb8>)
     d8e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
     d92:	f04f 0401 	mov.w	r4, #1

	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
     d96:	bf58      	it	pl
     d98:	f8c3 2308 	strpl.w	r2, [r3, #776]	; 0x308
	}

	_NvicIrqUnpend(POWER_CLOCK_IRQn);

	irq_enable(POWER_CLOCK_IRQn);
     d9c:	2000      	movs	r0, #0
     d9e:	f8c6 4280 	str.w	r4, [r6, #640]	; 0x280
     da2:	f00b fb87 	bl	c4b4 <_arch_irq_enable>

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	NRF_CLOCK->EVENTS_DONE = 0;
     daa:	2100      	movs	r1, #0
	irq_enable(POWER_CLOCK_IRQn);

	/* If RC selected, calibrate and start timer for consecutive
	 * calibrations.
	 */
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
     dac:	2218      	movs	r2, #24
     dae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
     db2:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
     db6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110

	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
     dba:	f015 0103 	ands.w	r1, r5, #3
     dbe:	d10c      	bne.n	dda <_k32src_start+0x9e>
		int err;

		/* Set the Calibration Timer Initial Value */
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
     dc0:	2010      	movs	r0, #16
     dc2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538

		/* Enable DONE and CTTO IRQs */
		NRF_CLOCK->INTENSET =
     dc6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;

		err = _m16src_start(dev, false);
     dca:	4640      	mov	r0, r8
		/* Start HF clock, if already started then explicitly
		 * assert IRQ.
		 * NOTE: The INTENSET is used as state flag to start
		 * calibration in ISR.
		 */
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
     dcc:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304

		err = _m16src_start(dev, false);
     dd0:	f7ff ff00 	bl	bd4 <_m16src_start>
		if (!err) {
     dd4:	b908      	cbnz	r0, dda <_k32src_start+0x9e>
 * @return N/A
 */

static inline void _NvicIrqPend(unsigned int irq)
{
	__scs.nvic.ispr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
     dd6:	f8c6 4200 	str.w	r4, [r6, #512]	; 0x200
		} else {
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
     dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     dde:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
     de2:	f480 3080 	eor.w	r0, r0, #65536	; 0x10000
     de6:	f3c0 4000 	ubfx	r0, r0, #16, #1
     dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	/* TODO: implement the ref count and re-entrancy guard, if a use-case
	 * needs it.
	 */

	if ((NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)) {
		return 0;
     dee:	2000      	movs	r0, #0
			__ASSERT_NO_MSG(err == -EINPROGRESS);
		}
	}

	return !(NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk);
}
     df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     df4:	e000e000 	.word	0xe000e000

00000df8 <strcpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strcpy(char *_Restrict d, const char *_Restrict s)
{
     df8:	b580      	push	{r7, lr}
     dfa:	3901      	subs	r1, #1
     dfc:	af00      	add	r7, sp, #0
	char *dest = d;

	while (*s != '\0') {
     dfe:	4603      	mov	r3, r0
     e00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     e04:	b112      	cbz	r2, e0c <strcpy+0x14>
		*d = *s;
     e06:	f803 2b01 	strb.w	r2, [r3], #1
     e0a:	e7f9      	b.n	e00 <strcpy+0x8>
		d++;
		s++;
	}

	*d = '\0';
     e0c:	701a      	strb	r2, [r3, #0]

	return dest;
}
     e0e:	bd80      	pop	{r7, pc}

00000e10 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
     e10:	b580      	push	{r7, lr}
     e12:	3801      	subs	r0, #1
     e14:	af00      	add	r7, sp, #0
     e16:	3901      	subs	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
     e18:	f810 3f01 	ldrb.w	r3, [r0, #1]!
     e1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     e20:	4293      	cmp	r3, r2
     e22:	d102      	bne.n	e2a <strcmp+0x1a>
     e24:	2b00      	cmp	r3, #0
     e26:	d1f7      	bne.n	e18 <strcmp+0x8>
     e28:	461a      	mov	r2, r3
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
     e2a:	1a98      	subs	r0, r3, r2
     e2c:	bd80      	pop	{r7, pc}

00000e2e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
     e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
     e30:	af00      	add	r7, sp, #0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
     e32:	b192      	cbz	r2, e5a <memcmp+0x2c>
     e34:	3a01      	subs	r2, #1
     e36:	4402      	add	r2, r0
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     e38:	4290      	cmp	r0, r2
     e3a:	460c      	mov	r4, r1
     e3c:	4603      	mov	r3, r0
     e3e:	d103      	bne.n	e48 <memcmp+0x1a>
		c1++;
		c2++;
	}

	return *c1 - *c2;
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	7822      	ldrb	r2, [r4, #0]
     e44:	1a98      	subs	r0, r3, r2
     e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char *c2 = m2;

	if (!n)
		return 0;

	while ((--n > 0) && (*c1 == *c2)) {
     e48:	781e      	ldrb	r6, [r3, #0]
     e4a:	7825      	ldrb	r5, [r4, #0]
     e4c:	42ae      	cmp	r6, r5
     e4e:	f100 0001 	add.w	r0, r0, #1
     e52:	f101 0101 	add.w	r1, r1, #1
     e56:	d0ef      	beq.n	e38 <memcmp+0xa>
     e58:	e7f2      	b.n	e40 <memcmp+0x12>
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n)
		return 0;
     e5a:	4610      	mov	r0, r2
		c1++;
		c2++;
	}

	return *c1 - *c2;
}
     e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e5e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_Restrict d, const void *_Restrict s, size_t n)
{
     e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     e60:	ea81 0300 	eor.w	r3, r1, r0
     e64:	f013 0f03 	tst.w	r3, #3
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_Restrict d, const void *_Restrict s, size_t n)
{
     e68:	af00      	add	r7, sp, #0
     e6a:	4603      	mov	r3, r0
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
     e6c:	d008      	beq.n	e80 <memcpy+0x22>
     e6e:	3b01      	subs	r3, #1
     e70:	440a      	add	r2, r1
     e72:	e019      	b.n	ea8 <memcpy+0x4a>

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
     e74:	b1fa      	cbz	r2, eb6 <memcpy+0x58>
				return d;
			}
			*(d_byte++) = *(s_byte++);
     e76:	f811 4b01 	ldrb.w	r4, [r1], #1
     e7a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
     e7e:	3a01      	subs	r2, #1

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
     e80:	079c      	lsls	r4, r3, #30
     e82:	d1f7      	bne.n	e74 <memcpy+0x16>
     e84:	1f1e      	subs	r6, r3, #4
     e86:	460d      	mov	r5, r1
     e88:	1b54      	subs	r4, r2, r5
     e8a:	440c      	add	r4, r1
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
     e8c:	2c03      	cmp	r4, #3
     e8e:	d904      	bls.n	e9a <memcpy+0x3c>
			*(d_word++) = *(s_word++);
     e90:	f855 4b04 	ldr.w	r4, [r5], #4
     e94:	f846 4f04 	str.w	r4, [r6, #4]!
     e98:	e7f6      	b.n	e88 <memcpy+0x2a>
     e9a:	0894      	lsrs	r4, r2, #2
     e9c:	eba2 0284 	sub.w	r2, r2, r4, lsl #2
     ea0:	00a4      	lsls	r4, r4, #2
     ea2:	4423      	add	r3, r4
     ea4:	4421      	add	r1, r4
     ea6:	e7e2      	b.n	e6e <memcpy+0x10>
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
     ea8:	4291      	cmp	r1, r2
     eaa:	d004      	beq.n	eb6 <memcpy+0x58>
		*(d_byte++) = *(s_byte++);
     eac:	f811 4b01 	ldrb.w	r4, [r1], #1
     eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
     eb4:	e7f8      	b.n	ea8 <memcpy+0x4a>
		n--;
	}

	return d;
}
     eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000eb8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
     eba:	b2c9      	uxtb	r1, r1
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
     ebc:	af00      	add	r7, sp, #0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
     ebe:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
     ec0:	079c      	lsls	r4, r3, #30
     ec2:	d004      	beq.n	ece <memset+0x16>
		if (n == 0) {
     ec4:	b1c2      	cbz	r2, ef8 <memset+0x40>
			return buf;
		}
		*(d_byte++) = c_byte;
     ec6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
     eca:	3a01      	subs	r2, #1
     ecc:	e7f8      	b.n	ec0 <memset+0x8>
	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
     ece:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
     ed2:	ea44 4404 	orr.w	r4, r4, r4, lsl #16

	while (n >= sizeof(unsigned int)) {
     ed6:	461e      	mov	r6, r3
     ed8:	1b95      	subs	r5, r2, r6
     eda:	441d      	add	r5, r3
     edc:	2d03      	cmp	r5, #3
     ede:	d902      	bls.n	ee6 <memset+0x2e>
		*(d_word++) = c_word;
     ee0:	f846 4b04 	str.w	r4, [r6], #4
     ee4:	e7f8      	b.n	ed8 <memset+0x20>
     ee6:	0894      	lsrs	r4, r2, #2
     ee8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     eec:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
     eee:	4294      	cmp	r4, r2
     ef0:	d002      	beq.n	ef8 <memset+0x40>
		*(d_byte++) = c_byte;
     ef2:	f804 1b01 	strb.w	r1, [r4], #1
     ef6:	e7fa      	b.n	eee <memset+0x36>
		n--;
	}

	return buf;
}
     ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000efa <_nop_char_out>:
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
     efa:	b580      	push	{r7, lr}
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     efc:	2000      	movs	r0, #0
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
     efe:	af00      	add	r7, sp, #0
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
     f00:	bd80      	pop	{r7, pc}
	...

00000f04 <char_out>:
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
     f04:	680b      	ldr	r3, [r1, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
     f06:	b480      	push	{r7}
	ctx->count++;
     f08:	3301      	adds	r3, #1
     f0a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     f0c:	4b02      	ldr	r3, [pc, #8]	; (f18 <char_out+0x14>)
     f0e:	681b      	ldr	r3, [r3, #0]
struct out_context {
	int count;
};

static int char_out(int c, struct out_context *ctx)
{
     f10:	af00      	add	r7, sp, #0
	ctx->count++;
	return _char_out(c);
}
     f12:	46bd      	mov	sp, r7
     f14:	bc80      	pop	{r7}
};

static int char_out(int c, struct out_context *ctx)
{
	ctx->count++;
	return _char_out(c);
     f16:	4718      	bx	r3
     f18:	20000020 	.word	0x20000020

00000f1c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
     f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f20:	b083      	sub	sp, #12
     f22:	af00      	add	r7, sp, #0
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
     f24:	4e1c      	ldr	r6, [pc, #112]	; (f98 <_printk_dec_ulong+0x7c>)
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
     f26:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
     f2a:	f1ba 0f01 	cmp.w	sl, #1
     f2e:	bfb8      	it	lt
     f30:	f04f 0a01 	movlt.w	sl, #1
     f34:	2b00      	cmp	r3, #0
     f36:	bf14      	ite	ne
     f38:	2330      	movne	r3, #48	; 0x30
     f3a:	2320      	moveq	r3, #32
     f3c:	4614      	mov	r4, r2
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
     f3e:	4680      	mov	r8, r0
     f40:	4689      	mov	r9, r1
     f42:	607b      	str	r3, [r7, #4]
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
     f44:	250a      	movs	r5, #10
     f46:	2200      	movs	r2, #0
     f48:	f106 0b01 	add.w	fp, r6, #1
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
     f4c:	b90a      	cbnz	r2, f52 <_printk_dec_ulong+0x36>
     f4e:	42a6      	cmp	r6, r4
     f50:	d206      	bcs.n	f60 <_printk_dec_ulong+0x44>
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
     f52:	fbb4 f0fb 	udiv	r0, r4, fp
     f56:	4649      	mov	r1, r9
     f58:	3030      	adds	r0, #48	; 0x30
     f5a:	47c0      	blx	r8
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
     f5c:	2201      	movs	r2, #1
			out((int)((remainder / (pos + 1)) + 48), ctx);
     f5e:	e006      	b.n	f6e <_printk_dec_ulong+0x52>
		} else if (remaining <= min_width) {
     f60:	45aa      	cmp	sl, r5
     f62:	db04      	blt.n	f6e <_printk_dec_ulong+0x52>
			out((int)(pad_zero ? '0' : ' '), ctx);
     f64:	4649      	mov	r1, r9
     f66:	6878      	ldr	r0, [r7, #4]
     f68:	603a      	str	r2, [r7, #0]
     f6a:	47c0      	blx	r8
     f6c:	683a      	ldr	r2, [r7, #0]
		}
		remaining--;
		remainder %= (pos + 1);
     f6e:	fbb4 f1fb 	udiv	r1, r4, fp
			found_largest_digit = 1;
			out((int)((remainder / (pos + 1)) + 48), ctx);
		} else if (remaining <= min_width) {
			out((int)(pad_zero ? '0' : ' '), ctx);
		}
		remaining--;
     f72:	3d01      	subs	r5, #1
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
     f74:	2d01      	cmp	r5, #1
		} else if (remaining <= min_width) {
			out((int)(pad_zero ? '0' : ' '), ctx);
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
     f76:	f04f 030a 	mov.w	r3, #10
			out((int)((remainder / (pos + 1)) + 48), ctx);
		} else if (remaining <= min_width) {
			out((int)(pad_zero ? '0' : ' '), ctx);
		}
		remaining--;
		remainder %= (pos + 1);
     f7a:	fb0b 4411 	mls	r4, fp, r1, r4
		pos /= 10;
     f7e:	fbb6 f6f3 	udiv	r6, r6, r3
	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 9) {
     f82:	d1e1      	bne.n	f48 <_printk_dec_ulong+0x2c>
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
     f84:	4649      	mov	r1, r9
     f86:	f104 0030 	add.w	r0, r4, #48	; 0x30
     f8a:	4643      	mov	r3, r8
}
     f8c:	370c      	adds	r7, #12
     f8e:	46bd      	mov	sp, r7
     f90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		}
		remaining--;
		remainder %= (pos + 1);
		pos /= 10;
	}
	out((int)(remainder + 48), ctx);
     f94:	4718      	bx	r3
     f96:	bf00      	nop
     f98:	3b9ac9ff 	.word	0x3b9ac9ff

00000f9c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
     f9c:	b5b0      	push	{r4, r5, r7, lr}
	if (!ctx->str || ctx->count >= ctx->max) {
     f9e:	680a      	ldr	r2, [r1, #0]
     fa0:	688b      	ldr	r3, [r1, #8]
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
     fa2:	af00      	add	r7, sp, #0
	if (!ctx->str || ctx->count >= ctx->max) {
     fa4:	b112      	cbz	r2, fac <str_out+0x10>
     fa6:	684c      	ldr	r4, [r1, #4]
     fa8:	42a3      	cmp	r3, r4
     faa:	db02      	blt.n	fb2 <str_out+0x16>
		ctx->count++;
     fac:	3301      	adds	r3, #1
     fae:	608b      	str	r3, [r1, #8]
		return c;
     fb0:	bdb0      	pop	{r4, r5, r7, pc}
	}

	if (ctx->count == ctx->max - 1) {
     fb2:	1e65      	subs	r5, r4, #1
     fb4:	42ab      	cmp	r3, r5
		ctx->str[ctx->count++] = '\0';
     fb6:	bf0b      	itete	eq
     fb8:	608c      	streq	r4, [r1, #8]
	} else {
		ctx->str[ctx->count++] = c;
     fba:	1c5c      	addne	r4, r3, #1
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
     fbc:	2100      	moveq	r1, #0
	} else {
		ctx->str[ctx->count++] = c;
     fbe:	608c      	strne	r4, [r1, #8]
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
		ctx->str[ctx->count++] = '\0';
     fc0:	bf0c      	ite	eq
     fc2:	54d1      	strbeq	r1, [r2, r3]
	} else {
		ctx->str[ctx->count++] = c;
     fc4:	54d0      	strbne	r0, [r2, r3]
	}

	return c;
}
     fc6:	bdb0      	pop	{r4, r5, r7, pc}

00000fc8 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
     fc8:	b580      	push	{r7, lr}
	_char_out = fn;
     fca:	4b02      	ldr	r3, [pc, #8]	; (fd4 <__printk_hook_install+0xc>)
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
     fcc:	af00      	add	r7, sp, #0
	_char_out = fn;
     fce:	6018      	str	r0, [r3, #0]
     fd0:	bd80      	pop	{r7, pc}
     fd2:	bf00      	nop
     fd4:	20000020 	.word	0x20000020

00000fd8 <_vprintk>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
     fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fdc:	b089      	sub	sp, #36	; 0x24
     fde:	4605      	mov	r5, r0
     fe0:	af02      	add	r7, sp, #8
     fe2:	460e      	mov	r6, r1
     fe4:	469a      	mov	sl, r3
     fe6:	f102 3bff 	add.w	fp, r2, #4294967295
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
	int min_width = -1;
     fea:	f04f 38ff 	mov.w	r8, #4294967295
 * @return N/A
 */
void _vprintk(out_func_t out, void *ctx, const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
	int pad_zero = 0;
     fee:	f04f 0900 	mov.w	r9, #0
     ff2:	464c      	mov	r4, r9
	int min_width = -1;

	/* fmt has already been adjusted if needed */

	while (*fmt) {
     ff4:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
     ff8:	2800      	cmp	r0, #0
     ffa:	f000 80d3 	beq.w	11a4 <_vprintk+0x1cc>
		if (!might_format) {
     ffe:	b92c      	cbnz	r4, 100c <_vprintk+0x34>
			if (*fmt != '%') {
    1000:	2825      	cmp	r0, #37	; 0x25
    1002:	f000 80c7 	beq.w	1194 <_vprintk+0x1bc>
				out((int)*fmt, ctx);
    1006:	4631      	mov	r1, r6
    1008:	47a8      	blx	r5
    100a:	e7f3      	b.n	ff4 <_vprintk+0x1c>
				might_format = 1;
				min_width = -1;
				pad_zero = 0;
			}
		} else {
			switch (*fmt) {
    100c:	2868      	cmp	r0, #104	; 0x68
    100e:	f000 80c4 	beq.w	119a <_vprintk+0x1c2>
    1012:	d812      	bhi.n	103a <_vprintk+0x62>
    1014:	2839      	cmp	r0, #57	; 0x39
    1016:	d807      	bhi.n	1028 <_vprintk+0x50>
    1018:	2831      	cmp	r0, #49	; 0x31
    101a:	d233      	bcs.n	1084 <_vprintk+0xac>
    101c:	2825      	cmp	r0, #37	; 0x25
    101e:	f000 80ae 	beq.w	117e <_vprintk+0x1a6>
    1022:	2830      	cmp	r0, #48	; 0x30
    1024:	d026      	beq.n	1074 <_vprintk+0x9c>
    1026:	e0ac      	b.n	1182 <_vprintk+0x1aa>
    1028:	2863      	cmp	r0, #99	; 0x63
    102a:	f000 80a0 	beq.w	116e <_vprintk+0x196>
    102e:	2864      	cmp	r0, #100	; 0x64
    1030:	d034      	beq.n	109c <_vprintk+0xc4>
    1032:	2858      	cmp	r0, #88	; 0x58
    1034:	f040 80a5 	bne.w	1182 <_vprintk+0x1aa>
    1038:	e051      	b.n	10de <_vprintk+0x106>
    103a:	2873      	cmp	r0, #115	; 0x73
    103c:	f000 8087 	beq.w	114e <_vprintk+0x176>
    1040:	d808      	bhi.n	1054 <_vprintk+0x7c>
    1042:	286c      	cmp	r0, #108	; 0x6c
    1044:	f000 80a9 	beq.w	119a <_vprintk+0x1c2>
    1048:	2870      	cmp	r0, #112	; 0x70
    104a:	d03e      	beq.n	10ca <_vprintk+0xf2>
    104c:	2869      	cmp	r0, #105	; 0x69
    104e:	f040 8098 	bne.w	1182 <_vprintk+0x1aa>
    1052:	e023      	b.n	109c <_vprintk+0xc4>
    1054:	2878      	cmp	r0, #120	; 0x78
    1056:	d042      	beq.n	10de <_vprintk+0x106>
    1058:	287a      	cmp	r0, #122	; 0x7a
    105a:	f000 809e 	beq.w	119a <_vprintk+0x1c2>
    105e:	2875      	cmp	r0, #117	; 0x75
    1060:	f040 808f 	bne.w	1182 <_vprintk+0x1aa>
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
    1064:	f8cd 8000 	str.w	r8, [sp]
				_printk_dec_ulong(out, ctx, d, pad_zero,
						  min_width);
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
    1068:	f10a 0404 	add.w	r4, sl, #4
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
    106c:	464b      	mov	r3, r9
    106e:	f8da 2000 	ldr.w	r2, [sl]
    1072:	e025      	b.n	10c0 <_vprintk+0xe8>
				pad_zero = 0;
			}
		} else {
			switch (*fmt) {
			case '0':
				if (min_width < 0 && pad_zero == 0) {
    1074:	f1b8 0f00 	cmp.w	r8, #0
    1078:	da0a      	bge.n	1090 <_vprintk+0xb8>
    107a:	f1b9 0f00 	cmp.w	r9, #0
    107e:	f000 808e 	beq.w	119e <_vprintk+0x1c6>
    1082:	e002      	b.n	108a <_vprintk+0xb2>
					pad_zero = 1;
					goto still_might_format;
				}
				/* Fall through */
			case '1' ... '9':
				if (min_width < 0) {
    1084:	f1b8 0f00 	cmp.w	r8, #0
    1088:	da02      	bge.n	1090 <_vprintk+0xb8>
					min_width = *fmt - '0';
    108a:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    108e:	e084      	b.n	119a <_vprintk+0x1c2>
				} else {
					min_width = 10 * min_width + *fmt - '0';
    1090:	230a      	movs	r3, #10
    1092:	fb03 0808 	mla	r8, r3, r8, r0
    1096:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    109a:	e07e      	b.n	119a <_vprintk+0x1c2>
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
    109c:	f10a 0404 	add.w	r4, sl, #4
    10a0:	f8da a000 	ldr.w	sl, [sl]

				if (d < 0) {
    10a4:	f1ba 0f00 	cmp.w	sl, #0
    10a8:	da06      	bge.n	10b8 <_vprintk+0xe0>
					out((int)'-', ctx);
    10aa:	4631      	mov	r1, r6
    10ac:	202d      	movs	r0, #45	; 0x2d
    10ae:	47a8      	blx	r5
					d = -d;
    10b0:	f1ca 0a00 	rsb	sl, sl, #0
					min_width--;
    10b4:	f108 38ff 	add.w	r8, r8, #4294967295
				}
				_printk_dec_ulong(out, ctx, d, pad_zero,
    10b8:	f8cd 8000 	str.w	r8, [sp]
    10bc:	464b      	mov	r3, r9
    10be:	4652      	mov	r2, sl
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(out, ctx, u, pad_zero,
    10c0:	4631      	mov	r1, r6
    10c2:	4628      	mov	r0, r5
    10c4:	f7ff ff2a 	bl	f1c <_printk_dec_ulong>
    10c8:	e057      	b.n	117a <_vprintk+0x1a2>
						  min_width);
				break;
			}
			case 'p':
				  out('0', ctx);
    10ca:	4631      	mov	r1, r6
    10cc:	2030      	movs	r0, #48	; 0x30
    10ce:	47a8      	blx	r5
				  out('x', ctx);
    10d0:	4631      	mov	r1, r6
    10d2:	2078      	movs	r0, #120	; 0x78
    10d4:	47a8      	blx	r5
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
				  min_width = 8;
    10d6:	f04f 0808 	mov.w	r8, #8
			}
			case 'p':
				  out('0', ctx);
				  out('x', ctx);
				  /* left-pad pointers with zeros */
				  pad_zero = 1;
    10da:	f04f 0901 	mov.w	r9, #1
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
    10de:	f10a 0304 	add.w	r3, sl, #4
    10e2:	f1b9 0f00 	cmp.w	r9, #0
    10e6:	617b      	str	r3, [r7, #20]
    10e8:	f8da 3000 	ldr.w	r3, [sl]
    10ec:	613b      	str	r3, [r7, #16]
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
    10ee:	f04f 0a08 	mov.w	sl, #8
    10f2:	bf14      	ite	ne
    10f4:	2330      	movne	r3, #48	; 0x30
    10f6:	2320      	moveq	r3, #32
    10f8:	60fb      	str	r3, [r7, #12]
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
    10fa:	2200      	movs	r2, #0
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, int pad_zero,
			      int min_width)
{
	int size = sizeof(num) * 2;
    10fc:	4654      	mov	r4, sl
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    10fe:	3c01      	subs	r4, #1
    1100:	6939      	ldr	r1, [r7, #16]
    1102:	00a3      	lsls	r3, r4, #2
    1104:	fa21 f303 	lsr.w	r3, r1, r3

		if (nibble || found_largest_digit || size == 1) {
    1108:	f013 030f 	ands.w	r3, r3, #15
    110c:	d102      	bne.n	1114 <_vprintk+0x13c>
    110e:	b932      	cbnz	r2, 111e <_vprintk+0x146>
    1110:	b964      	cbnz	r4, 112c <_vprintk+0x154>
    1112:	e004      	b.n	111e <_vprintk+0x146>
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    1114:	2b09      	cmp	r3, #9
    1116:	bf8c      	ite	hi
    1118:	2057      	movhi	r0, #87	; 0x57
    111a:	2030      	movls	r0, #48	; 0x30
    111c:	e000      	b.n	1120 <_vprintk+0x148>
    111e:	2030      	movs	r0, #48	; 0x30
			out((int)nibble, ctx);
    1120:	4418      	add	r0, r3
    1122:	4631      	mov	r1, r6
    1124:	47a8      	blx	r5
    1126:	4653      	mov	r3, sl

	for (; size; size--) {
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
    1128:	2201      	movs	r2, #1
    112a:	e00a      	b.n	1142 <_vprintk+0x16a>
			nibble += nibble > 9 ? 87 : 48;
			out((int)nibble, ctx);
			continue;
		}

		if (remaining-- <= min_width) {
    112c:	45d0      	cmp	r8, sl
    112e:	f10a 33ff 	add.w	r3, sl, #4294967295
    1132:	db06      	blt.n	1142 <_vprintk+0x16a>
			out((int)(pad_zero ? '0' : ' '), ctx);
    1134:	4631      	mov	r1, r6
    1136:	68f8      	ldr	r0, [r7, #12]
    1138:	607a      	str	r2, [r7, #4]
    113a:	60bb      	str	r3, [r7, #8]
    113c:	47a8      	blx	r5
    113e:	687a      	ldr	r2, [r7, #4]
    1140:	68bb      	ldr	r3, [r7, #8]
{
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */

	for (; size; size--) {
    1142:	b10c      	cbz	r4, 1148 <_vprintk+0x170>
    1144:	469a      	mov	sl, r3
    1146:	e7da      	b.n	10fe <_vprintk+0x126>
				  pad_zero = 1;
				  min_width = 8;
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
    1148:	f8d7 a014 	ldr.w	sl, [r7, #20]
    114c:	e752      	b.n	ff4 <_vprintk+0x1c>
    114e:	f8da 4000 	ldr.w	r4, [sl]
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    1152:	f10a 0304 	add.w	r3, sl, #4
    1156:	3c01      	subs	r4, #1

				while (*s)
    1158:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    115c:	b120      	cbz	r0, 1168 <_vprintk+0x190>
					out((int)(*s++), ctx);
    115e:	4631      	mov	r1, r6
    1160:	617b      	str	r3, [r7, #20]
    1162:	47a8      	blx	r5
    1164:	697b      	ldr	r3, [r7, #20]
    1166:	e7f7      	b.n	1158 <_vprintk+0x180>
				_printk_hex_ulong(out, ctx, x, pad_zero,
						  min_width);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    1168:	469a      	mov	sl, r3
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
			}
			might_format = 0;
    116a:	4604      	mov	r4, r0
    116c:	e742      	b.n	ff4 <_vprintk+0x1c>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				out(c, ctx);
    116e:	4631      	mov	r1, r6
    1170:	f8da 0000 	ldr.w	r0, [sl]
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    1174:	f10a 0404 	add.w	r4, sl, #4

				out(c, ctx);
    1178:	47a8      	blx	r5
				while (*s)
					out((int)(*s++), ctx);
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);
    117a:	46a2      	mov	sl, r4
    117c:	e008      	b.n	1190 <_vprintk+0x1b8>

				out(c, ctx);
				break;
			}
			case '%': {
				out((int)'%', ctx);
    117e:	4631      	mov	r1, r6
    1180:	e005      	b.n	118e <_vprintk+0x1b6>
				break;
			}
			default:
				out((int)'%', ctx);
    1182:	4631      	mov	r1, r6
    1184:	2025      	movs	r0, #37	; 0x25
    1186:	47a8      	blx	r5
				out((int)*fmt, ctx);
    1188:	f89b 0000 	ldrb.w	r0, [fp]
    118c:	4631      	mov	r1, r6
    118e:	47a8      	blx	r5
				break;
			}
			might_format = 0;
    1190:	2400      	movs	r4, #0
				break;
			}
			default:
				out((int)'%', ctx);
				out((int)*fmt, ctx);
				break;
    1192:	e72f      	b.n	ff4 <_vprintk+0x1c>
		if (!might_format) {
			if (*fmt != '%') {
				out((int)*fmt, ctx);
			} else {
				might_format = 1;
				min_width = -1;
    1194:	f04f 38ff 	mov.w	r8, #4294967295
				pad_zero = 0;
    1198:	46a1      	mov	r9, r4
			}
		} else {
			switch (*fmt) {
    119a:	2401      	movs	r4, #1
    119c:	e72a      	b.n	ff4 <_vprintk+0x1c>
			case '0':
				if (min_width < 0 && pad_zero == 0) {
					pad_zero = 1;
    119e:	f04f 0901 	mov.w	r9, #1
    11a2:	e726      	b.n	ff2 <_vprintk+0x1a>
			might_format = 0;
		}
still_might_format:
		++fmt;
	}
}
    11a4:	371c      	adds	r7, #28
    11a6:	46bd      	mov	sp, r7
    11a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000011ac <printk>:
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    11ac:	b40f      	push	{r0, r1, r2, r3}
    11ae:	b580      	push	{r7, lr}
    11b0:	b082      	sub	sp, #8
    11b2:	af00      	add	r7, sp, #0
    11b4:	f107 0310 	add.w	r3, r7, #16
	struct out_context ctx = { 0 };
    11b8:	2100      	movs	r1, #0
 * @param fmt formatted string to output
 *
 * @return Number of characters printed
 */
int printk(const char *fmt, ...)
{
    11ba:	f853 2b04 	ldr.w	r2, [r3], #4
	struct out_context ctx = { 0 };
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    11be:	4806      	ldr	r0, [pc, #24]	; (11d8 <printk+0x2c>)
int printk(const char *fmt, ...)
{
	struct out_context ctx = { 0 };
	va_list ap;

	va_start(ap, fmt);
    11c0:	e887 000a 	stmia.w	r7, {r1, r3}
	_vprintk((out_func_t)char_out, &ctx, fmt, ap);
    11c4:	4639      	mov	r1, r7
    11c6:	f7ff ff07 	bl	fd8 <_vprintk>
	va_end(ap);

	return ctx.count;
}
    11ca:	6838      	ldr	r0, [r7, #0]
    11cc:	3708      	adds	r7, #8
    11ce:	46bd      	mov	sp, r7
    11d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    11d4:	b004      	add	sp, #16
    11d6:	4770      	bx	lr
    11d8:	00000f05 	.word	0x00000f05

000011dc <snprintk>:

	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    11dc:	b40c      	push	{r2, r3}
    11de:	b5b0      	push	{r4, r5, r7, lr}
    11e0:	b084      	sub	sp, #16
    11e2:	af00      	add	r7, sp, #0
    11e4:	f107 0320 	add.w	r3, r7, #32
    11e8:	4604      	mov	r4, r0
    11ea:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    11ee:	6078      	str	r0, [r7, #4]
    11f0:	60b9      	str	r1, [r7, #8]
    11f2:	2500      	movs	r5, #0
	va_list ap;

	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    11f4:	1d39      	adds	r1, r7, #4
    11f6:	4808      	ldr	r0, [pc, #32]	; (1218 <snprintk+0x3c>)
	return c;
}

int snprintk(char *str, size_t size, const char *fmt, ...)
{
	struct str_context ctx = { str, size, 0 };
    11f8:	60fd      	str	r5, [r7, #12]
	va_list ap;

	va_start(ap, fmt);
    11fa:	603b      	str	r3, [r7, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    11fc:	f7ff feec 	bl	fd8 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    1200:	68f8      	ldr	r0, [r7, #12]
    1202:	68bb      	ldr	r3, [r7, #8]
    1204:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
	}

	return ctx.count;
}
    1206:	f107 0710 	add.w	r7, r7, #16
	va_start(ap, fmt);
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
	va_end(ap);

	if (ctx.count < ctx.max) {
		str[ctx.count] = '\0';
    120a:	bfb8      	it	lt
    120c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    120e:	46bd      	mov	sp, r7
    1210:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
    1214:	b002      	add	sp, #8
    1216:	4770      	bx	lr
    1218:	00000f9d 	.word	0x00000f9d

0000121c <_ConfigAbsSyms>:
/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    121c:	b580      	push	{r7, lr}
    121e:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM(CONFIG_SOC_FAMILY, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_IEEE802154_DRIVER_LEVEL, 0);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_RX_PRIO_STACK_SIZE, 320);
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH_MAX, 27);
    1220:	bd80      	pop	{r7, pc}

00001222 <_copy>:
#define MASK_MOST_SIG_BIT 0x80
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
    1222:	b5b0      	push	{r4, r5, r7, lr}
	if (from_len <= to_len) {
    1224:	428b      	cmp	r3, r1
#define MASK_MOST_SIG_BIT 0x80
#define MASK_TWENTY_SEVEN 0x1b

uint32_t _copy(uint8_t *to, uint32_t to_len,
	       const uint8_t *from, uint32_t from_len)
{
    1226:	af00      	add	r7, sp, #0
    1228:	4615      	mov	r5, r2
    122a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
    122c:	d805      	bhi.n	123a <_copy+0x18>
		(void)memcpy(to, from, from_len);
    122e:	461a      	mov	r2, r3
    1230:	4629      	mov	r1, r5
    1232:	f7ff fe14 	bl	e5e <memcpy>
		return from_len;
    1236:	4620      	mov	r0, r4
    1238:	bdb0      	pop	{r4, r5, r7, pc}
	} else {
		return TC_CRYPTO_FAIL;
    123a:	2000      	movs	r0, #0
	}
}
    123c:	bdb0      	pop	{r4, r5, r7, pc}

0000123e <_set>:

void _set(void *to, uint8_t val, uint32_t len)
{
    123e:	b480      	push	{r7}
    1240:	af00      	add	r7, sp, #0
	(void)memset(to, val, len);
}
    1242:	46bd      	mov	sp, r7
    1244:	bc80      	pop	{r7}
	}
}

void _set(void *to, uint8_t val, uint32_t len)
{
	(void)memset(to, val, len);
    1246:	f7ff be37 	b.w	eb8 <memset>
	...

0000124c <compress>:
	n |= ((uint32_t)(*((*c)++)));
	return n;
}

static void compress(uint32_t *iv, const uint8_t *data)
{
    124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1250:	b09f      	sub	sp, #124	; 0x7c
    1252:	af00      	add	r7, sp, #0
	uint32_t t1, t2;
	uint32_t work_space[16];
	uint32_t n;
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    1254:	6803      	ldr	r3, [r0, #0]
    1256:	62fb      	str	r3, [r7, #44]	; 0x2c
    1258:	6843      	ldr	r3, [r0, #4]
    125a:	62bb      	str	r3, [r7, #40]	; 0x28
    125c:	6883      	ldr	r3, [r0, #8]
    125e:	627b      	str	r3, [r7, #36]	; 0x24
    1260:	68c3      	ldr	r3, [r0, #12]
    1262:	623b      	str	r3, [r7, #32]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    1264:	6903      	ldr	r3, [r0, #16]
    1266:	61fb      	str	r3, [r7, #28]
    1268:	6943      	ldr	r3, [r0, #20]
    126a:	61bb      	str	r3, [r7, #24]
    126c:	6983      	ldr	r3, [r0, #24]
    126e:	617b      	str	r3, [r7, #20]
    1270:	69c3      	ldr	r3, [r0, #28]
    1272:	613b      	str	r3, [r7, #16]
    1274:	469c      	mov	ip, r3
    1276:	697b      	ldr	r3, [r7, #20]
    1278:	633b      	str	r3, [r7, #48]	; 0x30
    127a:	f8d7 b018 	ldr.w	fp, [r7, #24]
	uint32_t t1, t2;
	uint32_t work_space[16];
	uint32_t n;
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    1280:	69fa      	ldr	r2, [r7, #28]
	uint32_t t1, t2;
	uint32_t work_space[16];
	uint32_t n;
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    1282:	f8d7 a020 	ldr.w	sl, [r7, #32]
    1286:	f8d7 e028 	ldr.w	lr, [r7, #40]	; 0x28
    128a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    128c:	637b      	str	r3, [r7, #52]	; 0x34
    128e:	3104      	adds	r1, #4
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
    1290:	2600      	movs	r6, #0
	uint32_t n = 0;

	n = (((uint32_t)(*((*c)++))) << 24);
	n |= ((uint32_t)(*((*c)++)) << 16);
	n |= ((uint32_t)(*((*c)++)) << 8);
	n |= ((uint32_t)(*((*c)++)));
    1292:	f811 3c03 	ldrb.w	r3, [r1, #-3]

static inline uint32_t BigEndian(const uint8_t **c)
{
	uint32_t n = 0;

	n = (((uint32_t)(*((*c)++))) << 24);
    1296:	f811 5c04 	ldrb.w	r5, [r1, #-4]
	n |= ((uint32_t)(*((*c)++)) << 16);
	n |= ((uint32_t)(*((*c)++)) << 8);
	n |= ((uint32_t)(*((*c)++)));
    129a:	041b      	lsls	r3, r3, #16
    129c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    12a0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    12a4:	432b      	orrs	r3, r5
    12a6:	f811 5c02 	ldrb.w	r5, [r1, #-2]
    12aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    12ae:	f107 0538 	add.w	r5, r7, #56	; 0x38
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    12b2:	ea4f 29f2 	mov.w	r9, r2, ror #11
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    12b6:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    12ba:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    12bc:	ea02 080b 	and.w	r8, r2, fp
    12c0:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
    12c4:	ea25 0502 	bic.w	r5, r5, r2
    12c8:	ea85 0508 	eor.w	r5, r5, r8
    12cc:	ea89 6972 	eor.w	r9, r9, r2, ror #25
    12d0:	44a9      	add	r9, r5
    12d2:	4d5a      	ldr	r5, [pc, #360]	; (143c <compress+0x1f0>)
    12d4:	f855 5026 	ldr.w	r5, [r5, r6, lsl #2]
    12d8:	44a9      	add	r9, r5
    12da:	444b      	add	r3, r9
    12dc:	449c      	add	ip, r3
		t2 = Sigma0(a) + Maj(a, b, c);
    12de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    12e0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
    12e2:	ea4f 3874 	mov.w	r8, r4, ror #13
    12e6:	ea83 030e 	eor.w	r3, r3, lr
    12ea:	ea0e 0505 	and.w	r5, lr, r5
    12ee:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    12f2:	4023      	ands	r3, r4
    12f4:	406b      	eors	r3, r5
    12f6:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
    12fa:	3601      	adds	r6, #1
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
    12fc:	4443      	add	r3, r8
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
    12fe:	2e10      	cmp	r6, #16
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
    1300:	eb0c 050a 	add.w	r5, ip, sl
		d = c; c = b; b = a; a = t1 + t2;
    1304:	4463      	add	r3, ip
    1306:	f101 0104 	add.w	r1, r1, #4
    130a:	f8d7 a034 	ldr.w	sl, [r7, #52]	; 0x34
    130e:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
	uint32_t i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];

	for (i = 0; i < 16; ++i) {
    1312:	d008      	beq.n	1326 <compress+0xda>
    1314:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
    1318:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
    131c:	4693      	mov	fp, r2
    131e:	46a6      	mov	lr, r4
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
    1320:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    1322:	461c      	mov	r4, r3
    1324:	e7b5      	b.n	1292 <compress+0x46>
    1326:	4946      	ldr	r1, [pc, #280]	; (1440 <compress+0x1f4>)
    1328:	60f9      	str	r1, [r7, #12]
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    132a:	1c71      	adds	r1, r6, #1
    132c:	60b9      	str	r1, [r7, #8]
    132e:	f107 0c78 	add.w	ip, r7, #120	; 0x78
    1332:	f001 010f 	and.w	r1, r1, #15
    1336:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
    133a:	f107 0878 	add.w	r8, r7, #120	; 0x78
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    133e:	f851 ac40 	ldr.w	sl, [r1, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
    1342:	f106 010e 	add.w	r1, r6, #14
    1346:	f001 010f 	and.w	r1, r1, #15
    134a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    134e:	f006 080f 	and.w	r8, r6, #15
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
    1352:	f851 9c40 	ldr.w	r9, [r1, #-64]
		s1 = sigma1(s1);
    1356:	ea4f 41f9 	mov.w	r1, r9, ror #19
    135a:	ea81 4179 	eor.w	r1, r1, r9, ror #17

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    135e:	3609      	adds	r6, #9

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);
    1360:	6079      	str	r1, [r7, #4]

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1362:	f006 060f 	and.w	r6, r6, #15
    1366:	f107 0178 	add.w	r1, r7, #120	; 0x78
    136a:	eb01 0888 	add.w	r8, r1, r8, lsl #2
    136e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    1372:	f858 1c40 	ldr.w	r1, [r8, #-64]
    1376:	f856 6c40 	ldr.w	r6, [r6, #-64]
		d = c; c = b; b = a; a = t1 + t2;
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
		s0 = sigma0(s0);
    137a:	ea4f 4cba 	mov.w	ip, sl, ror #18
    137e:	ea8c 1cfa 	eor.w	ip, ip, sl, ror #7
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1382:	440e      	add	r6, r1
    1384:	6879      	ldr	r1, [r7, #4]
    1386:	ea8c 0cda 	eor.w	ip, ip, sl, lsr #3
    138a:	4466      	add	r6, ip
    138c:	ea81 2199 	eor.w	r1, r1, r9, lsr #10
    1390:	440e      	add	r6, r1
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    1392:	ea4f 2cf5 	mov.w	ip, r5, ror #11
		s0 = work_space[(i+1)&0x0f];
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    1396:	f848 6c40 	str.w	r6, [r8, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    139a:	ea8c 1cb5 	eor.w	ip, ip, r5, ror #6
    139e:	ea2b 0805 	bic.w	r8, fp, r5
    13a2:	ea05 0102 	and.w	r1, r5, r2
    13a6:	ea88 0101 	eor.w	r1, r8, r1
    13aa:	ea8c 6c75 	eor.w	ip, ip, r5, ror #25
    13ae:	448c      	add	ip, r1
    13b0:	68f9      	ldr	r1, [r7, #12]
    13b2:	f851 8f04 	ldr.w	r8, [r1, #4]!
    13b6:	60f9      	str	r1, [r7, #12]
    13b8:	44c4      	add	ip, r8
    13ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
    13bc:	f8c7 b030 	str.w	fp, [r7, #48]	; 0x30
    13c0:	44b4      	add	ip, r6
    13c2:	4461      	add	r1, ip
    13c4:	460e      	mov	r6, r1
		t2 = Sigma0(a) + Maj(a, b, c);
    13c6:	ea8e 0c04 	eor.w	ip, lr, r4
    13ca:	ea4f 3173 	mov.w	r1, r3, ror #13
    13ce:	ea81 01b3 	eor.w	r1, r1, r3, ror #2
    13d2:	ea0c 0c03 	and.w	ip, ip, r3
    13d6:	ea04 080e 	and.w	r8, r4, lr
    13da:	ea81 51b3 	eor.w	r1, r1, r3, ror #22
    13de:	ea8c 0c08 	eor.w	ip, ip, r8
    13e2:	448c      	add	ip, r1
		h = g; g = f; f = e; e = d + t1;
    13e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    13e6:	f8c7 e034 	str.w	lr, [r7, #52]	; 0x34
    13ea:	4431      	add	r1, r6
		d = c; c = b; b = a; a = t1 + t2;
    13ec:	44b4      	add	ip, r6
    13ee:	68be      	ldr	r6, [r7, #8]
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
	}

	for ( ; i < 64; ++i) {
    13f0:	2e40      	cmp	r6, #64	; 0x40
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
    13f2:	468a      	mov	sl, r1
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
	}

	for ( ; i < 64; ++i) {
    13f4:	d006      	beq.n	1404 <compress+0x1b8>
    13f6:	4693      	mov	fp, r2
    13f8:	46a6      	mov	lr, r4
    13fa:	462a      	mov	r2, r5
    13fc:	461c      	mov	r4, r3
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
		t2 = Sigma0(a) + Maj(a, b, c);
		h = g; g = f; f = e; e = d + t1;
    13fe:	4655      	mov	r5, sl
		d = c; c = b; b = a; a = t1 + t2;
    1400:	4663      	mov	r3, ip
    1402:	e792      	b.n	132a <compress+0xde>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    1404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1406:	4461      	add	r1, ip
    1408:	6001      	str	r1, [r0, #0]
    140a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    140c:	4419      	add	r1, r3
    140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1410:	6041      	str	r1, [r0, #4]
    1412:	4423      	add	r3, r4
    1414:	6083      	str	r3, [r0, #8]
    1416:	6a3b      	ldr	r3, [r7, #32]
    1418:	4473      	add	r3, lr
    141a:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    141c:	69fb      	ldr	r3, [r7, #28]
    141e:	4453      	add	r3, sl
    1420:	6103      	str	r3, [r0, #16]
    1422:	69bb      	ldr	r3, [r7, #24]
    1424:	442b      	add	r3, r5
    1426:	6143      	str	r3, [r0, #20]
    1428:	697b      	ldr	r3, [r7, #20]
    142a:	4413      	add	r3, r2
    142c:	6183      	str	r3, [r0, #24]
    142e:	693b      	ldr	r3, [r7, #16]
}
    1430:	377c      	adds	r7, #124	; 0x7c
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    1432:	445b      	add	r3, fp
    1434:	61c3      	str	r3, [r0, #28]
}
    1436:	46bd      	mov	sp, r7
    1438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143c:	0000dbd8 	.word	0x0000dbd8
    1440:	0000dc14 	.word	0x0000dc14

00001444 <tc_sha256_init>:
#include <tinycrypt/utils.h>

static void compress(uint32_t *iv, const uint8_t *data);

int32_t tc_sha256_init(TCSha256State_t s)
{
    1444:	b598      	push	{r3, r4, r7, lr}
	/* input sanity check: */
	if (s == (TCSha256State_t) 0) {
    1446:	4604      	mov	r4, r0
#include <tinycrypt/utils.h>

static void compress(uint32_t *iv, const uint8_t *data);

int32_t tc_sha256_init(TCSha256State_t s)
{
    1448:	af00      	add	r7, sp, #0
	/* input sanity check: */
	if (s == (TCSha256State_t) 0) {
    144a:	b1c0      	cbz	r0, 147e <tc_sha256_init+0x3a>
	 * Setting the initial state values.
	 * These values correspond to the first 32 bits of the fractional parts
	 * of the square roots of the first 8 primes: 2, 3, 5, 7, 11, 13, 17
	 * and 19.
	 */
	_set((uint8_t *) s, 0x00, sizeof(*s));
    144c:	2270      	movs	r2, #112	; 0x70
    144e:	2100      	movs	r1, #0
    1450:	f7ff fef5 	bl	123e <_set>
	s->iv[0] = 0x6a09e667;
	s->iv[1] = 0xbb67ae85;
	s->iv[2] = 0x3c6ef372;
	s->iv[3] = 0xa54ff53a;
    1454:	480a      	ldr	r0, [pc, #40]	; (1480 <tc_sha256_init+0x3c>)
    1456:	490b      	ldr	r1, [pc, #44]	; (1484 <tc_sha256_init+0x40>)
    1458:	4a0b      	ldr	r2, [pc, #44]	; (1488 <tc_sha256_init+0x44>)
    145a:	4b0c      	ldr	r3, [pc, #48]	; (148c <tc_sha256_init+0x48>)
    145c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	s->iv[4] = 0x510e527f;
    1460:	4b0b      	ldr	r3, [pc, #44]	; (1490 <tc_sha256_init+0x4c>)
    1462:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
    1464:	4b0b      	ldr	r3, [pc, #44]	; (1494 <tc_sha256_init+0x50>)
    1466:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
    1468:	4b0b      	ldr	r3, [pc, #44]	; (1498 <tc_sha256_init+0x54>)
    146a:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    146c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    1470:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    1474:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    1478:	61e3      	str	r3, [r4, #28]

	return TC_CRYPTO_SUCCESS;
    147a:	2001      	movs	r0, #1
    147c:	bd98      	pop	{r3, r4, r7, pc}
}
    147e:	bd98      	pop	{r3, r4, r7, pc}
    1480:	6a09e667 	.word	0x6a09e667
    1484:	bb67ae85 	.word	0xbb67ae85
    1488:	3c6ef372 	.word	0x3c6ef372
    148c:	a54ff53a 	.word	0xa54ff53a
    1490:	510e527f 	.word	0x510e527f
    1494:	9b05688c 	.word	0x9b05688c
    1498:	1f83d9ab 	.word	0x1f83d9ab

0000149c <tc_sha256_update>:

int32_t tc_sha256_update(TCSha256State_t s, const uint8_t *data, size_t datalen)
{
    149c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14a0:	460c      	mov	r4, r1
    14a2:	af00      	add	r7, sp, #0
	/* input sanity check: */
	if (s == (TCSha256State_t) 0 ||
    14a4:	4605      	mov	r5, r0
    14a6:	b320      	cbz	r0, 14f2 <tc_sha256_update+0x56>
    14a8:	b329      	cbz	r1, 14f6 <tc_sha256_update+0x5a>
	    data == (void *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (datalen == 0) {
    14aa:	b1fa      	cbz	r2, 14ec <tc_sha256_update+0x50>
    14ac:	188e      	adds	r6, r1, r2
	}

	while (datalen-- > 0) {
		s->leftover[s->leftover_offset++] = *(data++);
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
			compress(s->iv, s->leftover);
    14ae:	f100 0828 	add.w	r8, r0, #40	; 0x28
			s->leftover_offset = 0;
    14b2:	f04f 0900 	mov.w	r9, #0
    14b6:	e017      	b.n	14e8 <tc_sha256_update+0x4c>
	} else if (datalen == 0) {
		return TC_CRYPTO_SUCCESS;
	}

	while (datalen-- > 0) {
		s->leftover[s->leftover_offset++] = *(data++);
    14b8:	6eab      	ldr	r3, [r5, #104]	; 0x68
    14ba:	1c5a      	adds	r2, r3, #1
    14bc:	66aa      	str	r2, [r5, #104]	; 0x68
    14be:	442b      	add	r3, r5
    14c0:	f814 1b01 	ldrb.w	r1, [r4], #1
    14c4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
    14c8:	2a3f      	cmp	r2, #63	; 0x3f
    14ca:	d90d      	bls.n	14e8 <tc_sha256_update+0x4c>
			compress(s->iv, s->leftover);
    14cc:	4641      	mov	r1, r8
    14ce:	4628      	mov	r0, r5
    14d0:	f7ff febc 	bl	124c <compress>
			s->leftover_offset = 0;
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
    14d4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
    14d8:	f512 7200 	adds.w	r2, r2, #512	; 0x200
    14dc:	f143 0300 	adc.w	r3, r3, #0
    14e0:	e9c5 2308 	strd	r2, r3, [r5, #32]

	while (datalen-- > 0) {
		s->leftover[s->leftover_offset++] = *(data++);
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
			compress(s->iv, s->leftover);
			s->leftover_offset = 0;
    14e4:	f8c5 9068 	str.w	r9, [r5, #104]	; 0x68
		return TC_CRYPTO_FAIL;
	} else if (datalen == 0) {
		return TC_CRYPTO_SUCCESS;
	}

	while (datalen-- > 0) {
    14e8:	42b4      	cmp	r4, r6
    14ea:	d1e5      	bne.n	14b8 <tc_sha256_update+0x1c>
	/* input sanity check: */
	if (s == (TCSha256State_t) 0 ||
	    data == (void *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (datalen == 0) {
		return TC_CRYPTO_SUCCESS;
    14ec:	2001      	movs	r0, #1
    14ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    14f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
int32_t tc_sha256_update(TCSha256State_t s, const uint8_t *data, size_t datalen)
{
	/* input sanity check: */
	if (s == (TCSha256State_t) 0 ||
	    data == (void *) 0) {
		return TC_CRYPTO_FAIL;
    14f6:	4608      	mov	r0, r1
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
		}
	}

	return TC_CRYPTO_SUCCESS;
}
    14f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000014fc <tc_sha256_final>:

int32_t tc_sha256_final(uint8_t *digest, TCSha256State_t s)
{
    14fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fe:	460c      	mov	r4, r1
    1500:	af00      	add	r7, sp, #0
	uint32_t i;

	/* input sanity check: */
	if (digest == (uint8_t *) 0 ||
    1502:	4605      	mov	r5, r0
    1504:	2800      	cmp	r0, #0
    1506:	d05f      	beq.n	15c8 <tc_sha256_final+0xcc>
    1508:	2900      	cmp	r1, #0
    150a:	d05e      	beq.n	15ca <tc_sha256_final+0xce>
	    s == (TCSha256State_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	s->bits_hashed += (s->leftover_offset << 3);
    150c:	6e89      	ldr	r1, [r1, #104]	; 0x68
    150e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
    1512:	00c8      	lsls	r0, r1, #3
    1514:	1812      	adds	r2, r2, r0
    1516:	f143 0300 	adc.w	r3, r3, #0

	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    151a:	1c48      	adds	r0, r1, #1
    151c:	4421      	add	r1, r4
	if (digest == (uint8_t *) 0 ||
	    s == (TCSha256State_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	s->bits_hashed += (s->leftover_offset << 3);
    151e:	e9c4 2308 	strd	r2, r3, [r4, #32]

	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    1522:	2838      	cmp	r0, #56	; 0x38
		return TC_CRYPTO_FAIL;
	}

	s->bits_hashed += (s->leftover_offset << 3);

	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
    1524:	f04f 0380 	mov.w	r3, #128	; 0x80
    1528:	66a0      	str	r0, [r4, #104]	; 0x68
    152a:	f104 0628 	add.w	r6, r4, #40	; 0x28
    152e:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
    1532:	d90b      	bls.n	154c <tc_sha256_final+0x50>
		/* there is not room for all the padding in this block */
		_set(s->leftover + s->leftover_offset, 0x00,
    1534:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    1538:	2100      	movs	r1, #0
    153a:	4430      	add	r0, r6
    153c:	f7ff fe7f 	bl	123e <_set>
		     sizeof(s->leftover) - s->leftover_offset);
		compress(s->iv, s->leftover);
    1540:	4631      	mov	r1, r6
    1542:	4620      	mov	r0, r4
    1544:	f7ff fe82 	bl	124c <compress>
		s->leftover_offset = 0;
    1548:	2300      	movs	r3, #0
    154a:	66a3      	str	r3, [r4, #104]	; 0x68
	}

	/* add the padding and the length in big-Endian format */
	_set(s->leftover + s->leftover_offset, 0x00,
    154c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    154e:	2100      	movs	r1, #0
    1550:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    1554:	4430      	add	r0, r6
    1556:	f7ff fe72 	bl	123e <_set>
	     sizeof(s->leftover) - 8 - s->leftover_offset);
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
    155a:	6a22      	ldr	r2, [r4, #32]
    155c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    155e:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
    1562:	0a11      	lsrs	r1, r2, #8
    1564:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
    1568:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
    156a:	0e12      	lsrs	r2, r2, #24
    156c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    1570:	0a1a      	lsrs	r2, r3, #8
	     sizeof(s->leftover) - 8 - s->leftover_offset);
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
    1572:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
    1576:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    157a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    157c:	0e1b      	lsrs	r3, r3, #24
	/* add the padding and the length in big-Endian format */
	_set(s->leftover + s->leftover_offset, 0x00,
	     sizeof(s->leftover) - 8 - s->leftover_offset);
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
    157e:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
    1582:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	/* hash the padding and length */
	compress(s->iv, s->leftover);
    1586:	4631      	mov	r1, r6
    1588:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
    158a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);

	/* hash the padding and length */
	compress(s->iv, s->leftover);
    158e:	f7ff fe5d 	bl	124c <compress>
    1592:	1d2b      	adds	r3, r5, #4
    1594:	1f21      	subs	r1, r4, #4
    1596:	f105 0024 	add.w	r0, r5, #36	; 0x24

	/* copy the iv out to digest */
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
		uint32_t t = *((uint32_t *) &s->iv[i]);
    159a:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
		*digest++ = (uint8_t)(t >> 16);
		*digest++ = (uint8_t)(t >> 8);
		*digest++ = (uint8_t)(t);
    159e:	f803 2c01 	strb.w	r2, [r3, #-1]
	compress(s->iv, s->leftover);

	/* copy the iv out to digest */
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
		uint32_t t = *((uint32_t *) &s->iv[i]);
		*digest++ = (uint8_t)(t >> 24);
    15a2:	0e15      	lsrs	r5, r2, #24
    15a4:	f803 5c04 	strb.w	r5, [r3, #-4]
		*digest++ = (uint8_t)(t >> 16);
    15a8:	0c15      	lsrs	r5, r2, #16
    15aa:	f803 5c03 	strb.w	r5, [r3, #-3]
		*digest++ = (uint8_t)(t >> 8);
    15ae:	0a15      	lsrs	r5, r2, #8
    15b0:	f803 5c02 	strb.w	r5, [r3, #-2]
    15b4:	3304      	adds	r3, #4

	/* hash the padding and length */
	compress(s->iv, s->leftover);

	/* copy the iv out to digest */
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
    15b6:	4283      	cmp	r3, r0
    15b8:	d1ef      	bne.n	159a <tc_sha256_final+0x9e>
		*digest++ = (uint8_t)(t >> 8);
		*digest++ = (uint8_t)(t);
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    15ba:	4620      	mov	r0, r4
    15bc:	2270      	movs	r2, #112	; 0x70
    15be:	2100      	movs	r1, #0
    15c0:	f7ff fe3d 	bl	123e <_set>

	return TC_CRYPTO_SUCCESS;
    15c4:	2001      	movs	r0, #1
    15c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t i;

	/* input sanity check: */
	if (digest == (uint8_t *) 0 ||
	    s == (TCSha256State_t) 0) {
		return TC_CRYPTO_FAIL;
    15ca:	4608      	mov	r0, r1

	/* destroy the current state */
	_set(s, 0, sizeof(*s));

	return TC_CRYPTO_SUCCESS;
}
    15cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000015ce <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, uint32_t key_size)
{
    15ce:	b590      	push	{r4, r7, lr}
    15d0:	3901      	subs	r1, #1
    15d2:	af00      	add	r7, sp, #0
    15d4:	4402      	add	r2, r0
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	uint32_t i;

	for (i = 0; i < key_size; ++i) {
    15d6:	4603      	mov	r3, r0
    15d8:	4293      	cmp	r3, r2
    15da:	d00b      	beq.n	15f4 <rekey+0x26>
		key[i] = inner_pad ^ new_key[i];
    15dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    15e0:	f084 0436 	eor.w	r4, r4, #54	; 0x36
    15e4:	f803 4b01 	strb.w	r4, [r3], #1
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
    15e8:	780c      	ldrb	r4, [r1, #0]
    15ea:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
    15ee:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
    15f2:	e7f1      	b.n	15d8 <rekey+0xa>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    15f4:	2136      	movs	r1, #54	; 0x36
    15f6:	245c      	movs	r4, #92	; 0x5c

	for (i = 0; i < key_size; ++i) {
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
    15f8:	1a13      	subs	r3, r2, r0
    15fa:	2b3f      	cmp	r3, #63	; 0x3f
    15fc:	d804      	bhi.n	1608 <rekey+0x3a>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
    15fe:	f802 1b01 	strb.w	r1, [r2], #1
    1602:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
    1606:	e7f7      	b.n	15f8 <rekey+0x2a>
	}
}
    1608:	bd90      	pop	{r4, r7, pc}

0000160a <tc_hmac_set_key>:

int32_t tc_hmac_set_key(TCHmacState_t ctx,
			const uint8_t *key,
			uint32_t key_size)
{
    160a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    160e:	b0bc      	sub	sp, #240	; 0xf0
    1610:	460e      	mov	r6, r1
    1612:	af00      	add	r7, sp, #0
    1614:	4614      	mov	r4, r2
	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
    1616:	4605      	mov	r5, r0
    1618:	b370      	cbz	r0, 1678 <tc_hmac_set_key+0x6e>
    161a:	b371      	cbz	r1, 167a <tc_hmac_set_key+0x70>
	    key == (const uint8_t *) 0 ||
    161c:	b37a      	cbz	r2, 167e <tc_hmac_set_key+0x74>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
    161e:	1dd3      	adds	r3, r2, #7
    1620:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
    1624:	2a40      	cmp	r2, #64	; 0x40
	    key == (const uint8_t *) 0 ||
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
    1626:	ebad 0d03 	sub.w	sp, sp, r3
    162a:	f100 0870 	add.w	r8, r0, #112	; 0x70
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
    162e:	d80f      	bhi.n	1650 <tc_hmac_set_key+0x46>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
    1630:	4638      	mov	r0, r7
    1632:	f7ff ff07 	bl	1444 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
    1636:	4622      	mov	r2, r4
    1638:	4669      	mov	r1, sp
    163a:	4638      	mov	r0, r7
    163c:	f7ff ff2e 	bl	149c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
    1640:	4639      	mov	r1, r7
    1642:	f107 0090 	add.w	r0, r7, #144	; 0x90
    1646:	f7ff ff59 	bl	14fc <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
    164a:	4622      	mov	r2, r4
    164c:	4631      	mov	r1, r6
    164e:	e00e      	b.n	166e <tc_hmac_set_key+0x64>
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
    1650:	f7ff fef8 	bl	1444 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    1654:	4622      	mov	r2, r4
    1656:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    1658:	f105 0490 	add.w	r4, r5, #144	; 0x90

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
    165c:	4628      	mov	r0, r5
    165e:	f7ff ff1d 	bl	149c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
    1662:	4629      	mov	r1, r5
    1664:	4620      	mov	r0, r4
    1666:	f7ff ff49 	bl	14fc <tc_sha256_final>
				      &ctx->hash_state);
		rekey(ctx->key,
    166a:	2220      	movs	r2, #32
    166c:	4621      	mov	r1, r4
    166e:	4640      	mov	r0, r8
    1670:	f7ff ffad 	bl	15ce <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
    1674:	2001      	movs	r0, #1
    1676:	e003      	b.n	1680 <tc_hmac_set_key+0x76>
    1678:	e002      	b.n	1680 <tc_hmac_set_key+0x76>
{
	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
	    key == (const uint8_t *) 0 ||
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
    167a:	4608      	mov	r0, r1
    167c:	e000      	b.n	1680 <tc_hmac_set_key+0x76>
    167e:	4610      	mov	r0, r2
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
}
    1680:	37f0      	adds	r7, #240	; 0xf0
    1682:	46bd      	mov	sp, r7
    1684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001688 <tc_hmac_init>:

int32_t tc_hmac_init(TCHmacState_t ctx)
{
    1688:	b598      	push	{r3, r4, r7, lr}
	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    168a:	4604      	mov	r4, r0

	return TC_CRYPTO_SUCCESS;
}

int32_t tc_hmac_init(TCHmacState_t ctx)
{
    168c:	af00      	add	r7, sp, #0
	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    168e:	b148      	cbz	r0, 16a4 <tc_hmac_init+0x1c>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_init(&ctx->hash_state);
    1690:	f7ff fed8 	bl	1444 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
    1694:	2240      	movs	r2, #64	; 0x40
    1696:	f104 0170 	add.w	r1, r4, #112	; 0x70
    169a:	4620      	mov	r0, r4
    169c:	f7ff fefe 	bl	149c <tc_sha256_update>
			       ctx->key,
			       TC_SHA256_BLOCK_SIZE);

	return TC_CRYPTO_SUCCESS;
    16a0:	2001      	movs	r0, #1
    16a2:	bd98      	pop	{r3, r4, r7, pc}
}
    16a4:	bd98      	pop	{r3, r4, r7, pc}

000016a6 <tc_hmac_update>:

int32_t tc_hmac_update(TCHmacState_t ctx,
		       const void *data,
		       uint32_t data_length)
{
    16a6:	b580      	push	{r7, lr}
    16a8:	af00      	add	r7, sp, #0
	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
    16aa:	b118      	cbz	r0, 16b4 <tc_hmac_update+0xe>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
    16ac:	f7ff fef6 	bl	149c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
    16b0:	2001      	movs	r0, #1
    16b2:	bd80      	pop	{r7, pc}
}
    16b4:	bd80      	pop	{r7, pc}

000016b6 <tc_hmac_final>:

int32_t tc_hmac_final(uint8_t *tag, uint32_t taglen, TCHmacState_t ctx)
{
    16b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16b8:	460e      	mov	r6, r1
    16ba:	af00      	add	r7, sp, #0
    16bc:	4614      	mov	r4, r2
	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    16be:	4605      	mov	r5, r0
    16c0:	b1f0      	cbz	r0, 1700 <tc_hmac_final+0x4a>
    16c2:	2920      	cmp	r1, #32
    16c4:	d11d      	bne.n	1702 <tc_hmac_final+0x4c>
	    taglen != TC_SHA256_DIGEST_SIZE ||
    16c6:	b1f2      	cbz	r2, 1706 <tc_hmac_final+0x50>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
    16c8:	4611      	mov	r1, r2
    16ca:	f7ff ff17 	bl	14fc <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
    16ce:	4620      	mov	r0, r4
    16d0:	f7ff feb8 	bl	1444 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
    16d4:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
    16d8:	2240      	movs	r2, #64	; 0x40
    16da:	4620      	mov	r0, r4
    16dc:	f7ff fede 	bl	149c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
    16e0:	4632      	mov	r2, r6
    16e2:	4629      	mov	r1, r5
    16e4:	4620      	mov	r0, r4
    16e6:	f7ff fed9 	bl	149c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
    16ea:	4621      	mov	r1, r4
    16ec:	4628      	mov	r0, r5
    16ee:	f7ff ff05 	bl	14fc <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
    16f2:	4620      	mov	r0, r4
    16f4:	22f0      	movs	r2, #240	; 0xf0
    16f6:	2100      	movs	r1, #0
    16f8:	f7ff fda1 	bl	123e <_set>

	return TC_CRYPTO_SUCCESS;
    16fc:	2001      	movs	r0, #1
    16fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
	    taglen != TC_SHA256_DIGEST_SIZE ||
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
    1702:	2000      	movs	r0, #0
    1704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1706:	4610      	mov	r0, r2

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));

	return TC_CRYPTO_SUCCESS;
}
    1708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000170a <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, uint32_t len)
{
    170a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    170e:	b082      	sub	sp, #8
    1710:	4604      	mov	r4, r0
    1712:	af00      	add	r7, sp, #0
	const uint8_t separator0 = 0x00;
    1714:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    1716:	f504 7588 	add.w	r5, r4, #272	; 0x110
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, uint32_t len)
{
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
    171a:	f04f 0801 	mov.w	r8, #1
/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, uint32_t len)
{
	const uint8_t separator0 = 0x00;
    171e:	71bb      	strb	r3, [r7, #6]

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, uint32_t len)
{
    1720:	4689      	mov	r9, r1
    1722:	4692      	mov	sl, r2
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
    1724:	f887 8007 	strb.w	r8, [r7, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
    1728:	f7ff ffae 	bl	1688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    172c:	4629      	mov	r1, r5
    172e:	2220      	movs	r2, #32
    1730:	4620      	mov	r0, r4
    1732:	f7ff ffb8 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
    1736:	4642      	mov	r2, r8
    1738:	1db9      	adds	r1, r7, #6
    173a:	4620      	mov	r0, r4
    173c:	f7ff ffb3 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    1740:	f104 06f0 	add.w	r6, r4, #240	; 0xf0

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
	(void)tc_hmac_update(&prng->h, e, len);
    1744:	4652      	mov	r2, sl
    1746:	4649      	mov	r1, r9
    1748:	4620      	mov	r0, r4
    174a:	f7ff ffac 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    174e:	4622      	mov	r2, r4
    1750:	2120      	movs	r1, #32
    1752:	4630      	mov	r0, r6
    1754:	f7ff ffaf 	bl	16b6 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    1758:	4631      	mov	r1, r6
    175a:	2220      	movs	r2, #32
    175c:	4620      	mov	r0, r4
    175e:	f7ff ff54 	bl	160a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    1762:	4620      	mov	r0, r4
    1764:	f7ff ff90 	bl	1688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    1768:	4629      	mov	r1, r5
    176a:	2220      	movs	r2, #32
    176c:	4620      	mov	r0, r4
    176e:	f7ff ff9a 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    1772:	4622      	mov	r2, r4
    1774:	2120      	movs	r1, #32
    1776:	4628      	mov	r0, r5
    1778:	f7ff ff9d 	bl	16b6 <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
    177c:	4620      	mov	r0, r4
    177e:	f7ff ff83 	bl	1688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    1782:	4629      	mov	r1, r5
    1784:	2220      	movs	r2, #32
    1786:	4620      	mov	r0, r4
    1788:	f7ff ff8d 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
    178c:	4642      	mov	r2, r8
    178e:	1df9      	adds	r1, r7, #7
    1790:	4620      	mov	r0, r4
    1792:	f7ff ff88 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
    1796:	4652      	mov	r2, sl
    1798:	4649      	mov	r1, r9
    179a:	4620      	mov	r0, r4
    179c:	f7ff ff83 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
    17a0:	4622      	mov	r2, r4
    17a2:	2120      	movs	r1, #32
    17a4:	4630      	mov	r0, r6
    17a6:	f7ff ff86 	bl	16b6 <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    17aa:	4631      	mov	r1, r6
    17ac:	2220      	movs	r2, #32
    17ae:	4620      	mov	r0, r4
    17b0:	f7ff ff2b 	bl	160a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
    17b4:	4620      	mov	r0, r4
    17b6:	f7ff ff67 	bl	1688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    17ba:	4629      	mov	r1, r5
    17bc:	2220      	movs	r2, #32
    17be:	4620      	mov	r0, r4
    17c0:	f7ff ff71 	bl	16a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    17c4:	4622      	mov	r2, r4
    17c6:	2120      	movs	r1, #32
    17c8:	4628      	mov	r0, r5
    17ca:	f7ff ff74 	bl	16b6 <tc_hmac_final>
}
    17ce:	3708      	adds	r7, #8
    17d0:	46bd      	mov	sp, r7
    17d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000017d6 <tc_hmac_prng_init>:

int32_t tc_hmac_prng_init(TCHmacPrng_t prng,
			  const uint8_t *personalization,
			  uint32_t plen)
{
    17d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17da:	460c      	mov	r4, r1
    17dc:	af00      	add	r7, sp, #0
    17de:	4690      	mov	r8, r2
	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    17e0:	4605      	mov	r5, r0
    17e2:	b1e8      	cbz	r0, 1820 <tc_hmac_prng_init+0x4a>
	    personalization == (uint8_t *) 0 ||
    17e4:	b1f1      	cbz	r1, 1824 <tc_hmac_prng_init+0x4e>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
    17e6:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
    17ea:	4630      	mov	r0, r6
    17ec:	2220      	movs	r2, #32
    17ee:	2100      	movs	r1, #0
    17f0:	f7ff fd25 	bl	123e <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
    17f4:	f505 7088 	add.w	r0, r5, #272	; 0x110
    17f8:	2220      	movs	r2, #32
    17fa:	2101      	movs	r1, #1
    17fc:	f7ff fd1f 	bl	123e <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
    1800:	4631      	mov	r1, r6
    1802:	2220      	movs	r2, #32
    1804:	4628      	mov	r0, r5
    1806:	f7ff ff00 	bl	160a <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
    180a:	4628      	mov	r0, r5
    180c:	4642      	mov	r2, r8
    180e:	4621      	mov	r1, r4
    1810:	f7ff ff7b 	bl	170a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
    1814:	2300      	movs	r3, #0
    1816:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
    181a:	2001      	movs	r0, #1
    181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
	    personalization == (uint8_t *) 0 ||
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
    1824:	4608      	mov	r0, r1

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
}
    1826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000182a <tc_hmac_prng_reseed>:
int32_t tc_hmac_prng_reseed(TCHmacPrng_t prng,
			    const uint8_t *seed,
			    uint32_t seedlen,
			    const uint8_t *additional_input,
			    uint32_t additionallen)
{
    182a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    182e:	af00      	add	r7, sp, #0
    1830:	4696      	mov	lr, r2
    1832:	4698      	mov	r8, r3
    1834:	69bc      	ldr	r4, [r7, #24]
	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
    1836:	4605      	mov	r5, r0
    1838:	b190      	cbz	r0, 1860 <tc_hmac_prng_reseed+0x36>
    183a:	b199      	cbz	r1, 1864 <tc_hmac_prng_reseed+0x3a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
    183c:	2a1f      	cmp	r2, #31
    183e:	d914      	bls.n	186a <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
    1840:	b12b      	cbz	r3, 184e <tc_hmac_prng_reseed+0x24>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
    1842:	b1ac      	cbz	r4, 1870 <tc_hmac_prng_reseed+0x46>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
    1844:	f7ff ff61 	bl	170a <update>
		update(prng, additional_input, additionallen);
    1848:	4622      	mov	r2, r4
    184a:	4641      	mov	r1, r8
    184c:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
    184e:	f7ff ff5c 	bl	170a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
    1852:	f04f 33ff 	mov.w	r3, #4294967295
    1856:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
    185a:	2001      	movs	r0, #1
    185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
    1864:	4608      	mov	r0, r1
    1866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    186a:	2000      	movs	r0, #0
    186c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1870:	4620      	mov	r0, r4

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;

	return TC_CRYPTO_SUCCESS;
}
    1872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001876 <tc_hmac_prng_generate>:

int32_t tc_hmac_prng_generate(uint8_t *out, uint32_t outlen, TCHmacPrng_t prng)
{
    1876:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    187a:	460e      	mov	r6, r1
    187c:	af00      	add	r7, sp, #0
    187e:	4614      	mov	r4, r2
	uint32_t bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    1880:	4605      	mov	r5, r0
    1882:	b388      	cbz	r0, 18e8 <tc_hmac_prng_generate+0x72>
    1884:	b392      	cbz	r2, 18ec <tc_hmac_prng_generate+0x76>
	    prng == (TCHmacPrng_t) 0 ||
    1886:	1e4b      	subs	r3, r1, #1
    1888:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
    188c:	d231      	bcs.n	18f2 <tc_hmac_prng_generate+0x7c>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
    188e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    1892:	b38b      	cbz	r3, 18f8 <tc_hmac_prng_generate+0x82>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
    1894:	3b01      	subs	r3, #1
    1896:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    189a:	f502 7888 	add.w	r8, r2, #272	; 0x110

	prng->countdown--;

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
    189e:	4620      	mov	r0, r4
    18a0:	f7ff fef2 	bl	1688 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
    18a4:	2220      	movs	r2, #32
    18a6:	4641      	mov	r1, r8
    18a8:	4620      	mov	r0, r4
    18aa:	f7ff fefc 	bl	16a6 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
    18ae:	4622      	mov	r2, r4
    18b0:	2120      	movs	r1, #32
    18b2:	4640      	mov	r0, r8
    18b4:	f7ff feff 	bl	16b6 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
    18b8:	2e20      	cmp	r6, #32
    18ba:	46b1      	mov	r9, r6
    18bc:	bf28      	it	cs
    18be:	f04f 0920 	movcs.w	r9, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
    18c2:	4628      	mov	r0, r5
    18c4:	464b      	mov	r3, r9
    18c6:	4642      	mov	r2, r8
    18c8:	4649      	mov	r1, r9
    18ca:	f7ff fcaa 	bl	1222 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
    18ce:	2e20      	cmp	r6, #32

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);

		out += bufferlen;
    18d0:	444d      	add	r5, r9
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
    18d2:	d807      	bhi.n	18e4 <tc_hmac_prng_generate+0x6e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
    18d4:	4620      	mov	r0, r4
    18d6:	2220      	movs	r2, #32
    18d8:	4641      	mov	r1, r8
    18da:	f7ff ff16 	bl	170a <update>

	return TC_CRYPTO_SUCCESS;
    18de:	2001      	movs	r0, #1
    18e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
    18e4:	3e20      	subs	r6, #32
    18e6:	e7da      	b.n	189e <tc_hmac_prng_generate+0x28>
    18e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
	    prng == (TCHmacPrng_t) 0 ||
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
    18ec:	4610      	mov	r0, r2
    18ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    18f2:	2000      	movs	r0, #0
    18f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (prng->countdown == 0) {
		return TC_HMAC_PRNG_RESEED_REQ;
    18f8:	f04f 30ff 	mov.w	r0, #4294967295

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);

	return TC_CRYPTO_SUCCESS;
}
    18fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001900 <net_buf_user_data>:
 *  @param buf A valid pointer on a buffer
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
    1900:	b580      	push	{r7, lr}
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    1902:	8ac3      	ldrh	r3, [r0, #22]
    1904:	4418      	add	r0, r3
    1906:	301b      	adds	r0, #27
 *  @param buf A valid pointer on a buffer
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
    1908:	af00      	add	r7, sp, #0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
}
    190a:	f020 0003 	bic.w	r0, r0, #3
    190e:	bd80      	pop	{r7, pc}

00001910 <ver_str>:
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(uint8_t ver)
{
    1910:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char * const str[] = {
    1912:	4d0b      	ldr	r5, [pc, #44]	; (1940 <ver_str+0x30>)
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(uint8_t ver)
{
    1914:	b08b      	sub	sp, #44	; 0x2c
    1916:	4606      	mov	r6, r0
	const char * const str[] = {
    1918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	return 0;
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(uint8_t ver)
{
    191a:	af00      	add	r7, sp, #0
	const char * const str[] = {
    191c:	1d3c      	adds	r4, r7, #4
    191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
	};

	if (ver < ARRAY_SIZE(str)) {
    1924:	2e08      	cmp	r6, #8
}

#if defined(CONFIG_BLUETOOTH_DEBUG)
static const char *ver_str(uint8_t ver)
{
	const char * const str[] = {
    1926:	682b      	ldr	r3, [r5, #0]
    1928:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
	};

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
    192a:	bf9b      	ittet	ls
    192c:	f107 0328 	addls.w	r3, r7, #40	; 0x28
    1930:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
    1934:	4803      	ldrhi	r0, [pc, #12]	; (1944 <ver_str+0x34>)
	const char * const str[] = {
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
	};

	if (ver < ARRAY_SIZE(str)) {
		return str[ver];
    1936:	f856 0c24 	ldrls.w	r0, [r6, #-36]
	}

	return "unknown";
}
    193a:	372c      	adds	r7, #44	; 0x2c
    193c:	46bd      	mov	sp, r7
    193e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1940:	0000da74 	.word	0x0000da74
    1944:	0000dcf5 	.word	0x0000dcf5

00001948 <atomic_or>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
    1948:	b580      	push	{r7, lr}
    194a:	af00      	add	r7, sp, #0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
}
    194c:	f3bf 8f5f 	dmb	sy
    1950:	e850 3f00 	ldrex	r3, [r0]
    1954:	ea43 0201 	orr.w	r2, r3, r1
    1958:	e840 2e00 	strex	lr, r2, [r0]
    195c:	f1be 0f00 	cmp.w	lr, #0
    1960:	d1f6      	bne.n	1950 <atomic_or+0x8>
    1962:	f3bf 8f5f 	dmb	sy
    1966:	4618      	mov	r0, r3
    1968:	bd80      	pop	{r7, pc}

0000196a <atomic_and>:
 *
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
    196a:	b580      	push	{r7, lr}
    196c:	af00      	add	r7, sp, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
}
    196e:	f3bf 8f5f 	dmb	sy
    1972:	e850 3f00 	ldrex	r3, [r0]
    1976:	ea03 0201 	and.w	r2, r3, r1
    197a:	e840 2e00 	strex	lr, r2, [r0]
    197e:	f1be 0f00 	cmp.w	lr, #0
    1982:	d1f6      	bne.n	1972 <atomic_and+0x8>
    1984:	f3bf 8f5f 	dmb	sy
    1988:	4618      	mov	r0, r3
    198a:	bd80      	pop	{r7, pc}

0000198c <hci_cmd_done>:
	/* we only allow to enable once so this bit must be keep set */
	atomic_set(bt_dev.flags, BIT(BT_DEV_ENABLE));
}

static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
{
    198c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1990:	b085      	sub	sp, #20
    1992:	4680      	mov	r8, r0
    1994:	af04      	add	r7, sp, #16
    1996:	4691      	mov	r9, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    1998:	f04f 0320 	mov.w	r3, #32
    199c:	f3ef 8511 	mrs	r5, BASEPRI
    19a0:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *sent;
	int key = irq_lock();

	sent = bt_dev.sent_cmd;
    19a4:	4e1e      	ldr	r6, [pc, #120]	; (1a20 <hci_cmd_done+0x94>)
    19a6:	f8d6 40a8 	ldr.w	r4, [r6, #168]	; 0xa8
	if (!sent) {
    19aa:	b194      	cbz	r4, 19d2 <hci_cmd_done+0x46>
		irq_unlock(key);
		return;
	}

	if (cmd(sent)->opcode != opcode) {
    19ac:	4620      	mov	r0, r4
    19ae:	f7ff ffa7 	bl	1900 <net_buf_user_data>
    19b2:	8843      	ldrh	r3, [r0, #2]
    19b4:	4543      	cmp	r3, r8
    19b6:	d012      	beq.n	19de <hci_cmd_done+0x52>
		BT_ERR("Unexpected completion of opcode 0x%04x expected 0x%04x",
    19b8:	4a1a      	ldr	r2, [pc, #104]	; (1a24 <hci_cmd_done+0x98>)
    19ba:	9302      	str	r3, [sp, #8]
    19bc:	4b1a      	ldr	r3, [pc, #104]	; (1a28 <hci_cmd_done+0x9c>)
    19be:	9203      	str	r2, [sp, #12]
    19c0:	9300      	str	r3, [sp, #0]
    19c2:	f8cd 8004 	str.w	r8, [sp, #4]
    19c6:	4b19      	ldr	r3, [pc, #100]	; (1a2c <hci_cmd_done+0xa0>)
    19c8:	4a19      	ldr	r2, [pc, #100]	; (1a30 <hci_cmd_done+0xa4>)
    19ca:	491a      	ldr	r1, [pc, #104]	; (1a34 <hci_cmd_done+0xa8>)
    19cc:	481a      	ldr	r0, [pc, #104]	; (1a38 <hci_cmd_done+0xac>)
    19ce:	f7ff fbed 	bl	11ac <printk>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    19d2:	f385 8811 	msr	BASEPRI, r5

		k_sem_give(sem);
	} else {
		net_buf_unref(sent);
	}
}
    19d6:	3704      	adds	r7, #4
    19d8:	46bd      	mov	sp, r7
    19da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		       opcode, cmd(sent)->opcode);
		irq_unlock(key);
		return;
	}

	bt_dev.sent_cmd = NULL;
    19de:	2200      	movs	r2, #0
    19e0:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
    19e4:	f385 8811 	msr	BASEPRI, r5

	irq_unlock(key);

	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(sent)->sync) {
    19e8:	4620      	mov	r0, r4
    19ea:	f7ff ff89 	bl	1900 <net_buf_user_data>
    19ee:	6846      	ldr	r6, [r0, #4]
    19f0:	4605      	mov	r5, r0
    19f2:	b16e      	cbz	r6, 1a10 <hci_cmd_done+0x84>
		struct k_sem *sem = cmd(sent)->sync;

		if (status) {
    19f4:	b109      	cbz	r1, 19fa <hci_cmd_done+0x6e>
			cmd(sent)->sync = NULL;
    19f6:	6042      	str	r2, [r0, #4]
    19f8:	e003      	b.n	1a02 <hci_cmd_done+0x76>
		} else {
			cmd(sent)->sync = net_buf_ref(buf);
    19fa:	4648      	mov	r0, r9
    19fc:	f00a faac 	bl	bf58 <net_buf_ref>
    1a00:	6068      	str	r0, [r5, #4]
		}

		k_sem_give(sem);
    1a02:	4630      	mov	r0, r6
	} else {
		net_buf_unref(sent);
	}
}
    1a04:	3704      	adds	r7, #4
    1a06:	46bd      	mov	sp, r7
    1a08:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			cmd(sent)->sync = NULL;
		} else {
			cmd(sent)->sync = net_buf_ref(buf);
		}

		k_sem_give(sem);
    1a0c:	f00b bcd7 	b.w	d3be <k_sem_give>
	} else {
		net_buf_unref(sent);
    1a10:	4620      	mov	r0, r4
	}
}
    1a12:	3704      	adds	r7, #4
    1a14:	46bd      	mov	sp, r7
    1a16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			cmd(sent)->sync = net_buf_ref(buf);
		}

		k_sem_give(sem);
	} else {
		net_buf_unref(sent);
    1a1a:	f00a ba87 	b.w	bf2c <net_buf_unref>
    1a1e:	bf00      	nop
    1a20:	20000060 	.word	0x20000060
    1a24:	0000dd4e 	.word	0x0000dd4e
    1a28:	0000dd53 	.word	0x0000dd53
    1a2c:	0000ee5f 	.word	0x0000ee5f
    1a30:	0000dcfd 	.word	0x0000dcfd
    1a34:	0000dd04 	.word	0x0000dd04
    1a38:	0000dd07 	.word	0x0000dd07

00001a3c <bt_addr_le_to_str.constprop.18>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1a3c:	b5b0      	push	{r4, r5, r7, lr}
    1a3e:	b088      	sub	sp, #32
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    1a40:	7803      	ldrb	r3, [r0, #0]
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    1a42:	af06      	add	r7, sp, #24
    1a44:	4604      	mov	r4, r0
    1a46:	460d      	mov	r5, r1
				    size_t len)
{
	char type[7];

	switch (addr->type) {
    1a48:	b11b      	cbz	r3, 1a52 <bt_addr_le_to_str.constprop.18+0x16>
    1a4a:	2b01      	cmp	r3, #1
    1a4c:	d106      	bne.n	1a5c <bt_addr_le_to_str.constprop.18+0x20>
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1a4e:	4910      	ldr	r1, [pc, #64]	; (1a90 <bt_addr_le_to_str.constprop.18+0x54>)
    1a50:	e000      	b.n	1a54 <bt_addr_le_to_str.constprop.18+0x18>
{
	char type[7];

	switch (addr->type) {
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    1a52:	4910      	ldr	r1, [pc, #64]	; (1a94 <bt_addr_le_to_str.constprop.18+0x58>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    1a54:	4638      	mov	r0, r7
    1a56:	f7ff f9cf 	bl	df8 <strcpy>
    1a5a:	e004      	b.n	1a66 <bt_addr_le_to_str.constprop.18+0x2a>
		break;
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    1a5c:	4a0e      	ldr	r2, [pc, #56]	; (1a98 <bt_addr_le_to_str.constprop.18+0x5c>)
    1a5e:	2107      	movs	r1, #7
    1a60:	4638      	mov	r0, r7
    1a62:	f7ff fbbb 	bl	11dc <snprintk>
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    1a66:	7862      	ldrb	r2, [r4, #1]
    1a68:	9204      	str	r2, [sp, #16]
    1a6a:	78a2      	ldrb	r2, [r4, #2]
    1a6c:	9203      	str	r2, [sp, #12]
    1a6e:	78e2      	ldrb	r2, [r4, #3]
    1a70:	9202      	str	r2, [sp, #8]
    1a72:	7922      	ldrb	r2, [r4, #4]
    1a74:	9201      	str	r2, [sp, #4]
    1a76:	7962      	ldrb	r2, [r4, #5]
    1a78:	9705      	str	r7, [sp, #20]
    1a7a:	9200      	str	r2, [sp, #0]
    1a7c:	79a3      	ldrb	r3, [r4, #6]
    1a7e:	4a07      	ldr	r2, [pc, #28]	; (1a9c <bt_addr_le_to_str.constprop.18+0x60>)
    1a80:	211b      	movs	r1, #27
    1a82:	4628      	mov	r0, r5
    1a84:	f7ff fbaa 	bl	11dc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    1a88:	3708      	adds	r7, #8
    1a8a:	46bd      	mov	sp, r7
    1a8c:	bdb0      	pop	{r4, r5, r7, pc}
    1a8e:	bf00      	nop
    1a90:	0000dd62 	.word	0x0000dd62
    1a94:	0000dd5b 	.word	0x0000dd5b
    1a98:	0000dd69 	.word	0x0000dd69
    1a9c:	0000dd70 	.word	0x0000dd70

00001aa0 <atomic_test_bit.constprop.26>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1aa0:	b580      	push	{r7, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1aa2:	4b08      	ldr	r3, [pc, #32]	; (1ac4 <atomic_test_bit.constprop.26+0x24>)
    1aa4:	f3bf 8f5f 	dmb	sy
    1aa8:	0942      	lsrs	r2, r0, #5
    1aaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1aae:	f000 001f 	and.w	r0, r0, #31
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1ab4:	f3bf 8f5f 	dmb	sy
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    1ab8:	fa43 f000 	asr.w	r0, r3, r0
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
    1abc:	af00      	add	r7, sp, #0
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
}
    1abe:	f000 0001 	and.w	r0, r0, #1
    1ac2:	bd80      	pop	{r7, pc}
    1ac4:	20000060 	.word	0x20000060

00001ac8 <bt_hci_cmd_create>:
	return str;
}
#endif /* CONFIG_BLUETOOTH_DEBUG */

struct net_buf *bt_hci_cmd_create(uint16_t opcode, uint8_t param_len)
{
    1ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1acc:	4605      	mov	r5, r0
    1ace:	af00      	add	r7, sp, #0
    1ad0:	460e      	mov	r6, r1
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ad2:	4810      	ldr	r0, [pc, #64]	; (1b14 <bt_hci_cmd_create+0x4c>)
    1ad4:	f04f 31ff 	mov.w	r1, #4294967295
    1ad8:	f00a f9bc 	bl	be54 <net_buf_alloc>

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_SEND_RESERVE);
    1adc:	2100      	movs	r1, #0
	struct bt_hci_cmd_hdr *hdr;
	struct net_buf *buf;

	BT_DBG("opcode 0x%04x param_len %u", opcode, param_len);

	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    1ade:	4604      	mov	r4, r0

	BT_DBG("buf %p", buf);

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_SEND_RESERVE);
    1ae0:	f00a fa0e 	bl	bf00 <net_buf_reserve>

	cmd(buf)->type = BT_BUF_CMD;
    1ae4:	4620      	mov	r0, r4
    1ae6:	f7ff ff0b 	bl	1900 <net_buf_user_data>
    1aea:	2200      	movs	r2, #0
    1aec:	7002      	strb	r2, [r0, #0]
	cmd(buf)->opcode = opcode;
    1aee:	4620      	mov	r0, r4
    1af0:	f7ff ff06 	bl	1900 <net_buf_user_data>
    1af4:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    1af6:	4620      	mov	r0, r4
    1af8:	f7ff ff02 	bl	1900 <net_buf_user_data>

	hdr = net_buf_add(buf, sizeof(*hdr));
    1afc:	2103      	movs	r1, #3

	net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_SEND_RESERVE);

	cmd(buf)->type = BT_BUF_CMD;
	cmd(buf)->opcode = opcode;
	cmd(buf)->sync = NULL;
    1afe:	6042      	str	r2, [r0, #4]

	hdr = net_buf_add(buf, sizeof(*hdr));
    1b00:	f104 0010 	add.w	r0, r4, #16
    1b04:	f00a fa2e 	bl	bf64 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
	hdr->param_len = param_len;
    1b08:	7086      	strb	r6, [r0, #2]
	cmd(buf)->type = BT_BUF_CMD;
	cmd(buf)->opcode = opcode;
	cmd(buf)->sync = NULL;

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->opcode = sys_cpu_to_le16(opcode);
    1b0a:	8005      	strh	r5, [r0, #0]
	hdr->param_len = param_len;

	return buf;
}
    1b0c:	4620      	mov	r0, r4
    1b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b12:	bf00      	nop
    1b14:	20000040 	.word	0x20000040

00001b18 <bt_hci_cmd_send_sync>:
	return 0;
}

int bt_hci_cmd_send_sync(uint16_t opcode, struct net_buf *buf,
			 struct net_buf **rsp)
{
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b1a:	b085      	sub	sp, #20
    1b1c:	4616      	mov	r6, r2
    1b1e:	af00      	add	r7, sp, #0
	struct k_sem sync_sem;
	int err;

	if (!buf) {
    1b20:	460d      	mov	r5, r1
    1b22:	b919      	cbnz	r1, 1b2c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    1b24:	f7ff ffd0 	bl	1ac8 <bt_hci_cmd_create>
		if (!buf) {
    1b28:	4605      	mov	r5, r0
    1b2a:	b1b8      	cbz	r0, 1b5c <bt_hci_cmd_send_sync+0x44>
		}
	}

	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
    1b2c:	2201      	movs	r2, #1
    1b2e:	2100      	movs	r1, #0
    1b30:	4638      	mov	r0, r7
    1b32:	f00b fc3d 	bl	d3b0 <k_sem_init>
	cmd(buf)->sync = &sync_sem;
    1b36:	4628      	mov	r0, r5
    1b38:	f7ff fee2 	bl	1900 <net_buf_user_data>

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1b3c:	4629      	mov	r1, r5
	}

	BT_DBG("opcode 0x%04x len %u", opcode, buf->len);

	k_sem_init(&sync_sem, 0, 1);
	cmd(buf)->sync = &sync_sem;
    1b3e:	6047      	str	r7, [r0, #4]

	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    1b40:	4812      	ldr	r0, [pc, #72]	; (1b8c <bt_hci_cmd_send_sync+0x74>)
    1b42:	f00a f9e4 	bl	bf0e <net_buf_put>

	k_sem_take(&sync_sem, K_FOREVER);
    1b46:	f04f 31ff 	mov.w	r1, #4294967295
    1b4a:	4638      	mov	r0, r7
    1b4c:	f00b fc4b 	bl	d3e6 <k_sem_take>

	/* Indicate failure if we failed to get the return parameters */
	if (!cmd(buf)->sync) {
    1b50:	4628      	mov	r0, r5
    1b52:	f7ff fed5 	bl	1900 <net_buf_user_data>
    1b56:	6840      	ldr	r0, [r0, #4]
    1b58:	b918      	cbnz	r0, 1b62 <bt_hci_cmd_send_sync+0x4a>
    1b5a:	e00e      	b.n	1b7a <bt_hci_cmd_send_sync+0x62>
	int err;

	if (!buf) {
		buf = bt_hci_cmd_create(opcode, 0);
		if (!buf) {
			return -ENOBUFS;
    1b5c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1b60:	e010      	b.n	1b84 <bt_hci_cmd_send_sync+0x6c>
		err = -EIO;
	} else {
		err = 0;
	}

	if (rsp) {
    1b62:	b116      	cbz	r6, 1b6a <bt_hci_cmd_send_sync+0x52>

	/* Indicate failure if we failed to get the return parameters */
	if (!cmd(buf)->sync) {
		err = -EIO;
	} else {
		err = 0;
    1b64:	2400      	movs	r4, #0
	}

	if (rsp) {
		*rsp = cmd(buf)->sync;
    1b66:	6030      	str	r0, [r6, #0]
    1b68:	e002      	b.n	1b70 <bt_hci_cmd_send_sync+0x58>
	} else if (cmd(buf)->sync) {
		net_buf_unref(cmd(buf)->sync);
    1b6a:	f00a f9df 	bl	bf2c <net_buf_unref>

	/* Indicate failure if we failed to get the return parameters */
	if (!cmd(buf)->sync) {
		err = -EIO;
	} else {
		err = 0;
    1b6e:	4634      	mov	r4, r6
		*rsp = cmd(buf)->sync;
	} else if (cmd(buf)->sync) {
		net_buf_unref(cmd(buf)->sync);
	}

	net_buf_unref(buf);
    1b70:	4628      	mov	r0, r5
    1b72:	f00a f9db 	bl	bf2c <net_buf_unref>

	return err;
    1b76:	4620      	mov	r0, r4
    1b78:	e004      	b.n	1b84 <bt_hci_cmd_send_sync+0x6c>

	k_sem_take(&sync_sem, K_FOREVER);

	/* Indicate failure if we failed to get the return parameters */
	if (!cmd(buf)->sync) {
		err = -EIO;
    1b7a:	f06f 0404 	mvn.w	r4, #4
	} else {
		err = 0;
	}

	if (rsp) {
    1b7e:	2e00      	cmp	r6, #0
    1b80:	d1f1      	bne.n	1b66 <bt_hci_cmd_send_sync+0x4e>
    1b82:	e7f5      	b.n	1b70 <bt_hci_cmd_send_sync+0x58>
	}

	net_buf_unref(buf);

	return err;
}
    1b84:	3714      	adds	r7, #20
    1b86:	46bd      	mov	sp, r7
    1b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b8a:	bf00      	nop
    1b8c:	2000011c 	.word	0x2000011c

00001b90 <set_random_address>:

	return 0;
}

static int set_random_address(const bt_addr_t *addr)
{
    1b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#define BT_ADDR_ANY    (&(bt_addr_t) {{0, 0, 0, 0, 0, 0} })
#define BT_ADDR_LE_ANY (&(bt_addr_le_t) { 0, { {0, 0, 0, 0, 0, 0} } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    1b92:	4d15      	ldr	r5, [pc, #84]	; (1be8 <set_random_address+0x58>)
    1b94:	af00      	add	r7, sp, #0
    1b96:	2206      	movs	r2, #6
    1b98:	f105 0108 	add.w	r1, r5, #8
    1b9c:	4606      	mov	r6, r0
    1b9e:	f7ff f946 	bl	e2e <memcmp>
	int err;

	BT_DBG("%s", bt_addr_str(addr));

	/* Do nothing if we already have the right address */
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    1ba2:	b300      	cbz	r0, 1be6 <set_random_address+0x56>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    1ba4:	2106      	movs	r1, #6
    1ba6:	f242 0005 	movw	r0, #8197	; 0x2005
    1baa:	f7ff ff8d 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    1bae:	4604      	mov	r4, r0
    1bb0:	b1a8      	cbz	r0, 1bde <set_random_address+0x4e>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, addr, sizeof(*addr));
    1bb2:	2206      	movs	r2, #6
    1bb4:	4631      	mov	r1, r6
    1bb6:	3010      	adds	r0, #16
    1bb8:	f00a f9dc 	bl	bf74 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    1bbc:	4621      	mov	r1, r4
    1bbe:	2200      	movs	r2, #0
    1bc0:	f242 0005 	movw	r0, #8197	; 0x2005
    1bc4:	f7ff ffa8 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1bc8:	4604      	mov	r4, r0
    1bca:	b958      	cbnz	r0, 1be4 <set_random_address+0x54>
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    1bcc:	2206      	movs	r2, #6
    1bce:	4631      	mov	r1, r6
    1bd0:	f105 0008 	add.w	r0, r5, #8
    1bd4:	f7ff f943 	bl	e5e <memcpy>
		return err;
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    1bd8:	2301      	movs	r3, #1
    1bda:	71eb      	strb	r3, [r5, #7]
    1bdc:	e002      	b.n	1be4 <set_random_address+0x54>
		return 0;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
	if (!buf) {
		return -ENOBUFS;
    1bde:	f06f 0036 	mvn.w	r0, #54	; 0x36
    1be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1be4:	4620      	mov	r0, r4
	}

	bt_addr_copy(&bt_dev.random_addr.a, addr);
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
	return 0;
}
    1be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1be8:	20000060 	.word	0x20000060

00001bec <bt_hci_stop_scanning>:

	return err;
}

static int bt_hci_stop_scanning(void)
{
    1bec:	b5b0      	push	{r4, r5, r7, lr}
    1bee:	b082      	sub	sp, #8
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1bf0:	2007      	movs	r0, #7

	return err;
}

static int bt_hci_stop_scanning(void)
{
    1bf2:	af00      	add	r7, sp, #0
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1bf4:	f7ff ff54 	bl	1aa0 <atomic_test_bit.constprop.26>
    1bf8:	b360      	cbz	r0, 1c54 <bt_hci_stop_scanning+0x68>
		return -EALREADY;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    1bfa:	2102      	movs	r1, #2
    1bfc:	f242 000c 	movw	r0, #8204	; 0x200c
    1c00:	f7ff ff62 	bl	1ac8 <bt_hci_cmd_create>
				sizeof(*scan_enable));
	if (!buf) {
    1c04:	4604      	mov	r4, r0
    1c06:	b340      	cbz	r0, 1c5a <bt_hci_stop_scanning+0x6e>
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1c08:	2102      	movs	r1, #2
    1c0a:	3010      	adds	r0, #16
    1c0c:	f00a f9aa 	bl	bf64 <net_buf_simple_add>
	memset(scan_enable, 0, sizeof(*scan_enable));
    1c10:	2202      	movs	r2, #2
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
	}

	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    1c12:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    1c14:	2100      	movs	r1, #0
    1c16:	f7ff f94f 	bl	eb8 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    1c1a:	2300      	movs	r3, #0
    1c1c:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    1c1e:	702b      	strb	r3, [r5, #0]

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    1c20:	1d3a      	adds	r2, r7, #4
    1c22:	4621      	mov	r1, r4
    1c24:	f242 000c 	movw	r0, #8204	; 0x200c
    1c28:	f7ff ff76 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1c2c:	b9b8      	cbnz	r0, 1c5e <bt_hci_stop_scanning+0x72>
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	691b      	ldr	r3, [r3, #16]
    1c32:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    1c34:	b94c      	cbnz	r4, 1c4a <bt_hci_stop_scanning+0x5e>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c36:	f06f 0180 	mvn.w	r1, #128	; 0x80
    1c3a:	480a      	ldr	r0, [pc, #40]	; (1c64 <bt_hci_stop_scanning+0x78>)
    1c3c:	f7ff fe95 	bl	196a <atomic_and>
    1c40:	f46f 7100 	mvn.w	r1, #512	; 0x200
    1c44:	4807      	ldr	r0, [pc, #28]	; (1c64 <bt_hci_stop_scanning+0x78>)
    1c46:	f7ff fe90 	bl	196a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_SCANNING);
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);
    1c4a:	6878      	ldr	r0, [r7, #4]
    1c4c:	f00a f96e 	bl	bf2c <net_buf_unref>
	if (err) {
		return err;
	}

	/* Update scan state in case of success (0) status */
	err = rsp->data[0];
    1c50:	4620      	mov	r0, r4
		atomic_clear_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN);
	}

	net_buf_unref(rsp);

	return err;
    1c52:	e004      	b.n	1c5e <bt_hci_stop_scanning+0x72>
	struct net_buf *buf, *rsp;
	struct bt_hci_cp_le_set_scan_enable *scan_enable;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		return -EALREADY;
    1c54:	f06f 0044 	mvn.w	r0, #68	; 0x44
    1c58:	e001      	b.n	1c5e <bt_hci_stop_scanning+0x72>
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
				sizeof(*scan_enable));
	if (!buf) {
		return -ENOBUFS;
    1c5a:	f06f 0036 	mvn.w	r0, #54	; 0x36
	}

	net_buf_unref(rsp);

	return err;
}
    1c5e:	3708      	adds	r7, #8
    1c60:	46bd      	mov	sp, r7
    1c62:	bdb0      	pop	{r4, r5, r7, pc}
    1c64:	200000cc 	.word	0x200000cc

00001c68 <set_ad>:

	return true;
}

static int set_ad(uint16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c6c:	460c      	mov	r4, r1
    1c6e:	af00      	add	r7, sp, #0
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1c70:	2120      	movs	r1, #32

	return true;
}

static int set_ad(uint16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    1c72:	4680      	mov	r8, r0
    1c74:	4691      	mov	r9, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    1c76:	f7ff ff27 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    1c7a:	4606      	mov	r6, r0
    1c7c:	2800      	cmp	r0, #0
    1c7e:	d042      	beq.n	1d06 <set_ad+0x9e>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1c80:	2120      	movs	r1, #32
    1c82:	3010      	adds	r0, #16
    1c84:	f00a f96e 	bl	bf64 <net_buf_simple_add>

	memset(set_data, 0, sizeof(*set_data));
    1c88:	2220      	movs	r2, #32
    1c8a:	2100      	movs	r1, #0
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    1c8c:	4605      	mov	r5, r0

	memset(set_data, 0, sizeof(*set_data));
    1c8e:	f7ff f913 	bl	eb8 <memset>

	for (i = 0; i < ad_len; i++) {
    1c92:	f04f 0a00 	mov.w	sl, #0
    1c96:	45ca      	cmp	sl, r9
    1c98:	d02d      	beq.n	1cf6 <set_ad+0x8e>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    1c9a:	7863      	ldrb	r3, [r4, #1]
    1c9c:	7828      	ldrb	r0, [r5, #0]
    1c9e:	4403      	add	r3, r0
    1ca0:	3302      	adds	r3, #2
    1ca2:	2b1f      	cmp	r3, #31
    1ca4:	f104 0408 	add.w	r4, r4, #8
    1ca8:	dd06      	ble.n	1cb8 <set_ad+0x50>
			net_buf_unref(buf);
    1caa:	4630      	mov	r0, r6
    1cac:	f00a f93e 	bl	bf2c <net_buf_unref>
			return -EINVAL;
    1cb0:	f06f 0015 	mvn.w	r0, #21
    1cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1cb8:	1c43      	adds	r3, r0, #1
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	702b      	strb	r3, [r5, #0]
    1cbe:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    1cc2:	1829      	adds	r1, r5, r0
		set_data->data[set_data->len++] = ad[i].type;
    1cc4:	3002      	adds	r0, #2
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1cc6:	3201      	adds	r2, #1
		set_data->data[set_data->len++] = ad[i].type;
    1cc8:	b2c0      	uxtb	r0, r0
		if (set_data->len + ad[i].data_len + 2 > 31) {
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    1cca:	704a      	strb	r2, [r1, #1]
		set_data->data[set_data->len++] = ad[i].type;
    1ccc:	442b      	add	r3, r5
    1cce:	7028      	strb	r0, [r5, #0]
    1cd0:	f814 2c08 	ldrb.w	r2, [r4, #-8]
    1cd4:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    1cd6:	4428      	add	r0, r5
    1cd8:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    1cdc:	f854 1c04 	ldr.w	r1, [r4, #-4]
    1ce0:	3001      	adds	r0, #1
    1ce2:	f7ff f8bc 	bl	e5e <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    1ce6:	782a      	ldrb	r2, [r5, #0]
    1ce8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    1cec:	4413      	add	r3, r2
    1cee:	702b      	strb	r3, [r5, #0]

	set_data = net_buf_add(buf, sizeof(*set_data));

	memset(set_data, 0, sizeof(*set_data));

	for (i = 0; i < ad_len; i++) {
    1cf0:	f10a 0a01 	add.w	sl, sl, #1
    1cf4:	e7cf      	b.n	1c96 <set_ad+0x2e>
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    1cf6:	2200      	movs	r2, #0
    1cf8:	4631      	mov	r1, r6
    1cfa:	4640      	mov	r0, r8
}
    1cfc:	46bd      	mov	sp, r7
    1cfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		memcpy(&set_data->data[set_data->len], ad[i].data,
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    1d02:	f7ff bf09 	b.w	1b18 <bt_hci_cmd_send_sync>
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
	if (!buf) {
		return -ENOBUFS;
    1d06:	f06f 0036 	mvn.w	r0, #54	; 0x36
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
}
    1d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00001d10 <prng_reseed.constprop.17>:
	if (evt->ncmd) {
		k_sem_give(&bt_dev.ncmd_sem);
	}
}

static int prng_reseed(struct tc_hmac_prng_struct *h)
    1d10:	b5b0      	push	{r4, r5, r7, lr}
    1d12:	b08c      	sub	sp, #48	; 0x30
    1d14:	2500      	movs	r5, #0
    1d16:	af02      	add	r7, sp, #8

	for (i = 0; i < (sizeof(seed) / 8); i++) {
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    1d18:	463a      	mov	r2, r7
    1d1a:	2100      	movs	r1, #0
    1d1c:	f242 0018 	movw	r0, #8216	; 0x2018
    1d20:	f7ff fefa 	bl	1b18 <bt_hci_cmd_send_sync>
		if (ret) {
    1d24:	4604      	mov	r4, r0
    1d26:	bb40      	cbnz	r0, 1d7a <prng_reseed.constprop.17+0x6a>
			return ret;
		}

		rp = (void *)rsp->data;
    1d28:	683b      	ldr	r3, [r7, #0]
		memcpy(&seed[i * 8], rp->rand, 8);
    1d2a:	2208      	movs	r2, #8
    1d2c:	6919      	ldr	r1, [r3, #16]
    1d2e:	18bb      	adds	r3, r7, r2
    1d30:	1958      	adds	r0, r3, r5
    1d32:	3101      	adds	r1, #1
    1d34:	f7ff f893 	bl	e5e <memcpy>
    1d38:	3508      	adds	r5, #8

		net_buf_unref(rsp);
    1d3a:	6838      	ldr	r0, [r7, #0]
    1d3c:	f00a f8f6 	bl	bf2c <net_buf_unref>
{
	uint8_t seed[32];
	int64_t extra;
	int ret, i;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
    1d40:	2d20      	cmp	r5, #32
    1d42:	d1e9      	bne.n	1d18 <prng_reseed.constprop.17+0x8>
		memcpy(&seed[i * 8], rp->rand, 8);

		net_buf_unref(rsp);
	}

	extra = k_uptime_get();
    1d44:	f00b fb7e 	bl	d444 <k_uptime_get>

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    1d48:	2308      	movs	r3, #8
		memcpy(&seed[i * 8], rp->rand, 8);

		net_buf_unref(rsp);
	}

	extra = k_uptime_get();
    1d4a:	e9c7 0100 	strd	r0, r1, [r7]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
    1d4e:	9300      	str	r3, [sp, #0]
    1d50:	462a      	mov	r2, r5
    1d52:	463b      	mov	r3, r7
    1d54:	f107 0108 	add.w	r1, r7, #8
    1d58:	480a      	ldr	r0, [pc, #40]	; (1d84 <prng_reseed.constprop.17+0x74>)
    1d5a:	f7ff fd66 	bl	182a <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
    1d5e:	b960      	cbnz	r0, 1d7a <prng_reseed.constprop.17+0x6a>
		BT_ERR("Failed to re-seed PRNG");
    1d60:	4b09      	ldr	r3, [pc, #36]	; (1d88 <prng_reseed.constprop.17+0x78>)
    1d62:	9301      	str	r3, [sp, #4]
    1d64:	4b09      	ldr	r3, [pc, #36]	; (1d8c <prng_reseed.constprop.17+0x7c>)
    1d66:	9300      	str	r3, [sp, #0]
    1d68:	4a09      	ldr	r2, [pc, #36]	; (1d90 <prng_reseed.constprop.17+0x80>)
    1d6a:	4b0a      	ldr	r3, [pc, #40]	; (1d94 <prng_reseed.constprop.17+0x84>)
    1d6c:	490a      	ldr	r1, [pc, #40]	; (1d98 <prng_reseed.constprop.17+0x88>)
    1d6e:	480b      	ldr	r0, [pc, #44]	; (1d9c <prng_reseed.constprop.17+0x8c>)
    1d70:	f7ff fa1c 	bl	11ac <printk>
    1d74:	f06f 0004 	mvn.w	r0, #4
    1d78:	e000      	b.n	1d7c <prng_reseed.constprop.17+0x6c>
		return -EIO;
	}

	return 0;
    1d7a:	4620      	mov	r0, r4
}
    1d7c:	3728      	adds	r7, #40	; 0x28
    1d7e:	46bd      	mov	sp, r7
    1d80:	bdb0      	pop	{r4, r5, r7, pc}
    1d82:	bf00      	nop
    1d84:	200003d8 	.word	0x200003d8
    1d88:	0000dd4e 	.word	0x0000dd4e
    1d8c:	0000dd53 	.word	0x0000dd53
    1d90:	0000dcfd 	.word	0x0000dcfd
    1d94:	0000ede9 	.word	0x0000ede9
    1d98:	0000dd04 	.word	0x0000dd04
    1d9c:	0000ddb1 	.word	0x0000ddb1

00001da0 <bt_rand>:
	/* re-seed is needed after init */
	return prng_reseed(h);
}

int bt_rand(void *buf, size_t len)
{
    1da0:	b5b0      	push	{r4, r5, r7, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    1da2:	4a0b      	ldr	r2, [pc, #44]	; (1dd0 <bt_rand+0x30>)
	/* re-seed is needed after init */
	return prng_reseed(h);
}

int bt_rand(void *buf, size_t len)
{
    1da4:	af00      	add	r7, sp, #0
    1da6:	4604      	mov	r4, r0
    1da8:	460d      	mov	r5, r1
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
    1daa:	f7ff fd64 	bl	1876 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
    1dae:	1c43      	adds	r3, r0, #1
    1db0:	d107      	bne.n	1dc2 <bt_rand+0x22>
		ret = prng_reseed(&prng);
    1db2:	f7ff ffad 	bl	1d10 <prng_reseed.constprop.17>
		if (ret) {
    1db6:	b948      	cbnz	r0, 1dcc <bt_rand+0x2c>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
    1db8:	4a05      	ldr	r2, [pc, #20]	; (1dd0 <bt_rand+0x30>)
    1dba:	4629      	mov	r1, r5
    1dbc:	4620      	mov	r0, r4
    1dbe:	f7ff fd5a 	bl	1876 <tc_hmac_prng_generate>

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
	}

	return -EIO;
    1dc2:	2801      	cmp	r0, #1
    1dc4:	bf0c      	ite	eq
    1dc6:	2000      	moveq	r0, #0
    1dc8:	f06f 0004 	mvnne.w	r0, #4
}
    1dcc:	bdb0      	pop	{r4, r5, r7, pc}
    1dce:	bf00      	nop
    1dd0:	200003d8 	.word	0x200003d8

00001dd4 <le_set_nrpa>:
		le_set_rpa();
	}
}
#else
static int le_set_nrpa(void)
{
    1dd4:	b580      	push	{r7, lr}
    1dd6:	b082      	sub	sp, #8
    1dd8:	af00      	add	r7, sp, #0
	bt_addr_t nrpa;
	int err;

	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    1dda:	2106      	movs	r1, #6
    1ddc:	4638      	mov	r0, r7
    1dde:	f7ff ffdf 	bl	1da0 <bt_rand>
	if (err) {
    1de2:	b930      	cbnz	r0, 1df2 <le_set_nrpa+0x1e>
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1de4:	797b      	ldrb	r3, [r7, #5]

	return set_random_address(&nrpa);
    1de6:	4638      	mov	r0, r7
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
	if (err) {
		return err;
	}

	nrpa.val[5] &= 0x3f;
    1de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1dec:	717b      	strb	r3, [r7, #5]

	return set_random_address(&nrpa);
    1dee:	f7ff fecf 	bl	1b90 <set_random_address>
}
    1df2:	3708      	adds	r7, #8
    1df4:	46bd      	mov	sp, r7
    1df6:	bd80      	pop	{r7, pc}

00001df8 <bt_le_scan_update>:

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    1df8:	b580      	push	{r7, lr}
#if defined(CONFIG_BLUETOOTH_CENTRAL)
	uint16_t interval, window;
	struct bt_conn *conn;
#endif /* CONFIG_BLUETOOTH_CENTRAL */

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    1dfa:	2008      	movs	r0, #8

	return err;
}

int bt_le_scan_update(bool fast_scan)
{
    1dfc:	af00      	add	r7, sp, #0
#if defined(CONFIG_BLUETOOTH_CENTRAL)
	uint16_t interval, window;
	struct bt_conn *conn;
#endif /* CONFIG_BLUETOOTH_CENTRAL */

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    1dfe:	f7ff fe4f 	bl	1aa0 <atomic_test_bit.constprop.26>
    1e02:	b940      	cbnz	r0, 1e16 <bt_le_scan_update+0x1e>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    1e04:	2007      	movs	r0, #7
    1e06:	f7ff fe4b 	bl	1aa0 <atomic_test_bit.constprop.26>
    1e0a:	b120      	cbz	r0, 1e16 <bt_le_scan_update+0x1e>

	return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window, 0x01);
#else
	return 0;
#endif /* CONFIG_BLUETOOTH_CENTRAL */
}
    1e0c:	46bd      	mov	sp, r7
    1e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
		int err;

		err = bt_hci_stop_scanning();
    1e12:	f7ff beeb 	b.w	1bec <bt_hci_stop_scanning>

	return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window, 0x01);
#else
	return 0;
#endif /* CONFIG_BLUETOOTH_CENTRAL */
}
    1e16:	2000      	movs	r0, #0
    1e18:	bd80      	pop	{r7, pc}

00001e1a <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e1a:	b598      	push	{r3, r4, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e1c:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
    1e1e:	af00      	add	r7, sp, #0
    1e20:	4604      	mov	r4, r0

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;

	return bt_rand(addr->a.val, 6);
    1e22:	2106      	movs	r1, #6
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
    1e24:	f800 3b01 	strb.w	r3, [r0], #1

	return bt_rand(addr->a.val, 6);
    1e28:	f7ff ffba 	bl	1da0 <bt_rand>
int bt_addr_le_create_static(bt_addr_le_t *addr)
{
	int err;

	err = create_random_addr(addr);
	if (err) {
    1e2c:	b918      	cbnz	r0, 1e36 <bt_addr_le_create_static+0x1c>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
    1e2e:	79a3      	ldrb	r3, [r4, #6]
    1e30:	f063 033f 	orn	r3, r3, #63	; 0x3f
    1e34:	71a3      	strb	r3, [r4, #6]

	return 0;
}
    1e36:	bd98      	pop	{r3, r4, r7, pc}

00001e38 <hci_init>:
{
}
#endif /* CONFIG_BLUETOOTH_DEBUG */

static int hci_init(void)
{
    1e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e3c:	b091      	sub	sp, #68	; 0x44
    1e3e:	af06      	add	r7, sp, #24
{
	struct net_buf *rsp;
	int err;

	/* Send HCI_RESET */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1e40:	1d3a      	adds	r2, r7, #4
    1e42:	2100      	movs	r1, #0
    1e44:	f640 4003 	movw	r0, #3075	; 0xc03
    1e48:	f7ff fe66 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1e4c:	2800      	cmp	r0, #0
    1e4e:	f040 8094 	bne.w	1f7a <hci_init+0x142>
    1e52:	687b      	ldr	r3, [r7, #4]
	}
}

static void hci_reset_complete(struct net_buf *buf)
{
	uint8_t status = buf->data[0];
    1e54:	691b      	ldr	r3, [r3, #16]

	BT_DBG("status %u", status);

	if (status) {
    1e56:	781b      	ldrb	r3, [r3, #0]
    1e58:	b96b      	cbnz	r3, 1e76 <hci_init+0x3e>
		return;
	}

	scan_dev_found_cb = NULL;
    1e5a:	4ab2      	ldr	r2, [pc, #712]	; (2124 <hci_init+0x2ec>)
    1e5c:	6013      	str	r3, [r2, #0]
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e5e:	4bb2      	ldr	r3, [pc, #712]	; (2128 <hci_init+0x2f0>)
    1e60:	f3bf 8f5f 	dmb	sy
    1e64:	2201      	movs	r2, #1
    1e66:	e853 1f00 	ldrex	r1, [r3]
    1e6a:	e843 2000 	strex	r0, r2, [r3]
    1e6e:	2800      	cmp	r0, #0
    1e70:	d1f9      	bne.n	1e66 <hci_init+0x2e>
    1e72:	f3bf 8f5f 	dmb	sy
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
	if (err) {
		return err;
	}
	hci_reset_complete(rsp);
	net_buf_unref(rsp);
    1e76:	6878      	ldr	r0, [r7, #4]
    1e78:	f00a f858 	bl	bf2c <net_buf_unref>
{
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
    1e7c:	f107 020c 	add.w	r2, r7, #12
    1e80:	2100      	movs	r1, #0
    1e82:	f242 0018 	movw	r0, #8216	; 0x2018
    1e86:	f7ff fe47 	bl	1b18 <bt_hci_cmd_send_sync>
	if (ret) {
    1e8a:	b9d0      	cbnz	r0, 1ec2 <hci_init+0x8a>
		return ret;
	}

	rp = (void *)rsp->data;
    1e8c:	68fb      	ldr	r3, [r7, #12]

	ret = tc_hmac_prng_init(h, rp->rand, sizeof(rp->rand));
    1e8e:	48a7      	ldr	r0, [pc, #668]	; (212c <hci_init+0x2f4>)
    1e90:	6919      	ldr	r1, [r3, #16]
    1e92:	2208      	movs	r2, #8
    1e94:	3101      	adds	r1, #1
    1e96:	f7ff fc9e 	bl	17d6 <tc_hmac_prng_init>
    1e9a:	4604      	mov	r4, r0

	net_buf_unref(rsp);
    1e9c:	68f8      	ldr	r0, [r7, #12]
    1e9e:	f00a f845 	bl	bf2c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
    1ea2:	b964      	cbnz	r4, 1ebe <hci_init+0x86>
		BT_ERR("Failed to initialize PRNG");
    1ea4:	4ba2      	ldr	r3, [pc, #648]	; (2130 <hci_init+0x2f8>)
    1ea6:	9301      	str	r3, [sp, #4]
    1ea8:	4ba2      	ldr	r3, [pc, #648]	; (2134 <hci_init+0x2fc>)
    1eaa:	9300      	str	r3, [sp, #0]
    1eac:	4aa2      	ldr	r2, [pc, #648]	; (2138 <hci_init+0x300>)
    1eae:	4ba3      	ldr	r3, [pc, #652]	; (213c <hci_init+0x304>)
    1eb0:	49a3      	ldr	r1, [pc, #652]	; (2140 <hci_init+0x308>)
    1eb2:	48a4      	ldr	r0, [pc, #656]	; (2144 <hci_init+0x30c>)
    1eb4:	f7ff f97a 	bl	11ac <printk>
		return -EIO;
    1eb8:	f06f 0404 	mvn.w	r4, #4
    1ebc:	e206      	b.n	22cc <hci_init+0x494>
	}

	/* re-seed is needed after init */
	return prng_reseed(h);
    1ebe:	f7ff ff27 	bl	1d10 <prng_reseed.constprop.17>
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
	if (ret) {
    1ec2:	4604      	mov	r4, r0
	/*
	 * initialize PRNG right after reset so that it is safe to use it later
	 * on in initialization process
	 */
	err = prng_init(&prng);
	if (err) {
    1ec4:	2800      	cmp	r0, #0
    1ec6:	f040 8201 	bne.w	22cc <hci_init+0x494>
		return err;
	}

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1eca:	4601      	mov	r1, r0
    1ecc:	1d3a      	adds	r2, r7, #4
    1ece:	f241 0003 	movw	r0, #4099	; 0x1003
    1ed2:	f7ff fe21 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1ed6:	2800      	cmp	r0, #0
    1ed8:	d14f      	bne.n	1f7a <hci_init+0x142>
    1eda:	687b      	ldr	r3, [r7, #4]
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1edc:	4d9a      	ldr	r5, [pc, #616]	; (2148 <hci_init+0x310>)
    1ede:	6919      	ldr	r1, [r3, #16]
    1ee0:	2208      	movs	r2, #8
    1ee2:	3101      	adds	r1, #1
    1ee4:	f105 0016 	add.w	r0, r5, #22
    1ee8:	f7fe ffb9 	bl	e5e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
	if (err) {
		return err;
	}
	read_local_features_complete(rsp);
	net_buf_unref(rsp);
    1eec:	6878      	ldr	r0, [r7, #4]
    1eee:	f00a f81d 	bl	bf2c <net_buf_unref>

	/* Read Local Version Information */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1ef2:	1d3a      	adds	r2, r7, #4
    1ef4:	4621      	mov	r1, r4
    1ef6:	f241 0001 	movw	r0, #4097	; 0x1001
    1efa:	f7ff fe0d 	bl	1b18 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    1efe:	2800      	cmp	r0, #0
    1f00:	d13b      	bne.n	1f7a <hci_init+0x142>
		return err;
	}
	read_local_ver_complete(rsp);
    1f02:	6878      	ldr	r0, [r7, #4]
    1f04:	6903      	ldr	r3, [r0, #16]
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    1f06:	785a      	ldrb	r2, [r3, #1]
    1f08:	73aa      	strb	r2, [r5, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1f0a:	78d9      	ldrb	r1, [r3, #3]
    1f0c:	789a      	ldrb	r2, [r3, #2]
    1f0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1f12:	822a      	strh	r2, [r5, #16]
	bt_dev.lmp_version = rp->lmp_version;
    1f14:	791a      	ldrb	r2, [r3, #4]
    1f16:	73ea      	strb	r2, [r5, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1f18:	7a19      	ldrb	r1, [r3, #8]
    1f1a:	79da      	ldrb	r2, [r3, #7]
    1f1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1f20:	826a      	strh	r2, [r5, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1f22:	795a      	ldrb	r2, [r3, #5]
    1f24:	799b      	ldrb	r3, [r3, #6]
    1f26:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1f2a:	82ab      	strh	r3, [r5, #20]
				   &rsp);
	if (err) {
		return err;
	}
	read_local_ver_complete(rsp);
	net_buf_unref(rsp);
    1f2c:	f009 fffe 	bl	bf2c <net_buf_unref>

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    1f30:	1d3a      	adds	r2, r7, #4
    1f32:	4621      	mov	r1, r4
    1f34:	f241 0009 	movw	r0, #4105	; 0x1009
    1f38:	f7ff fdee 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1f3c:	b9e8      	cbnz	r0, 1f7a <hci_init+0x142>
    1f3e:	687b      	ldr	r3, [r7, #4]
{
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
    1f40:	6919      	ldr	r1, [r3, #16]
    1f42:	2206      	movs	r2, #6
    1f44:	3101      	adds	r1, #1
    1f46:	1c68      	adds	r0, r5, #1
    1f48:	f7fe ff89 	bl	e5e <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1f4c:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_addr_copy(&bt_dev.id_addr.a, &rp->bdaddr);
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    1f4e:	702c      	strb	r4, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		return err;
	}
	read_bdaddr_complete(rsp);
	net_buf_unref(rsp);
    1f50:	f009 ffec 	bl	bf2c <net_buf_unref>

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1f54:	1d3a      	adds	r2, r7, #4
    1f56:	4621      	mov	r1, r4
    1f58:	f241 0002 	movw	r0, #4098	; 0x1002
    1f5c:	f7ff fddc 	bl	1b18 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    1f60:	b958      	cbnz	r0, 1f7a <hci_init+0x142>
    1f62:	687b      	ldr	r3, [r7, #4]
{
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    1f64:	6919      	ldr	r1, [r3, #16]
    1f66:	2240      	movs	r2, #64	; 0x40
    1f68:	3101      	adds	r1, #1
    1f6a:	f105 001e 	add.w	r0, r5, #30
    1f6e:	f7fe ff76 	bl	e5e <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_supported_commands_complete(rsp);
	net_buf_unref(rsp);
    1f72:	6878      	ldr	r0, [r7, #4]
    1f74:	f009 ffda 	bl	bf2c <net_buf_unref>
    1f78:	e003      	b.n	1f82 <hci_init+0x14a>
	net_buf_unref(rsp);

	/* Read Local Supported Commands */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
				   &rsp);
	if (err) {
    1f7a:	4604      	mov	r4, r0
static int hci_init(void)
{
	int err;

	err = common_init();
	if (err) {
    1f7c:	2800      	cmp	r0, #0
    1f7e:	f040 81a5 	bne.w	22cc <hci_init+0x494>
	struct net_buf *buf;
	struct net_buf *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    1f82:	4d71      	ldr	r5, [pc, #452]	; (2148 <hci_init+0x310>)
    1f84:	7eab      	ldrb	r3, [r5, #26]
    1f86:	0659      	lsls	r1, r3, #25
    1f88:	d40c      	bmi.n	1fa4 <hci_init+0x16c>
		BT_ERR("Non-LE capable controller detected!");
    1f8a:	4b69      	ldr	r3, [pc, #420]	; (2130 <hci_init+0x2f8>)
    1f8c:	9301      	str	r3, [sp, #4]
    1f8e:	4b69      	ldr	r3, [pc, #420]	; (2134 <hci_init+0x2fc>)
    1f90:	9300      	str	r3, [sp, #0]
    1f92:	4a69      	ldr	r2, [pc, #420]	; (2138 <hci_init+0x300>)
    1f94:	4b6d      	ldr	r3, [pc, #436]	; (214c <hci_init+0x314>)
    1f96:	496a      	ldr	r1, [pc, #424]	; (2140 <hci_init+0x308>)
    1f98:	486d      	ldr	r0, [pc, #436]	; (2150 <hci_init+0x318>)
    1f9a:	f7ff f907 	bl	11ac <printk>
		return -ENODEV;
    1f9e:	f06f 0412 	mvn.w	r4, #18
    1fa2:	e193      	b.n	22cc <hci_init+0x494>
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1fa4:	f107 080c 	add.w	r8, r7, #12
    1fa8:	4642      	mov	r2, r8
    1faa:	2100      	movs	r1, #0
    1fac:	f242 0003 	movw	r0, #8195	; 0x2003
    1fb0:	f7ff fdb2 	bl	1b18 <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    1fb4:	4604      	mov	r4, r0
    1fb6:	2800      	cmp	r0, #0
    1fb8:	f040 8082 	bne.w	20c0 <hci_init+0x288>
    1fbc:	68fb      	ldr	r3, [r7, #12]
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1fbe:	6919      	ldr	r1, [r3, #16]
    1fc0:	2208      	movs	r2, #8
    1fc2:	3101      	adds	r1, #1
    1fc4:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1fc8:	f7fe ff49 	bl	e5e <memcpy>
				   &rsp);
	if (err) {
		return err;
	}
	read_le_features_complete(rsp);
	net_buf_unref(rsp);
    1fcc:	68f8      	ldr	r0, [r7, #12]
    1fce:	f009 ffad 	bl	bf2c <net_buf_unref>

	/* Read LE Buffer Size */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE, NULL, &rsp);
    1fd2:	4642      	mov	r2, r8
    1fd4:	4621      	mov	r1, r4
    1fd6:	f242 0002 	movw	r0, #8194	; 0x2002
    1fda:	f7ff fd9d 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    1fde:	2800      	cmp	r0, #0
    1fe0:	d16d      	bne.n	20be <hci_init+0x286>
    1fe2:	68fb      	ldr	r3, [r7, #12]
    1fe4:	691b      	ldr	r3, [r3, #16]
{
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    1fe6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    1fea:	f8a5 2080 	strh.w	r2, [r5, #128]	; 0x80

	if (bt_dev.le.mtu) {
    1fee:	b12a      	cbz	r2, 1ffc <hci_init+0x1c4>
		k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
    1ff0:	78da      	ldrb	r2, [r3, #3]
    1ff2:	f105 0084 	add.w	r0, r5, #132	; 0x84
    1ff6:	4611      	mov	r1, r2
    1ff8:	f00b f9da 	bl	d3b0 <k_sem_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE, NULL, &rsp);
	if (err) {
		return err;
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    1ffc:	68f8      	ldr	r0, [r7, #12]
    1ffe:	f009 ff95 	bl	bf2c <net_buf_unref>

	if (BT_FEAT_BREDR(bt_dev.features)) {
    2002:	7eab      	ldrb	r3, [r5, #26]
    2004:	f003 0320 	and.w	r3, r3, #32
    2008:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    200c:	b12b      	cbz	r3, 201a <hci_init+0x1e2>
			return err;
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    200e:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
    2012:	4c4d      	ldr	r4, [pc, #308]	; (2148 <hci_init+0x310>)
    2014:	071a      	lsls	r2, r3, #28
    2016:	d419      	bmi.n	204c <hci_init+0x214>
    2018:	e028      	b.n	206c <hci_init+0x234>
	}
	le_read_buffer_size_complete(rsp);
	net_buf_unref(rsp);

	if (BT_FEAT_BREDR(bt_dev.features)) {
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    201a:	2102      	movs	r1, #2
    201c:	f640 406d 	movw	r0, #3181	; 0xc6d
    2020:	f7ff fd52 	bl	1ac8 <bt_hci_cmd_create>
					sizeof(*cp_le));
		if (!buf) {
    2024:	4604      	mov	r4, r0
    2026:	2800      	cmp	r0, #0
    2028:	f000 8140 	beq.w	22ac <hci_init+0x474>
			return -ENOBUFS;
		}

		cp_le = net_buf_add(buf, sizeof(*cp_le));
    202c:	2102      	movs	r1, #2
    202e:	3010      	adds	r0, #16
    2030:	f009 ff98 	bl	bf64 <net_buf_simple_add>

		/* Explicitly enable LE for dual-mode controllers */
		cp_le->le = 0x01;
    2034:	2301      	movs	r3, #1
    2036:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    2038:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    203a:	4632      	mov	r2, r6
    203c:	4621      	mov	r1, r4
    203e:	f640 406d 	movw	r0, #3181	; 0xc6d
    2042:	f7ff fd69 	bl	1b18 <bt_hci_cmd_send_sync>
					   NULL);
		if (err) {
    2046:	2800      	cmp	r0, #0
    2048:	d0e1      	beq.n	200e <hci_init+0x1d6>
    204a:	e038      	b.n	20be <hci_init+0x286>
		}
	}

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    204c:	4642      	mov	r2, r8
    204e:	2100      	movs	r1, #0
    2050:	f242 001c 	movw	r0, #8220	; 0x201c
    2054:	f7ff fd60 	bl	1b18 <bt_hci_cmd_send_sync>
					   &rsp);
		if (err) {
    2058:	bb88      	cbnz	r0, 20be <hci_init+0x286>
			return err;
		}
		le_read_supp_states_complete(rsp);
    205a:	68f8      	ldr	r0, [r7, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    205c:	6903      	ldr	r3, [r0, #16]
    205e:	f853 2f01 	ldr.w	r2, [r3, #1]!
    2062:	685b      	ldr	r3, [r3, #4]
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    2064:	67e3      	str	r3, [r4, #124]	; 0x7c
    2066:	67a2      	str	r2, [r4, #120]	; 0x78
					   &rsp);
		if (err) {
			return err;
		}
		le_read_supp_states_complete(rsp);
		net_buf_unref(rsp);
    2068:	f009 ff60 	bl	bf2c <net_buf_unref>
	}

	/* Set LE event mask */
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    206c:	2108      	movs	r1, #8
    206e:	f242 0001 	movw	r0, #8193	; 0x2001
    2072:	f7ff fd29 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    2076:	4606      	mov	r6, r0
    2078:	2800      	cmp	r0, #0
    207a:	f000 8117 	beq.w	22ac <hci_init+0x474>
		return -ENOBUFS;
	}

	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    207e:	2108      	movs	r1, #8
    2080:	3010      	adds	r0, #16
    2082:	f009 ff6f 	bl	bf64 <net_buf_simple_add>
    2086:	4604      	mov	r4, r0
	memset(cp_mask, 0, sizeof(*cp_mask));
    2088:	2208      	movs	r2, #8
    208a:	2100      	movs	r1, #0
    208c:	f7fe ff14 	bl	eb8 <memset>

	cp_mask->events[0] |= 0x02; /* LE Advertising Report Event */
    2090:	7823      	ldrb	r3, [r4, #0]
    2092:	f043 0202 	orr.w	r2, r3, #2
    2096:	7022      	strb	r2, [r4, #0]

	/*
	 * If "LE Read Local P-256 Public Key" and "LE Generate DH Key" are
	 * supported we need to enable events generated by those commands.
	 */
	if ((bt_dev.supported_commands[34] & 0x02) &&
    2098:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
    209c:	f002 0206 	and.w	r2, r2, #6
    20a0:	2a06      	cmp	r2, #6
    20a2:	d106      	bne.n	20b2 <hci_init+0x27a>
	    (bt_dev.supported_commands[34] & 0x04)) {
		cp_mask->events[0] |= 0x80; /* LE Read Local P-256 PKey Compl */
    20a4:	f063 037d 	orn	r3, r3, #125	; 0x7d
    20a8:	7023      	strb	r3, [r4, #0]
		cp_mask->events[1] |= 0x01; /* LE Generate DHKey Compl Event */
    20aa:	7863      	ldrb	r3, [r4, #1]
    20ac:	f043 0301 	orr.w	r3, r3, #1
    20b0:	7063      	strb	r3, [r4, #1]
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    20b2:	2200      	movs	r2, #0
    20b4:	4631      	mov	r1, r6
    20b6:	f242 0001 	movw	r0, #8193	; 0x2001
    20ba:	f7ff fd2d 	bl	1b18 <bt_hci_cmd_send_sync>

	/* Read LE Supported States */
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
					   &rsp);
		if (err) {
    20be:	4604      	mov	r4, r0
	if (err) {
		return err;
	}

	err = le_init();
	if (err) {
    20c0:	2c00      	cmp	r4, #0
    20c2:	f040 8103 	bne.w	22cc <hci_init+0x494>
		return err;
	}

	if (BT_FEAT_BREDR(bt_dev.features)) {
    20c6:	7eab      	ldrb	r3, [r5, #26]
    20c8:	4e1f      	ldr	r6, [pc, #124]	; (2148 <hci_init+0x310>)
    20ca:	069b      	lsls	r3, r3, #26
    20cc:	d508      	bpl.n	20e0 <hci_init+0x2a8>
static int set_event_mask(void)
{
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    20ce:	2108      	movs	r1, #8
    20d0:	f640 4001 	movw	r0, #3073	; 0xc01
    20d4:	f7ff fcf8 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    20d8:	4606      	mov	r6, r0
    20da:	2800      	cmp	r0, #0
    20dc:	d13a      	bne.n	2154 <hci_init+0x31c>
    20de:	e0e5      	b.n	22ac <hci_init+0x474>
static int br_init(void)
{
	struct net_buf *rsp;
	int err;

	if (bt_dev.le.mtu) {
    20e0:	f8b6 3080 	ldrh.w	r3, [r6, #128]	; 0x80
    20e4:	2b00      	cmp	r3, #0
    20e6:	d1f2      	bne.n	20ce <hci_init+0x296>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    20e8:	4642      	mov	r2, r8
    20ea:	4621      	mov	r1, r4
    20ec:	f241 0005 	movw	r0, #4101	; 0x1005
    20f0:	f7ff fd12 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    20f4:	b9a0      	cbnz	r0, 2120 <hci_init+0x2e8>
	uint16_t pkts;

	BT_DBG("status %u", rp->status);

	/* If LE-side has buffers we can ignore the BR/EDR values */
	if (bt_dev.le.mtu) {
    20f6:	f8b6 3080 	ldrh.w	r3, [r6, #128]	; 0x80
    20fa:	b96b      	cbnz	r3, 2118 <hci_init+0x2e0>
    20fc:	68fb      	ldr	r3, [r7, #12]
    20fe:	691b      	ldr	r3, [r3, #16]
		return;
	}

	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    2100:	7899      	ldrb	r1, [r3, #2]
    2102:	785a      	ldrb	r2, [r3, #1]
    2104:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    2108:	f8a6 2080 	strh.w	r2, [r6, #128]	; 0x80
	pkts = sys_le16_to_cpu(rp->acl_max_num);

	BT_DBG("ACL BR/EDR buffers: pkts %u mtu %u", pkts, bt_dev.le.mtu);

	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
    210c:	889a      	ldrh	r2, [r3, #4]
    210e:	f106 0084 	add.w	r0, r6, #132	; 0x84
    2112:	4611      	mov	r1, r2
    2114:	f00b f94c 	bl	d3b0 <k_sem_init>
	if (err) {
		return err;
	}

	read_buffer_size_complete(rsp);
	net_buf_unref(rsp);
    2118:	68f8      	ldr	r0, [r7, #12]
    211a:	f009 ff07 	bl	bf2c <net_buf_unref>
    211e:	e7d6      	b.n	20ce <hci_init+0x296>
		return 0;
	}

	/* Use BR/EDR buffer size if LE reports zero buffers */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
	if (err) {
    2120:	4604      	mov	r4, r0
    2122:	e0d3      	b.n	22cc <hci_init+0x494>
    2124:	20000514 	.word	0x20000514
    2128:	200000cc 	.word	0x200000cc
    212c:	200003d8 	.word	0x200003d8
    2130:	0000dd4e 	.word	0x0000dd4e
    2134:	0000dd53 	.word	0x0000dd53
    2138:	0000dcfd 	.word	0x0000dcfd
    213c:	0000edf5 	.word	0x0000edf5
    2140:	0000dd04 	.word	0x0000dd04
    2144:	0000ddd8 	.word	0x0000ddd8
    2148:	20000060 	.word	0x20000060
    214c:	0000ee1d 	.word	0x0000ee1d
    2150:	0000de02 	.word	0x0000de02
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
	}

	ev = net_buf_add(buf, sizeof(*ev));
    2154:	2108      	movs	r1, #8
    2156:	3010      	adds	r0, #16
    2158:	f009 ff04 	bl	bf64 <net_buf_simple_add>
    215c:	4604      	mov	r4, r0
	memset(ev, 0, sizeof(*ev));
    215e:	2208      	movs	r2, #8
    2160:	2100      	movs	r1, #0
    2162:	f7fe fea9 	bl	eb8 <memset>
	ev->events[7] |= 0x04; /* User Passkey Notification */
#endif /* CONFIG_BLUETOOTH_BREDR */

	ev->events[1] |= 0x20; /* Command Complete */
	ev->events[1] |= 0x40; /* Command Status */
	ev->events[1] |= 0x80; /* Hardware Error */
    2166:	7863      	ldrb	r3, [r4, #1]
    2168:	f063 031f 	orn	r3, r3, #31
    216c:	7063      	strb	r3, [r4, #1]
	ev->events[3] |= 0x02; /* Data Buffer Overflow */
    216e:	78e3      	ldrb	r3, [r4, #3]
    2170:	f043 0302 	orr.w	r3, r3, #2
    2174:	70e3      	strb	r3, [r4, #3]
	ev->events[7] |= 0x20; /* LE Meta-Event */
    2176:	79e3      	ldrb	r3, [r4, #7]
    2178:	f043 0320 	orr.w	r3, r3, #32
    217c:	71e3      	strb	r3, [r4, #7]
		ev->events[0] |= 0x80; /* Encryption Change */
		ev->events[5] |= 0x80; /* Encryption Key Refresh Complete */
	}
#endif /* CONFIG_BLUETOOTH_SMP */

	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    217e:	2200      	movs	r2, #0
    2180:	4631      	mov	r1, r6
    2182:	f640 4001 	movw	r0, #3073	; 0xc01
    2186:	f7ff fcc7 	bl	1b18 <bt_hci_cmd_send_sync>
		BT_DBG("Non-BR/EDR controller detected! Skipping BR init.");
#endif
	}

	err = set_event_mask();
	if (err) {
    218a:	4604      	mov	r4, r0
    218c:	2800      	cmp	r0, #0
    218e:	f040 809d 	bne.w	22cc <hci_init+0x494>
		return err;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY)) {
    2192:	6078      	str	r0, [r7, #4]
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
    2194:	2207      	movs	r2, #7
    2196:	f8c7 0007 	str.w	r0, [r7, #7]
    219a:	1d39      	adds	r1, r7, #4
    219c:	484e      	ldr	r0, [pc, #312]	; (22d8 <hci_init+0x4a0>)
    219e:	f7fe fe46 	bl	e2e <memcmp>
    21a2:	2800      	cmp	r0, #0
    21a4:	d14d      	bne.n	2242 <hci_init+0x40a>

static int set_static_addr(void)
{
	int err;

	if (bt_storage) {
    21a6:	4b4d      	ldr	r3, [pc, #308]	; (22dc <hci_init+0x4a4>)
    21a8:	681a      	ldr	r2, [r3, #0]
    21aa:	461e      	mov	r6, r3
    21ac:	b92a      	cbnz	r2, 21ba <hci_init+0x382>
		}
	}

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
    21ae:	484a      	ldr	r0, [pc, #296]	; (22d8 <hci_init+0x4a0>)
    21b0:	f7ff fe33 	bl	1e1a <bt_addr_le_create_static>
	if (err) {
    21b4:	4601      	mov	r1, r0
    21b6:	b148      	cbz	r0, 21cc <hci_init+0x394>
    21b8:	e07b      	b.n	22b2 <hci_init+0x47a>
	int err;

	if (bt_storage) {
		ssize_t ret;

		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    21ba:	f8d2 9000 	ldr.w	r9, [r2]
    21be:	4a46      	ldr	r2, [pc, #280]	; (22d8 <hci_init+0x4a0>)
    21c0:	2307      	movs	r3, #7
    21c2:	4621      	mov	r1, r4
    21c4:	47c8      	blx	r9
				       &bt_dev.id_addr, sizeof(bt_dev.id_addr));
		if (ret == sizeof(bt_dev.id_addr)) {
    21c6:	2807      	cmp	r0, #7
    21c8:	d1f1      	bne.n	21ae <hci_init+0x376>
    21ca:	e01a      	b.n	2202 <hci_init+0x3ca>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
	if (err) {
		return err;
	}

	if (bt_storage) {
    21cc:	6833      	ldr	r3, [r6, #0]
    21ce:	b173      	cbz	r3, 21ee <hci_init+0x3b6>
		ssize_t ret;

		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    21d0:	685e      	ldr	r6, [r3, #4]
    21d2:	4a41      	ldr	r2, [pc, #260]	; (22d8 <hci_init+0x4a0>)
    21d4:	2307      	movs	r3, #7
    21d6:	47b0      	blx	r6
					&bt_dev.id_addr,
					sizeof(bt_dev.id_addr));
		if (ret != sizeof(bt_dev.id_addr)) {
    21d8:	2807      	cmp	r0, #7
    21da:	d012      	beq.n	2202 <hci_init+0x3ca>
			BT_ERR("Unable to store static address");
    21dc:	4b40      	ldr	r3, [pc, #256]	; (22e0 <hci_init+0x4a8>)
    21de:	9301      	str	r3, [sp, #4]
    21e0:	4b40      	ldr	r3, [pc, #256]	; (22e4 <hci_init+0x4ac>)
    21e2:	9300      	str	r3, [sp, #0]
    21e4:	4a40      	ldr	r2, [pc, #256]	; (22e8 <hci_init+0x4b0>)
    21e6:	4b41      	ldr	r3, [pc, #260]	; (22ec <hci_init+0x4b4>)
    21e8:	4941      	ldr	r1, [pc, #260]	; (22f0 <hci_init+0x4b8>)
    21ea:	4842      	ldr	r0, [pc, #264]	; (22f4 <hci_init+0x4bc>)
    21ec:	e007      	b.n	21fe <hci_init+0x3c6>
		}
	} else {
		BT_WARN("Using temporary static random address");
    21ee:	4b3c      	ldr	r3, [pc, #240]	; (22e0 <hci_init+0x4a8>)
    21f0:	9301      	str	r3, [sp, #4]
    21f2:	4b41      	ldr	r3, [pc, #260]	; (22f8 <hci_init+0x4c0>)
    21f4:	9300      	str	r3, [sp, #0]
    21f6:	4a41      	ldr	r2, [pc, #260]	; (22fc <hci_init+0x4c4>)
    21f8:	4b3c      	ldr	r3, [pc, #240]	; (22ec <hci_init+0x4b4>)
    21fa:	493d      	ldr	r1, [pc, #244]	; (22f0 <hci_init+0x4b8>)
    21fc:	4840      	ldr	r0, [pc, #256]	; (2300 <hci_init+0x4c8>)
    21fe:	f7fe ffd5 	bl	11ac <printk>
	}

set_addr:
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    2202:	782b      	ldrb	r3, [r5, #0]
    2204:	4e34      	ldr	r6, [pc, #208]	; (22d8 <hci_init+0x4a0>)
    2206:	2b01      	cmp	r3, #1
    2208:	d104      	bne.n	2214 <hci_init+0x3dc>
    220a:	79b3      	ldrb	r3, [r6, #6]
    220c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    2210:	2bc0      	cmp	r3, #192	; 0xc0
    2212:	d00c      	beq.n	222e <hci_init+0x3f6>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
		BT_ERR("Only static random address supported as identity");
    2214:	4b32      	ldr	r3, [pc, #200]	; (22e0 <hci_init+0x4a8>)
    2216:	9301      	str	r3, [sp, #4]
    2218:	4b32      	ldr	r3, [pc, #200]	; (22e4 <hci_init+0x4ac>)
    221a:	9300      	str	r3, [sp, #0]
    221c:	4a32      	ldr	r2, [pc, #200]	; (22e8 <hci_init+0x4b0>)
    221e:	4b33      	ldr	r3, [pc, #204]	; (22ec <hci_init+0x4b4>)
    2220:	4933      	ldr	r1, [pc, #204]	; (22f0 <hci_init+0x4b8>)
    2222:	4838      	ldr	r0, [pc, #224]	; (2304 <hci_init+0x4cc>)
    2224:	f7fe ffc2 	bl	11ac <printk>
		return -EINVAL;
    2228:	f06f 0415 	mvn.w	r4, #21
    222c:	e044      	b.n	22b8 <hci_init+0x480>
	}

	err = set_random_address(&bt_dev.id_addr.a);
    222e:	1c70      	adds	r0, r6, #1
    2230:	f7ff fcae 	bl	1b90 <set_random_address>
	if (err) {
    2234:	2800      	cmp	r0, #0
    2236:	d13e      	bne.n	22b6 <hci_init+0x47e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2238:	2104      	movs	r1, #4
    223a:	f106 006c 	add.w	r0, r6, #108	; 0x6c
    223e:	f7ff fb83 	bl	1948 <atomic_or>
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));

	BT_INFO("Identity: %s", addr);
    2242:	4e31      	ldr	r6, [pc, #196]	; (2308 <hci_init+0x4d0>)

static void show_dev_info(void)
{
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(&bt_dev.id_addr, addr, sizeof(addr));
    2244:	4824      	ldr	r0, [pc, #144]	; (22d8 <hci_init+0x4a0>)
    2246:	4641      	mov	r1, r8
    2248:	f7ff fbf8 	bl	1a3c <bt_addr_le_to_str.constprop.18>

	BT_INFO("Identity: %s", addr);
    224c:	e88d 0140 	stmia.w	sp, {r6, r8}
    2250:	4b2e      	ldr	r3, [pc, #184]	; (230c <hci_init+0x4d4>)
    2252:	4a2f      	ldr	r2, [pc, #188]	; (2310 <hci_init+0x4d8>)
    2254:	4926      	ldr	r1, [pc, #152]	; (22f0 <hci_init+0x4b8>)
    2256:	9602      	str	r6, [sp, #8]
    2258:	482e      	ldr	r0, [pc, #184]	; (2314 <hci_init+0x4dc>)
    225a:	f7fe ffa7 	bl	11ac <printk>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    225e:	f895 800e 	ldrb.w	r8, [r5, #14]
    2262:	4640      	mov	r0, r8
    2264:	f7ff fb54 	bl	1910 <ver_str>
    2268:	8aab      	ldrh	r3, [r5, #20]
    226a:	9304      	str	r3, [sp, #16]
    226c:	8a2b      	ldrh	r3, [r5, #16]
    226e:	9303      	str	r3, [sp, #12]
    2270:	f8cd 8008 	str.w	r8, [sp, #8]
    2274:	9001      	str	r0, [sp, #4]
    2276:	4b25      	ldr	r3, [pc, #148]	; (230c <hci_init+0x4d4>)
    2278:	4a25      	ldr	r2, [pc, #148]	; (2310 <hci_init+0x4d8>)
    227a:	491d      	ldr	r1, [pc, #116]	; (22f0 <hci_init+0x4b8>)
    227c:	9605      	str	r6, [sp, #20]
    227e:	9600      	str	r6, [sp, #0]
    2280:	4825      	ldr	r0, [pc, #148]	; (2318 <hci_init+0x4e0>)
    2282:	f7fe ff93 	bl	11ac <printk>
		ver_str(bt_dev.hci_version), bt_dev.hci_version,
		bt_dev.hci_revision, bt_dev.manufacturer);
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    2286:	f895 800f 	ldrb.w	r8, [r5, #15]
    228a:	4640      	mov	r0, r8
    228c:	f7ff fb40 	bl	1910 <ver_str>
    2290:	8a6b      	ldrh	r3, [r5, #18]
    2292:	9303      	str	r3, [sp, #12]
    2294:	9001      	str	r0, [sp, #4]
    2296:	9604      	str	r6, [sp, #16]
    2298:	f8cd 8008 	str.w	r8, [sp, #8]
    229c:	9600      	str	r6, [sp, #0]
    229e:	4b1b      	ldr	r3, [pc, #108]	; (230c <hci_init+0x4d4>)
    22a0:	4a1b      	ldr	r2, [pc, #108]	; (2310 <hci_init+0x4d8>)
    22a2:	4913      	ldr	r1, [pc, #76]	; (22f0 <hci_init+0x4b8>)
    22a4:	481d      	ldr	r0, [pc, #116]	; (231c <hci_init+0x4e4>)
    22a6:	f7fe ff81 	bl	11ac <printk>
    22aa:	e00f      	b.n	22cc <hci_init+0x494>
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
	if (!buf) {
		return -ENOBUFS;
    22ac:	f06f 0436 	mvn.w	r4, #54	; 0x36
    22b0:	e00c      	b.n	22cc <hci_init+0x494>
	}

	BT_DBG("Generating new static random address");

	err = bt_addr_le_create_static(&bt_dev.id_addr);
	if (err) {
    22b2:	4604      	mov	r4, r0
    22b4:	e000      	b.n	22b8 <hci_init+0x480>
		BT_ERR("Only static random address supported as identity");
		return -EINVAL;
	}

	err = set_random_address(&bt_dev.id_addr.a);
	if (err) {
    22b6:	4604      	mov	r4, r0

	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY)) {
		BT_DBG("No public address. Trying to set static random.");
		err = set_static_addr();
		if (err) {
			BT_ERR("Unable to set identity address");
    22b8:	4b09      	ldr	r3, [pc, #36]	; (22e0 <hci_init+0x4a8>)
    22ba:	9301      	str	r3, [sp, #4]
    22bc:	4b09      	ldr	r3, [pc, #36]	; (22e4 <hci_init+0x4ac>)
    22be:	9300      	str	r3, [sp, #0]
    22c0:	4a09      	ldr	r2, [pc, #36]	; (22e8 <hci_init+0x4b0>)
    22c2:	4b17      	ldr	r3, [pc, #92]	; (2320 <hci_init+0x4e8>)
    22c4:	490a      	ldr	r1, [pc, #40]	; (22f0 <hci_init+0x4b8>)
    22c6:	4817      	ldr	r0, [pc, #92]	; (2324 <hci_init+0x4ec>)
    22c8:	f7fe ff70 	bl	11ac <printk>
	}

	show_dev_info();

	return 0;
}
    22cc:	4620      	mov	r0, r4
    22ce:	372c      	adds	r7, #44	; 0x2c
    22d0:	46bd      	mov	sp, r7
    22d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22d6:	bf00      	nop
    22d8:	20000060 	.word	0x20000060
    22dc:	200015b4 	.word	0x200015b4
    22e0:	0000dd4e 	.word	0x0000dd4e
    22e4:	0000dd53 	.word	0x0000dd53
    22e8:	0000dcfd 	.word	0x0000dcfd
    22ec:	0000edff 	.word	0x0000edff
    22f0:	0000dd04 	.word	0x0000dd04
    22f4:	0000de36 	.word	0x0000de36
    22f8:	0000dea2 	.word	0x0000dea2
    22fc:	0000de65 	.word	0x0000de65
    2300:	0000de6c 	.word	0x0000de6c
    2304:	0000deaa 	.word	0x0000deaa
    2308:	0000dad2 	.word	0x0000dad2
    230c:	0000ee0f 	.word	0x0000ee0f
    2310:	0000deeb 	.word	0x0000deeb
    2314:	0000def2 	.word	0x0000def2
    2318:	0000df0f 	.word	0x0000df0f
    231c:	0000df5d 	.word	0x0000df5d
    2320:	0000ee25 	.word	0x0000ee25
    2324:	0000df94 	.word	0x0000df94

00002328 <init_work>:

	return 0;
}

static void init_work(struct k_work *work)
{
    2328:	b5b0      	push	{r4, r5, r7, lr}
    232a:	af00      	add	r7, sp, #0

static int bt_init(void)
{
	int err;

	err = hci_init();
    232c:	f7ff fd84 	bl	1e38 <hci_init>
	if (err) {
    2330:	4604      	mov	r4, r0
    2332:	b930      	cbnz	r0, 2342 <init_work+0x1a>
    2334:	2102      	movs	r1, #2
    2336:	4807      	ldr	r0, [pc, #28]	; (2354 <init_work+0x2c>)
    2338:	f7ff fb06 	bl	1948 <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    233c:	4620      	mov	r0, r4
    233e:	f7ff fd5b 	bl	1df8 <bt_le_scan_update>
static void init_work(struct k_work *work)
{
	int err;

	err = bt_init();
	if (ready_cb) {
    2342:	4b05      	ldr	r3, [pc, #20]	; (2358 <init_work+0x30>)
    2344:	681b      	ldr	r3, [r3, #0]
    2346:	b123      	cbz	r3, 2352 <init_work+0x2a>
		ready_cb(err);
    2348:	4620      	mov	r0, r4
	}
}
    234a:	46bd      	mov	sp, r7
    234c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
{
	int err;

	err = bt_init();
	if (ready_cb) {
		ready_cb(err);
    2350:	4718      	bx	r3
    2352:	bdb0      	pop	{r4, r5, r7, pc}
    2354:	200000cc 	.word	0x200000cc
    2358:	200003d4 	.word	0x200003d4

0000235c <bt_send>:

	return 0;
}

int bt_send(struct net_buf *buf)
{
    235c:	b480      	push	{r7}
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	return bt_dev.drv->send(buf);
    235e:	4b04      	ldr	r3, [pc, #16]	; (2370 <bt_send+0x14>)
    2360:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    2364:	68db      	ldr	r3, [r3, #12]

	return 0;
}

int bt_send(struct net_buf *buf)
{
    2366:	af00      	add	r7, sp, #0
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	return bt_dev.drv->send(buf);
}
    2368:	46bd      	mov	sp, r7
    236a:	bc80      	pop	{r7}
{
	BT_DBG("buf %p len %u type %u", buf, buf->len, bt_buf_get_type(buf));

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	return bt_dev.drv->send(buf);
    236c:	4718      	bx	r3
    236e:	bf00      	nop
    2370:	20000060 	.word	0x20000060

00002374 <hci_cmd_tx_thread>:

	net_buf_unref(buf);
}

static void hci_cmd_tx_thread(void)
{
    2374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		struct net_buf *buf;
		int err;

		/* Wait until ncmd > 0 */
		BT_DBG("calling sem_take_wait");
		k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2378:	4d22      	ldr	r5, [pc, #136]	; (2404 <hci_cmd_tx_thread+0x90>)
		BT_DBG("calling net_buf_get");
		buf = net_buf_get(&bt_dev.cmd_tx_queue, K_FOREVER);

		/* Clear out any existing sent command */
		if (bt_dev.sent_cmd) {
			BT_ERR("Uncleared pending sent_cmd");
    237a:	4e23      	ldr	r6, [pc, #140]	; (2408 <hci_cmd_tx_thread+0x94>)

	net_buf_unref(buf);
}

static void hci_cmd_tx_thread(void)
{
    237c:	b084      	sub	sp, #16
		struct net_buf *buf;
		int err;

		/* Wait until ncmd > 0 */
		BT_DBG("calling sem_take_wait");
		k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    237e:	46a8      	mov	r8, r5

	net_buf_unref(buf);
}

static void hci_cmd_tx_thread(void)
{
    2380:	af04      	add	r7, sp, #16
		struct net_buf *buf;
		int err;

		/* Wait until ncmd > 0 */
		BT_DBG("calling sem_take_wait");
		k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);
    2382:	f04f 31ff 	mov.w	r1, #4294967295
    2386:	4821      	ldr	r0, [pc, #132]	; (240c <hci_cmd_tx_thread+0x98>)
    2388:	f00b f82d 	bl	d3e6 <k_sem_take>

		/* Get next command - wait if necessary */
		BT_DBG("calling net_buf_get");
		buf = net_buf_get(&bt_dev.cmd_tx_queue, K_FOREVER);
    238c:	f04f 31ff 	mov.w	r1, #4294967295
    2390:	481f      	ldr	r0, [pc, #124]	; (2410 <hci_cmd_tx_thread+0x9c>)
    2392:	f009 fd9b 	bl	becc <net_buf_get>

		/* Clear out any existing sent command */
		if (bt_dev.sent_cmd) {
    2396:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
		BT_DBG("calling sem_take_wait");
		k_sem_take(&bt_dev.ncmd_sem, K_FOREVER);

		/* Get next command - wait if necessary */
		BT_DBG("calling net_buf_get");
		buf = net_buf_get(&bt_dev.cmd_tx_queue, K_FOREVER);
    239a:	4604      	mov	r4, r0

		/* Clear out any existing sent command */
		if (bt_dev.sent_cmd) {
    239c:	b17b      	cbz	r3, 23be <hci_cmd_tx_thread+0x4a>
			BT_ERR("Uncleared pending sent_cmd");
    239e:	4b1d      	ldr	r3, [pc, #116]	; (2414 <hci_cmd_tx_thread+0xa0>)
    23a0:	9300      	str	r3, [sp, #0]
    23a2:	4a1d      	ldr	r2, [pc, #116]	; (2418 <hci_cmd_tx_thread+0xa4>)
    23a4:	4b1d      	ldr	r3, [pc, #116]	; (241c <hci_cmd_tx_thread+0xa8>)
    23a6:	491e      	ldr	r1, [pc, #120]	; (2420 <hci_cmd_tx_thread+0xac>)
    23a8:	9601      	str	r6, [sp, #4]
    23aa:	481e      	ldr	r0, [pc, #120]	; (2424 <hci_cmd_tx_thread+0xb0>)
    23ac:	f7fe fefe 	bl	11ac <printk>
			net_buf_unref(bt_dev.sent_cmd);
    23b0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    23b4:	f009 fdba 	bl	bf2c <net_buf_unref>
			bt_dev.sent_cmd = NULL;
    23b8:	2300      	movs	r3, #0
    23ba:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		}

		bt_dev.sent_cmd = net_buf_ref(buf);
    23be:	4620      	mov	r0, r4
    23c0:	f009 fdca 	bl	bf58 <net_buf_ref>
    23c4:	f8c8 00a8 	str.w	r0, [r8, #168]	; 0xa8

		BT_DBG("Sending command 0x%04x (buf %p) to driver",
		       cmd(buf)->opcode, buf);

		err = bt_send(buf);
    23c8:	4620      	mov	r0, r4
    23ca:	f7ff ffc7 	bl	235c <bt_send>
		if (err) {
    23ce:	2800      	cmp	r0, #0
    23d0:	d0d7      	beq.n	2382 <hci_cmd_tx_thread+0xe>
			BT_ERR("Unable to send to driver (err %d)", err);
    23d2:	4b10      	ldr	r3, [pc, #64]	; (2414 <hci_cmd_tx_thread+0xa0>)
    23d4:	4a10      	ldr	r2, [pc, #64]	; (2418 <hci_cmd_tx_thread+0xa4>)
    23d6:	4912      	ldr	r1, [pc, #72]	; (2420 <hci_cmd_tx_thread+0xac>)
    23d8:	9001      	str	r0, [sp, #4]
    23da:	9300      	str	r3, [sp, #0]
    23dc:	9602      	str	r6, [sp, #8]
    23de:	4b0f      	ldr	r3, [pc, #60]	; (241c <hci_cmd_tx_thread+0xa8>)
    23e0:	4811      	ldr	r0, [pc, #68]	; (2428 <hci_cmd_tx_thread+0xb4>)
    23e2:	f7fe fee3 	bl	11ac <printk>
			k_sem_give(&bt_dev.ncmd_sem);
    23e6:	4809      	ldr	r0, [pc, #36]	; (240c <hci_cmd_tx_thread+0x98>)
    23e8:	f00a ffe9 	bl	d3be <k_sem_give>
			hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    23ec:	4620      	mov	r0, r4
    23ee:	f7ff fa87 	bl	1900 <net_buf_user_data>
    23f2:	2200      	movs	r2, #0
    23f4:	211f      	movs	r1, #31
    23f6:	8840      	ldrh	r0, [r0, #2]
    23f8:	f7ff fac8 	bl	198c <hci_cmd_done>
				     NULL);
			net_buf_unref(buf);
    23fc:	4620      	mov	r0, r4
    23fe:	f009 fd95 	bl	bf2c <net_buf_unref>
    2402:	e7be      	b.n	2382 <hci_cmd_tx_thread+0xe>
    2404:	20000060 	.word	0x20000060
    2408:	0000dd4e 	.word	0x0000dd4e
    240c:	200000f8 	.word	0x200000f8
    2410:	2000011c 	.word	0x2000011c
    2414:	0000dd53 	.word	0x0000dd53
    2418:	0000dcfd 	.word	0x0000dcfd
    241c:	0000edcd 	.word	0x0000edcd
    2420:	0000dd04 	.word	0x0000dd04
    2424:	0000dff5 	.word	0x0000dff5
    2428:	0000dfc3 	.word	0x0000dfc3

0000242c <bt_recv>:

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2430:	b08b      	sub	sp, #44	; 0x2c
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	if (buf->pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    2432:	68c3      	ldr	r3, [r0, #12]
    2434:	8a5b      	ldrh	r3, [r3, #18]
    2436:	2b03      	cmp	r3, #3

	return bt_dev.drv->send(buf);
}

int bt_recv(struct net_buf *buf)
{
    2438:	af06      	add	r7, sp, #24
    243a:	4604      	mov	r4, r0
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	if (buf->pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    243c:	d80a      	bhi.n	2454 <bt_recv+0x28>
		BT_ERR("Too small user data size");
    243e:	4b75      	ldr	r3, [pc, #468]	; (2614 <bt_recv+0x1e8>)
    2440:	9301      	str	r3, [sp, #4]
    2442:	4b75      	ldr	r3, [pc, #468]	; (2618 <bt_recv+0x1ec>)
    2444:	9300      	str	r3, [sp, #0]
    2446:	4a75      	ldr	r2, [pc, #468]	; (261c <bt_recv+0x1f0>)
    2448:	4b75      	ldr	r3, [pc, #468]	; (2620 <bt_recv+0x1f4>)
    244a:	4976      	ldr	r1, [pc, #472]	; (2624 <bt_recv+0x1f8>)
    244c:	4876      	ldr	r0, [pc, #472]	; (2628 <bt_recv+0x1fc>)
    244e:	f7fe fead 	bl	11ac <printk>
    2452:	e0c6      	b.n	25e2 <bt_recv+0x1b6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(uint8_t *)net_buf_user_data(buf);
    2454:	f7ff fa54 	bl	1900 <net_buf_user_data>
    2458:	7803      	ldrb	r3, [r0, #0]
		net_buf_unref(buf);
		return -EINVAL;
	}

	switch (bt_buf_get_type(buf)) {
    245a:	2b01      	cmp	r3, #1
    245c:	f040 80b6 	bne.w	25cc <bt_recv+0x1a0>
	}
}

static void hci_event(struct net_buf *buf)
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    2460:	6926      	ldr	r6, [r4, #16]
  * @return true if the event can be processed in the RX thread, false
  *         if it cannot.
  */
static inline bool bt_hci_evt_is_prio(uint8_t evt)
{
	switch (evt) {
    2462:	7833      	ldrb	r3, [r6, #0]
    2464:	3b0e      	subs	r3, #14
    2466:	2b01      	cmp	r3, #1
    2468:	f240 80c1 	bls.w	25ee <bt_recv+0x1c2>

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));
    246c:	f104 0510 	add.w	r5, r4, #16
    2470:	2102      	movs	r1, #2
    2472:	4628      	mov	r0, r5
    2474:	f009 fd92 	bl	bf9c <net_buf_simple_pull>

	switch (hdr->evt) {
    2478:	7836      	ldrb	r6, [r6, #0]
    247a:	2e3e      	cmp	r6, #62	; 0x3e
    247c:	f040 808f 	bne.w	259e <bt_recv+0x172>
	}
}

static void hci_le_meta_event(struct net_buf *buf)
{
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    2480:	6926      	ldr	r6, [r4, #16]

	net_buf_pull(buf, sizeof(*evt));
    2482:	2101      	movs	r1, #1
    2484:	4628      	mov	r0, r5
    2486:	f009 fd89 	bl	bf9c <net_buf_simple_pull>

	switch (evt->subevent) {
    248a:	7836      	ldrb	r6, [r6, #0]
    248c:	2e08      	cmp	r6, #8
    248e:	d00d      	beq.n	24ac <bt_recv+0x80>
    2490:	2e09      	cmp	r6, #9
    2492:	d02e      	beq.n	24f2 <bt_recv+0xc6>
    2494:	2e02      	cmp	r6, #2
    2496:	d171      	bne.n	257c <bt_recv+0x150>
#endif /* CONFIG_BLUETOOTH_CENTRAL */
}

static void le_adv_report(struct net_buf *buf)
{
	uint8_t num_reports = net_buf_pull_u8(buf);
    2498:	4628      	mov	r0, r5
    249a:	f009 fd89 	bl	bfb0 <net_buf_simple_pull_u8>
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    249e:	f104 0318 	add.w	r3, r4, #24
    24a2:	60f8      	str	r0, [r7, #12]
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    24a4:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 265c <bt_recv+0x230>
    24a8:	60bb      	str	r3, [r7, #8]
    24aa:	e063      	b.n	2574 <bt_recv+0x148>
    24ac:	f8d4 8010 	ldr.w	r8, [r4, #16]
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    24b0:	485e      	ldr	r0, [pc, #376]	; (262c <bt_recv+0x200>)
    24b2:	f06f 0110 	mvn.w	r1, #16
    24b6:	f7ff fa58 	bl	196a <atomic_and>

	BT_DBG("status: 0x%x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    24ba:	f898 3000 	ldrb.w	r3, [r8]
    24be:	b94b      	cbnz	r3, 24d4 <bt_recv+0xa8>
		memcpy(pub_key, evt->key, 64);
    24c0:	f108 0101 	add.w	r1, r8, #1
    24c4:	2240      	movs	r2, #64	; 0x40
    24c6:	485a      	ldr	r0, [pc, #360]	; (2630 <bt_recv+0x204>)
    24c8:	f7fe fcc9 	bl	e5e <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    24cc:	4631      	mov	r1, r6
    24ce:	4857      	ldr	r0, [pc, #348]	; (262c <bt_recv+0x200>)
    24d0:	f7ff fa3a 	bl	1948 <atomic_or>
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    24d4:	4b57      	ldr	r3, [pc, #348]	; (2634 <bt_recv+0x208>)
    24d6:	681d      	ldr	r5, [r3, #0]
    24d8:	2d00      	cmp	r5, #0
    24da:	d072      	beq.n	25c2 <bt_recv+0x196>
		cb->func(evt->status ? NULL : evt->key);
    24dc:	f898 2000 	ldrb.w	r2, [r8]
    24e0:	682b      	ldr	r3, [r5, #0]
    24e2:	b912      	cbnz	r2, 24ea <bt_recv+0xbe>
    24e4:	f108 0001 	add.w	r0, r8, #1
    24e8:	e000      	b.n	24ec <bt_recv+0xc0>
    24ea:	2000      	movs	r0, #0
    24ec:	4798      	blx	r3
	if (!evt->status) {
		memcpy(pub_key, evt->key, 64);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	for (cb = pub_key_cb; cb; cb = cb->_next) {
    24ee:	686d      	ldr	r5, [r5, #4]
    24f0:	e7f2      	b.n	24d8 <bt_recv+0xac>
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    24f2:	4b51      	ldr	r3, [pc, #324]	; (2638 <bt_recv+0x20c>)
    24f4:	6920      	ldr	r0, [r4, #16]
    24f6:	681a      	ldr	r2, [r3, #0]
    24f8:	461d      	mov	r5, r3
    24fa:	2a00      	cmp	r2, #0
    24fc:	d061      	beq.n	25c2 <bt_recv+0x196>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    24fe:	7803      	ldrb	r3, [r0, #0]
    2500:	b90b      	cbnz	r3, 2506 <bt_recv+0xda>
    2502:	3001      	adds	r0, #1
    2504:	e000      	b.n	2508 <bt_recv+0xdc>
    2506:	2000      	movs	r0, #0
    2508:	4790      	blx	r2
		dh_key_cb = NULL;
    250a:	2300      	movs	r3, #0
    250c:	602b      	str	r3, [r5, #0]
    250e:	e058      	b.n	25c2 <bt_recv+0x196>
	while (num_reports--) {
		const bt_addr_le_t *addr;
		int8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));
    2510:	2109      	movs	r1, #9
    2512:	4628      	mov	r0, r5

	while (num_reports--) {
		const bt_addr_le_t *addr;
		int8_t rssi;

		info = (void *)buf->data;
    2514:	f8d4 9010 	ldr.w	r9, [r4, #16]
		net_buf_pull(buf, sizeof(*info));
    2518:	f009 fd40 	bl	bf9c <net_buf_simple_pull>
		       bt_addr_le_str(&info->addr),
		       info->evt_type, info->length, rssi);

		addr = find_id_addr(&info->addr);

		if (scan_dev_found_cb) {
    251c:	f8db 3000 	ldr.w	r3, [fp]
    2520:	b1e3      	cbz	r3, 255c <bt_recv+0x130>
		int8_t rssi;

		info = (void *)buf->data;
		net_buf_pull(buf, sizeof(*info));

		rssi = info->data[info->length];
    2522:	f899 3008 	ldrb.w	r3, [r9, #8]
    2526:	444b      	add	r3, r9
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    2528:	4628      	mov	r0, r5
    252a:	7a59      	ldrb	r1, [r3, #9]
    252c:	6079      	str	r1, [r7, #4]
    252e:	f009 fd48 	bl	bfc2 <net_buf_simple_headroom>
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    2532:	f899 3008 	ldrb.w	r3, [r9, #8]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2536:	6879      	ldr	r1, [r7, #4]
	state->len = buf->len;
    2538:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		if (scan_dev_found_cb) {
			struct net_buf_simple_state state;

			net_buf_simple_save(&buf->b, &state);

			buf->len = info->length;
    253c:	82a3      	strh	r3, [r4, #20]
 *  @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    253e:	4682      	mov	sl, r0
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    2540:	4648      	mov	r0, r9
    2542:	462b      	mov	r3, r5
    2544:	f810 2b01 	ldrb.w	r2, [r0], #1
    2548:	f8db 6000 	ldr.w	r6, [fp]
    254c:	b249      	sxtb	r1, r1
    254e:	47b0      	blx	r6
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2550:	68bb      	ldr	r3, [r7, #8]
	buf->len = state->len;
    2552:	f8a4 8014 	strh.w	r8, [r4, #20]
 *  @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    2556:	fa13 f38a 	uxtah	r3, r3, sl
    255a:	6123      	str	r3, [r4, #16]
#endif /* CONFIG_BLUETOOTH_CONN */

		/* Get next report iteration by moving pointer to right offset
		 * in buf according to spec 4.2, Vol 2, Part E, 7.7.65.2.
		 */
		net_buf_pull(buf, info->length + sizeof(rssi));
    255c:	f899 1008 	ldrb.w	r1, [r9, #8]
    2560:	4628      	mov	r0, r5
    2562:	3101      	adds	r1, #1
    2564:	f009 fd1a 	bl	bf9c <net_buf_simple_pull>
    2568:	68fb      	ldr	r3, [r7, #12]
    256a:	f103 38ff 	add.w	r8, r3, #4294967295
    256e:	fa5f f388 	uxtb.w	r3, r8
    2572:	60fb      	str	r3, [r7, #12]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_ev_le_advertising_info *info;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    2574:	68fb      	ldr	r3, [r7, #12]
    2576:	2b00      	cmp	r3, #0
    2578:	d1ca      	bne.n	2510 <bt_recv+0xe4>
    257a:	e022      	b.n	25c2 <bt_recv+0x196>
		break;
	case BT_HCI_EVT_LE_ADVERTISING_REPORT:
		le_adv_report(buf);
		break;
	default:
		BT_WARN("Unhandled LE event 0x%02x len %u: %s",
    257c:	8aa5      	ldrh	r5, [r4, #20]
    257e:	6920      	ldr	r0, [r4, #16]
    2580:	4629      	mov	r1, r5
    2582:	f000 fa55 	bl	2a30 <bt_hex>
    2586:	4b23      	ldr	r3, [pc, #140]	; (2614 <bt_recv+0x1e8>)
    2588:	9304      	str	r3, [sp, #16]
    258a:	4b2c      	ldr	r3, [pc, #176]	; (263c <bt_recv+0x210>)
    258c:	9003      	str	r0, [sp, #12]
    258e:	9300      	str	r3, [sp, #0]
    2590:	9502      	str	r5, [sp, #8]
    2592:	9601      	str	r6, [sp, #4]
    2594:	4b2a      	ldr	r3, [pc, #168]	; (2640 <bt_recv+0x214>)
    2596:	4a2b      	ldr	r2, [pc, #172]	; (2644 <bt_recv+0x218>)
    2598:	4922      	ldr	r1, [pc, #136]	; (2624 <bt_recv+0x1f8>)
    259a:	482b      	ldr	r0, [pc, #172]	; (2648 <bt_recv+0x21c>)
    259c:	e00f      	b.n	25be <bt_recv+0x192>
#endif /* CONFIG_BLUETOOTH_SMP || CONFIG_BLUETOOTH_BREDR */
	case BT_HCI_EVT_LE_META_EVENT:
		hci_le_meta_event(buf);
		break;
	default:
		BT_WARN("Unhandled event 0x%02x len %u: %s", hdr->evt,
    259e:	8aa5      	ldrh	r5, [r4, #20]
    25a0:	6920      	ldr	r0, [r4, #16]
    25a2:	4629      	mov	r1, r5
    25a4:	f000 fa44 	bl	2a30 <bt_hex>
    25a8:	4b1a      	ldr	r3, [pc, #104]	; (2614 <bt_recv+0x1e8>)
    25aa:	9304      	str	r3, [sp, #16]
    25ac:	4b23      	ldr	r3, [pc, #140]	; (263c <bt_recv+0x210>)
    25ae:	9003      	str	r0, [sp, #12]
    25b0:	9300      	str	r3, [sp, #0]
    25b2:	4a24      	ldr	r2, [pc, #144]	; (2644 <bt_recv+0x218>)
    25b4:	4b25      	ldr	r3, [pc, #148]	; (264c <bt_recv+0x220>)
    25b6:	491b      	ldr	r1, [pc, #108]	; (2624 <bt_recv+0x1f8>)
    25b8:	4825      	ldr	r0, [pc, #148]	; (2650 <bt_recv+0x224>)
    25ba:	9502      	str	r5, [sp, #8]
    25bc:	9601      	str	r6, [sp, #4]
    25be:	f7fe fdf5 	bl	11ac <printk>
			buf->len, bt_hex(buf->data, buf->len));
		break;

	}

	net_buf_unref(buf);
    25c2:	4620      	mov	r0, r4
    25c4:	f009 fcb2 	bl	bf2c <net_buf_unref>
#if defined(CONFIG_BLUETOOTH_RECV_IS_RX_THREAD)
		hci_event(buf);
#else
		net_buf_put(&bt_dev.rx_queue, buf);
#endif
		return 0;
    25c8:	2000      	movs	r0, #0
    25ca:	e01f      	b.n	260c <bt_recv+0x1e0>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    25cc:	4a11      	ldr	r2, [pc, #68]	; (2614 <bt_recv+0x1e8>)
    25ce:	9301      	str	r3, [sp, #4]
    25d0:	4b11      	ldr	r3, [pc, #68]	; (2618 <bt_recv+0x1ec>)
    25d2:	9202      	str	r2, [sp, #8]
    25d4:	9300      	str	r3, [sp, #0]
    25d6:	4a11      	ldr	r2, [pc, #68]	; (261c <bt_recv+0x1f0>)
    25d8:	4b11      	ldr	r3, [pc, #68]	; (2620 <bt_recv+0x1f4>)
    25da:	4912      	ldr	r1, [pc, #72]	; (2624 <bt_recv+0x1f8>)
    25dc:	481d      	ldr	r0, [pc, #116]	; (2654 <bt_recv+0x228>)
    25de:	f7fe fde5 	bl	11ac <printk>
		net_buf_unref(buf);
    25e2:	4620      	mov	r0, r4
    25e4:	f009 fca2 	bl	bf2c <net_buf_unref>
		return -EINVAL;
    25e8:	f06f 0015 	mvn.w	r0, #21
    25ec:	e00e      	b.n	260c <bt_recv+0x1e0>
{
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;

	BT_DBG("event 0x%02x", hdr->evt);

	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    25ee:	4b09      	ldr	r3, [pc, #36]	; (2614 <bt_recv+0x1e8>)
    25f0:	9301      	str	r3, [sp, #4]
    25f2:	4b09      	ldr	r3, [pc, #36]	; (2618 <bt_recv+0x1ec>)
    25f4:	9300      	str	r3, [sp, #0]
    25f6:	4a09      	ldr	r2, [pc, #36]	; (261c <bt_recv+0x1f0>)
    25f8:	4b14      	ldr	r3, [pc, #80]	; (264c <bt_recv+0x220>)
    25fa:	490a      	ldr	r1, [pc, #40]	; (2624 <bt_recv+0x1f8>)
    25fc:	4816      	ldr	r0, [pc, #88]	; (2658 <bt_recv+0x22c>)
    25fe:	f7fe fdd5 	bl	11ac <printk>
    2602:	2100      	movs	r1, #0
    2604:	4608      	mov	r0, r1
    2606:	f00a f823 	bl	c650 <_SysFatalErrorHandler>
    260a:	e72f      	b.n	246c <bt_recv+0x40>
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
    260c:	3714      	adds	r7, #20
    260e:	46bd      	mov	sp, r7
    2610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2614:	0000dd4e 	.word	0x0000dd4e
    2618:	0000dd53 	.word	0x0000dd53
    261c:	0000dcfd 	.word	0x0000dcfd
    2620:	0000ee2e 	.word	0x0000ee2e
    2624:	0000dd04 	.word	0x0000dd04
    2628:	0000e020 	.word	0x0000e020
    262c:	200000cc 	.word	0x200000cc
    2630:	20000392 	.word	0x20000392
    2634:	20000510 	.word	0x20000510
    2638:	20000518 	.word	0x20000518
    263c:	0000dea2 	.word	0x0000dea2
    2640:	0000ee43 	.word	0x0000ee43
    2644:	0000de65 	.word	0x0000de65
    2648:	0000e049 	.word	0x0000e049
    264c:	0000eddf 	.word	0x0000eddf
    2650:	0000e07e 	.word	0x0000e07e
    2654:	0000e0b0 	.word	0x0000e0b0
    2658:	0000e0d4 	.word	0x0000e0d4
    265c:	20000514 	.word	0x20000514

00002660 <bt_recv_prio>:

int bt_recv_prio(struct net_buf *buf)
{
    2660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2664:	b082      	sub	sp, #8
    2666:	af02      	add	r7, sp, #8
    2668:	4604      	mov	r4, r0
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    266a:	6905      	ldr	r5, [r0, #16]
    266c:	f7ff f948 	bl	1900 <net_buf_user_data>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    2670:	7803      	ldrb	r3, [r0, #0]
    2672:	2b01      	cmp	r3, #1
    2674:	d00d      	beq.n	2692 <bt_recv_prio+0x32>
    2676:	4b3d      	ldr	r3, [pc, #244]	; (276c <bt_recv_prio+0x10c>)
    2678:	9301      	str	r3, [sp, #4]
    267a:	4b3d      	ldr	r3, [pc, #244]	; (2770 <bt_recv_prio+0x110>)
    267c:	9300      	str	r3, [sp, #0]
    267e:	493d      	ldr	r1, [pc, #244]	; (2774 <bt_recv_prio+0x114>)
    2680:	4b3d      	ldr	r3, [pc, #244]	; (2778 <bt_recv_prio+0x118>)
    2682:	4a3e      	ldr	r2, [pc, #248]	; (277c <bt_recv_prio+0x11c>)
    2684:	483e      	ldr	r0, [pc, #248]	; (2780 <bt_recv_prio+0x120>)
    2686:	f7fe fd91 	bl	11ac <printk>
    268a:	2100      	movs	r1, #0
    268c:	4608      	mov	r0, r1
    268e:	f009 ffdf 	bl	c650 <_SysFatalErrorHandler>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    2692:	8aa3      	ldrh	r3, [r4, #20]
    2694:	2b01      	cmp	r3, #1
    2696:	d80d      	bhi.n	26b4 <bt_recv_prio+0x54>
    2698:	4b34      	ldr	r3, [pc, #208]	; (276c <bt_recv_prio+0x10c>)
    269a:	9301      	str	r3, [sp, #4]
    269c:	4b34      	ldr	r3, [pc, #208]	; (2770 <bt_recv_prio+0x110>)
    269e:	9300      	str	r3, [sp, #0]
    26a0:	4934      	ldr	r1, [pc, #208]	; (2774 <bt_recv_prio+0x114>)
    26a2:	4b35      	ldr	r3, [pc, #212]	; (2778 <bt_recv_prio+0x118>)
    26a4:	4a35      	ldr	r2, [pc, #212]	; (277c <bt_recv_prio+0x11c>)
    26a6:	4837      	ldr	r0, [pc, #220]	; (2784 <bt_recv_prio+0x124>)
    26a8:	f7fe fd80 	bl	11ac <printk>
    26ac:	2100      	movs	r1, #0
    26ae:	4608      	mov	r0, r1
    26b0:	f009 ffce 	bl	c650 <_SysFatalErrorHandler>
    26b4:	782b      	ldrb	r3, [r5, #0]
    26b6:	3b0e      	subs	r3, #14
    26b8:	2b01      	cmp	r3, #1
    26ba:	d844      	bhi.n	2746 <bt_recv_prio+0xe6>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));

	net_buf_pull(buf, sizeof(*hdr));
    26bc:	f104 0610 	add.w	r6, r4, #16
    26c0:	2102      	movs	r1, #2
    26c2:	4630      	mov	r0, r6
    26c4:	f009 fc6a 	bl	bf9c <net_buf_simple_pull>

	switch (hdr->evt) {
    26c8:	782b      	ldrb	r3, [r5, #0]
    26ca:	2b0e      	cmp	r3, #14
    26cc:	d00f      	beq.n	26ee <bt_recv_prio+0x8e>
    26ce:	2b0f      	cmp	r3, #15
    26d0:	d120      	bne.n	2714 <bt_recv_prio+0xb4>
	}
}

static void hci_cmd_status(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    26d2:	6925      	ldr	r5, [r4, #16]
	uint16_t opcode = sys_le16_to_cpu(evt->opcode);
    26d4:	f8b5 8002 	ldrh.w	r8, [r5, #2]

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    26d8:	2104      	movs	r1, #4
    26da:	4630      	mov	r0, r6
    26dc:	f009 fc5e 	bl	bf9c <net_buf_simple_pull>

	hci_cmd_done(opcode, evt->status, buf);
    26e0:	4622      	mov	r2, r4
    26e2:	7829      	ldrb	r1, [r5, #0]
    26e4:	4640      	mov	r0, r8
    26e6:	f7ff f951 	bl	198c <hci_cmd_done>

	/* Allow next command to be sent */
	if (evt->ncmd) {
    26ea:	786b      	ldrb	r3, [r5, #1]
    26ec:	e00d      	b.n	270a <bt_recv_prio+0xaa>
	}
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    26ee:	6925      	ldr	r5, [r4, #16]
	uint16_t opcode = sys_le16_to_cpu(evt->opcode);
	uint8_t status;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    26f0:	2103      	movs	r1, #3
    26f2:	4630      	mov	r0, r6
}

static void hci_cmd_complete(struct net_buf *buf)
{
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
	uint16_t opcode = sys_le16_to_cpu(evt->opcode);
    26f4:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	uint8_t status;

	BT_DBG("opcode 0x%04x", opcode);

	net_buf_pull(buf, sizeof(*evt));
    26f8:	f009 fc50 	bl	bf9c <net_buf_simple_pull>

	/* All command return parameters have a 1-byte status in the
	 * beginning, so we can safely make this generalization.
	 */
	status = buf->data[0];
    26fc:	6923      	ldr	r3, [r4, #16]

	hci_cmd_done(opcode, status, buf);
    26fe:	4622      	mov	r2, r4
    2700:	7819      	ldrb	r1, [r3, #0]
    2702:	4640      	mov	r0, r8
    2704:	f7ff f942 	bl	198c <hci_cmd_done>

	/* Allow next command to be sent */
	if (evt->ncmd) {
    2708:	782b      	ldrb	r3, [r5, #0]
    270a:	b1bb      	cbz	r3, 273c <bt_recv_prio+0xdc>
		k_sem_give(&bt_dev.ncmd_sem);
    270c:	481e      	ldr	r0, [pc, #120]	; (2788 <bt_recv_prio+0x128>)
    270e:	f00a fe56 	bl	d3be <k_sem_give>
    2712:	e013      	b.n	273c <bt_recv_prio+0xdc>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		hci_num_completed_packets(buf);
		break;
#endif /* CONFIG_BLUETOOTH_CONN */
	default:
		net_buf_unref(buf);
    2714:	4620      	mov	r0, r4
    2716:	f009 fc09 	bl	bf2c <net_buf_unref>
		BT_ASSERT(0);
    271a:	4b14      	ldr	r3, [pc, #80]	; (276c <bt_recv_prio+0x10c>)
    271c:	9301      	str	r3, [sp, #4]
    271e:	4b14      	ldr	r3, [pc, #80]	; (2770 <bt_recv_prio+0x110>)
    2720:	9300      	str	r3, [sp, #0]
    2722:	4a16      	ldr	r2, [pc, #88]	; (277c <bt_recv_prio+0x11c>)
    2724:	4b14      	ldr	r3, [pc, #80]	; (2778 <bt_recv_prio+0x118>)
    2726:	4913      	ldr	r1, [pc, #76]	; (2774 <bt_recv_prio+0x114>)
    2728:	4818      	ldr	r0, [pc, #96]	; (278c <bt_recv_prio+0x12c>)
    272a:	f7fe fd3f 	bl	11ac <printk>
    272e:	2100      	movs	r1, #0
    2730:	4608      	mov	r0, r1
    2732:	f009 ff8d 	bl	c650 <_SysFatalErrorHandler>
		return -EINVAL;
    2736:	f06f 0015 	mvn.w	r0, #21
    273a:	e013      	b.n	2764 <bt_recv_prio+0x104>
	}

	net_buf_unref(buf);
    273c:	4620      	mov	r0, r4
    273e:	f009 fbf5 	bl	bf2c <net_buf_unref>

	return 0;
    2742:	2000      	movs	r0, #0
    2744:	e00e      	b.n	2764 <bt_recv_prio+0x104>

	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
	BT_ASSERT(buf->len >= sizeof(*hdr));
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    2746:	4b09      	ldr	r3, [pc, #36]	; (276c <bt_recv_prio+0x10c>)
    2748:	9301      	str	r3, [sp, #4]
    274a:	4b09      	ldr	r3, [pc, #36]	; (2770 <bt_recv_prio+0x110>)
    274c:	9300      	str	r3, [sp, #0]
    274e:	4a0b      	ldr	r2, [pc, #44]	; (277c <bt_recv_prio+0x11c>)
    2750:	4b09      	ldr	r3, [pc, #36]	; (2778 <bt_recv_prio+0x118>)
    2752:	4908      	ldr	r1, [pc, #32]	; (2774 <bt_recv_prio+0x114>)
    2754:	480e      	ldr	r0, [pc, #56]	; (2790 <bt_recv_prio+0x130>)
    2756:	f7fe fd29 	bl	11ac <printk>
    275a:	2100      	movs	r1, #0
    275c:	4608      	mov	r0, r1
    275e:	f009 ff77 	bl	c650 <_SysFatalErrorHandler>
    2762:	e7ab      	b.n	26bc <bt_recv_prio+0x5c>
	}

	net_buf_unref(buf);

	return 0;
}
    2764:	46bd      	mov	sp, r7
    2766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    276a:	bf00      	nop
    276c:	0000dd4e 	.word	0x0000dd4e
    2770:	0000dd53 	.word	0x0000dd53
    2774:	0000dd04 	.word	0x0000dd04
    2778:	0000ee36 	.word	0x0000ee36
    277c:	0000dcfd 	.word	0x0000dcfd
    2780:	0000e113 	.word	0x0000e113
    2784:	0000e157 	.word	0x0000e157
    2788:	200000f8 	.word	0x200000f8
    278c:	0000e191 	.word	0x0000e191
    2790:	0000e1b4 	.word	0x0000e1b4

00002794 <bt_hci_driver_register>:

int bt_hci_driver_register(struct bt_hci_driver *drv)
{
    2794:	b580      	push	{r7, lr}
	if (bt_dev.drv) {
    2796:	4a09      	ldr	r2, [pc, #36]	; (27bc <bt_hci_driver_register+0x28>)
    2798:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc

	return 0;
}

int bt_hci_driver_register(struct bt_hci_driver *drv)
{
    279c:	af00      	add	r7, sp, #0
	if (bt_dev.drv) {
    279e:	b93b      	cbnz	r3, 27b0 <bt_hci_driver_register+0x1c>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    27a0:	6881      	ldr	r1, [r0, #8]
    27a2:	b141      	cbz	r1, 27b6 <bt_hci_driver_register+0x22>
    27a4:	68c1      	ldr	r1, [r0, #12]
    27a6:	b131      	cbz	r1, 27b6 <bt_hci_driver_register+0x22>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    27a8:	f8c2 00cc 	str.w	r0, [r2, #204]	; 0xcc
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    27ac:	4618      	mov	r0, r3
    27ae:	bd80      	pop	{r7, pc}
}

int bt_hci_driver_register(struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
		return -EALREADY;
    27b0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    27b4:	bd80      	pop	{r7, pc}
	}

	if (!drv->open || !drv->send) {
		return -EINVAL;
    27b6:	f06f 0015 	mvn.w	r0, #21

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
}
    27ba:	bd80      	pop	{r7, pc}
    27bc:	20000060 	.word	0x20000060

000027c0 <bt_enable>:
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    27c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (!bt_dev.drv) {
    27c4:	4d31      	ldr	r5, [pc, #196]	; (288c <bt_enable+0xcc>)
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    27c6:	b086      	sub	sp, #24
	int err;

	if (!bt_dev.drv) {
    27c8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	}
}
#endif /* !CONFIG_BLUETOOTH_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    27cc:	af06      	add	r7, sp, #24
    27ce:	4680      	mov	r8, r0
	int err;

	if (!bt_dev.drv) {
    27d0:	b963      	cbnz	r3, 27ec <bt_enable+0x2c>
		BT_ERR("No HCI driver registered");
    27d2:	4b2f      	ldr	r3, [pc, #188]	; (2890 <bt_enable+0xd0>)
    27d4:	9301      	str	r3, [sp, #4]
    27d6:	4b2f      	ldr	r3, [pc, #188]	; (2894 <bt_enable+0xd4>)
    27d8:	9300      	str	r3, [sp, #0]
    27da:	4a2f      	ldr	r2, [pc, #188]	; (2898 <bt_enable+0xd8>)
    27dc:	4b2f      	ldr	r3, [pc, #188]	; (289c <bt_enable+0xdc>)
    27de:	4930      	ldr	r1, [pc, #192]	; (28a0 <bt_enable+0xe0>)
    27e0:	4830      	ldr	r0, [pc, #192]	; (28a4 <bt_enable+0xe4>)
    27e2:	f7fe fce3 	bl	11ac <printk>
		return -ENODEV;
    27e6:	f06f 0412 	mvn.w	r4, #18
    27ea:	e04b      	b.n	2884 <bt_enable+0xc4>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    27ec:	2101      	movs	r1, #1
    27ee:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    27f2:	f7ff f8a9 	bl	1948 <atomic_or>
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    27f6:	f010 0401 	ands.w	r4, r0, #1
    27fa:	d13f      	bne.n	287c <bt_enable+0xbc>
		return -EALREADY;
	}

	ready_cb = cb;
    27fc:	4b2a      	ldr	r3, [pc, #168]	; (28a8 <bt_enable+0xe8>)

	/* TX thread */
	k_thread_spawn(cmd_tx_thread_stack, sizeof(cmd_tx_thread_stack),
    27fe:	4a2b      	ldr	r2, [pc, #172]	; (28ac <bt_enable+0xec>)

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
	}

	ready_cb = cb;
    2800:	f8c3 8000 	str.w	r8, [r3]

	/* TX thread */
	k_thread_spawn(cmd_tx_thread_stack, sizeof(cmd_tx_thread_stack),
    2804:	f06f 0308 	mvn.w	r3, #8
    2808:	9302      	str	r3, [sp, #8]
    280a:	f240 410c 	movw	r1, #1036	; 0x40c
    280e:	4623      	mov	r3, r4
    2810:	9404      	str	r4, [sp, #16]
    2812:	9403      	str	r4, [sp, #12]
    2814:	9401      	str	r4, [sp, #4]
    2816:	9400      	str	r4, [sp, #0]
    2818:	4825      	ldr	r0, [pc, #148]	; (28b0 <bt_enable+0xf0>)
    281a:	f00a ffd3 	bl	d7c4 <k_thread_spawn>
		       K_PRIO_COOP(7), 0, K_NO_WAIT);
#endif

	bt_hci_ecc_init();

	err = bt_dev.drv->open();
    281e:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    2822:	689b      	ldr	r3, [r3, #8]
    2824:	4798      	blx	r3
	if (err) {
    2826:	4606      	mov	r6, r0
    2828:	b160      	cbz	r0, 2844 <bt_enable+0x84>
		BT_ERR("HCI driver open failed (%d)", err);
    282a:	4b19      	ldr	r3, [pc, #100]	; (2890 <bt_enable+0xd0>)
    282c:	9302      	str	r3, [sp, #8]
    282e:	4b19      	ldr	r3, [pc, #100]	; (2894 <bt_enable+0xd4>)
    2830:	9001      	str	r0, [sp, #4]
    2832:	9300      	str	r3, [sp, #0]
    2834:	4a18      	ldr	r2, [pc, #96]	; (2898 <bt_enable+0xd8>)
    2836:	4b19      	ldr	r3, [pc, #100]	; (289c <bt_enable+0xdc>)
    2838:	4919      	ldr	r1, [pc, #100]	; (28a0 <bt_enable+0xe0>)
    283a:	481e      	ldr	r0, [pc, #120]	; (28b4 <bt_enable+0xf4>)
    283c:	f7fe fcb6 	bl	11ac <printk>
		return err;
    2840:	4634      	mov	r4, r6
    2842:	e01f      	b.n	2884 <bt_enable+0xc4>
	}

	if (!cb) {
    2844:	f1b8 0f00 	cmp.w	r8, #0
    2848:	d10b      	bne.n	2862 <bt_enable+0xa2>

static int bt_init(void)
{
	int err;

	err = hci_init();
    284a:	f7ff faf5 	bl	1e38 <hci_init>
	if (err) {
    284e:	b9c0      	cbnz	r0, 2882 <bt_enable+0xc2>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    2850:	2102      	movs	r1, #2
    2852:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    2856:	f7ff f877 	bl	1948 <atomic_or>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
#endif

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);
	bt_le_scan_update(false);
    285a:	4620      	mov	r0, r4
    285c:	f7ff facc 	bl	1df8 <bt_le_scan_update>
    2860:	e010      	b.n	2884 <bt_enable+0xc4>
static inline int atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    2862:	2101      	movs	r1, #1
    2864:	f105 0068 	add.w	r0, r5, #104	; 0x68
    2868:	f7ff f86e 	bl	1948 <atomic_or>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    286c:	07c3      	lsls	r3, r0, #31
    286e:	d409      	bmi.n	2884 <bt_enable+0xc4>
		k_fifo_put(&work_q->fifo, work);
    2870:	f105 0160 	add.w	r1, r5, #96	; 0x60
    2874:	4810      	ldr	r0, [pc, #64]	; (28b8 <bt_enable+0xf8>)
    2876:	f00a f80d 	bl	c894 <k_fifo_put>
    287a:	e003      	b.n	2884 <bt_enable+0xc4>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
		return -EALREADY;
    287c:	f06f 0444 	mvn.w	r4, #68	; 0x44
    2880:	e000      	b.n	2884 <bt_enable+0xc4>
static int bt_init(void)
{
	int err;

	err = hci_init();
	if (err) {
    2882:	4604      	mov	r4, r0
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    2884:	4620      	mov	r0, r4
    2886:	46bd      	mov	sp, r7
    2888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    288c:	20000060 	.word	0x20000060
    2890:	0000dd4e 	.word	0x0000dd4e
    2894:	0000dd53 	.word	0x0000dd53
    2898:	0000dcfd 	.word	0x0000dcfd
    289c:	0000ee55 	.word	0x0000ee55
    28a0:	0000dd04 	.word	0x0000dd04
    28a4:	0000e1f2 	.word	0x0000e1f2
    28a8:	200003d4 	.word	0x200003d4
    28ac:	00002375 	.word	0x00002375
    28b0:	200015d8 	.word	0x200015d8
    28b4:	0000e21b 	.word	0x0000e21b
    28b8:	200015c8 	.word	0x200015c8

000028bc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    28bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28c0:	4699      	mov	r9, r3
#endif /* defined(CONFIG_BLUETOOTH_SMP) */
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    28c2:	7803      	ldrb	r3, [r0, #0]
    28c4:	f013 0f01 	tst.w	r3, #1
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    28c8:	af00      	add	r7, sp, #0
    28ca:	4605      	mov	r5, r0
    28cc:	4616      	mov	r6, r2
    28ce:	8843      	ldrh	r3, [r0, #2]
#endif /* defined(CONFIG_BLUETOOTH_SMP) */
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    28d0:	d104      	bne.n	28dc <bt_le_adv_start+0x20>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (param->interval_min < 0x00a0) {
    28d2:	2b9f      	cmp	r3, #159	; 0x9f
    28d4:	d802      	bhi.n	28dc <bt_le_adv_start+0x20>
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
		return -EINVAL;
    28d6:	f06f 0415 	mvn.w	r4, #21
    28da:	e08f      	b.n	29fc <bt_le_adv_start+0x140>
		if (param->interval_min < 0x00a0) {
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    28dc:	88a8      	ldrh	r0, [r5, #4]
    28de:	4283      	cmp	r3, r0
    28e0:	d8f9      	bhi.n	28d6 <bt_le_adv_start+0x1a>
    28e2:	2b1f      	cmp	r3, #31
    28e4:	d9f7      	bls.n	28d6 <bt_le_adv_start+0x1a>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    28e6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    28ea:	d8f4      	bhi.n	28d6 <bt_le_adv_start+0x1a>

	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    28ec:	2005      	movs	r0, #5
    28ee:	f7ff f8d7 	bl	1aa0 <atomic_test_bit.constprop.26>
    28f2:	4604      	mov	r4, r0
    28f4:	2800      	cmp	r0, #0
    28f6:	d17a      	bne.n	29ee <bt_le_adv_start+0x132>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    28f8:	4632      	mov	r2, r6
    28fa:	f242 0008 	movw	r0, #8200	; 0x2008
    28fe:	f7ff f9b3 	bl	1c68 <set_ad>
	if (err) {
    2902:	2800      	cmp	r0, #0
    2904:	d179      	bne.n	29fa <bt_le_adv_start+0x13e>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    2906:	f1b9 0f00 	cmp.w	r9, #0
    290a:	d10a      	bne.n	2922 <bt_le_adv_start+0x66>
    290c:	782b      	ldrb	r3, [r5, #0]
    290e:	07da      	lsls	r2, r3, #31
    2910:	d407      	bmi.n	2922 <bt_le_adv_start+0x66>
		if (err) {
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(*set_param));
    2912:	210f      	movs	r1, #15
    2914:	f242 0006 	movw	r0, #8198	; 0x2006
    2918:	f7ff f8d6 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    291c:	4680      	mov	r8, r0
    291e:	b948      	cbnz	r0, 2934 <bt_le_adv_start+0x78>
    2920:	e068      	b.n	29f4 <bt_le_adv_start+0x138>
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    2922:	6a3a      	ldr	r2, [r7, #32]
    2924:	4649      	mov	r1, r9
    2926:	f242 0009 	movw	r0, #8201	; 0x2009
    292a:	f7ff f99d 	bl	1c68 <set_ad>
		if (err) {
    292e:	2800      	cmp	r0, #0
    2930:	d0ef      	beq.n	2912 <bt_le_adv_start+0x56>
    2932:	e062      	b.n	29fa <bt_le_adv_start+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    2934:	210f      	movs	r1, #15
    2936:	3010      	adds	r0, #16
    2938:	f009 fb14 	bl	bf64 <net_buf_simple_add>

	memset(set_param, 0, sizeof(*set_param));
    293c:	220f      	movs	r2, #15
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(*set_param));
	if (!buf) {
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    293e:	4606      	mov	r6, r0

	memset(set_param, 0, sizeof(*set_param));
    2940:	2100      	movs	r1, #0
    2942:	f7fe fab9 	bl	eb8 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    2946:	886b      	ldrh	r3, [r5, #2]
    2948:	8033      	strh	r3, [r6, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    294a:	88ab      	ldrh	r3, [r5, #4]
    294c:	8073      	strh	r3, [r6, #2]
	set_param->channel_map  = 0x07;
    294e:	2307      	movs	r3, #7
    2950:	7373      	strb	r3, [r6, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    2952:	782b      	ldrb	r3, [r5, #0]
    2954:	07db      	lsls	r3, r3, #31
    2956:	d50b      	bpl.n	2970 <bt_le_adv_start+0xb4>
		/*
		 * If Static Random address is used as Identity address we need
		 * to restore it before advertising is enabled. Otherwise NRPA
		 * used for active scan could be used for advertising.
		 */
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    2958:	2002      	movs	r0, #2
    295a:	f7ff f8a1 	bl	1aa0 <atomic_test_bit.constprop.26>
    295e:	b110      	cbz	r0, 2966 <bt_le_adv_start+0xaa>
			set_random_address(&bt_dev.id_addr.a);
    2960:	4828      	ldr	r0, [pc, #160]	; (2a04 <bt_le_adv_start+0x148>)
    2962:	f7ff f915 	bl	1b90 <set_random_address>
		}

		set_param->own_addr_type = bt_dev.id_addr.type;
    2966:	4b28      	ldr	r3, [pc, #160]	; (2a08 <bt_le_adv_start+0x14c>)
    2968:	781b      	ldrb	r3, [r3, #0]
    296a:	7173      	strb	r3, [r6, #5]
#endif /* CONFIG_BLUETOOTH_PRIVACY */
		set_param->type = BT_LE_ADV_IND;
    296c:	2300      	movs	r3, #0
    296e:	e018      	b.n	29a2 <bt_le_adv_start+0xe6>
	} else {
		if (param->own_addr) {
    2970:	68a8      	ldr	r0, [r5, #8]
    2972:	b130      	cbz	r0, 2982 <bt_le_adv_start+0xc6>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    2974:	7943      	ldrb	r3, [r0, #5]
    2976:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    297a:	d1ac      	bne.n	28d6 <bt_le_adv_start+0x1a>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    297c:	f7ff f908 	bl	1b90 <set_random_address>
    2980:	e001      	b.n	2986 <bt_le_adv_start+0xca>
		} else {
#if defined(CONFIG_BLUETOOTH_PRIVACY)
			err = le_set_rpa();
#else
			err = le_set_nrpa();
    2982:	f7ff fa27 	bl	1dd4 <le_set_nrpa>
    2986:	4605      	mov	r5, r0
#endif /* CONFIG_BLUETOOTH_PRIVACY */
		}

		if (err) {
    2988:	b118      	cbz	r0, 2992 <bt_le_adv_start+0xd6>
			net_buf_unref(buf);
    298a:	4640      	mov	r0, r8
    298c:	f009 face 	bl	bf2c <net_buf_unref>
    2990:	e02b      	b.n	29ea <bt_le_adv_start+0x12e>
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    2992:	2301      	movs	r3, #1
    2994:	7173      	strb	r3, [r6, #5]

		if (sd) {
    2996:	f1b9 0f00 	cmp.w	r9, #0
    299a:	d001      	beq.n	29a0 <bt_le_adv_start+0xe4>
			set_param->type = BT_LE_ADV_SCAN_IND;
    299c:	2302      	movs	r3, #2
    299e:	e000      	b.n	29a2 <bt_le_adv_start+0xe6>
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
    29a0:	2303      	movs	r3, #3
    29a2:	7133      	strb	r3, [r6, #4]
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    29a4:	2200      	movs	r2, #0
    29a6:	4641      	mov	r1, r8
    29a8:	f242 0006 	movw	r0, #8198	; 0x2006
    29ac:	f7ff f8b4 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    29b0:	4605      	mov	r5, r0
    29b2:	b9d0      	cbnz	r0, 29ea <bt_le_adv_start+0x12e>
static int set_advertise_enable(bool enable)
{
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    29b4:	2101      	movs	r1, #1
    29b6:	f242 000a 	movw	r0, #8202	; 0x200a
    29ba:	f7ff f885 	bl	1ac8 <bt_hci_cmd_create>
	if (!buf) {
    29be:	4606      	mov	r6, r0
    29c0:	b1c0      	cbz	r0, 29f4 <bt_le_adv_start+0x138>
		return -ENOBUFS;
	}

	if (enable) {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    29c2:	2101      	movs	r1, #1
    29c4:	3010      	adds	r0, #16
    29c6:	f009 fae0 	bl	bf8a <net_buf_simple_add_u8>
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    29ca:	462a      	mov	r2, r5
    29cc:	4631      	mov	r1, r6
    29ce:	f242 000a 	movw	r0, #8202	; 0x200a
    29d2:	f7ff f8a1 	bl	1b18 <bt_hci_cmd_send_sync>
	if (err) {
    29d6:	b980      	cbnz	r0, 29fa <bt_le_adv_start+0x13e>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	atomic_or(ATOMIC_ELEM(target, bit), mask);
    29d8:	2120      	movs	r1, #32
    29da:	480c      	ldr	r0, [pc, #48]	; (2a0c <bt_le_adv_start+0x150>)
    29dc:	f7fe ffb4 	bl	1948 <atomic_or>
    29e0:	2140      	movs	r1, #64	; 0x40
    29e2:	480a      	ldr	r0, [pc, #40]	; (2a0c <bt_le_adv_start+0x150>)
    29e4:	f7fe ffb0 	bl	1948 <atomic_or>
		return err;
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	return 0;
    29e8:	e008      	b.n	29fc <bt_le_adv_start+0x140>
    29ea:	462c      	mov	r4, r5
    29ec:	e006      	b.n	29fc <bt_le_adv_start+0x140>
	if (!valid_adv_param(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
		return -EALREADY;
    29ee:	f06f 0444 	mvn.w	r4, #68	; 0x44
    29f2:	e003      	b.n	29fc <bt_le_adv_start+0x140>
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
	if (!buf) {
		return -ENOBUFS;
    29f4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    29f8:	e000      	b.n	29fc <bt_le_adv_start+0x140>
	} else {
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
	if (err) {
    29fa:	4604      	mov	r4, r0
	}

	atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	return 0;
}
    29fc:	4620      	mov	r0, r4
    29fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2a02:	bf00      	nop
    2a04:	20000061 	.word	0x20000061
    2a08:	20000060 	.word	0x20000060
    2a0c:	200000cc 	.word	0x200000cc

00002a10 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(int32_t timeout)
{
    2a10:	b598      	push	{r3, r4, r7, lr}
	struct net_buf *buf;

	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2a12:	4601      	mov	r1, r0

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(int32_t timeout)
{
    2a14:	af00      	add	r7, sp, #0
	struct net_buf *buf;

	buf = net_buf_alloc(&hci_rx_pool, timeout);
    2a16:	4805      	ldr	r0, [pc, #20]	; (2a2c <bt_buf_get_rx+0x1c>)
    2a18:	f009 fa1c 	bl	be54 <net_buf_alloc>
	if (buf) {
    2a1c:	4604      	mov	r4, r0
    2a1e:	b110      	cbz	r0, 2a26 <bt_buf_get_rx+0x16>
		net_buf_reserve(buf, CONFIG_BLUETOOTH_HCI_RECV_RESERVE);
    2a20:	2100      	movs	r1, #0
    2a22:	f009 fa6d 	bl	bf00 <net_buf_reserve>
	}

	return buf;
}
    2a26:	4620      	mov	r0, r4
    2a28:	bd98      	pop	{r3, r4, r7, pc}
    2a2a:	bf00      	nop
    2a2c:	20000024 	.word	0x20000024

00002a30 <bt_hex>:
#include <misc/util.h>

#include <bluetooth/log.h>

const char *bt_hex(const void *buf, size_t len)
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    2a34:	f04f 0320 	mov.w	r3, #32
    2a38:	f3ef 8511 	mrs	r5, BASEPRI
    2a3c:	f383 8811 	msr	BASEPRI, r3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    2a40:	4c14      	ldr	r4, [pc, #80]	; (2a94 <bt_hex+0x64>)
    2a42:	4e15      	ldr	r6, [pc, #84]	; (2a98 <bt_hex+0x68>)
    2a44:	7823      	ldrb	r3, [r4, #0]
    2a46:	eb03 12c3 	add.w	r2, r3, r3, lsl #7
	curbuf %= ARRAY_SIZE(hexbufs);
    2a4a:	3301      	adds	r3, #1
    2a4c:	f003 0303 	and.w	r3, r3, #3
	unsigned int mask;
	char *str;
	int i;

	mask = irq_lock();
	str = hexbufs[curbuf++];
    2a50:	4432      	add	r2, r6
	curbuf %= ARRAY_SIZE(hexbufs);
    2a52:	7023      	strb	r3, [r4, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2a54:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);
    2a58:	2940      	cmp	r1, #64	; 0x40
    2a5a:	bf28      	it	cs
    2a5c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    2a5e:	4d0f      	ldr	r5, [pc, #60]	; (2a9c <bt_hex+0x6c>)
    2a60:	3801      	subs	r0, #1
    2a62:	4613      	mov	r3, r2
    2a64:	eb02 0641 	add.w	r6, r2, r1, lsl #1
	curbuf %= ARRAY_SIZE(hexbufs);
	irq_unlock(mask);

	len = min(len, (sizeof(hexbufs[0]) - 1) / 2);

	for (i = 0; i < len; i++) {
    2a68:	42b3      	cmp	r3, r6
    2a6a:	d00d      	beq.n	2a88 <bt_hex+0x58>
		str[i * 2]     = hex[b[i] >> 4];
    2a6c:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    2a70:	0924      	lsrs	r4, r4, #4
    2a72:	3302      	adds	r3, #2
    2a74:	5d2c      	ldrb	r4, [r5, r4]
    2a76:	f803 4c02 	strb.w	r4, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    2a7a:	7804      	ldrb	r4, [r0, #0]
    2a7c:	f004 040f 	and.w	r4, r4, #15
    2a80:	5d2c      	ldrb	r4, [r5, r4]
    2a82:	f803 4c01 	strb.w	r4, [r3, #-1]
    2a86:	e7ef      	b.n	2a68 <bt_hex+0x38>
	}

	str[i * 2] = '\0';
    2a88:	2300      	movs	r3, #0
    2a8a:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]

	return str;
}
    2a8e:	4610      	mov	r0, r2
    2a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a92:	bf00      	nop
    2a94:	2000051c 	.word	0x2000051c
    2a98:	2000051d 	.word	0x2000051d
    2a9c:	0000ee6c 	.word	0x0000ee6c

00002aa0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    2aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aa4:	b082      	sub	sp, #8
	*mem_head = mem_pool;
    2aa6:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) =
    2aa8:	1dc3      	adds	r3, r0, #7

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    2aaa:	4605      	mov	r5, r0
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) =
    2aac:	f023 0303 	bic.w	r3, r3, #3
		mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2ab0:	1e50      	subs	r0, r2, #1

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    2ab2:	460e      	mov	r6, r1
		mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2ab4:	b280      	uxth	r0, r0

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    2ab6:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) =
    2ab8:	801a      	strh	r2, [r3, #0]

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    2aba:	af00      	add	r7, sp, #0
		mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    2abc:	2204      	movs	r2, #4
    2abe:	2100      	movs	r1, #0
    2ac0:	fb06 5000 	mla	r0, r6, r0, r5
    2ac4:	f7fe f9f8 	bl	eb8 <memset>
    2ac8:	3c02      	subs	r4, #2
    2aca:	b2a4      	uxth	r4, r4
	       sizeof(mem_pool));
	while (mem_count--) {
    2acc:	f64f 78ff 	movw	r8, #65535	; 0xffff
    2ad0:	4544      	cmp	r4, r8
    2ad2:	d00c      	beq.n	2aee <mem_init+0x4e>
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
				(mem_size * (mem_count + 1)));
    2ad4:	fb04 6006 	mla	r0, r4, r6, r6
	memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
    2ad8:	182b      	adds	r3, r5, r0
				(mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    2ada:	2204      	movs	r2, #4
    2adc:	1b80      	subs	r0, r0, r6
    2ade:	18b9      	adds	r1, r7, r2
    2ae0:	4428      	add	r0, r5
    2ae2:	3c01      	subs	r4, #1
	memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
	       sizeof(mem_pool));
	while (mem_count--) {
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
    2ae4:	607b      	str	r3, [r7, #4]
    2ae6:	b2a4      	uxth	r4, r4
				(mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    2ae8:	f7fe f9b9 	bl	e5e <memcpy>
    2aec:	e7f0      	b.n	2ad0 <mem_init+0x30>
			 (void *)&next, sizeof(next));
	}
}
    2aee:	3708      	adds	r7, #8
    2af0:	46bd      	mov	sp, r7
    2af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002af6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    2af6:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af8:	b083      	sub	sp, #12
	if (*mem_head) {
    2afa:	6805      	ldr	r5, [r0, #0]
			 (void *)&next, sizeof(next));
	}
}

void *mem_acquire(void **mem_head)
{
    2afc:	af00      	add	r7, sp, #0
    2afe:	4606      	mov	r6, r0
	if (*mem_head) {
    2b00:	b18d      	cbz	r5, 2b26 <mem_acquire+0x30>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    2b02:	1deb      	adds	r3, r5, #7
    2b04:	f023 0303 	bic.w	r3, r3, #3
						  sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2b08:	2204      	movs	r2, #4
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    2b0a:	881c      	ldrh	r4, [r3, #0]
						  sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    2b0c:	4629      	mov	r1, r5
    2b0e:	18b8      	adds	r0, r7, r2
    2b10:	f7fe f9a5 	bl	e5e <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2b14:	687b      	ldr	r3, [r7, #4]
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
						  sizeof(mem_head)));
		free_count--;
    2b16:	3c01      	subs	r4, #1
    2b18:	b2a4      	uxth	r4, r4

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));

		/* Store free mem_count after the list's next pointer */
		if (head) {
    2b1a:	b11b      	cbz	r3, 2b24 <mem_acquire+0x2e>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    2b1c:	1dda      	adds	r2, r3, #7
    2b1e:	f022 0203 	bic.w	r2, r2, #3
    2b22:	8014      	strh	r4, [r2, #0]
				free_count;
		}

		*mem_head = head;
    2b24:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    2b26:	4628      	mov	r0, r5
    2b28:	370c      	adds	r7, #12
    2b2a:	46bd      	mov	sp, r7
    2b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002b2e <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    2b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2b30:	680b      	ldr	r3, [r1, #0]

	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
    2b32:	af00      	add	r7, sp, #0
    2b34:	4606      	mov	r6, r0
    2b36:	460d      	mov	r5, r1
	uint16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    2b38:	b123      	cbz	r3, 2b44 <mem_release+0x16>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    2b3a:	3307      	adds	r3, #7
    2b3c:	f023 0303 	bic.w	r3, r3, #3
    2b40:	881c      	ldrh	r4, [r3, #0]
    2b42:	e000      	b.n	2b46 <mem_release+0x18>
	return NULL;
}

void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0;
    2b44:	461c      	mov	r4, r3
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
						  sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    2b46:	2204      	movs	r2, #4
    2b48:	4629      	mov	r1, r5
    2b4a:	4630      	mov	r0, r6
    2b4c:	f7fe f987 	bl	e5e <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    2b50:	1df2      	adds	r2, r6, #7
    2b52:	f022 0203 	bic.w	r2, r2, #3
    2b56:	1c63      	adds	r3, r4, #1
    2b58:	8013      	strh	r3, [r2, #0]

	*mem_head = mem;
    2b5a:	602e      	str	r6, [r5, #0]
    2b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002b5e <mem_free_count_get>:
}

uint16_t mem_free_count_get(void *mem_head)
{
    2b5e:	b580      	push	{r7, lr}
    2b60:	af00      	add	r7, sp, #0
	uint16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    2b62:	b118      	cbz	r0, 2b6c <mem_free_count_get+0xe>
		free_count = *((uint16_t *)MROUND((uint8_t *)mem_head +
    2b64:	3007      	adds	r0, #7
    2b66:	f020 0003 	bic.w	r0, r0, #3
    2b6a:	8800      	ldrh	r0, [r0, #0]
						  sizeof(mem_head)));
	}

	return free_count;
}
    2b6c:	bd80      	pop	{r7, pc}

00002b6e <mem_get>:

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
    2b6e:	b580      	push	{r7, lr}
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    2b70:	fb02 0001 	mla	r0, r2, r1, r0

	return free_count;
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
    2b74:	af00      	add	r7, sp, #0
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    2b76:	bd80      	pop	{r7, pc}

00002b78 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
    2b78:	b580      	push	{r7, lr}
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) /
    2b7a:	1a40      	subs	r0, r0, r1
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
    2b7c:	af00      	add	r7, sp, #0
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) /
    2b7e:	b280      	uxth	r0, r0
		mem_size);
}
    2b80:	fb90 f0f2 	sdiv	r0, r0, r2
    2b84:	bd80      	pop	{r7, pc}

00002b86 <mem_rcopy>:

void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
    2b86:	b580      	push	{r7, lr}
	src += len;
    2b88:	440a      	add	r2, r1
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) /
		mem_size);
}

void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
    2b8a:	af00      	add	r7, sp, #0
    2b8c:	3801      	subs	r0, #1
	src += len;
	while (len--) {
    2b8e:	428a      	cmp	r2, r1
    2b90:	d004      	beq.n	2b9c <mem_rcopy+0x16>
		*dst++ = *--src;
    2b92:	f812 3d01 	ldrb.w	r3, [r2, #-1]!
    2b96:	f800 3f01 	strb.w	r3, [r0, #1]!
    2b9a:	e7f8      	b.n	2b8e <mem_rcopy+0x8>
	}
}
    2b9c:	bd80      	pop	{r7, pc}

00002b9e <memq_init>:
#include <stdint.h>

inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
    2b9e:	b580      	push	{r7, lr}
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    2ba0:	6010      	str	r0, [r2, #0]
#include <stdint.h>

inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
    2ba2:	af00      	add	r7, sp, #0
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    2ba4:	6008      	str	r0, [r1, #0]

	return link;
}
    2ba6:	bd80      	pop	{r7, pc}

00002ba8 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    2ba8:	6813      	ldr	r3, [r2, #0]

	return link;
}

void *memq_enqueue(void *mem, void *link, void **tail)
{
    2baa:	b580      	push	{r7, lr}
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    2bac:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    2bae:	6813      	ldr	r3, [r2, #0]

	return link;
}

void *memq_enqueue(void *mem, void *link, void **tail)
{
    2bb0:	af00      	add	r7, sp, #0
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    2bb2:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    2bb4:	6011      	str	r1, [r2, #0]

	return link;
}
    2bb6:	4608      	mov	r0, r1
    2bb8:	bd80      	pop	{r7, pc}

00002bba <memq_peek>:

void *memq_peek(void *tail, void *head, void **mem)
{
    2bba:	b580      	push	{r7, lr}
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2bbc:	4281      	cmp	r1, r0

	return link;
}

void *memq_peek(void *tail, void *head, void **mem)
{
    2bbe:	af00      	add	r7, sp, #0
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2bc0:	d003      	beq.n	2bca <memq_peek+0x10>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    2bc2:	b122      	cbz	r2, 2bce <memq_peek+0x14>
		*mem = *((void **)link + 1);
    2bc4:	684b      	ldr	r3, [r1, #4]
    2bc6:	6013      	str	r3, [r2, #0]
    2bc8:	e001      	b.n	2bce <memq_peek+0x14>
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
		return 0;
    2bca:	2000      	movs	r0, #0
    2bcc:	bd80      	pop	{r7, pc}
    2bce:	4608      	mov	r0, r1
	if (mem) {
		*mem = *((void **)link + 1);
	}

	return link;
}
    2bd0:	bd80      	pop	{r7, pc}

00002bd2 <memq_dequeue>:

void *memq_dequeue(void *tail, void **head, void **mem)
{
    2bd2:	b580      	push	{r7, lr}
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    2bd4:	680b      	ldr	r3, [r1, #0]
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2bd6:	4283      	cmp	r3, r0

	return link;
}

void *memq_dequeue(void *tail, void **head, void **mem)
{
    2bd8:	af00      	add	r7, sp, #0
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    2bda:	d003      	beq.n	2be4 <memq_dequeue+0x12>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    2bdc:	b12a      	cbz	r2, 2bea <memq_dequeue+0x18>
		*mem = *((void **)link + 1);
    2bde:	6858      	ldr	r0, [r3, #4]
    2be0:	6010      	str	r0, [r2, #0]
    2be2:	e002      	b.n	2bea <memq_dequeue+0x18>

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);

	/* increment the head to next link node */
	*head = *((void **)link);
    2be4:	2300      	movs	r3, #0
    2be6:	681b      	ldr	r3, [r3, #0]
    2be8:	deff      	udf	#255	; 0xff
    2bea:	681a      	ldr	r2, [r3, #0]
    2bec:	600a      	str	r2, [r1, #0]

	return link;
}
    2bee:	4618      	mov	r0, r3
    2bf0:	bd80      	pop	{r7, pc}
	...

00002bf4 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    2bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    2bf8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 2c30 <mayfly_init+0x3c>
    2bfc:	f8df 9034 	ldr.w	r9, [pc, #52]	; 2c34 <mayfly_init+0x40>
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    2c00:	af00      	add	r7, sp, #0
	uint8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    2c02:	2404      	movs	r4, #4
	while (callee_id--) {
    2c04:	3c01      	subs	r4, #1
    2c06:	b2e4      	uxtb	r4, r4
    2c08:	2cff      	cmp	r4, #255	; 0xff
    2c0a:	d00e      	beq.n	2c2a <mayfly_init+0x36>
    2c0c:	2504      	movs	r5, #4
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    2c0e:	00a6      	lsls	r6, r4, #2
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    2c10:	3d01      	subs	r5, #1
    2c12:	b2ed      	uxtb	r5, r5
    2c14:	2dff      	cmp	r5, #255	; 0xff
    2c16:	d0f5      	beq.n	2c04 <mayfly_init+0x10>
			memq_init(mfl[callee_id][caller_id],
    2c18:	1970      	adds	r0, r6, r5
    2c1a:	00c0      	lsls	r0, r0, #3
    2c1c:	eb08 0100 	add.w	r1, r8, r0
    2c20:	1d0a      	adds	r2, r1, #4
    2c22:	4448      	add	r0, r9
    2c24:	f7ff ffbb 	bl	2b9e <memq_init>
    2c28:	e7f2      	b.n	2c10 <mayfly_init+0x1c>
    2c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c2e:	bf00      	nop
    2c30:	200007a4 	.word	0x200007a4
    2c34:	20000724 	.word	0x20000724

00002c38 <mayfly_enqueue>:
	}
}

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    2c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c3c:	4605      	mov	r5, r0
    2c3e:	af00      	add	r7, sp, #0
    2c40:	460e      	mov	r6, r1
    2c42:	461c      	mov	r4, r3
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2c44:	b10a      	cbz	r2, 2c4a <mayfly_enqueue+0x12>
    2c46:	2301      	movs	r3, #1
    2c48:	e00a      	b.n	2c60 <mayfly_enqueue+0x28>
    2c4a:	f008 fbad 	bl	b3a8 <mayfly_prio_is_equal>
    2c4e:	2800      	cmp	r0, #0
    2c50:	d0f9      	beq.n	2c46 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id);
    2c52:	4631      	mov	r1, r6
    2c54:	4628      	mov	r0, r5
    2c56:	f008 fb7b 	bl	b350 <mayfly_is_enabled>
			struct mayfly *m)
{
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    2c5a:	fab0 f380 	clz	r3, r0
    2c5e:	095b      	lsrs	r3, r3, #5
		!mayfly_is_enabled(caller_id, callee_id);

	/* shadow the ack */
	ack = m->_ack;
    2c60:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    2c62:	7820      	ldrb	r0, [r4, #0]
    2c64:	1a80      	subs	r0, r0, r2
	if (state != 0) {
    2c66:	f010 0803 	ands.w	r8, r0, #3
    2c6a:	d00b      	beq.n	2c84 <mayfly_enqueue+0x4c>
		if (chain) {
    2c6c:	b133      	cbz	r3, 2c7c <mayfly_enqueue+0x44>
			if (state != 1) {
    2c6e:	f1b8 0f01 	cmp.w	r8, #1
    2c72:	d020      	beq.n	2cb6 <mayfly_enqueue+0x7e>
				/* mark as ready in queue */
				m->_req = ack + 1;
    2c74:	3201      	adds	r2, #1
    2c76:	b2d2      	uxtb	r2, r2
    2c78:	7022      	strb	r2, [r4, #0]
    2c7a:	e017      	b.n	2cac <mayfly_enqueue+0x74>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    2c7c:	3202      	adds	r2, #2
    2c7e:	b2d2      	uxtb	r2, r2
    2c80:	7022      	strb	r2, [r4, #0]
    2c82:	e000      	b.n	2c86 <mayfly_enqueue+0x4e>
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    2c84:	b92b      	cbnz	r3, 2c92 <mayfly_enqueue+0x5a>
		/* call fp */
		m->fp(m->param);
    2c86:	68e3      	ldr	r3, [r4, #12]
    2c88:	68a0      	ldr	r0, [r4, #8]
    2c8a:	4798      	blx	r3

		return 0;
    2c8c:	2000      	movs	r0, #0
    2c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    2c92:	3201      	adds	r2, #1
    2c94:	b2d2      	uxtb	r2, r2
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    2c96:	4b09      	ldr	r3, [pc, #36]	; (2cbc <mayfly_enqueue+0x84>)

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    2c98:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    2c9a:	eb05 0286 	add.w	r2, r5, r6, lsl #2
    2c9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2ca2:	3204      	adds	r2, #4
    2ca4:	6861      	ldr	r1, [r4, #4]
    2ca6:	4620      	mov	r0, r4
    2ca8:	f7ff ff7e 	bl	2ba8 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    2cac:	4631      	mov	r1, r6
    2cae:	4628      	mov	r0, r5
    2cb0:	f008 fb8e 	bl	b3d0 <mayfly_pend>
    2cb4:	e7ea      	b.n	2c8c <mayfly_enqueue+0x54>

				return 0;
			}

			/* already ready */
			return 1;
    2cb6:	4640      	mov	r0, r8

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
    2cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cbc:	200007a4 	.word	0x200007a4

00002cc0 <mayfly_run>:

void mayfly_run(uint8_t callee_id)
{
    2cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2cc4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2d6c <mayfly_run+0xac>

	return 0;
}

void mayfly_run(uint8_t callee_id)
{
    2cc8:	b085      	sub	sp, #20
    2cca:	4683      	mov	fp, r0
    2ccc:	af00      	add	r7, sp, #0
	uint8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    2cce:	2404      	movs	r4, #4
	while (caller_id--) {
    2cd0:	3c01      	subs	r4, #1
    2cd2:	b2e4      	uxtb	r4, r4
    2cd4:	2cff      	cmp	r4, #255	; 0xff
    2cd6:	d044      	beq.n	2d62 <mayfly_run+0xa2>
		void *link;
		struct mayfly *m = 0;
    2cd8:	f107 0910 	add.w	r9, r7, #16

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2cdc:	eb04 068b 	add.w	r6, r4, fp, lsl #2

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;
    2ce0:	2300      	movs	r3, #0
    2ce2:	f849 3d04 	str.w	r3, [r9, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2ce6:	eb0a 05c6 	add.w	r5, sl, r6, lsl #3
    2cea:	464a      	mov	r2, r9
    2cec:	f85a 1036 	ldr.w	r1, [sl, r6, lsl #3]
    2cf0:	6868      	ldr	r0, [r5, #4]
    2cf2:	f7ff ff62 	bl	2bba <memq_peek>
			}

			/* dequeue if not re-pended */
			req = m->_req;
			if (((req - m->_ack) & 0x03) != 1) {
				memq_dequeue(mft[callee_id][caller_id].tail,
    2cf6:	607e      	str	r6, [r7, #4]
	while (caller_id--) {
		void *link;
		struct mayfly *m = 0;

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    2cf8:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    2cfa:	f1b8 0f00 	cmp.w	r8, #0
    2cfe:	d0e7      	beq.n	2cd0 <mayfly_run+0x10>
			uint8_t state;
			uint8_t req;

			/* execute work if ready */
			req = m->_req;
    2d00:	68fb      	ldr	r3, [r7, #12]
    2d02:	781e      	ldrb	r6, [r3, #0]
			state = (req - m->_ack) & 0x03;
    2d04:	785a      	ldrb	r2, [r3, #1]
    2d06:	1ab6      	subs	r6, r6, r2
    2d08:	f006 0603 	and.w	r6, r6, #3
			if (state == 1) {
    2d0c:	2e01      	cmp	r6, #1
    2d0e:	d104      	bne.n	2d1a <mayfly_run+0x5a>
				/* mark mayfly as ran */
				m->_ack--;
    2d10:	3a01      	subs	r2, #1
    2d12:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    2d14:	6898      	ldr	r0, [r3, #8]
    2d16:	68da      	ldr	r2, [r3, #12]
    2d18:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			req = m->_req;
    2d1a:	68fa      	ldr	r2, [r7, #12]
    2d1c:	7813      	ldrb	r3, [r2, #0]
			if (((req - m->_ack) & 0x03) != 1) {
    2d1e:	7852      	ldrb	r2, [r2, #1]
				/* call the mayfly function */
				m->fp(m->param);
			}

			/* dequeue if not re-pended */
			req = m->_req;
    2d20:	b2db      	uxtb	r3, r3
			if (((req - m->_ack) & 0x03) != 1) {
    2d22:	1a9a      	subs	r2, r3, r2
    2d24:	f002 0203 	and.w	r2, r2, #3
    2d28:	2a01      	cmp	r2, #1
    2d2a:	603b      	str	r3, [r7, #0]
    2d2c:	d009      	beq.n	2d42 <mayfly_run+0x82>
				memq_dequeue(mft[callee_id][caller_id].tail,
    2d2e:	2200      	movs	r2, #0
    2d30:	4629      	mov	r1, r5
    2d32:	6868      	ldr	r0, [r5, #4]
    2d34:	f7ff ff4d 	bl	2bd2 <memq_dequeue>
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    2d38:	68fa      	ldr	r2, [r7, #12]

				/* reset mayfly state to idle */
				m->_ack = req;
    2d3a:	683b      	ldr	r3, [r7, #0]
				memq_dequeue(mft[callee_id][caller_id].tail,
					     &mft[callee_id][caller_id].head,
					     0);

				/* release link into dequeued mayfly struct */
				m->_link = link;
    2d3c:	f8c2 8004 	str.w	r8, [r2, #4]

				/* reset mayfly state to idle */
				m->_ack = req;
    2d40:	7053      	strb	r3, [r2, #1]
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    2d42:	4b0a      	ldr	r3, [pc, #40]	; (2d6c <mayfly_run+0xac>)
    2d44:	6879      	ldr	r1, [r7, #4]
    2d46:	6868      	ldr	r0, [r5, #4]
    2d48:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
    2d4c:	464a      	mov	r2, r9
    2d4e:	f7ff ff34 	bl	2bba <memq_peek>
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    2d52:	2e01      	cmp	r6, #1
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    2d54:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    2d56:	d1d0      	bne.n	2cfa <mayfly_run+0x3a>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty.
				 */
				if (link) {
    2d58:	b118      	cbz	r0, 2d62 <mayfly_run+0xa2>
					mayfly_pend(callee_id, callee_id);
    2d5a:	4659      	mov	r1, fp
    2d5c:	4658      	mov	r0, fp
    2d5e:	f008 fb37 	bl	b3d0 <mayfly_pend>

				return;
			}
		}
	}
}
    2d62:	3714      	adds	r7, #20
    2d64:	46bd      	mov	sp, r7
    2d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d6a:	bf00      	nop
    2d6c:	200007a4 	.word	0x200007a4

00002d70 <util_ones_count_get>:

#include <stdint.h>
#include "util.h"

uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
    2d70:	b590      	push	{r4, r7, lr}
    2d72:	1e42      	subs	r2, r0, #1
    2d74:	af00      	add	r7, sp, #0
	uint8_t one_count = 0;
    2d76:	2000      	movs	r0, #0

	while (octets_len--) {
    2d78:	3901      	subs	r1, #1
    2d7a:	b2c9      	uxtb	r1, r1
    2d7c:	29ff      	cmp	r1, #255	; 0xff
    2d7e:	d008      	beq.n	2d92 <util_ones_count_get+0x22>
		uint8_t bite;

		bite = *octets;
    2d80:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		while (bite) {
    2d84:	2b00      	cmp	r3, #0
    2d86:	d0f7      	beq.n	2d78 <util_ones_count_get+0x8>
			bite &= (bite - 1);
    2d88:	1e5c      	subs	r4, r3, #1
			one_count++;
    2d8a:	3001      	adds	r0, #1
	while (octets_len--) {
		uint8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    2d8c:	4023      	ands	r3, r4
			one_count++;
    2d8e:	b2c0      	uxtb	r0, r0
    2d90:	e7f8      	b.n	2d84 <util_ones_count_get+0x14>
		}
		octets++;
	}

	return one_count;
}
    2d92:	bd90      	pop	{r4, r7, pc}

00002d94 <cntr_init>:
#endif

static uint8_t _refcount;

void cntr_init(void)
{
    2d94:	b580      	push	{r7, lr}
	NRF_RTC->PRESCALER = 0;
    2d96:	4b06      	ldr	r3, [pc, #24]	; (2db0 <cntr_init+0x1c>)
    2d98:	2200      	movs	r2, #0
    2d9a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    2d9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    2da2:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
#endif

static uint8_t _refcount;

void cntr_init(void)
{
    2da6:	af00      	add	r7, sp, #0
	NRF_RTC->PRESCALER = 0;
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    2da8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    2dac:	bd80      	pop	{r7, pc}
    2dae:	bf00      	nop
    2db0:	4000b000 	.word	0x4000b000

00002db4 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

uint32_t cntr_start(void)
{
    2db4:	b580      	push	{r7, lr}
	if (_refcount++) {
    2db6:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <cntr_start+0x1c>)
    2db8:	7818      	ldrb	r0, [r3, #0]
    2dba:	1c42      	adds	r2, r0, #1
    2dbc:	701a      	strb	r2, [r3, #0]
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
			     RTC_INTENSET_COMPARE1_Msk);
}

uint32_t cntr_start(void)
{
    2dbe:	af00      	add	r7, sp, #0
    2dc0:	2301      	movs	r3, #1
	if (_refcount++) {
    2dc2:	b910      	cbnz	r0, 2dca <cntr_start+0x16>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    2dc4:	4a03      	ldr	r2, [pc, #12]	; (2dd4 <cntr_start+0x20>)
    2dc6:	6013      	str	r3, [r2, #0]

	return 0;
    2dc8:	bd80      	pop	{r7, pc}
}

uint32_t cntr_start(void)
{
	if (_refcount++) {
		return 1;
    2dca:	4618      	mov	r0, r3
	}

	NRF_RTC->TASKS_START = 1;

	return 0;
}
    2dcc:	bd80      	pop	{r7, pc}
    2dce:	bf00      	nop
    2dd0:	20000824 	.word	0x20000824
    2dd4:	4000b000 	.word	0x4000b000

00002dd8 <cntr_stop>:

uint32_t cntr_stop(void)
{
    2dd8:	b5b0      	push	{r4, r5, r7, lr}
	LL_ASSERT(_refcount);
    2dda:	4c0f      	ldr	r4, [pc, #60]	; (2e18 <cntr_stop+0x40>)

	return 0;
}

uint32_t cntr_stop(void)
{
    2ddc:	b082      	sub	sp, #8
	LL_ASSERT(_refcount);
    2dde:	7825      	ldrb	r5, [r4, #0]

	return 0;
}

uint32_t cntr_stop(void)
{
    2de0:	af02      	add	r7, sp, #8
	LL_ASSERT(_refcount);
    2de2:	b96d      	cbnz	r5, 2e00 <cntr_stop+0x28>
    2de4:	4b0d      	ldr	r3, [pc, #52]	; (2e1c <cntr_stop+0x44>)
    2de6:	9301      	str	r3, [sp, #4]
    2de8:	4b0d      	ldr	r3, [pc, #52]	; (2e20 <cntr_stop+0x48>)
    2dea:	9300      	str	r3, [sp, #0]
    2dec:	490d      	ldr	r1, [pc, #52]	; (2e24 <cntr_stop+0x4c>)
    2dee:	4b0e      	ldr	r3, [pc, #56]	; (2e28 <cntr_stop+0x50>)
    2df0:	4a0e      	ldr	r2, [pc, #56]	; (2e2c <cntr_stop+0x54>)
    2df2:	480f      	ldr	r0, [pc, #60]	; (2e30 <cntr_stop+0x58>)
    2df4:	f7fe f9da 	bl	11ac <printk>
    2df8:	4629      	mov	r1, r5
    2dfa:	4628      	mov	r0, r5
    2dfc:	f009 fc28 	bl	c650 <_SysFatalErrorHandler>

	if (--_refcount) {
    2e00:	7820      	ldrb	r0, [r4, #0]
    2e02:	3801      	subs	r0, #1
    2e04:	b2c0      	uxtb	r0, r0
    2e06:	7020      	strb	r0, [r4, #0]
    2e08:	2301      	movs	r3, #1
    2e0a:	b910      	cbnz	r0, 2e12 <cntr_stop+0x3a>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    2e0c:	4a09      	ldr	r2, [pc, #36]	; (2e34 <cntr_stop+0x5c>)
    2e0e:	6053      	str	r3, [r2, #4]

	return 0;
    2e10:	e000      	b.n	2e14 <cntr_stop+0x3c>
uint32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);

	if (--_refcount) {
		return 1;
    2e12:	4618      	mov	r0, r3
	}

	NRF_RTC->TASKS_STOP = 1;

	return 0;
}
    2e14:	46bd      	mov	sp, r7
    2e16:	bdb0      	pop	{r4, r5, r7, pc}
    2e18:	20000824 	.word	0x20000824
    2e1c:	0000dd4e 	.word	0x0000dd4e
    2e20:	0000dd53 	.word	0x0000dd53
    2e24:	0000dd04 	.word	0x0000dd04
    2e28:	0000ee7d 	.word	0x0000ee7d
    2e2c:	0000dcfd 	.word	0x0000dcfd
    2e30:	0000e2d5 	.word	0x0000e2d5
    2e34:	4000b000 	.word	0x4000b000

00002e38 <cntr_cnt_get>:

uint32_t cntr_cnt_get(void)
{
    2e38:	b580      	push	{r7, lr}
	return NRF_RTC->COUNTER;
    2e3a:	4b02      	ldr	r3, [pc, #8]	; (2e44 <cntr_cnt_get+0xc>)

	return 0;
}

uint32_t cntr_cnt_get(void)
{
    2e3c:	af00      	add	r7, sp, #0
	return NRF_RTC->COUNTER;
    2e3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    2e42:	bd80      	pop	{r7, pc}
    2e44:	4000b000 	.word	0x4000b000

00002e48 <cntr_cmp_set>:

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
    2e48:	b580      	push	{r7, lr}
	NRF_RTC->CC[cmp] = value;
    2e4a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2e4e:	4b02      	ldr	r3, [pc, #8]	; (2e58 <cntr_cmp_set+0x10>)
{
	return NRF_RTC->COUNTER;
}

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
    2e50:	af00      	add	r7, sp, #0
	NRF_RTC->CC[cmp] = value;
    2e52:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    2e56:	bd80      	pop	{r7, pc}
    2e58:	4000b000 	.word	0x4000b000

00002e5c <rand_init>:
};

static struct rand *rng;

void rand_init(uint8_t *context, uint8_t context_len)
{
    2e5c:	b5b0      	push	{r4, r5, r7, lr}
	LL_ASSERT(context_len > sizeof(struct rand));
    2e5e:	2904      	cmp	r1, #4
};

static struct rand *rng;

void rand_init(uint8_t *context, uint8_t context_len)
{
    2e60:	b082      	sub	sp, #8
    2e62:	4604      	mov	r4, r0
    2e64:	af02      	add	r7, sp, #8
    2e66:	460d      	mov	r5, r1
	LL_ASSERT(context_len > sizeof(struct rand));
    2e68:	d80d      	bhi.n	2e86 <rand_init+0x2a>
    2e6a:	4b10      	ldr	r3, [pc, #64]	; (2eac <rand_init+0x50>)
    2e6c:	9301      	str	r3, [sp, #4]
    2e6e:	4b10      	ldr	r3, [pc, #64]	; (2eb0 <rand_init+0x54>)
    2e70:	9300      	str	r3, [sp, #0]
    2e72:	4910      	ldr	r1, [pc, #64]	; (2eb4 <rand_init+0x58>)
    2e74:	4b10      	ldr	r3, [pc, #64]	; (2eb8 <rand_init+0x5c>)
    2e76:	4a11      	ldr	r2, [pc, #68]	; (2ebc <rand_init+0x60>)
    2e78:	4811      	ldr	r0, [pc, #68]	; (2ec0 <rand_init+0x64>)
    2e7a:	f7fe f997 	bl	11ac <printk>
    2e7e:	2100      	movs	r1, #0
    2e80:	4608      	mov	r0, r1
    2e82:	f009 fbe5 	bl	c650 <_SysFatalErrorHandler>

	rng = (struct rand *)context;
    2e86:	4b0f      	ldr	r3, [pc, #60]	; (2ec4 <rand_init+0x68>)
    2e88:	601c      	str	r4, [r3, #0]
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    2e8a:	4b0f      	ldr	r3, [pc, #60]	; (2ec8 <rand_init+0x6c>)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
	rng->first = rng->last = 0;
    2e8c:	2100      	movs	r1, #0

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    2e8e:	2201      	movs	r2, #1
void rand_init(uint8_t *context, uint8_t context_len)
{
	LL_ASSERT(context_len > sizeof(struct rand));

	rng = (struct rand *)context;
	rng->count = context_len - sizeof(struct rand) + 1;
    2e90:	3d03      	subs	r5, #3
    2e92:	7025      	strb	r5, [r4, #0]
	rng->first = rng->last = 0;
    2e94:	70a1      	strb	r1, [r4, #2]
    2e96:	7061      	strb	r1, [r4, #1]

	NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    2e98:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	NRF_RNG->EVENTS_VALRDY = 0;
    2e9c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    2ea0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	NRF_RNG->TASKS_START = 1;
    2ea4:	601a      	str	r2, [r3, #0]
}
    2ea6:	46bd      	mov	sp, r7
    2ea8:	bdb0      	pop	{r4, r5, r7, pc}
    2eaa:	bf00      	nop
    2eac:	0000dd4e 	.word	0x0000dd4e
    2eb0:	0000dd53 	.word	0x0000dd53
    2eb4:	0000dd04 	.word	0x0000dd04
    2eb8:	0000ee87 	.word	0x0000ee87
    2ebc:	0000dcfd 	.word	0x0000dcfd
    2ec0:	0000e300 	.word	0x0000e300
    2ec4:	20000828 	.word	0x20000828
    2ec8:	4000d000 	.word	0x4000d000

00002ecc <rand_get>:

uint32_t rand_get(uint8_t octets, uint8_t *rand)
{
    2ecc:	b590      	push	{r4, r7, lr}
	uint8_t reserved;
	uint8_t first;

	while (octets) {
		if (rng->first == rng->last) {
    2ece:	4b15      	ldr	r3, [pc, #84]	; (2f24 <rand_get+0x58>)
    2ed0:	681a      	ldr	r2, [r3, #0]

	NRF_RNG->TASKS_START = 1;
}

uint32_t rand_get(uint8_t octets, uint8_t *rand)
{
    2ed2:	af00      	add	r7, sp, #0
    2ed4:	7853      	ldrb	r3, [r2, #1]
	uint8_t reserved;
	uint8_t first;

	while (octets) {
    2ed6:	b180      	cbz	r0, 2efa <rand_get+0x2e>
		if (rng->first == rng->last) {
    2ed8:	7894      	ldrb	r4, [r2, #2]
    2eda:	429c      	cmp	r4, r3
    2edc:	d00d      	beq.n	2efa <rand_get+0x2e>
			break;
		}

		rand[--octets] = rng->rand[rng->first];
    2ede:	3801      	subs	r0, #1
    2ee0:	4413      	add	r3, r2
    2ee2:	b2c0      	uxtb	r0, r0
    2ee4:	78db      	ldrb	r3, [r3, #3]
    2ee6:	540b      	strb	r3, [r1, r0]

		first = rng->first + 1;
    2ee8:	7853      	ldrb	r3, [r2, #1]
		if (first == rng->count) {
    2eea:	7814      	ldrb	r4, [r2, #0]
			break;
		}

		rand[--octets] = rng->rand[rng->first];

		first = rng->first + 1;
    2eec:	3301      	adds	r3, #1
    2eee:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
			first = 0;
    2ef0:	429c      	cmp	r4, r3
    2ef2:	bf08      	it	eq
    2ef4:	2300      	moveq	r3, #0
		}
		rng->first = first;
    2ef6:	7053      	strb	r3, [r2, #1]
    2ef8:	e7ec      	b.n	2ed4 <rand_get+0x8>
	}

	reserved = RAND_RESERVED;
	first = rng->first;
	while (reserved--) {
    2efa:	2105      	movs	r1, #5
    2efc:	3901      	subs	r1, #1
    2efe:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    2f02:	d00d      	beq.n	2f20 <rand_get+0x54>
		if (first == rng->last) {
    2f04:	7894      	ldrb	r4, [r2, #2]
    2f06:	429c      	cmp	r4, r3
    2f08:	d103      	bne.n	2f12 <rand_get+0x46>
			NRF_RNG->TASKS_START = 1;
    2f0a:	4b07      	ldr	r3, [pc, #28]	; (2f28 <rand_get+0x5c>)
    2f0c:	2201      	movs	r2, #1
    2f0e:	601a      	str	r2, [r3, #0]

			break;
    2f10:	bd90      	pop	{r4, r7, pc}
		}

		first++;
    2f12:	3301      	adds	r3, #1
		if (first == rng->count) {
    2f14:	7814      	ldrb	r4, [r2, #0]
			NRF_RNG->TASKS_START = 1;

			break;
		}

		first++;
    2f16:	b2db      	uxtb	r3, r3
		if (first == rng->count) {
			first = 0;
    2f18:	429c      	cmp	r4, r3
    2f1a:	bf08      	it	eq
    2f1c:	2300      	moveq	r3, #0
    2f1e:	e7ed      	b.n	2efc <rand_get+0x30>
		}
	}

	return octets;
}
    2f20:	bd90      	pop	{r4, r7, pc}
    2f22:	bf00      	nop
    2f24:	20000828 	.word	0x20000828
    2f28:	4000d000 	.word	0x4000d000

00002f2c <isr_rand>:

void isr_rand(void *param)
{
    2f2c:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    2f2e:	4a15      	ldr	r2, [pc, #84]	; (2f84 <isr_rand+0x58>)
    2f30:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

	return octets;
}

void isr_rand(void *param)
{
    2f34:	af00      	add	r7, sp, #0
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    2f36:	b31b      	cbz	r3, 2f80 <isr_rand+0x54>
		uint8_t last;

		last = rng->last + 1;
    2f38:	4b13      	ldr	r3, [pc, #76]	; (2f88 <isr_rand+0x5c>)
    2f3a:	6819      	ldr	r1, [r3, #0]
    2f3c:	7888      	ldrb	r0, [r1, #2]
		if (last == rng->count) {
    2f3e:	780c      	ldrb	r4, [r1, #0]
			last = 0;
		}

		if (last == rng->first) {
    2f40:	784d      	ldrb	r5, [r1, #1]
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
		uint8_t last;

		last = rng->last + 1;
    2f42:	1c43      	adds	r3, r0, #1
    2f44:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
			last = 0;
    2f46:	42a3      	cmp	r3, r4
    2f48:	bf08      	it	eq
    2f4a:	2300      	moveq	r3, #0
		}

		if (last == rng->first) {
    2f4c:	429d      	cmp	r5, r3
    2f4e:	d105      	bne.n	2f5c <isr_rand+0x30>
			/* this condition should not happen
			 * , but due to probable bug in HW
			 * , new value could be generated
			 * before task is stopped.
			 */
			NRF_RNG->TASKS_STOP = 1;
    2f50:	2301      	movs	r3, #1
    2f52:	6053      	str	r3, [r2, #4]
			NRF_RNG->EVENTS_VALRDY = 0;
    2f54:	2300      	movs	r3, #0
    2f56:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

			return;
    2f5a:	bdb0      	pop	{r4, r5, r7, pc}
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
    2f5c:	4408      	add	r0, r1
    2f5e:	f8d2 5508 	ldr.w	r5, [r2, #1288]	; 0x508
    2f62:	70c5      	strb	r5, [r0, #3]
		last = rng->last + 1;
		if (last == rng->count) {
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    2f64:	2000      	movs	r0, #0

			return;
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;
    2f66:	708b      	strb	r3, [r1, #2]
		last = rng->last + 1;
		if (last == rng->count) {
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    2f68:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;

		last = rng->last + 1;
    2f6c:	3301      	adds	r3, #1
			last = 0;
		}

		NRF_RNG->EVENTS_VALRDY = 0;

		if (last == rng->first) {
    2f6e:	7849      	ldrb	r1, [r1, #1]
		}

		rng->rand[rng->last] = NRF_RNG->VALUE;
		rng->last = last;

		last = rng->last + 1;
    2f70:	b2db      	uxtb	r3, r3
		if (last == rng->count) {
			last = 0;
    2f72:	429c      	cmp	r4, r3
    2f74:	bf08      	it	eq
    2f76:	2300      	moveq	r3, #0
		}

		NRF_RNG->EVENTS_VALRDY = 0;

		if (last == rng->first) {
    2f78:	4299      	cmp	r1, r3
			NRF_RNG->TASKS_STOP = 1;
    2f7a:	bf04      	itt	eq
    2f7c:	2301      	moveq	r3, #1
    2f7e:	6053      	streq	r3, [r2, #4]
    2f80:	bdb0      	pop	{r4, r5, r7, pc}
    2f82:	bf00      	nop
    2f84:	4000d000 	.word	0x4000d000
    2f88:	20000828 	.word	0x20000828

00002f8c <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le,
		 uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le,
		 uint8_t * const cipher_text_be)
{
    2f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8e:	b08d      	sub	sp, #52	; 0x34
    2f90:	af00      	add	r7, sp, #0
    2f92:	460e      	mov	r6, r1
    2f94:	4615      	mov	r5, r2
		uint8_t key[16];
		uint8_t clear_text[16];
		uint8_t cipher_text[16];
	} __packed ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    2f96:	4601      	mov	r1, r0
    2f98:	2210      	movs	r2, #16
    2f9a:	4638      	mov	r0, r7

void ecb_encrypt(uint8_t const *const key_le,
		 uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le,
		 uint8_t * const cipher_text_be)
{
    2f9c:	461c      	mov	r4, r3
		uint8_t key[16];
		uint8_t clear_text[16];
		uint8_t cipher_text[16];
	} __packed ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    2f9e:	f7ff fdf2 	bl	2b86 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    2fa2:	2210      	movs	r2, #16
    2fa4:	18b8      	adds	r0, r7, r2
    2fa6:	4631      	mov	r1, r6
    2fa8:	f7ff fded 	bl	2b86 <mem_rcopy>

	do {
		NRF_ECB->TASKS_STOPECB = 1;
    2fac:	4b19      	ldr	r3, [pc, #100]	; (3014 <ecb_encrypt+0x88>)
    2fae:	2201      	movs	r2, #1
		NRF_ECB->ECBDATAPTR = (uint32_t) &ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
    2fb0:	2000      	movs	r0, #0
    2fb2:	461e      	mov	r6, r3

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));

	do {
		NRF_ECB->TASKS_STOPECB = 1;
    2fb4:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t) &ecb;
    2fb6:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    2fba:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    2fbe:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    2fc2:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    2fc4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    2fc8:	b931      	cbnz	r1, 2fd8 <ecb_encrypt+0x4c>
				(NRF_ECB->EVENTS_ERRORECB == 0) &&
    2fca:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STOPECB = 1;
		NRF_ECB->ECBDATAPTR = (uint32_t) &ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    2fce:	b919      	cbnz	r1, 2fd8 <ecb_encrypt+0x4c>
				(NRF_ECB->EVENTS_ERRORECB == 0) &&
				(NRF_ECB->ECBDATAPTR != 0)) {
    2fd0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
		NRF_ECB->ECBDATAPTR = (uint32_t) &ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
		NRF_ECB->EVENTS_ERRORECB = 0;
		NRF_ECB->TASKS_STARTECB = 1;
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
				(NRF_ECB->EVENTS_ERRORECB == 0) &&
    2fd4:	2900      	cmp	r1, #0
    2fd6:	d1f5      	bne.n	2fc4 <ecb_encrypt+0x38>
				(NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    2fd8:	6072      	str	r2, [r6, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    2fda:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
    2fde:	2900      	cmp	r1, #0
    2fe0:	d1e8      	bne.n	2fb4 <ecb_encrypt+0x28>
    2fe2:	f8d3 e504 	ldr.w	lr, [r3, #1284]	; 0x504
    2fe6:	f1be 0f00 	cmp.w	lr, #0
    2fea:	d0e3      	beq.n	2fb4 <ecb_encrypt+0x28>

	NRF_ECB->ECBDATAPTR = 0;
    2fec:	4b09      	ldr	r3, [pc, #36]	; (3014 <ecb_encrypt+0x88>)
    2fee:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504

	if (cipher_text_le) {
    2ff2:	b12d      	cbz	r5, 3000 <ecb_encrypt+0x74>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    2ff4:	2210      	movs	r2, #16
    2ff6:	f107 0120 	add.w	r1, r7, #32
    2ffa:	4628      	mov	r0, r5
    2ffc:	f7ff fdc3 	bl	2b86 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    3000:	b12c      	cbz	r4, 300e <ecb_encrypt+0x82>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    3002:	2210      	movs	r2, #16
    3004:	f107 0120 	add.w	r1, r7, #32
    3008:	4620      	mov	r0, r4
    300a:	f7fd ff28 	bl	e5e <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    300e:	3734      	adds	r7, #52	; 0x34
    3010:	46bd      	mov	sp, r7
    3012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3014:	4000e000 	.word	0x4000e000

00003018 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void *param)
{
    3018:	b480      	push	{r7}
	ARG_UNUSED(param);

	if (sfp_radio_isr) {
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <isr_radio+0x18>)
    301c:	681b      	ldr	r3, [r3, #0]
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void *param)
{
    301e:	af00      	add	r7, sp, #0
	ARG_UNUSED(param);

	if (sfp_radio_isr) {
    3020:	b113      	cbz	r3, 3028 <isr_radio+0x10>
		sfp_radio_isr();
	}
}
    3022:	46bd      	mov	sp, r7
    3024:	bc80      	pop	{r7}
void isr_radio(void *param)
{
	ARG_UNUSED(param);

	if (sfp_radio_isr) {
		sfp_radio_isr();
    3026:	4718      	bx	r3
	}
}
    3028:	46bd      	mov	sp, r7
    302a:	bc80      	pop	{r7}
    302c:	4770      	bx	lr
    302e:	bf00      	nop
    3030:	20000a40 	.word	0x20000a40

00003034 <radio_isr_set>:

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    3034:	b480      	push	{r7}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    3036:	4b08      	ldr	r3, [pc, #32]	; (3058 <radio_isr_set+0x24>)
    3038:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    303a:	4b08      	ldr	r3, [pc, #32]	; (305c <radio_isr_set+0x28>)
    303c:	2210      	movs	r2, #16
    303e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 * @return N/A
 */

static inline void _NvicIrqUnpend(unsigned int irq)
{
	__scs.nvic.icpr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
    3042:	4b07      	ldr	r3, [pc, #28]	; (3060 <radio_isr_set+0x2c>)
    3044:	2202      	movs	r2, #2
		sfp_radio_isr();
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    3046:	af00      	add	r7, sp, #0
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	_NvicIrqUnpend(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    3048:	2001      	movs	r0, #1
    304a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
}
    304e:	46bd      	mov	sp, r7
    3050:	bc80      	pop	{r7}
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	_NvicIrqUnpend(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    3052:	f009 ba2f 	b.w	c4b4 <_arch_irq_enable>
    3056:	bf00      	nop
    3058:	20000a40 	.word	0x20000a40
    305c:	40001000 	.word	0x40001000
    3060:	e000e000 	.word	0xe000e000

00003064 <radio_reset>:
}

void radio_reset(void)
{
    3064:	b580      	push	{r7, lr}
	irq_disable(RADIO_IRQn);
    3066:	2001      	movs	r0, #1
	_NvicIrqUnpend(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
}

void radio_reset(void)
{
    3068:	af00      	add	r7, sp, #0
	irq_disable(RADIO_IRQn);
    306a:	f009 fa33 	bl	c4d4 <_arch_irq_disable>

	NRF_RADIO->POWER =
    306e:	4b04      	ldr	r3, [pc, #16]	; (3080 <radio_reset+0x1c>)
    3070:	2200      	movs	r2, #0
    3072:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    3076:	2201      	movs	r2, #1
    3078:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    307c:	bd80      	pop	{r7, pc}
    307e:	bf00      	nop
    3080:	40001000 	.word	0x40001000

00003084 <radio_phy_set>:
	    ((RADIO_POWER_POWER_Enabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
}

void radio_phy_set(uint8_t phy)
{
    3084:	b580      	push	{r7, lr}
    3086:	af00      	add	r7, sp, #0
	NRF_RADIO->MODE =
    3088:	b110      	cbz	r0, 3090 <radio_phy_set+0xc>
    308a:	f000 000f 	and.w	r0, r0, #15
    308e:	e000      	b.n	3092 <radio_phy_set+0xe>
    3090:	2003      	movs	r0, #3
    3092:	4b02      	ldr	r3, [pc, #8]	; (309c <radio_phy_set+0x18>)
    3094:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    3098:	bd80      	pop	{r7, pc}
    309a:	bf00      	nop
    309c:	40001000 	.word	0x40001000

000030a0 <radio_tx_power_set>:
	    (((phy) ? (uint32_t)phy : RADIO_MODE_MODE_Ble_1Mbit) <<
	     RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
}

void radio_tx_power_set(uint32_t power)
{
    30a0:	b580      	push	{r7, lr}
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    30a2:	4b02      	ldr	r3, [pc, #8]	; (30ac <radio_tx_power_set+0xc>)
	    (((phy) ? (uint32_t)phy : RADIO_MODE_MODE_Ble_1Mbit) <<
	     RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
}

void radio_tx_power_set(uint32_t power)
{
    30a4:	af00      	add	r7, sp, #0
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    30a6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    30aa:	bd80      	pop	{r7, pc}
    30ac:	40001000 	.word	0x40001000

000030b0 <radio_freq_chnl_set>:
}

void radio_freq_chnl_set(uint32_t chnl)
{
    30b0:	b580      	push	{r7, lr}
	NRF_RADIO->FREQUENCY = chnl;
    30b2:	4b02      	ldr	r3, [pc, #8]	; (30bc <radio_freq_chnl_set+0xc>)
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
}

void radio_freq_chnl_set(uint32_t chnl)
{
    30b4:	af00      	add	r7, sp, #0
	NRF_RADIO->FREQUENCY = chnl;
    30b6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    30ba:	bd80      	pop	{r7, pc}
    30bc:	40001000 	.word	0x40001000

000030c0 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(uint32_t iv)
{
    30c0:	b580      	push	{r7, lr}
	NRF_RADIO->DATAWHITEIV = iv;
    30c2:	4b02      	ldr	r3, [pc, #8]	; (30cc <radio_whiten_iv_set+0xc>)
{
	NRF_RADIO->FREQUENCY = chnl;
}

void radio_whiten_iv_set(uint32_t iv)
{
    30c4:	af00      	add	r7, sp, #0
	NRF_RADIO->DATAWHITEIV = iv;
    30c6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
    30ca:	bd80      	pop	{r7, pc}
    30cc:	40001000 	.word	0x40001000

000030d0 <radio_aa_set>:
}

void radio_aa_set(uint8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    30d0:	4a0b      	ldr	r2, [pc, #44]	; (3100 <radio_aa_set+0x30>)
    30d2:	2300      	movs	r3, #0
{
	NRF_RADIO->DATAWHITEIV = iv;
}

void radio_aa_set(uint8_t *aa)
{
    30d4:	b580      	push	{r7, lr}
	NRF_RADIO->TXADDRESS =
    30d6:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    30da:	2301      	movs	r3, #1
    30dc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    30e0:	78c3      	ldrb	r3, [r0, #3]
    30e2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    30e6:	7843      	ldrb	r3, [r0, #1]
    30e8:	7881      	ldrb	r1, [r0, #2]
    30ea:	041b      	lsls	r3, r3, #16
    30ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    30f0:	7801      	ldrb	r1, [r0, #0]
    30f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
{
	NRF_RADIO->DATAWHITEIV = iv;
}

void radio_aa_set(uint8_t *aa)
{
    30f6:	af00      	add	r7, sp, #0
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    30f8:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    30fc:	bd80      	pop	{r7, pc}
    30fe:	bf00      	nop
    3100:	40001000 	.word	0x40001000

00003104 <radio_pkt_configure>:
}

void radio_pkt_configure(uint8_t preamble16, uint8_t bits_len, uint8_t max_len)
{
    3104:	b580      	push	{r7, lr}
	}
#endif

	NRF_RADIO->PCNF0 = ((((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			     RADIO_PCNF0_S0LEN_Msk) |
			     ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    3106:	f001 030f 	and.w	r3, r1, #15
			     (((RADIO_PCNF0_S1INCL_Include) <<
			       RADIO_PCNF0_S1INCL_Pos) &
			       RADIO_PCNF0_S1INCL_Msk) |
			     ((((preamble16) ? RADIO_PCNF0_PLEN_16bit :
			       RADIO_PCNF0_PLEN_8bit) << RADIO_PCNF0_PLEN_Pos) &
			       RADIO_PCNF0_PLEN_Msk) |
    310a:	f1c1 0108 	rsb	r1, r1, #8
    310e:	0409      	lsls	r1, r1, #16
    3110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
#if !defined(CONFIG_SOC_SERIES_NRF51X)
			     (((RADIO_PCNF0_S1INCL_Include) <<
			       RADIO_PCNF0_S1INCL_Pos) &
			       RADIO_PCNF0_S1INCL_Msk) |
			     ((((preamble16) ? RADIO_PCNF0_PLEN_16bit :
			       RADIO_PCNF0_PLEN_8bit) << RADIO_PCNF0_PLEN_Pos) &
    3114:	2800      	cmp	r0, #0
			       RADIO_PCNF0_PLEN_Msk) |
    3116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    311a:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    311e:	ea41 0103 	orr.w	r1, r1, r3
#if !defined(CONFIG_SOC_SERIES_NRF51X)
			     (((RADIO_PCNF0_S1INCL_Include) <<
			       RADIO_PCNF0_S1INCL_Pos) &
			       RADIO_PCNF0_S1INCL_Msk) |
			     ((((preamble16) ? RADIO_PCNF0_PLEN_16bit :
			       RADIO_PCNF0_PLEN_8bit) << RADIO_PCNF0_PLEN_Pos) &
    3122:	bf18      	it	ne
    3124:	f04f 7080 	movne.w	r0, #16777216	; 0x1000000
	if (bits_len == 8) {
		bits_len = 5;
	}
#endif

	NRF_RADIO->PCNF0 = ((((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    3128:	4b06      	ldr	r3, [pc, #24]	; (3144 <radio_pkt_configure+0x40>)
#if !defined(CONFIG_SOC_SERIES_NRF51X)
			     (((RADIO_PCNF0_S1INCL_Include) <<
			       RADIO_PCNF0_S1INCL_Pos) &
			       RADIO_PCNF0_S1INCL_Msk) |
			     ((((preamble16) ? RADIO_PCNF0_PLEN_16bit :
			       RADIO_PCNF0_PLEN_8bit) << RADIO_PCNF0_PLEN_Pos) &
    312a:	bf08      	it	eq
    312c:	2000      	moveq	r0, #0
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    312e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
			     (((RADIO_PCNF0_S1INCL_Include) <<
			       RADIO_PCNF0_S1INCL_Pos) &
			       RADIO_PCNF0_S1INCL_Msk) |
			     ((((preamble16) ? RADIO_PCNF0_PLEN_16bit :
			       RADIO_PCNF0_PLEN_8bit) << RADIO_PCNF0_PLEN_Pos) &
			       RADIO_PCNF0_PLEN_Msk) |
    3132:	4301      	orrs	r1, r0
			       RADIO_PCNF1_STATLEN_Msk) |
			     (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			       RADIO_PCNF1_BALEN_Msk) |
			     (((RADIO_PCNF1_ENDIAN_Little) <<
			       RADIO_PCNF1_ENDIAN_Pos) &
			      RADIO_PCNF1_ENDIAN_Msk) |
    3134:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
	if (bits_len == 8) {
		bits_len = 5;
	}
#endif

	NRF_RADIO->PCNF0 = ((((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    3138:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_RADIO->PREFIX0 = aa[3];
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
}

void radio_pkt_configure(uint8_t preamble16, uint8_t bits_len, uint8_t max_len)
{
    313c:	af00      	add	r7, sp, #0
#endif
			     ((((uint32_t)8-bits_len) <<
			       RADIO_PCNF0_S1LEN_Pos) &
			       RADIO_PCNF0_S1LEN_Msk));

	NRF_RADIO->PCNF1 = (((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    313e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    3142:	bd80      	pop	{r7, pc}
    3144:	40001000 	.word	0x40001000

00003148 <radio_pkt_rx_set>:
    3148:	b580      	push	{r7, lr}
    314a:	4b02      	ldr	r3, [pc, #8]	; (3154 <radio_pkt_rx_set+0xc>)
    314c:	af00      	add	r7, sp, #0
    314e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    3152:	bd80      	pop	{r7, pc}
    3154:	40001000 	.word	0x40001000

00003158 <radio_pkt_tx_set>:
{
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
    3158:	b580      	push	{r7, lr}
	NRF_RADIO->PACKETPTR = (uint32_t)tx_packet;
    315a:	4b02      	ldr	r3, [pc, #8]	; (3164 <radio_pkt_tx_set+0xc>)
{
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
}

void radio_pkt_tx_set(void *tx_packet)
{
    315c:	af00      	add	r7, sp, #0
	NRF_RADIO->PACKETPTR = (uint32_t)tx_packet;
    315e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    3162:	bd80      	pop	{r7, pc}
    3164:	40001000 	.word	0x40001000

00003168 <radio_rx_enable>:
}

void radio_rx_enable(void)
{
    3168:	b580      	push	{r7, lr}
	NRF_RADIO->TASKS_RXEN = 1;
    316a:	4b02      	ldr	r3, [pc, #8]	; (3174 <radio_rx_enable+0xc>)
    316c:	2201      	movs	r2, #1
{
	NRF_RADIO->PACKETPTR = (uint32_t)tx_packet;
}

void radio_rx_enable(void)
{
    316e:	af00      	add	r7, sp, #0
	NRF_RADIO->TASKS_RXEN = 1;
    3170:	605a      	str	r2, [r3, #4]
    3172:	bd80      	pop	{r7, pc}
    3174:	40001000 	.word	0x40001000

00003178 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
    3178:	b580      	push	{r7, lr}
	NRF_RADIO->TASKS_TXEN = 1;
    317a:	4b02      	ldr	r3, [pc, #8]	; (3184 <radio_tx_enable+0xc>)
    317c:	2201      	movs	r2, #1
{
	NRF_RADIO->TASKS_RXEN = 1;
}

void radio_tx_enable(void)
{
    317e:	af00      	add	r7, sp, #0
	NRF_RADIO->TASKS_TXEN = 1;
    3180:	601a      	str	r2, [r3, #0]
    3182:	bd80      	pop	{r7, pc}
    3184:	40001000 	.word	0x40001000

00003188 <radio_disable>:
}

void radio_disable(void)
{
    3188:	b580      	push	{r7, lr}
	NRF_RADIO->SHORTS = 0;
    318a:	4b04      	ldr	r3, [pc, #16]	; (319c <radio_disable+0x14>)
    318c:	2200      	movs	r2, #0
    318e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    3192:	2201      	movs	r2, #1
{
	NRF_RADIO->TASKS_TXEN = 1;
}

void radio_disable(void)
{
    3194:	af00      	add	r7, sp, #0
	NRF_RADIO->SHORTS = 0;
	NRF_RADIO->TASKS_DISABLE = 1;
    3196:	611a      	str	r2, [r3, #16]
    3198:	bd80      	pop	{r7, pc}
    319a:	bf00      	nop
    319c:	40001000 	.word	0x40001000

000031a0 <radio_status_reset>:
}

void radio_status_reset(void)
{
    31a0:	b580      	push	{r7, lr}
	NRF_RADIO->EVENTS_READY = 0;
    31a2:	4b07      	ldr	r3, [pc, #28]	; (31c0 <radio_status_reset+0x20>)
    31a4:	2200      	movs	r2, #0
    31a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->SHORTS = 0;
	NRF_RADIO->TASKS_DISABLE = 1;
}

void radio_status_reset(void)
{
    31aa:	af00      	add	r7, sp, #0
	NRF_RADIO->EVENTS_READY = 0;
	NRF_RADIO->EVENTS_ADDRESS = 0;
    31ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    31b0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    31b4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    31b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    31bc:	bd80      	pop	{r7, pc}
    31be:	bf00      	nop
    31c0:	40001000 	.word	0x40001000

000031c4 <radio_is_ready>:
}

uint32_t radio_is_ready(void)
{
    31c4:	b580      	push	{r7, lr}
	return NRF_RADIO->EVENTS_READY;
    31c6:	4b02      	ldr	r3, [pc, #8]	; (31d0 <radio_is_ready+0xc>)
	NRF_RADIO->EVENTS_END = 0;
	NRF_RADIO->EVENTS_DISABLED = 0;
}

uint32_t radio_is_ready(void)
{
    31c8:	af00      	add	r7, sp, #0
	return NRF_RADIO->EVENTS_READY;
    31ca:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    31ce:	bd80      	pop	{r7, pc}
    31d0:	40001000 	.word	0x40001000

000031d4 <radio_is_done>:

uint32_t radio_is_done(void)
{
    31d4:	b580      	push	{r7, lr}
	return NRF_RADIO->EVENTS_END;
    31d6:	4b02      	ldr	r3, [pc, #8]	; (31e0 <radio_is_done+0xc>)
{
	return NRF_RADIO->EVENTS_READY;
}

uint32_t radio_is_done(void)
{
    31d8:	af00      	add	r7, sp, #0
	return NRF_RADIO->EVENTS_END;
    31da:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    31de:	bd80      	pop	{r7, pc}
    31e0:	40001000 	.word	0x40001000

000031e4 <radio_is_idle>:
{
	return NRF_RADIO->EVENTS_DISABLED;
}

uint32_t radio_is_idle(void)
{
    31e4:	b580      	push	{r7, lr}
	return (NRF_RADIO->STATE == 0);
    31e6:	4b04      	ldr	r3, [pc, #16]	; (31f8 <radio_is_idle+0x14>)
    31e8:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    31ec:	fab0 f080 	clz	r0, r0
{
	return NRF_RADIO->EVENTS_DISABLED;
}

uint32_t radio_is_idle(void)
{
    31f0:	af00      	add	r7, sp, #0
	return (NRF_RADIO->STATE == 0);
}
    31f2:	0940      	lsrs	r0, r0, #5
    31f4:	bd80      	pop	{r7, pc}
    31f6:	bf00      	nop
    31f8:	40001000 	.word	0x40001000

000031fc <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
    31fc:	b580      	push	{r7, lr}
	NRF_RADIO->CRCCNF =
    31fe:	4b05      	ldr	r3, [pc, #20]	; (3214 <radio_crc_configure+0x18>)
    3200:	f240 1203 	movw	r2, #259	; 0x103
    3204:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
{
	return (NRF_RADIO->STATE == 0);
}

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
    3208:	af00      	add	r7, sp, #0
	NRF_RADIO->CRCCNF =
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    320a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    320e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    3212:	bd80      	pop	{r7, pc}
    3214:	40001000 	.word	0x40001000

00003218 <radio_crc_is_valid>:
}

uint32_t radio_crc_is_valid(void)
{
    3218:	b580      	push	{r7, lr}
	return NRF_RADIO->CRCSTATUS;
    321a:	4b02      	ldr	r3, [pc, #8]	; (3224 <radio_crc_is_valid+0xc>)
	NRF_RADIO->CRCPOLY = polynomial;
	NRF_RADIO->CRCINIT = iv;
}

uint32_t radio_crc_is_valid(void)
{
    321c:	af00      	add	r7, sp, #0
	return NRF_RADIO->CRCSTATUS;
    321e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    3222:	bd80      	pop	{r7, pc}
    3224:	40001000 	.word	0x40001000

00003228 <radio_pkt_empty_get>:
static uint8_t MALIGN(4) _pkt_scratch[
			((RADIO_PDU_LEN_MAX + 3) > RADIO_ACPDU_SIZE_MAX) ?
			(RADIO_PDU_LEN_MAX + 3) : RADIO_ACPDU_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
    3228:	b580      	push	{r7, lr}
	return _pkt_empty;
}
    322a:	4801      	ldr	r0, [pc, #4]	; (3230 <radio_pkt_empty_get+0x8>)
static uint8_t MALIGN(4) _pkt_scratch[
			((RADIO_PDU_LEN_MAX + 3) > RADIO_ACPDU_SIZE_MAX) ?
			(RADIO_PDU_LEN_MAX + 3) : RADIO_ACPDU_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
    322c:	af00      	add	r7, sp, #0
	return _pkt_empty;
}
    322e:	bd80      	pop	{r7, pc}
    3230:	20000930 	.word	0x20000930

00003234 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
    3234:	b580      	push	{r7, lr}
	return _pkt_scratch;
}
    3236:	4801      	ldr	r0, [pc, #4]	; (323c <radio_pkt_scratch_get+0x8>)
{
	return _pkt_empty;
}

void *radio_pkt_scratch_get(void)
{
    3238:	af00      	add	r7, sp, #0
	return _pkt_scratch;
}
    323a:	bd80      	pop	{r7, pc}
    323c:	2000082c 	.word	0x2000082c

00003240 <radio_switch_complete_and_rx>:

void radio_switch_complete_and_rx(void)
{
    3240:	b580      	push	{r7, lr}
	NRF_RADIO->SHORTS =
    3242:	4b03      	ldr	r3, [pc, #12]	; (3250 <radio_switch_complete_and_rx+0x10>)
    3244:	220b      	movs	r2, #11
{
	return _pkt_scratch;
}

void radio_switch_complete_and_rx(void)
{
    3246:	af00      	add	r7, sp, #0
	NRF_RADIO->SHORTS =
    3248:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    324c:	bd80      	pop	{r7, pc}
    324e:	bf00      	nop
    3250:	40001000 	.word	0x40001000

00003254 <radio_switch_complete_and_tx>:
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk |
	     RADIO_SHORTS_DISABLED_RXEN_Msk);
}

void radio_switch_complete_and_tx(void)
{
    3254:	b580      	push	{r7, lr}
	NRF_RADIO->SHORTS =
    3256:	4b03      	ldr	r3, [pc, #12]	; (3264 <radio_switch_complete_and_tx+0x10>)
    3258:	2207      	movs	r2, #7
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk |
	     RADIO_SHORTS_DISABLED_RXEN_Msk);
}

void radio_switch_complete_and_tx(void)
{
    325a:	af00      	add	r7, sp, #0
	NRF_RADIO->SHORTS =
    325c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    3260:	bd80      	pop	{r7, pc}
    3262:	bf00      	nop
    3264:	40001000 	.word	0x40001000

00003268 <radio_switch_complete_and_disable>:
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk |
	     RADIO_SHORTS_DISABLED_TXEN_Msk);
}

void radio_switch_complete_and_disable(void)
{
    3268:	b580      	push	{r7, lr}
	NRF_RADIO->SHORTS =
    326a:	4b03      	ldr	r3, [pc, #12]	; (3278 <radio_switch_complete_and_disable+0x10>)
    326c:	2203      	movs	r2, #3
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk |
	     RADIO_SHORTS_DISABLED_TXEN_Msk);
}

void radio_switch_complete_and_disable(void)
{
    326e:	af00      	add	r7, sp, #0
	NRF_RADIO->SHORTS =
    3270:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    3274:	bd80      	pop	{r7, pc}
    3276:	bf00      	nop
    3278:	40001000 	.word	0x40001000

0000327c <radio_rssi_measure>:
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
}

void radio_rssi_measure(void)
{
    327c:	b580      	push	{r7, lr}
	NRF_RADIO->SHORTS |=
    327e:	4a04      	ldr	r2, [pc, #16]	; (3290 <radio_rssi_measure+0x14>)
    3280:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    3284:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	NRF_RADIO->SHORTS =
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
}

void radio_rssi_measure(void)
{
    3288:	af00      	add	r7, sp, #0
	NRF_RADIO->SHORTS |=
    328a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    328e:	bd80      	pop	{r7, pc}
    3290:	40001000 	.word	0x40001000

00003294 <radio_rssi_get>:
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

uint32_t radio_rssi_get(void)
{
    3294:	b580      	push	{r7, lr}
	return NRF_RADIO->RSSISAMPLE;
    3296:	4b02      	ldr	r3, [pc, #8]	; (32a0 <radio_rssi_get+0xc>)
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

uint32_t radio_rssi_get(void)
{
    3298:	af00      	add	r7, sp, #0
	return NRF_RADIO->RSSISAMPLE;
    329a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    329e:	bd80      	pop	{r7, pc}
    32a0:	40001000 	.word	0x40001000

000032a4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
    32a4:	b580      	push	{r7, lr}
	NRF_RADIO->EVENTS_RSSIEND = 0;
    32a6:	4b03      	ldr	r3, [pc, #12]	; (32b4 <radio_rssi_status_reset+0x10>)
    32a8:	2200      	movs	r2, #0
{
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
    32aa:	af00      	add	r7, sp, #0
	NRF_RADIO->EVENTS_RSSIEND = 0;
    32ac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    32b0:	bd80      	pop	{r7, pc}
    32b2:	bf00      	nop
    32b4:	40001000 	.word	0x40001000

000032b8 <radio_rssi_is_ready>:
}

uint32_t radio_rssi_is_ready(void)
{
    32b8:	b580      	push	{r7, lr}
	return NRF_RADIO->EVENTS_RSSIEND;
    32ba:	4b02      	ldr	r3, [pc, #8]	; (32c4 <radio_rssi_is_ready+0xc>)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
}

uint32_t radio_rssi_is_ready(void)
{
    32bc:	af00      	add	r7, sp, #0
	return NRF_RADIO->EVENTS_RSSIEND;
    32be:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    32c2:	bd80      	pop	{r7, pc}
    32c4:	40001000 	.word	0x40001000

000032c8 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable,
				uint8_t bitmask_addr_type,
				uint8_t *bdaddr)
{
    32c8:	b5b0      	push	{r4, r5, r7, lr}
    32ca:	2400      	movs	r4, #0
    32cc:	af00      	add	r7, sp, #0
    32ce:	00a3      	lsls	r3, r4, #2
    32d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	uint8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
    32d8:	6815      	ldr	r5, [r2, #0]
				uint8_t *bdaddr)
{
	uint8_t index;

	for (index = 0; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
    32da:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
    32de:	3401      	adds	r4, #1
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
    32e0:	8895      	ldrh	r5, [r2, #4]
    32e2:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
				uint8_t bitmask_addr_type,
				uint8_t *bdaddr)
{
	uint8_t index;

	for (index = 0; index < 8; index++) {
    32e6:	2c08      	cmp	r4, #8
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += BDADDR_SIZE;
    32e8:	f102 0206 	add.w	r2, r2, #6
				uint8_t bitmask_addr_type,
				uint8_t *bdaddr)
{
	uint8_t index;

	for (index = 0; index < 8; index++) {
    32ec:	d1ef      	bne.n	32ce <radio_filter_configure+0x6>
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
		bdaddr += BDADDR_SIZE;
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
    32ee:	4b03      	ldr	r3, [pc, #12]	; (32fc <radio_filter_configure+0x34>)
    32f0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    32f4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    32f8:	bdb0      	pop	{r4, r5, r7, pc}
    32fa:	bf00      	nop
    32fc:	40001000 	.word	0x40001000

00003300 <radio_filter_disable>:
}

void radio_filter_disable(void)
{
    3300:	b580      	push	{r7, lr}
	NRF_RADIO->DACNF &= ~(0x000000FF);
    3302:	4a04      	ldr	r2, [pc, #16]	; (3314 <radio_filter_disable+0x14>)
    3304:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    3308:	f023 03ff 	bic.w	r3, r3, #255	; 0xff

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
}

void radio_filter_disable(void)
{
    330c:	af00      	add	r7, sp, #0
	NRF_RADIO->DACNF &= ~(0x000000FF);
    330e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    3312:	bd80      	pop	{r7, pc}
    3314:	40001000 	.word	0x40001000

00003318 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
    3318:	b580      	push	{r7, lr}
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    331a:	4b04      	ldr	r3, [pc, #16]	; (332c <radio_filter_status_reset+0x14>)
    331c:	2200      	movs	r2, #0
    331e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
}

void radio_filter_status_reset(void)
{
    3322:	af00      	add	r7, sp, #0
	NRF_RADIO->EVENTS_DEVMATCH = 0;
	NRF_RADIO->EVENTS_DEVMISS = 0;
    3324:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    3328:	bd80      	pop	{r7, pc}
    332a:	bf00      	nop
    332c:	40001000 	.word	0x40001000

00003330 <radio_filter_has_match>:
}

uint32_t radio_filter_has_match(void)
{
    3330:	b580      	push	{r7, lr}
	return NRF_RADIO->EVENTS_DEVMATCH;
    3332:	4b02      	ldr	r3, [pc, #8]	; (333c <radio_filter_has_match+0xc>)
	NRF_RADIO->EVENTS_DEVMATCH = 0;
	NRF_RADIO->EVENTS_DEVMISS = 0;
}

uint32_t radio_filter_has_match(void)
{
    3334:	af00      	add	r7, sp, #0
	return NRF_RADIO->EVENTS_DEVMATCH;
    3336:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    333a:	bd80      	pop	{r7, pc}
    333c:	40001000 	.word	0x40001000

00003340 <radio_bc_configure>:

void radio_bc_configure(uint32_t n)
{
	NRF_RADIO->BCC = n;
    3340:	4b05      	ldr	r3, [pc, #20]	; (3358 <radio_bc_configure+0x18>)
{
	return NRF_RADIO->EVENTS_DEVMATCH;
}

void radio_bc_configure(uint32_t n)
{
    3342:	b580      	push	{r7, lr}
	NRF_RADIO->BCC = n;
    3344:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    3348:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    334c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
{
	return NRF_RADIO->EVENTS_DEVMATCH;
}

void radio_bc_configure(uint32_t n)
{
    3350:	af00      	add	r7, sp, #0
	NRF_RADIO->BCC = n;
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    3352:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    3356:	bd80      	pop	{r7, pc}
    3358:	40001000 	.word	0x40001000

0000335c <radio_tmr_status_reset>:
{
	return NRF_RADIO->EVENTS_BCMATCH;
}

void radio_tmr_status_reset(void)
{
    335c:	b580      	push	{r7, lr}
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    335e:	4b06      	ldr	r3, [pc, #24]	; (3378 <radio_tmr_status_reset+0x1c>)
    3360:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    3364:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    3368:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    336c:	22ff      	movs	r2, #255	; 0xff
{
	return NRF_RADIO->EVENTS_BCMATCH;
}

void radio_tmr_status_reset(void)
{
    336e:	af00      	add	r7, sp, #0
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
	NRF_PPI->CHENCLR =
    3370:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    3374:	bd80      	pop	{r7, pc}
    3376:	bf00      	nop
    3378:	4000b000 	.word	0x4000b000

0000337c <radio_tmr_tifs_set>:
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}

void radio_tmr_tifs_set(uint32_t tifs)
{
    337c:	b580      	push	{r7, lr}
	NRF_RADIO->TIFS = tifs;
    337e:	4b02      	ldr	r3, [pc, #8]	; (3388 <radio_tmr_tifs_set+0xc>)
	     PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
	     PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
}

void radio_tmr_tifs_set(uint32_t tifs)
{
    3380:	af00      	add	r7, sp, #0
	NRF_RADIO->TIFS = tifs;
    3382:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    3386:	bd80      	pop	{r7, pc}
    3388:	40001000 	.word	0x40001000

0000338c <radio_tmr_start>:
}

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
    338c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    338e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    3392:	4c24      	ldr	r4, [pc, #144]	; (3424 <radio_tmr_start+0x98>)
    3394:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    3398:	42a3      	cmp	r3, r4
		ticks_start--;
		remainder += 30517578UL;
    339a:	bf88      	it	hi
    339c:	f102 72e8 	addhi.w	r2, r2, #30408704	; 0x1d00000
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    33a0:	4c21      	ldr	r4, [pc, #132]	; (3428 <radio_tmr_start+0x9c>)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    33a2:	4b22      	ldr	r3, [pc, #136]	; (342c <radio_tmr_start+0xa0>)

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
    33a4:	bf88      	it	hi
    33a6:	f502 32d4 	addhi.w	r2, r2, #108544	; 0x1a800
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
    33aa:	f04f 0600 	mov.w	r6, #0

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
    33ae:	bf88      	it	hi
    33b0:	f502 72a5 	addhi.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    33b4:	f04f 0501 	mov.w	r5, #1
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;
    33b8:	fbb2 f2f3 	udiv	r2, r2, r3

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
    33bc:	f04f 0304 	mov.w	r3, #4
		ticks_start--;
		remainder += 30517578UL;
	}
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
    33c0:	60e5      	str	r5, [r4, #12]
	NRF_TIMER0->MODE = 0;
    33c2:	f8c4 6504 	str.w	r6, [r4, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    33c6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */

	NRF_TIMER0->CC[0] = remainder;
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;

	NRF_RTC0->CC[2] = ticks_start;
    33ca:	4b19      	ldr	r3, [pc, #100]	; (3430 <radio_tmr_start+0xa4>)
}

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
		ticks_start--;
    33cc:	bf88      	it	hi
    33ce:	f101 31ff 	addhi.w	r1, r1, #4294967295
	remainder /= 1000000UL;

	NRF_TIMER0->TASKS_CLEAR = 1;
	NRF_TIMER0->MODE = 0;
	NRF_TIMER0->PRESCALER = 4;
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    33d2:	f04f 0e02 	mov.w	lr, #2
    33d6:	f8c4 e508 	str.w	lr, [r4, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    33da:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    33de:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    33e2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    33e6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    33ea:	f8c3 1344 	str.w	r1, [r3, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    33ee:	f8c3 6148 	str.w	r6, [r3, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (uint32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    33f2:	4910      	ldr	r1, [pc, #64]	; (3434 <radio_tmr_start+0xa8>)
    33f4:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
{
	NRF_RADIO->TIFS = tifs;
}

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
    33f8:	af00      	add	r7, sp, #0

	NRF_RTC0->CC[2] = ticks_start;
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
	NRF_RTC0->EVENTS_COMPARE[2] = 0;

	NRF_PPI->CH[1].EEP = (uint32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    33fa:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    33fe:	f5a1 5140 	sub.w	r1, r1, #12288	; 0x3000
    3402:	3908      	subs	r1, #8
	NRF_PPI->CH[1].TEP = (uint32_t)&(NRF_TIMER0->TASKS_START);
    3404:	f8c3 451c 	str.w	r4, [r3, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    3408:	f8c3 e504 	str.w	lr, [r3, #1284]	; 0x504

	if (trx) {
		NRF_PPI->CH[0].EEP =
    340c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

	NRF_PPI->CH[1].EEP = (uint32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[1].TEP = (uint32_t)&(NRF_TIMER0->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;

	if (trx) {
    3410:	b108      	cbz	r0, 3416 <radio_tmr_start+0x8a>
		NRF_PPI->CH[0].EEP =
			(uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    3412:	4909      	ldr	r1, [pc, #36]	; (3438 <radio_tmr_start+0xac>)
    3414:	e000      	b.n	3418 <radio_tmr_start+0x8c>
			(uint32_t)&(NRF_RADIO->TASKS_TXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	} else {
		NRF_PPI->CH[0].EEP =
			(uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
    3416:	4909      	ldr	r1, [pc, #36]	; (343c <radio_tmr_start+0xb0>)
    3418:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
			(uint32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
	}

	return remainder;
}
    341c:	4610      	mov	r0, r2
	} else {
		NRF_PPI->CH[0].EEP =
			(uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
		NRF_PPI->CH[0].TEP =
			(uint32_t)&(NRF_RADIO->TASKS_RXEN);
		NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    341e:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	}

	return remainder;
}
    3422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3424:	7ff0bdbf 	.word	0x7ff0bdbf
    3428:	40008000 	.word	0x40008000
    342c:	000f4240 	.word	0x000f4240
    3430:	4000b000 	.word	0x4000b000
    3434:	4000b148 	.word	0x4000b148
    3438:	40001000 	.word	0x40001000
    343c:	40001004 	.word	0x40001004

00003440 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
    3440:	b580      	push	{r7, lr}
	NRF_TIMER0->TASKS_STOP = 1;
    3442:	4b03      	ldr	r3, [pc, #12]	; (3450 <radio_tmr_stop+0x10>)
    3444:	2201      	movs	r2, #1
    3446:	605a      	str	r2, [r3, #4]

	return remainder;
}

void radio_tmr_stop(void)
{
    3448:	af00      	add	r7, sp, #0
	NRF_TIMER0->TASKS_STOP = 1;
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    344a:	611a      	str	r2, [r3, #16]
    344c:	bd80      	pop	{r7, pc}
    344e:	bf00      	nop
    3450:	40008000 	.word	0x40008000

00003454 <radio_tmr_hcto_configure>:
}

void radio_tmr_hcto_configure(uint32_t hcto)
{
	NRF_TIMER0->CC[2] = hcto;
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <radio_tmr_hcto_configure+0x40>)
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    3456:	2200      	movs	r2, #0
	NRF_TIMER0->TASKS_STOP = 1;
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
}

void radio_tmr_hcto_configure(uint32_t hcto)
{
    3458:	b580      	push	{r7, lr}
	NRF_TIMER0->CC[2] = hcto;
    345a:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
	NRF_TIMER0->EVENTS_COMPARE[2] = 0;
    345e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    3462:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    3466:	4a0c      	ldr	r2, [pc, #48]	; (3498 <radio_tmr_hcto_configure+0x44>)
    3468:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    346c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    3470:	3244      	adds	r2, #68	; 0x44
    3472:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
    3476:	f502 7280 	add.w	r2, r2, #256	; 0x100
    347a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
    347e:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    3482:	3a38      	subs	r2, #56	; 0x38
    3484:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    3488:	2230      	movs	r2, #48	; 0x30
	NRF_TIMER0->TASKS_STOP = 1;
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
}

void radio_tmr_hcto_configure(uint32_t hcto)
{
    348a:	af00      	add	r7, sp, #0

	NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
	NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
	NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[2]);
	NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
    348c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    3490:	bd80      	pop	{r7, pc}
    3492:	bf00      	nop
    3494:	40008000 	.word	0x40008000
    3498:	40001104 	.word	0x40001104

0000349c <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (uint32_t)&(NRF_RADIO->EVENTS_READY);
    349c:	4b0c      	ldr	r3, [pc, #48]	; (34d0 <radio_tmr_aa_capture+0x34>)
    349e:	4a0d      	ldr	r2, [pc, #52]	; (34d4 <radio_tmr_aa_capture+0x38>)
	NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
}

void radio_tmr_aa_capture(void)
{
    34a0:	b580      	push	{r7, lr}
	NRF_PPI->CH[2].EEP = (uint32_t)&(NRF_RADIO->EVENTS_READY);
    34a2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    34a6:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    34aa:	3240      	adds	r2, #64	; 0x40
    34ac:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    34b0:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    34b4:	3a3c      	subs	r2, #60	; 0x3c
    34b6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    34ba:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    34be:	3240      	adds	r2, #64	; 0x40
    34c0:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    34c4:	220c      	movs	r2, #12
	NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
	NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
}

void radio_tmr_aa_capture(void)
{
    34c6:	af00      	add	r7, sp, #0
	NRF_PPI->CH[2].EEP = (uint32_t)&(NRF_RADIO->EVENTS_READY);
	NRF_PPI->CH[2].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
	NRF_PPI->CH[3].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
	NRF_PPI->CH[3].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    34c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    34cc:	bd80      	pop	{r7, pc}
    34ce:	bf00      	nop
    34d0:	4001f000 	.word	0x4001f000
    34d4:	40001100 	.word	0x40001100

000034d8 <radio_tmr_aa_get>:
}

uint32_t radio_tmr_aa_get(void)
{
    34d8:	b580      	push	{r7, lr}
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
    34da:	4b04      	ldr	r3, [pc, #16]	; (34ec <radio_tmr_aa_get+0x14>)
    34dc:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
    34e0:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
	NRF_PPI->CH[3].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
}

uint32_t radio_tmr_aa_get(void)
{
    34e4:	af00      	add	r7, sp, #0
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
}
    34e6:	1ac0      	subs	r0, r0, r3
    34e8:	bd80      	pop	{r7, pc}
    34ea:	bf00      	nop
    34ec:	40008000 	.word	0x40008000

000034f0 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
    34f0:	b580      	push	{r7, lr}
	NRF_PPI->CH[7].EEP = (uint32_t)&(NRF_RADIO->EVENTS_END);
    34f2:	4b07      	ldr	r3, [pc, #28]	; (3510 <radio_tmr_end_capture+0x20>)
    34f4:	4a07      	ldr	r2, [pc, #28]	; (3514 <radio_tmr_end_capture+0x24>)
    34f6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
	NRF_PPI->CH[7].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    34fa:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    34fe:	323c      	adds	r2, #60	; 0x3c
    3500:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    3504:	2280      	movs	r2, #128	; 0x80
{
	return (NRF_TIMER0->CC[1] - NRF_TIMER0->CC[0]);
}

void radio_tmr_end_capture(void)
{
    3506:	af00      	add	r7, sp, #0
	NRF_PPI->CH[7].EEP = (uint32_t)&(NRF_RADIO->EVENTS_END);
	NRF_PPI->CH[7].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
    3508:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    350c:	bd80      	pop	{r7, pc}
    350e:	bf00      	nop
    3510:	4001f000 	.word	0x4001f000
    3514:	4000110c 	.word	0x4000110c

00003518 <radio_tmr_end_get>:
}

uint32_t radio_tmr_end_get(void)
{
    3518:	b580      	push	{r7, lr}
	return NRF_TIMER0->CC[2];
    351a:	4b02      	ldr	r3, [pc, #8]	; (3524 <radio_tmr_end_get+0xc>)
	NRF_PPI->CH[7].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
	NRF_PPI->CHENSET = PPI_CHEN_CH7_Msk;
}

uint32_t radio_tmr_end_get(void)
{
    351c:	af00      	add	r7, sp, #0
	return NRF_TIMER0->CC[2];
    351e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    3522:	bd80      	pop	{r7, pc}
    3524:	40008000 	.word	0x40008000

00003528 <radio_ccm_rx_pkt_set>:

static uint8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    3528:	4b15      	ldr	r3, [pc, #84]	; (3580 <radio_ccm_rx_pkt_set+0x58>)
}

static uint8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    352a:	b590      	push	{r4, r7, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    352c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    352e:	2402      	movs	r4, #2

static uint8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    3530:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    3534:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->MODE =
    3538:	4c12      	ldr	r4, [pc, #72]	; (3584 <radio_ccm_rx_pkt_set+0x5c>)
    353a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Decryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (uint32_t)ccm;
    353e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
    3542:	4811      	ldr	r0, [pc, #68]	; (3588 <radio_ccm_rx_pkt_set+0x60>)
    3544:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
    3548:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
    354c:	490f      	ldr	r1, [pc, #60]	; (358c <radio_ccm_rx_pkt_set+0x64>)
    354e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    3552:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
	NRF_CCM->EVENTS_ENDCRYPT = 0;
	NRF_CCM->EVENTS_ERROR = 0;

	NRF_PPI->CH[6].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    3556:	490e      	ldr	r1, [pc, #56]	; (3590 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = 0;
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    3558:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    355c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    3560:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    3564:	4a0b      	ldr	r2, [pc, #44]	; (3594 <radio_ccm_rx_pkt_set+0x6c>)
    3566:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (uint32_t)&(NRF_CCM->TASKS_CRYPT);
    356a:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    356e:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    3572:	2140      	movs	r1, #64	; 0x40
    3574:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    3578:	2201      	movs	r2, #1
}

static uint8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, void *pkt)
{
    357a:	af00      	add	r7, sp, #0

	NRF_PPI->CH[6].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
	NRF_PPI->CH[6].TEP = (uint32_t)&(NRF_CCM->TASKS_CRYPT);
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;

	NRF_CCM->TASKS_KSGEN = 1;
    357c:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    357e:	bd90      	pop	{r4, r7, pc}
    3580:	4000f000 	.word	0x4000f000
    3584:	01000001 	.word	0x01000001
    3588:	2000082c 	.word	0x2000082c
    358c:	20000934 	.word	0x20000934
    3590:	40001104 	.word	0x40001104
    3594:	4001f000 	.word	0x4001f000

00003598 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    3598:	b590      	push	{r4, r7, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    359a:	4b10      	ldr	r3, [pc, #64]	; (35dc <radio_ccm_tx_pkt_set+0x44>)
    359c:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    359e:	2402      	movs	r4, #2
	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    35a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    35a4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->MODE =
    35a8:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
    35ac:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	    ((CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
	       CCM_MODE_LENGTH_Msk) |
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (uint32_t)ccm;
    35b0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
    35b4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
    35b8:	4809      	ldr	r0, [pc, #36]	; (35e0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
    35ba:	490a      	ldr	r1, [pc, #40]	; (35e4 <radio_ccm_tx_pkt_set+0x4c>)
#endif
	    ((CCM_MODE_MODE_Encryption << CCM_MODE_MODE_Pos) &
	     CCM_MODE_MODE_Msk);
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
    35bc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
    35c0:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    35c4:	2101      	movs	r1, #1
    35c6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200

	return _pkt_scratch;
}

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    35ca:	af00      	add	r7, sp, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    35cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    35d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    35d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	_NvicIrqUnpend(CCM_AAR_IRQn);

	LL_ASSERT(NRF_CCM->EVENTS_ERROR == 0);
#else
	/* start KSGEN early, but dont wait for ENDCRYPT */
	NRF_CCM->TASKS_KSGEN = 1;
    35d8:	6019      	str	r1, [r3, #0]
#endif

	return _pkt_scratch;
}
    35da:	bd90      	pop	{r4, r7, pc}
    35dc:	4000f000 	.word	0x4000f000
    35e0:	2000082c 	.word	0x2000082c
    35e4:	20000934 	.word	0x20000934

000035e8 <radio_ccm_is_done>:

uint32_t radio_ccm_is_done(void)
{
    35e8:	b580      	push	{r7, lr}
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    35ea:	4b0d      	ldr	r3, [pc, #52]	; (3620 <radio_ccm_is_done+0x38>)
    35ec:	2202      	movs	r2, #2

	return _pkt_scratch;
}

uint32_t radio_ccm_is_done(void)
{
    35ee:	af00      	add	r7, sp, #0
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    35f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    35f4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    35f8:	4a09      	ldr	r2, [pc, #36]	; (3620 <radio_ccm_is_done+0x38>)
    35fa:	b919      	cbnz	r1, 3604 <radio_ccm_is_done+0x1c>
    35fc:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    35fe:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    3600:	bf20      	wfe
    3602:	e7f7      	b.n	35f4 <radio_ccm_is_done+0xc>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    3604:	2302      	movs	r3, #2
    3606:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    360a:	4b06      	ldr	r3, [pc, #24]	; (3624 <radio_ccm_is_done+0x3c>)
    360c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3610:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
	_NvicIrqUnpend(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    3614:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
}
    3618:	fab0 f080 	clz	r0, r0
    361c:	0940      	lsrs	r0, r0, #5
    361e:	bd80      	pop	{r7, pc}
    3620:	4000f000 	.word	0x4000f000
    3624:	e000e000 	.word	0xe000e000

00003628 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
    3628:	b580      	push	{r7, lr}
	return NRF_CCM->MICSTATUS;
    362a:	4b02      	ldr	r3, [pc, #8]	; (3634 <radio_ccm_mic_is_valid+0xc>)

	return (NRF_CCM->EVENTS_ERROR == 0);
}

uint32_t radio_ccm_mic_is_valid(void)
{
    362c:	af00      	add	r7, sp, #0
	return NRF_CCM->MICSTATUS;
    362e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    3632:	bd80      	pop	{r7, pc}
    3634:	4000f000 	.word	0x4000f000

00003638 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
    3638:	b598      	push	{r3, r4, r7, lr}
	NRF_AAR->ENABLE = 1;
    363a:	4c0f      	ldr	r4, [pc, #60]	; (3678 <radio_ar_configure+0x40>)
    363c:	2301      	movs	r3, #1
    363e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR;
    3642:	4b0e      	ldr	r3, [pc, #56]	; (367c <radio_ar_configure+0x44>)
static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = 1;
	NRF_AAR->NIRK = nirk;
    3644:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
    3648:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR;
    364c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    3650:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)_aar_scratch[0];
    3654:	2300      	movs	r3, #0
    3656:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
}

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
    365a:	af00      	add	r7, sp, #0
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR;
	NRF_AAR->SCRATCHPTR = (uint32_t)_aar_scratch[0];

	radio_bc_configure(64);
    365c:	2040      	movs	r0, #64	; 0x40
    365e:	f7ff fe6f 	bl	3340 <radio_bc_configure>

	NRF_PPI->CH[6].EEP = (uint32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    3662:	4b07      	ldr	r3, [pc, #28]	; (3680 <radio_ar_configure+0x48>)
    3664:	4a07      	ldr	r2, [pc, #28]	; (3684 <radio_ar_configure+0x4c>)
    3666:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (uint32_t)&(NRF_AAR->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    366a:	2240      	movs	r2, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)_aar_scratch[0];

	radio_bc_configure(64);

	NRF_PPI->CH[6].EEP = (uint32_t)&(NRF_RADIO->EVENTS_BCMATCH);
	NRF_PPI->CH[6].TEP = (uint32_t)&(NRF_AAR->TASKS_START);
    366c:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    3670:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    3674:	bd98      	pop	{r3, r4, r7, pc}
    3676:	bf00      	nop
    3678:	4000f000 	.word	0x4000f000
    367c:	40001000 	.word	0x40001000
    3680:	4001f000 	.word	0x4001f000
    3684:	40001128 	.word	0x40001128

00003688 <radio_ar_match_get>:
}

uint32_t radio_ar_match_get(void)
{
    3688:	b580      	push	{r7, lr}
	return NRF_AAR->STATUS;
    368a:	4b02      	ldr	r3, [pc, #8]	; (3694 <radio_ar_match_get+0xc>)
	NRF_PPI->CH[6].TEP = (uint32_t)&(NRF_AAR->TASKS_START);
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
}

uint32_t radio_ar_match_get(void)
{
    368c:	af00      	add	r7, sp, #0
	return NRF_AAR->STATUS;
    368e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    3692:	bd80      	pop	{r7, pc}
    3694:	4000f000 	.word	0x4000f000

00003698 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    3698:	b580      	push	{r7, lr}
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

uint32_t radio_bc_has_match(void)
{
	return NRF_RADIO->EVENTS_BCMATCH;
    369a:	4b08      	ldr	r3, [pc, #32]	; (36bc <radio_ar_status_reset+0x24>)
    369c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
{
	return NRF_AAR->STATUS;
}

void radio_ar_status_reset(void)
{
    36a0:	af00      	add	r7, sp, #0
	if (radio_bc_has_match()) {
    36a2:	b13a      	cbz	r2, 36b4 <radio_ar_status_reset+0x1c>
		NRF_AAR->EVENTS_END = 0;
    36a4:	4a06      	ldr	r2, [pc, #24]	; (36c0 <radio_ar_status_reset+0x28>)
    36a6:	2100      	movs	r1, #0
    36a8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
		NRF_AAR->EVENTS_RESOLVED = 0;
    36ac:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
		NRF_AAR->EVENTS_NOTRESOLVED = 0;
    36b0:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    36b4:	2200      	movs	r2, #0
    36b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    36ba:	bd80      	pop	{r7, pc}
    36bc:	40001000 	.word	0x40001000
    36c0:	4000f000 	.word	0x4000f000

000036c4 <radio_ar_has_match>:

	radio_bc_status_reset();
}

uint32_t radio_ar_has_match(void)
{
    36c4:	b580      	push	{r7, lr}
	NRF_RADIO->EVENTS_BCMATCH = 0;
}

uint32_t radio_bc_has_match(void)
{
	return NRF_RADIO->EVENTS_BCMATCH;
    36c6:	4b08      	ldr	r3, [pc, #32]	; (36e8 <radio_ar_has_match+0x24>)
    36c8:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

	radio_bc_status_reset();
}

uint32_t radio_ar_has_match(void)
{
    36cc:	af00      	add	r7, sp, #0
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    36ce:	b148      	cbz	r0, 36e4 <radio_ar_has_match+0x20>
    36d0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    36d4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	radio_bc_status_reset();
}

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
    36d8:	b120      	cbz	r0, 36e4 <radio_ar_has_match+0x20>
			(NRF_AAR->EVENTS_END) &&
			(NRF_AAR->EVENTS_RESOLVED));
    36da:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
}

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
			(NRF_AAR->EVENTS_END) &&
    36de:	3000      	adds	r0, #0
    36e0:	bf18      	it	ne
    36e2:	2001      	movne	r0, #1
			(NRF_AAR->EVENTS_RESOLVED));
}
    36e4:	bd80      	pop	{r7, pc}
    36e6:	bf00      	nop
    36e8:	40001000 	.word	0x40001000

000036ec <ticker_dequeue>:
	return id;
}

static uint32_t ticker_dequeue(struct ticker_instance *instance,
				uint8_t id)
{
    36ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t timeout;
	uint32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
    36ee:	7e03      	ldrb	r3, [r0, #24]
	uint8_t current;
	uint32_t timeout;
	uint32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
    36f0:	6804      	ldr	r4, [r0, #0]
	return id;
}

static uint32_t ticker_dequeue(struct ticker_instance *instance,
				uint8_t id)
{
    36f2:	af00      	add	r7, sp, #0
	uint32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
	previous = instance->ticker_id_head;
	current = previous;
    36f4:	461a      	mov	r2, r3
	total = 0;
    36f6:	2600      	movs	r6, #0
	ticker_current = 0;
	while (current != TICKER_NULL) {
    36f8:	2aff      	cmp	r2, #255	; 0xff
    36fa:	d00c      	beq.n	3716 <ticker_dequeue+0x2a>

		ticker_current = &node[current];
    36fc:	eb02 0ec2 	add.w	lr, r2, r2, lsl #3

		if (current == id) {
    3700:	428a      	cmp	r2, r1
	current = previous;
	total = 0;
	ticker_current = 0;
	while (current != TICKER_NULL) {

		ticker_current = &node[current];
    3702:	eb04 058e 	add.w	r5, r4, lr, lsl #2
    3706:	f814 e02e 	ldrb.w	lr, [r4, lr, lsl #2]

		if (current == id) {
    370a:	d006      	beq.n	371a <ticker_dequeue+0x2e>
			break;
		}

		total += ticker_current->ticks_to_expire;
    370c:	68ab      	ldr	r3, [r5, #8]
    370e:	441e      	add	r6, r3
		previous = current;
		current = ticker_current->next;
    3710:	4613      	mov	r3, r2
    3712:	4672      	mov	r2, lr
    3714:	e7f0      	b.n	36f8 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
		return 0;
    3716:	2000      	movs	r0, #0
    3718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}

	/* ticker is the first in the list */
	if (previous == current) {
    371a:	4293      	cmp	r3, r2
    371c:	d101      	bne.n	3722 <ticker_dequeue+0x36>
		instance->ticker_id_head = ticker_current->next;
    371e:	f880 e018 	strb.w	lr, [r0, #24]
	timeout = ticker_current->ticks_to_expire;

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    3722:	b21b      	sxth	r3, r3
    3724:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3728:	7829      	ldrb	r1, [r5, #0]
	if (previous == current) {
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
    372a:	68aa      	ldr	r2, [r5, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
    372c:	f804 1023 	strb.w	r1, [r4, r3, lsl #2]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
    3730:	782b      	ldrb	r3, [r5, #0]
    3732:	2bff      	cmp	r3, #255	; 0xff
    3734:	d006      	beq.n	3744 <ticker_dequeue+0x58>
		node[ticker_current->next].ticks_to_expire += timeout;
    3736:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    373a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    373e:	6899      	ldr	r1, [r3, #8]
    3740:	4411      	add	r1, r2
    3742:	6099      	str	r1, [r3, #8]
	}

	return (total + timeout);
    3744:	18b0      	adds	r0, r6, r2
    3746:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003748 <prepare_ticks_to_expire>:
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
					uint32_t ticks_current,
					uint32_t ticks_at_start)
{
    3748:	b5b0      	push	{r4, r5, r7, lr}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    374a:	1a55      	subs	r5, r2, r1
    374c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
}

static void prepare_ticks_to_expire(struct ticker_node *ticker,
					uint32_t ticks_current,
					uint32_t ticks_at_start)
{
    3750:	af00      	add	r7, sp, #0
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    3752:	6884      	ldr	r4, [r0, #8]
	uint16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    3754:	8a83      	ldrh	r3, [r0, #20]

	/* Calculate ticks to expire for this new node */
	if (((ticks_at_start - ticks_current) & 0x00800000) == 0) {
    3756:	d103      	bne.n	3760 <prepare_ticks_to_expire+0x18>
		ticks_to_expire +=
    3758:	f025 427f 	bic.w	r2, r5, #4278190080	; 0xff000000
    375c:	4422      	add	r2, r4
    375e:	e00c      	b.n	377a <prepare_ticks_to_expire+0x32>
	return cntr_cnt_get();
}

uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    3760:	1a8a      	subs	r2, r1, r2
    3762:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} else {
		uint32_t delta_current_start;

		delta_current_start =
		    ticker_ticks_diff_get(ticks_current, ticks_at_start);
		if (ticks_to_expire > delta_current_start) {
    3766:	4294      	cmp	r4, r2
    3768:	d901      	bls.n	376e <prepare_ticks_to_expire+0x26>
			ticks_to_expire -= delta_current_start;
    376a:	1aa2      	subs	r2, r4, r2
    376c:	e005      	b.n	377a <prepare_ticks_to_expire+0x32>
    376e:	1b1b      	subs	r3, r3, r4
		} else {
			ticks_to_expire_minus +=
    3770:	fa12 f383 	uxtah	r3, r2, r3
    3774:	b29b      	uxth	r3, r3
			    (delta_current_start - ticks_to_expire);
			ticks_to_expire = 0;
    3776:	2200      	movs	r2, #0
    3778:	e004      	b.n	3784 <prepare_ticks_to_expire+0x3c>
		}
	}

	/* Handle any drifts requested */
	if (ticks_to_expire > ticks_to_expire_minus) {
    377a:	429a      	cmp	r2, r3
    377c:	d902      	bls.n	3784 <prepare_ticks_to_expire+0x3c>
		ticks_to_expire -= ticks_to_expire_minus;
    377e:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus = 0;
    3780:	2200      	movs	r2, #0
    3782:	e002      	b.n	378a <prepare_ticks_to_expire+0x42>
	} else {
		ticks_to_expire_minus -= ticks_to_expire;
    3784:	1a9b      	subs	r3, r3, r2
    3786:	b29a      	uxth	r2, r3
		ticks_to_expire = 0;
    3788:	2300      	movs	r3, #0
	}

	ticker->ticks_to_expire = ticks_to_expire;
    378a:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    378c:	8282      	strh	r2, [r0, #20]
    378e:	bdb0      	pop	{r4, r5, r7, pc}

00003790 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(uint32_t value)
{
    3790:	b480      	push	{r7}
	cntr_cmp_set(1, value);
    3792:	4601      	mov	r1, r0
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(uint32_t value)
{
    3794:	af00      	add	r7, sp, #0
	cntr_cmp_set(1, value);
    3796:	2001      	movs	r0, #1
}
    3798:	46bd      	mov	sp, r7
    379a:	bc80      	pop	{r7}
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(uint32_t value)
{
	cntr_cmp_set(1, value);
    379c:	f7ff bb54 	b.w	2e48 <cntr_cmp_set>

000037a0 <ticker_instance0_cmp_set>:
		break;
	}
}

static void ticker_instance0_cmp_set(uint32_t value)
{
    37a0:	b480      	push	{r7}
	cntr_cmp_set(0, value);
    37a2:	4601      	mov	r1, r0
		break;
	}
}

static void ticker_instance0_cmp_set(uint32_t value)
{
    37a4:	af00      	add	r7, sp, #0
	cntr_cmp_set(0, value);
    37a6:	2000      	movs	r0, #0
}
    37a8:	46bd      	mov	sp, r7
    37aa:	bc80      	pop	{r7}
	}
}

static void ticker_instance0_cmp_set(uint32_t value)
{
	cntr_cmp_set(0, value);
    37ac:	f7ff bb4c 	b.w	2e48 <cntr_cmp_set>

000037b0 <ticker_instance1_sched>:
	}
}

static void ticker_instance1_sched(uint8_t caller_id, uint8_t callee_id,
				   uint8_t chain)
{
    37b0:	b5b0      	push	{r4, r5, r7, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    37b2:	2801      	cmp	r0, #1
	}
}

static void ticker_instance1_sched(uint8_t caller_id, uint8_t callee_id,
				   uint8_t chain)
{
    37b4:	b082      	sub	sp, #8
    37b6:	af02      	add	r7, sp, #8
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    37b8:	d011      	beq.n	37de <ticker_instance1_sched+0x2e>
    37ba:	d302      	bcc.n	37c2 <ticker_instance1_sched+0x12>
    37bc:	2802      	cmp	r0, #2
    37be:	d013      	beq.n	37e8 <ticker_instance1_sched+0x38>
    37c0:	e01b      	b.n	37fa <ticker_instance1_sched+0x4a>
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    37c2:	2901      	cmp	r1, #1
    37c4:	d003      	beq.n	37ce <ticker_instance1_sched+0x1e>
    37c6:	2902      	cmp	r1, #2
    37c8:	d11c      	bne.n	3804 <ticker_instance1_sched+0x54>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    37ca:	4b17      	ldr	r3, [pc, #92]	; (3828 <ticker_instance1_sched+0x78>)
    37cc:	e001      	b.n	37d2 <ticker_instance1_sched+0x22>
				0, 0, link,
				&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    37ce:	4b17      	ldr	r3, [pc, #92]	; (382c <ticker_instance1_sched+0x7c>)
    37d0:	2102      	movs	r1, #2
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    37d2:	2000      	movs	r0, #0
			LL_ASSERT(0);
			break;
		}
		break;
	}
}
    37d4:	46bd      	mov	sp, r7
    37d6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    37da:	f7ff ba2d 	b.w	2c38 <mayfly_enqueue>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    37de:	2902      	cmp	r1, #2
    37e0:	d110      	bne.n	3804 <ticker_instance1_sched+0x54>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER1,
    37e2:	4b13      	ldr	r3, [pc, #76]	; (3830 <ticker_instance1_sched+0x80>)
    37e4:	4608      	mov	r0, r1
    37e6:	e7f5      	b.n	37d4 <ticker_instance1_sched+0x24>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    37e8:	2901      	cmp	r1, #1
    37ea:	d003      	beq.n	37f4 <ticker_instance1_sched+0x44>
    37ec:	2902      	cmp	r1, #2
    37ee:	d109      	bne.n	3804 <ticker_instance1_sched+0x54>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB1,
    37f0:	4b10      	ldr	r3, [pc, #64]	; (3834 <ticker_instance1_sched+0x84>)
    37f2:	e7ef      	b.n	37d4 <ticker_instance1_sched+0x24>
				0, 0, link,
				(void *)&_instance[1],
				(void *)ticker_worker
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB1,
    37f4:	4b10      	ldr	r3, [pc, #64]	; (3838 <ticker_instance1_sched+0x88>)
    37f6:	4601      	mov	r1, r0
    37f8:	e7ec      	b.n	37d4 <ticker_instance1_sched+0x24>
			break;
		}
		break;

	default:
		switch (callee_id) {
    37fa:	2902      	cmp	r1, #2
    37fc:	d102      	bne.n	3804 <ticker_instance1_sched+0x54>
				(void *)&_instance[1],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    37fe:	4b0f      	ldr	r3, [pc, #60]	; (383c <ticker_instance1_sched+0x8c>)
    3800:	2003      	movs	r0, #3
    3802:	e7e7      	b.n	37d4 <ticker_instance1_sched+0x24>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
    3804:	4b0e      	ldr	r3, [pc, #56]	; (3840 <ticker_instance1_sched+0x90>)
    3806:	9301      	str	r3, [sp, #4]
    3808:	4b0e      	ldr	r3, [pc, #56]	; (3844 <ticker_instance1_sched+0x94>)
    380a:	9300      	str	r3, [sp, #0]
    380c:	4a0e      	ldr	r2, [pc, #56]	; (3848 <ticker_instance1_sched+0x98>)
    380e:	4b0f      	ldr	r3, [pc, #60]	; (384c <ticker_instance1_sched+0x9c>)
    3810:	490f      	ldr	r1, [pc, #60]	; (3850 <ticker_instance1_sched+0xa0>)
    3812:	4810      	ldr	r0, [pc, #64]	; (3854 <ticker_instance1_sched+0xa4>)
    3814:	f7fd fcca 	bl	11ac <printk>
    3818:	2100      	movs	r1, #0
    381a:	4608      	mov	r0, r1
			break;
		}
		break;
	}
}
    381c:	46bd      	mov	sp, r7
    381e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
    3822:	f008 bf15 	b.w	c650 <_SysFatalErrorHandler>
    3826:	bf00      	nop
    3828:	20000170 	.word	0x20000170
    382c:	20000140 	.word	0x20000140
    3830:	200001a0 	.word	0x200001a0
    3834:	200001d0 	.word	0x200001d0
    3838:	200001b0 	.word	0x200001b0
    383c:	200001e0 	.word	0x200001e0
    3840:	0000dd4e 	.word	0x0000dd4e
    3844:	0000dd53 	.word	0x0000dd53
    3848:	0000dcfd 	.word	0x0000dcfd
    384c:	0000ef00 	.word	0x0000ef00
    3850:	0000dd04 	.word	0x0000dd04
    3854:	0000e191 	.word	0x0000e191

00003858 <ticker_instance0_sched>:
	return 0;
}

static void ticker_instance0_sched(uint8_t caller_id, uint8_t callee_id,
				   uint8_t chain)
{
    3858:	b590      	push	{r4, r7, lr}
    385a:	4604      	mov	r4, r0
    385c:	b083      	sub	sp, #12
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    385e:	2c01      	cmp	r4, #1
	return 0;
}

static void ticker_instance0_sched(uint8_t caller_id, uint8_t callee_id,
				   uint8_t chain)
{
    3860:	4608      	mov	r0, r1
    3862:	af02      	add	r7, sp, #8
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
    3864:	d00d      	beq.n	3882 <ticker_instance0_sched+0x2a>
    3866:	d302      	bcc.n	386e <ticker_instance0_sched+0x16>
    3868:	2c02      	cmp	r4, #2
    386a:	d015      	beq.n	3898 <ticker_instance0_sched+0x40>
    386c:	e020      	b.n	38b0 <ticker_instance0_sched+0x58>
	case CALL_ID_TRIGGER:
		switch (callee_id) {
    386e:	2901      	cmp	r1, #1
    3870:	d004      	beq.n	387c <ticker_instance0_sched+0x24>
    3872:	2902      	cmp	r1, #2
    3874:	d122      	bne.n	38bc <ticker_instance0_sched+0x64>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    3876:	4b1a      	ldr	r3, [pc, #104]	; (38e0 <ticker_instance0_sched+0x88>)
    3878:	2101      	movs	r1, #1
    387a:	e006      	b.n	388a <ticker_instance0_sched+0x32>
				0, 0, link,
				&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    387c:	4b19      	ldr	r3, [pc, #100]	; (38e4 <ticker_instance0_sched+0x8c>)
    387e:	2100      	movs	r1, #0
    3880:	e014      	b.n	38ac <ticker_instance0_sched+0x54>
			break;
		}
		break;

	case CALL_ID_WORKER:
		switch (callee_id) {
    3882:	2902      	cmp	r1, #2
    3884:	d11a      	bne.n	38bc <ticker_instance0_sched+0x64>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER0,
    3886:	4b18      	ldr	r3, [pc, #96]	; (38e8 <ticker_instance0_sched+0x90>)
    3888:	4621      	mov	r1, r4
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    388a:	2000      	movs	r0, #0
			LL_ASSERT(0);
			break;
		}
		break;
	}
}
    388c:	3704      	adds	r7, #4
    388e:	46bd      	mov	sp, r7
    3890:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
    3894:	f7ff b9d0 	b.w	2c38 <mayfly_enqueue>
			break;
		}
		break;

	case CALL_ID_JOB:
		switch (callee_id) {
    3898:	2901      	cmp	r1, #1
    389a:	d004      	beq.n	38a6 <ticker_instance0_sched+0x4e>
    389c:	2902      	cmp	r1, #2
    389e:	d10d      	bne.n	38bc <ticker_instance0_sched+0x64>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB0,
    38a0:	4b12      	ldr	r3, [pc, #72]	; (38ec <ticker_instance0_sched+0x94>)
    38a2:	2101      	movs	r1, #1
    38a4:	e002      	b.n	38ac <ticker_instance0_sched+0x54>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_worker
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB0,
    38a6:	4b12      	ldr	r3, [pc, #72]	; (38f0 <ticker_instance0_sched+0x98>)
    38a8:	2100      	movs	r1, #0
    38aa:	e7ef      	b.n	388c <ticker_instance0_sched+0x34>
				0, 0, link,
				(void *)&_instance[0],
				(void *)ticker_job
			};

			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB0,
    38ac:	4608      	mov	r0, r1
    38ae:	e7ed      	b.n	388c <ticker_instance0_sched+0x34>
			break;
		}
		break;

	default:
		switch (callee_id) {
    38b0:	2902      	cmp	r1, #2
    38b2:	d103      	bne.n	38bc <ticker_instance0_sched+0x64>
				(void *)&_instance[0],
				(void *)ticker_job
			};

			/* TODO: scheduler lock, if OS used */
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
    38b4:	4b0f      	ldr	r3, [pc, #60]	; (38f4 <ticker_instance0_sched+0x9c>)
    38b6:	2101      	movs	r1, #1
    38b8:	2003      	movs	r0, #3
    38ba:	e7e7      	b.n	388c <ticker_instance0_sched+0x34>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
    38bc:	4b0e      	ldr	r3, [pc, #56]	; (38f8 <ticker_instance0_sched+0xa0>)
    38be:	9301      	str	r3, [sp, #4]
    38c0:	4b0e      	ldr	r3, [pc, #56]	; (38fc <ticker_instance0_sched+0xa4>)
    38c2:	9300      	str	r3, [sp, #0]
    38c4:	4a0e      	ldr	r2, [pc, #56]	; (3900 <ticker_instance0_sched+0xa8>)
    38c6:	4b0f      	ldr	r3, [pc, #60]	; (3904 <ticker_instance0_sched+0xac>)
    38c8:	490f      	ldr	r1, [pc, #60]	; (3908 <ticker_instance0_sched+0xb0>)
    38ca:	4810      	ldr	r0, [pc, #64]	; (390c <ticker_instance0_sched+0xb4>)
    38cc:	f7fd fc6e 	bl	11ac <printk>
    38d0:	2100      	movs	r1, #0
    38d2:	4608      	mov	r0, r1
			break;
		}
		break;
	}
}
    38d4:	3704      	adds	r7, #4
    38d6:	46bd      	mov	sp, r7
    38d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
    38dc:	f008 beb8 	b.w	c650 <_SysFatalErrorHandler>
    38e0:	20000180 	.word	0x20000180
    38e4:	20000160 	.word	0x20000160
    38e8:	20000190 	.word	0x20000190
    38ec:	20000150 	.word	0x20000150
    38f0:	200001c0 	.word	0x200001c0
    38f4:	20000130 	.word	0x20000130
    38f8:	0000dd4e 	.word	0x0000dd4e
    38fc:	0000dd53 	.word	0x0000dd53
    3900:	0000dcfd 	.word	0x0000dcfd
    3904:	0000ee91 	.word	0x0000ee91
    3908:	0000dd04 	.word	0x0000dd04
    390c:	0000e191 	.word	0x0000e191

00003910 <ticker_instance1_caller_id_get>:

	return 0;
}

static uint8_t ticker_instance1_caller_id_get(uint8_t user_id)
{
    3910:	b580      	push	{r7, lr}
	if (user_id == TICKER_MAYFLY_CALL_ID_PROGRAM) {
    3912:	2803      	cmp	r0, #3

	return 0;
}

static uint8_t ticker_instance1_caller_id_get(uint8_t user_id)
{
    3914:	b082      	sub	sp, #8
    3916:	af02      	add	r7, sp, #8
	if (user_id == TICKER_MAYFLY_CALL_ID_PROGRAM) {
    3918:	d011      	beq.n	393e <ticker_instance1_caller_id_get+0x2e>
		return CALL_ID_USER;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_JOB1) {
    391a:	2802      	cmp	r0, #2
    391c:	d00f      	beq.n	393e <ticker_instance1_caller_id_get+0x2e>
		return CALL_ID_JOB;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_WORKER1) {
		return CALL_ID_WORKER;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_TRIGGER) {
    391e:	b170      	cbz	r0, 393e <ticker_instance1_caller_id_get+0x2e>
		return CALL_ID_TRIGGER;
	}

	LL_ASSERT(0);
    3920:	4b08      	ldr	r3, [pc, #32]	; (3944 <ticker_instance1_caller_id_get+0x34>)
    3922:	9301      	str	r3, [sp, #4]
    3924:	4b08      	ldr	r3, [pc, #32]	; (3948 <ticker_instance1_caller_id_get+0x38>)
    3926:	9300      	str	r3, [sp, #0]
    3928:	4a08      	ldr	r2, [pc, #32]	; (394c <ticker_instance1_caller_id_get+0x3c>)
    392a:	4b09      	ldr	r3, [pc, #36]	; (3950 <ticker_instance1_caller_id_get+0x40>)
    392c:	4909      	ldr	r1, [pc, #36]	; (3954 <ticker_instance1_caller_id_get+0x44>)
    392e:	480a      	ldr	r0, [pc, #40]	; (3958 <ticker_instance1_caller_id_get+0x48>)
    3930:	f7fd fc3c 	bl	11ac <printk>
    3934:	2100      	movs	r1, #0
    3936:	4608      	mov	r0, r1
    3938:	f008 fe8a 	bl	c650 <_SysFatalErrorHandler>
    393c:	2000      	movs	r0, #0

	return 0;
}
    393e:	46bd      	mov	sp, r7
    3940:	bd80      	pop	{r7, pc}
    3942:	bf00      	nop
    3944:	0000dd4e 	.word	0x0000dd4e
    3948:	0000dd53 	.word	0x0000dd53
    394c:	0000dcfd 	.word	0x0000dcfd
    3950:	0000eea8 	.word	0x0000eea8
    3954:	0000dd04 	.word	0x0000dd04
    3958:	0000e191 	.word	0x0000e191

0000395c <ticker_instance0_caller_id_get>:
 ****************************************************************************/
#include "mayfly.h"
#include "config.h"

static uint8_t ticker_instance0_caller_id_get(uint8_t user_id)
{
    395c:	b580      	push	{r7, lr}
	if (user_id == TICKER_MAYFLY_CALL_ID_PROGRAM) {
    395e:	2803      	cmp	r0, #3
 ****************************************************************************/
#include "mayfly.h"
#include "config.h"

static uint8_t ticker_instance0_caller_id_get(uint8_t user_id)
{
    3960:	b082      	sub	sp, #8
    3962:	af02      	add	r7, sp, #8
	if (user_id == TICKER_MAYFLY_CALL_ID_PROGRAM) {
    3964:	d015      	beq.n	3992 <ticker_instance0_caller_id_get+0x36>
		return CALL_ID_USER;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_JOB0) {
    3966:	2801      	cmp	r0, #1
    3968:	d010      	beq.n	398c <ticker_instance0_caller_id_get+0x30>
		return CALL_ID_JOB;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_WORKER0) {
    396a:	b188      	cbz	r0, 3990 <ticker_instance0_caller_id_get+0x34>
		return CALL_ID_WORKER;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_TRIGGER) {
		return CALL_ID_TRIGGER;
	}

	LL_ASSERT(0);
    396c:	4b0a      	ldr	r3, [pc, #40]	; (3998 <ticker_instance0_caller_id_get+0x3c>)
    396e:	9301      	str	r3, [sp, #4]
    3970:	4b0a      	ldr	r3, [pc, #40]	; (399c <ticker_instance0_caller_id_get+0x40>)
    3972:	9300      	str	r3, [sp, #0]
    3974:	4a0a      	ldr	r2, [pc, #40]	; (39a0 <ticker_instance0_caller_id_get+0x44>)
    3976:	4b0b      	ldr	r3, [pc, #44]	; (39a4 <ticker_instance0_caller_id_get+0x48>)
    3978:	490b      	ldr	r1, [pc, #44]	; (39a8 <ticker_instance0_caller_id_get+0x4c>)
    397a:	480c      	ldr	r0, [pc, #48]	; (39ac <ticker_instance0_caller_id_get+0x50>)
    397c:	f7fd fc16 	bl	11ac <printk>
    3980:	2100      	movs	r1, #0
    3982:	4608      	mov	r0, r1
    3984:	f008 fe64 	bl	c650 <_SysFatalErrorHandler>
    3988:	2000      	movs	r0, #0
    398a:	e002      	b.n	3992 <ticker_instance0_caller_id_get+0x36>
static uint8_t ticker_instance0_caller_id_get(uint8_t user_id)
{
	if (user_id == TICKER_MAYFLY_CALL_ID_PROGRAM) {
		return CALL_ID_USER;
	} else if (user_id == TICKER_MAYFLY_CALL_ID_JOB0) {
		return CALL_ID_JOB;
    398c:	2002      	movs	r0, #2
    398e:	e000      	b.n	3992 <ticker_instance0_caller_id_get+0x36>
	} else if (user_id == TICKER_MAYFLY_CALL_ID_WORKER0) {
		return CALL_ID_WORKER;
    3990:	2001      	movs	r0, #1
	}

	LL_ASSERT(0);

	return 0;
}
    3992:	46bd      	mov	sp, r7
    3994:	bd80      	pop	{r7, pc}
    3996:	bf00      	nop
    3998:	0000dd4e 	.word	0x0000dd4e
    399c:	0000dd53 	.word	0x0000dd53
    39a0:	0000dcfd 	.word	0x0000dcfd
    39a4:	0000eee1 	.word	0x0000eee1
    39a8:	0000dd04 	.word	0x0000dd04
    39ac:	0000e191 	.word	0x0000e191

000039b0 <ticker_worker>:

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    39b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
	if (instance->job_guard) {
    39b4:	7f05      	ldrb	r5, [r0, #28]
	uint32_t ticks_elapsed;
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    39b6:	2301      	movs	r3, #1

	return (total + timeout);
}

static inline void ticker_worker(struct ticker_instance *instance)
{
    39b8:	af00      	add	r7, sp, #0
    39ba:	4604      	mov	r4, r0
	uint32_t ticks_elapsed;
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1;
    39bc:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
    39be:	2d00      	cmp	r5, #0
    39c0:	d14d      	bne.n	3a5e <ticker_worker+0xae>
		return;
	}

	/* If no tickers to expire, do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    39c2:	7e03      	ldrb	r3, [r0, #24]
    39c4:	2bff      	cmp	r3, #255	; 0xff
    39c6:	d102      	bne.n	39ce <ticker_worker+0x1e>
		instance->worker_trigger = 0;
    39c8:	7745      	strb	r5, [r0, #29]

		return;
    39ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	/* ticks_elapsed is collected here, job will use it */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    39ce:	f7ff fa33 	bl	2e38 <cntr_cnt_get>
	return cntr_cnt_get();
}

uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    39d2:	6963      	ldr	r3, [r4, #20]

	/* initialise actual elapsed ticks being consumed */
	ticks_expired = 0;

	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;
    39d4:	7e26      	ldrb	r6, [r4, #24]

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
    39d6:	f8d4 9000 	ldr.w	r9, [r4]
	return cntr_cnt_get();
}

uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    39da:	1ac0      	subs	r0, r0, r3
    39dc:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	/* auto variable containing the head of tickers expiring */
	ticker_id_head = instance->ticker_id_head;

	/* expire all tickers within ticks_elapsed and collect ticks_expired */
	node = &instance->node[0];
	while (ticker_id_head != TICKER_NULL) {
    39e0:	2eff      	cmp	r6, #255	; 0xff
    39e2:	d006      	beq.n	39f2 <ticker_worker+0x42>
		struct ticker_node *ticker;
		uint32_t ticks_to_expire;

		/* auto variable for current ticker node */
		ticker = &node[ticker_id_head];
    39e4:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
    39e8:	eb09 0186 	add.w	r1, r9, r6, lsl #2

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    39ec:	688b      	ldr	r3, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
    39ee:	4543      	cmp	r3, r8
    39f0:	d90a      	bls.n	3a08 <ticker_worker+0x58>
			DEBUG_TICKER_TASK(0);
		}
	}

	/* queue the elapsed value */
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    39f2:	7aa2      	ldrb	r2, [r4, #10]
    39f4:	7ae3      	ldrb	r3, [r4, #11]
    39f6:	4293      	cmp	r3, r2
    39f8:	d123      	bne.n	3a42 <ticker_worker+0x92>
		uint8_t last;

		last = instance->ticks_elapsed_last + 1;
    39fa:	3301      	adds	r3, #1
    39fc:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    39fe:	2b02      	cmp	r3, #2
    3a00:	bf08      	it	eq
    3a02:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_last = last;
    3a04:	72e3      	strb	r3, [r4, #11]
    3a06:	e01c      	b.n	3a42 <ticker_worker+0x92>
		if (ticks_elapsed < ticks_to_expire) {
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    3a08:	ebc3 0808 	rsb	r8, r3, r8
		ticks_expired += ticks_to_expire;
    3a0c:	441d      	add	r5, r3

		/* move to next ticker */
		ticker_id_head = ticker->next;

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3a0e:	788a      	ldrb	r2, [r1, #2]
    3a10:	784b      	ldrb	r3, [r1, #1]
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* move to next ticker */
		ticker_id_head = ticker->next;
    3a12:	f819 6026 	ldrb.w	r6, [r9, r6, lsl #2]

		/* skip if not scheduled to execute */
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
    3a16:	1a9b      	subs	r3, r3, r2
    3a18:	b2db      	uxtb	r3, r3
    3a1a:	2b01      	cmp	r3, #1
    3a1c:	d1e0      	bne.n	39e0 <ticker_worker+0x30>
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;

		if (ticker->timeout_func) {
    3a1e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
			continue;
		}

		/* scheduled timeout is acknowledged to be complete */
		ticker->ack--;
    3a22:	3a01      	subs	r2, #1
    3a24:	708a      	strb	r2, [r1, #2]

		if (ticker->timeout_func) {
    3a26:	f1ba 0f00 	cmp.w	sl, #0
    3a2a:	d0d9      	beq.n	39e0 <ticker_worker+0x30>
			DEBUG_TICKER_TASK(1);
			ticker->timeout_func(((instance->ticks_current +
    3a2c:	6963      	ldr	r3, [r4, #20]
    3a2e:	8a88      	ldrh	r0, [r1, #20]
    3a30:	8b4a      	ldrh	r2, [r1, #26]
    3a32:	1a18      	subs	r0, r3, r0
    3a34:	4428      	add	r0, r5
    3a36:	690b      	ldr	r3, [r1, #16]
    3a38:	6a09      	ldr	r1, [r1, #32]
    3a3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3a3e:	47d0      	blx	sl
    3a40:	e7ce      	b.n	39e0 <ticker_worker+0x30>
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    3a42:	7ae3      	ldrb	r3, [r4, #11]
    3a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    3a48:	2201      	movs	r2, #1
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
		instance->ticks_elapsed_last = last;
	}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
    3a4a:	60dd      	str	r5, [r3, #12]
	    ticks_expired;

	instance->worker_trigger = 0;
    3a4c:	2300      	movs	r3, #0
    3a4e:	7763      	strb	r3, [r4, #29]

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    3a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3a52:	2102      	movs	r1, #2
    3a54:	4610      	mov	r0, r2
}
    3a56:	46bd      	mov	sp, r7
    3a58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->ticks_elapsed[instance->ticks_elapsed_last] =
	    ticks_expired;

	instance->worker_trigger = 0;

	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
    3a5c:	4718      	bx	r3
    3a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00003a64 <ticker_job>:
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    3a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a68:	b093      	sub	sp, #76	; 0x4c
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    3a6a:	7f42      	ldrb	r2, [r0, #29]
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
}

static inline void ticker_job(struct ticker_instance *instance)
{
    3a6c:	af02      	add	r7, sp, #8
    3a6e:	4604      	mov	r4, r0
	uint8_t flag_compare_update;

	DEBUG_TICKER_JOB(1);

	/* Defer worker, as job is now running */
	if (instance->worker_trigger) {
    3a70:	2a00      	cmp	r2, #0
    3a72:	f040 83ae 	bne.w	41d2 <ticker_job+0x76e>
		return;
	}
	instance->job_guard = 1;

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;
    3a76:	6943      	ldr	r3, [r0, #20]
    3a78:	627b      	str	r3, [r7, #36]	; 0x24
	if (instance->worker_trigger) {
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    3a7a:	2101      	movs	r1, #1

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3a7c:	7a83      	ldrb	r3, [r0, #10]
	if (instance->worker_trigger) {
		DEBUG_TICKER_JOB(0);

		return;
	}
	instance->job_guard = 1;
    3a7e:	7701      	strb	r1, [r0, #28]

	/* Back up the previous known tick */
	ticks_previous = instance->ticks_current;

	/* Update current tick with the elapsed value from queue, and dequeue */
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    3a80:	7ac0      	ldrb	r0, [r0, #11]
    3a82:	4298      	cmp	r0, r3
    3a84:	d010      	beq.n	3aa8 <ticker_job+0x44>
		uint8_t first;

		first = instance->ticks_elapsed_first + 1;
    3a86:	440b      	add	r3, r1
    3a88:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
    3a8a:	2b02      	cmp	r3, #2
    3a8c:	bf08      	it	eq
    3a8e:	2300      	moveq	r3, #0
		}
		instance->ticks_elapsed_first = first;
    3a90:	72a3      	strb	r3, [r4, #10]

		ticks_elapsed =
    3a92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;

		flag_elapsed = 1;
    3a96:	6379      	str	r1, [r7, #52]	; 0x34
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
		}
		instance->ticks_elapsed_first = first;

		ticks_elapsed =
    3a98:	f8d3 b00c 	ldr.w	fp, [r3, #12]
		    instance->ticks_elapsed[instance->ticks_elapsed_first];

		instance->ticks_current += ticks_elapsed;
		instance->ticks_current &= 0x00FFFFFF;
    3a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a9e:	445b      	add	r3, fp
    3aa0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3aa4:	6163      	str	r3, [r4, #20]
    3aa6:	e001      	b.n	3aac <ticker_job+0x48>

		flag_elapsed = 1;
	} else {
		/* No elapsed value in queue */
		flag_elapsed = 0;
    3aa8:	637a      	str	r2, [r7, #52]	; 0x34
		ticks_elapsed = 0;
    3aaa:	4693      	mov	fp, r2
	flag_compare_update = 0;

	/* Remember the old head, so as to decide if new compare needs to be
	 * set.
	 */
	ticker_id_old_head = instance->ticker_id_head;
    3aac:	7e23      	ldrb	r3, [r4, #24]
    3aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct ticker_node *node;
	struct ticker_user *users;
	uint8_t count_user;

	pending = 0;
	node = &instance->node[0];
    3ab0:	6823      	ldr	r3, [r4, #0]
    3ab2:	633b      	str	r3, [r7, #48]	; 0x30
	users = &instance->user[0];
    3ab4:	6863      	ldr	r3, [r4, #4]
    3ab6:	617b      	str	r3, [r7, #20]
	count_user = instance->count_user;
    3ab8:	7a63      	ldrb	r3, [r4, #9]
    3aba:	63bb      	str	r3, [r7, #56]	; 0x38
		flag_elapsed = 0;
		ticks_elapsed = 0;
	}

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;
    3abc:	23ff      	movs	r3, #255	; 0xff
    3abe:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t pending;
	struct ticker_node *node;
	struct ticker_user *users;
	uint8_t count_user;

	pending = 0;
    3ac0:	2300      	movs	r3, #0
				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;

				pending = 1;
    3ac2:	61fb      	str	r3, [r7, #28]

	pending = 0;
	node = &instance->node[0];
	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    3ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	f000 80f2 	beq.w	3cb0 <ticker_job+0x24c>
    3acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ace:	1e5e      	subs	r6, r3, #1
    3ad0:	b2f3      	uxtb	r3, r6
    3ad2:	63bb      	str	r3, [r7, #56]	; 0x38
		struct ticker_user *user;
		struct ticker_user_op *user_ops;

		user = &users[count_user];
    3ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3ad6:	697b      	ldr	r3, [r7, #20]
    3ad8:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = &user->user_op[0];
    3adc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3ae0:	62bb      	str	r3, [r7, #40]	; 0x28
		while (user->middle != user->last) {
    3ae2:	f898 1003 	ldrb.w	r1, [r8, #3]
    3ae6:	f898 9002 	ldrb.w	r9, [r8, #2]
    3aea:	4589      	cmp	r9, r1
    3aec:	d0ea      	beq.n	3ac4 <ticker_job+0x60>
			struct ticker_node *ticker;
			uint8_t state;
			uint8_t prev;
			uint8_t middle;

			user_op = &user_ops[user->middle];
    3aee:	232c      	movs	r3, #44	; 0x2c
    3af0:	fb19 f203 	smulbb	r2, r9, r3
    3af4:	6abb      	ldr	r3, [r7, #40]	; 0x28

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
			if (middle == user->count_user_op) {
    3af6:	f898 0000 	ldrb.w	r0, [r8]
			struct ticker_node *ticker;
			uint8_t state;
			uint8_t prev;
			uint8_t middle;

			user_op = &user_ops[user->middle];
    3afa:	189e      	adds	r6, r3, r2

			/* Traverse queue (no dequeue) */
			prev = user->middle;
			middle = user->middle + 1;
    3afc:	f109 0301 	add.w	r3, r9, #1
    3b00:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
				middle = 0;
    3b02:	4298      	cmp	r0, r3
    3b04:	bf08      	it	eq
    3b06:	2300      	moveq	r3, #0
			}
			user->middle = middle;
    3b08:	f888 3002 	strb.w	r3, [r8, #2]

			ticker = &node[user_op->id];

			/* if op is start, then skip update and stop ops */
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    3b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b0e:	5c9a      	ldrb	r2, [r3, r2]
    3b10:	2a03      	cmp	r2, #3
    3b12:	d9e8      	bls.n	3ae6 <ticker_job+0x82>
			state = (ticker->req - ticker->ack) & 0xff;

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
    3b14:	2a05      	cmp	r2, #5
    3b16:	d817      	bhi.n	3b48 <ticker_job+0xe4>
			if (middle == user->count_user_op) {
				middle = 0;
			}
			user->middle = middle;

			ticker = &node[user_op->id];
    3b18:	7871      	ldrb	r1, [r6, #1]
    3b1a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    3b1e:	61bb      	str	r3, [r7, #24]
    3b20:	69b8      	ldr	r0, [r7, #24]
    3b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b24:	eb03 0580 	add.w	r5, r3, r0, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
				continue;
			}

			/* determine the ticker state */
			state = (ticker->req - ticker->ack) & 0xff;
    3b28:	786b      	ldrb	r3, [r5, #1]
    3b2a:	78a8      	ldrb	r0, [r5, #2]
    3b2c:	1a1b      	subs	r3, r3, r0

			/* if not started or update not required,
			 * set status and continue.
			 */
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP)
			    || (state == 0)
    3b2e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    3b32:	d009      	beq.n	3b48 <ticker_job+0xe4>
			    || ((user_op->op == TICKER_USER_OP_TYPE_UPDATE)
    3b34:	2a04      	cmp	r2, #4
    3b36:	d10b      	bne.n	3b50 <ticker_job+0xec>
				&&
				(user_op->params.update.ticks_drift_plus == 0)
				&&
    3b38:	6872      	ldr	r2, [r6, #4]
    3b3a:	b94a      	cbnz	r2, 3b50 <ticker_job+0xec>
				(user_op->params.update.ticks_drift_minus ==
				 0)
				&& (user_op->params.update.ticks_slot_plus ==
				    0)
				&& (user_op->params.update.ticks_slot_minus ==
    3b3c:	68b2      	ldr	r2, [r6, #8]
    3b3e:	b93a      	cbnz	r2, 3b50 <ticker_job+0xec>
				    0)
				&& (user_op->params.update.lazy == 0)
				&& (user_op->params.update.force == 0)
    3b40:	68f2      	ldr	r2, [r6, #12]
    3b42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3b46:	b91a      	cbnz	r2, 3b50 <ticker_job+0xec>
			    )
			    ) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    3b48:	2300      	movs	r3, #0
    3b4a:	7033      	strb	r3, [r6, #0]
				user_op->status = TICKER_STATUS_FAILURE;
    3b4c:	2001      	movs	r0, #1
    3b4e:	e09e      	b.n	3c8e <ticker_job+0x22a>

				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
    3b50:	2b01      	cmp	r3, #1
    3b52:	f040 80a4 	bne.w	3c9e <ticker_job+0x23a>
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    3b56:	4620      	mov	r0, r4
    3b58:	f7ff fdc8 	bl	36ec <ticker_dequeue>
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    3b5c:	7833      	ldrb	r3, [r6, #0]
				continue;
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
    3b5e:	60a8      	str	r0, [r5, #8]
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    3b60:	2b04      	cmp	r3, #4
			}

			/* Delete node, if not expired */
			if (state == 1) {
				ticker->ticks_to_expire =
				    ticker_dequeue(instance,
    3b62:	4682      	mov	sl, r0
						      user_op->id);

				/* Handle drift of ticker by re-inserting
				 * it back.
				 */
				if (user_op->op ==
    3b64:	f040 8087 	bne.w	3c76 <ticker_job+0x212>
					TICKER_USER_OP_TYPE_UPDATE) {
					ticker_job_node_update(ticker,
    3b68:	f8d4 9014 	ldr.w	r9, [r4, #20]
					uint8_t *insert_head)
{
	uint32_t ticks_now;
	uint32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    3b6c:	f7ff f964 	bl	2e38 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    3b70:	ebc9 0e00 	rsb	lr, r9, r0
    3b74:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
    3b78:	eb0e 030b 	add.w	r3, lr, fp
	if (ticks_to_expire > ticks_elapsed) {
    3b7c:	459a      	cmp	sl, r3
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    3b7e:	bf98      	it	ls
    3b80:	f8b5 e014 	ldrhls.w	lr, [r5, #20]
					uint8_t *insert_head)
{
	uint32_t ticks_now;
	uint32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
    3b84:	6238      	str	r0, [r7, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    3b86:	bf9a      	itte	ls
    3b88:	ebca 0e0e 	rsbls	lr, sl, lr
    3b8c:	449e      	addls	lr, r3
	uint32_t ticks_to_expire = ticker->ticks_to_expire;

	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
    3b8e:	ebc3 0e0a 	rsbhi	lr, r3, sl
		ticker->ticks_to_expire_minus +=
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
	}

	if ((ticker->ticks_periodic != 0)
    3b92:	686b      	ldr	r3, [r5, #4]
	ticks_now = cntr_cnt_get();
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
	if (ticks_to_expire > ticks_elapsed) {
		ticks_to_expire -= ticks_elapsed;
	} else {
		ticker->ticks_to_expire_minus +=
    3b94:	bf9c      	itt	ls
    3b96:	f8a5 e014 	strhls.w	lr, [r5, #20]
		    (ticks_elapsed - ticks_to_expire);
		ticks_to_expire = 0;
    3b9a:	f04f 0e00 	movls.w	lr, #0
	}

	if ((ticker->ticks_periodic != 0)
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d043      	beq.n	3c2a <ticker_job+0x1c6>
	    && (user_op->params.update.lazy != 0)
    3ba2:	89b3      	ldrh	r3, [r6, #12]
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d040      	beq.n	3c2a <ticker_job+0x1c6>
	    ) {
		user_op->params.update.lazy--;
    3ba8:	3b01      	subs	r3, #1
    3baa:	81b3      	strh	r3, [r6, #12]

		while ((ticks_to_expire > ticker->ticks_periodic)
    3bac:	6868      	ldr	r0, [r5, #4]
    3bae:	4570      	cmp	r0, lr
    3bb0:	d21e      	bcs.n	3bf0 <ticker_job+0x18c>
		       && (ticker->lazy_current >
    3bb2:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    3bb6:	89b3      	ldrh	r3, [r6, #12]
    3bb8:	4563      	cmp	r3, ip
    3bba:	d219      	bcs.n	3bf0 <ticker_job+0x18c>

static uint8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	uint8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
    3bbc:	6a29      	ldr	r1, [r5, #32]
    3bbe:	4b8b      	ldr	r3, [pc, #556]	; (3dec <ticker_job+0x388>)
    3bc0:	4a8b      	ldr	r2, [pc, #556]	; (3df0 <ticker_job+0x38c>)
    3bc2:	440b      	add	r3, r1
    3bc4:	4293      	cmp	r3, r2
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
    3bc6:	bf82      	ittt	hi
    3bc8:	4b8a      	ldrhi	r3, [pc, #552]	; (3df4 <ticker_job+0x390>)
    3bca:	185b      	addhi	r3, r3, r1
    3bcc:	622b      	strhi	r3, [r5, #32]
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    3bce:	6a2b      	ldr	r3, [r5, #32]
    3bd0:	69e9      	ldr	r1, [r5, #28]
{
	uint8_t decrement = 0;

	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
    3bd2:	bf8c      	ite	hi
    3bd4:	f04f 0a01 	movhi.w	sl, #1
	return 0;
}

static uint8_t ticker_remainder_decrement(struct ticker_node *ticker)
{
	uint8_t decrement = 0;
    3bd8:	f04f 0a00 	movls.w	sl, #0
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    3bdc:	1a5b      	subs	r3, r3, r1
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    3bde:	4482      	add	sl, r0
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    3be0:	f10c 3cff 	add.w	ip, ip, #4294967295
	if ((ticker->remainder_current >= 0x80000000)
	    || (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    3be4:	622b      	str	r3, [r5, #32]
		user_op->params.update.lazy--;

		while ((ticks_to_expire > ticker->ticks_periodic)
		       && (ticker->lazy_current >
			   user_op->params.update.lazy)) {
			ticks_to_expire -=
    3be6:	ebca 0e0e 	rsb	lr, sl, lr
			    (ticker->ticks_periodic +
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
    3bea:	f8a5 c01a 	strh.w	ip, [r5, #26]
    3bee:	e7de      	b.n	3bae <ticker_job+0x14a>
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
    3bf0:	f8b5 c01a 	ldrh.w	ip, [r5, #26]
    3bf4:	89b3      	ldrh	r3, [r6, #12]
    3bf6:	459c      	cmp	ip, r3
    3bf8:	d216      	bcs.n	3c28 <ticker_job+0x1c4>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3bfa:	6a29      	ldr	r1, [r5, #32]
    3bfc:	69eb      	ldr	r3, [r5, #28]
	if ((ticker->remainder_current < 0x80000000)
    3bfe:	4a7c      	ldr	r2, [pc, #496]	; (3df0 <ticker_job+0x38c>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3c00:	440b      	add	r3, r1
	if ((ticker->remainder_current < 0x80000000)
    3c02:	497a      	ldr	r1, [pc, #488]	; (3dec <ticker_job+0x388>)
    3c04:	4419      	add	r1, r3
    3c06:	4291      	cmp	r1, r2
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3c08:	bf95      	itete	ls
    3c0a:	497b      	ldrls	r1, [pc, #492]	; (3df8 <ticker_job+0x394>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3c0c:	622b      	strhi	r3, [r5, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3c0e:	18c9      	addls	r1, r1, r3
		return 1;
	}
	return 0;
    3c10:	2300      	movhi	r3, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    3c12:	bf98      	it	ls
    3c14:	2301      	movls	r3, #1
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    3c16:	4403      	add	r3, r0
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    3c18:	f10c 0c01 	add.w	ip, ip, #1
static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3c1c:	bf98      	it	ls
    3c1e:	6229      	strls	r1, [r5, #32]
			     ticker_remainder_decrement(ticker));
			ticker->lazy_current--;
		}

		while (ticker->lazy_current < user_op->params.update.lazy) {
			ticks_to_expire +=
    3c20:	449e      	add	lr, r3
			    ticker->ticks_periodic +
			    ticker_remainder_increment(ticker);
			ticker->lazy_current++;
    3c22:	f8a5 c01a 	strh.w	ip, [r5, #26]
    3c26:	e7e3      	b.n	3bf0 <ticker_job+0x18c>
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
    3c28:	832b      	strh	r3, [r5, #24]
	}

	ticker->ticks_to_expire =
    3c2a:	88b3      	ldrh	r3, [r6, #4]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    3c2c:	8aa9      	ldrh	r1, [r5, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    3c2e:	6a3a      	ldr	r2, [r7, #32]
		}

		ticker->lazy_periodic = user_op->params.update.lazy;
	}

	ticker->ticks_to_expire =
    3c30:	4473      	add	r3, lr
    3c32:	60ab      	str	r3, [r5, #8]
	    ticks_to_expire + user_op->params.update.ticks_drift_plus;
	ticker->ticks_to_expire_minus +=
    3c34:	88f3      	ldrh	r3, [r6, #6]
    3c36:	440b      	add	r3, r1
    3c38:	82ab      	strh	r3, [r5, #20]
	    user_op->params.update.ticks_drift_minus;
	prepare_ticks_to_expire(ticker, ticks_current, ticks_now);
    3c3a:	4649      	mov	r1, r9
    3c3c:	4628      	mov	r0, r5
    3c3e:	f7ff fd83 	bl	3748 <prepare_ticks_to_expire>

	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    3c42:	8aea      	ldrh	r2, [r5, #22]
    3c44:	8933      	ldrh	r3, [r6, #8]
    3c46:	4413      	add	r3, r2
    3c48:	b29b      	uxth	r3, r3
    3c4a:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    3c4c:	8972      	ldrh	r2, [r6, #10]
    3c4e:	4293      	cmp	r3, r2
		ticker->ticks_slot -=
    3c50:	bf8c      	ite	hi
    3c52:	1a9b      	subhi	r3, r3, r2
		    user_op->params.update.ticks_slot_minus;
	} else {
		ticker->ticks_slot = 0;
    3c54:	2300      	movls	r3, #0
    3c56:	82eb      	strh	r3, [r5, #22]
	}

	if (user_op->params.update.force != 0) {
    3c58:	7bb3      	ldrb	r3, [r6, #14]
    3c5a:	b103      	cbz	r3, 3c5e <ticker_job+0x1fa>
		ticker->force = user_op->params.update.force;
    3c5c:	70eb      	strb	r3, [r5, #3]
	}

	ticker->next = *insert_head;
    3c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3c60:	69ba      	ldr	r2, [r7, #24]
    3c62:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
    3c66:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
	*insert_head = user_op->id;
    3c6a:	7873      	ldrb	r3, [r6, #1]
    3c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
							  insert_head);

					/* set schedule status of node
					 * as updating.
					 */
					ticker->req++;
    3c6e:	786b      	ldrb	r3, [r5, #1]
    3c70:	3301      	adds	r3, #1
    3c72:	706b      	strb	r3, [r5, #1]
    3c74:	e009      	b.n	3c8a <ticker_job+0x226>
				} else {
					/* reset schedule status of node */
					ticker->req = ticker->ack;
    3c76:	78ab      	ldrb	r3, [r5, #2]
    3c78:	706b      	strb	r3, [r5, #1]

					if (instance->
    3c7a:	7873      	ldrb	r3, [r6, #1]
    3c7c:	7e62      	ldrb	r2, [r4, #25]
    3c7e:	429a      	cmp	r2, r3
					    ticker_id_slot_previous ==
					    user_op->id) {
						instance->
						    ticker_id_slot_previous =
    3c80:	bf01      	itttt	eq
    3c82:	23ff      	moveq	r3, #255	; 0xff
    3c84:	7663      	strbeq	r3, [r4, #25]
						    TICKER_NULL;
						instance->
						    ticks_slot_previous = 0;
    3c86:	2300      	moveq	r3, #0
    3c88:	8363      	strheq	r3, [r4, #26]
				}

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    3c8a:	2000      	movs	r0, #0
    3c8c:	7030      	strb	r0, [r6, #0]
				user_op->status = TICKER_STATUS_SUCCESS;
				if (user_op->fp_op_func) {
    3c8e:	6a73      	ldr	r3, [r6, #36]	; 0x24

				/* op success, @todo update may fail during
				 * actual insert! need to design that yet.
				 */
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = TICKER_STATUS_SUCCESS;
    3c90:	6230      	str	r0, [r6, #32]
				if (user_op->fp_op_func) {
    3c92:	2b00      	cmp	r3, #0
    3c94:	f43f af25 	beq.w	3ae2 <ticker_job+0x7e>
					user_op->fp_op_func(
    3c98:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3c9a:	4798      	blx	r3
    3c9c:	e721      	b.n	3ae2 <ticker_job+0x7e>
				/* update on expired node requested, deferi
				 * update until bottom half finishes.
				 */
				/* sched job to run after worker bottom half.
				 */
				instance->fp_sched(CALL_ID_JOB,
    3c9e:	2102      	movs	r1, #2
    3ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ca2:	2201      	movs	r2, #1
    3ca4:	4608      	mov	r0, r1
    3ca6:	4798      	blx	r3
						   CALL_ID_JOB, 1);

				/* Update the index upto which management is
				 * complete.
				 */
				user->middle = prev;
    3ca8:	f888 9002 	strb.w	r9, [r8, #2]

				pending = 1;
    3cac:	2301      	movs	r3, #1
    3cae:	e708      	b.n	3ac2 <ticker_job+0x5e>

	/* Initialise internal re-insert list */
	insert_head = TICKER_NULL;

	/* Initialise flag used to update next compare value */
	flag_compare_update = 0;
    3cb0:	7e23      	ldrb	r3, [r4, #24]
    3cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3cb4:	1a9b      	subs	r3, r3, r2
    3cb6:	bf18      	it	ne
    3cb8:	2301      	movne	r3, #1
    3cba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
	}

	/* Handle expired tickers */
	if (flag_elapsed) {
    3cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	d06e      	beq.n	3da0 <ticker_job+0x33c>
					uint8_t *insert_head)
{
	struct ticker_node *node;
	uint32_t ticks_expired;

	node = &instance->node[0];
    3cc2:	6823      	ldr	r3, [r4, #0]
	ticks_expired = 0;
    3cc4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
	while (instance->ticker_id_head != TICKER_NULL) {
    3cc6:	f894 a018 	ldrb.w	sl, [r4, #24]
    3cca:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3cce:	d060      	beq.n	3d92 <ticker_job+0x32e>
		uint8_t id_expired;
		uint32_t ticks_to_expire;

		/* auto variable for current ticker node */
		id_expired = instance->ticker_id_head;
		ticker = &node[id_expired];
    3cd0:	fa0f f98a 	sxth.w	r9, sl
    3cd4:	eb09 09c9 	add.w	r9, r9, r9, lsl #3
    3cd8:	eb03 0589 	add.w	r5, r3, r9, lsl #2

		/* Do nothing if ticker did not expire */
		ticks_to_expire = ticker->ticks_to_expire;
    3cdc:	f8d5 8008 	ldr.w	r8, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
    3ce0:	45d8      	cmp	r8, fp
    3ce2:	d903      	bls.n	3cec <ticker_job+0x288>
			ticker->ticks_to_expire -= ticks_elapsed;
    3ce4:	ebcb 0308 	rsb	r3, fp, r8
    3ce8:	60ab      	str	r3, [r5, #8]
    3cea:	e052      	b.n	3d92 <ticker_job+0x32e>
		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
    3cec:	8b62      	ldrh	r2, [r4, #26]
    3cee:	4590      	cmp	r8, r2
			instance->ticks_slot_previous -= ticks_to_expire;
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    3cf0:	bf29      	itett	cs
    3cf2:	f04f 32ff 	movcs.w	r2, #4294967295
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;

		/* decrement ticks_slot_previous */
		if (instance->ticks_slot_previous > ticks_to_expire) {
			instance->ticks_slot_previous -= ticks_to_expire;
    3cf6:	ebc8 0202 	rsbcc	r2, r8, r2
		} else {
			instance->ticker_id_slot_previous = TICKER_NULL;
    3cfa:	7662      	strbcs	r2, [r4, #25]
			instance->ticks_slot_previous = 0;
    3cfc:	2200      	movcs	r2, #0
    3cfe:	8362      	strh	r2, [r4, #26]
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    3d00:	8aea      	ldrh	r2, [r5, #22]
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
		ticks_expired += ticks_to_expire;
    3d02:	4446      	add	r6, r8
			instance->ticker_id_slot_previous = TICKER_NULL;
			instance->ticks_slot_previous = 0;
		}

		/* save current ticks_slot_previous */
		if (ticker->ticks_slot != 0) {
    3d04:	b11a      	cbz	r2, 3d0e <ticker_job+0x2aa>
			instance->ticker_id_slot_previous = id_expired;
    3d06:	f884 a019 	strb.w	sl, [r4, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
    3d0a:	8aea      	ldrh	r2, [r5, #22]
    3d0c:	8362      	strh	r2, [r4, #26]
		}

		/* ticker expired, set ticks_to_expire zero */
		ticker->ticks_to_expire = 0;
    3d0e:	2200      	movs	r2, #0
    3d10:	60aa      	str	r2, [r5, #8]

		/* remove the expired ticker from head */
		instance->ticker_id_head = ticker->next;
    3d12:	f813 1029 	ldrb.w	r1, [r3, r9, lsl #2]
    3d16:	7621      	strb	r1, [r4, #24]

		/* ticker will be restarted if periodic */
		if (ticker->ticks_periodic != 0) {
    3d18:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3d1c:	f1bc 0f00 	cmp.w	ip, #0
    3d20:	d02e      	beq.n	3d80 <ticker_job+0x31c>
    3d22:	f8b5 e018 	ldrh.w	lr, [r5, #24]
			uint32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
    3d26:	63ba      	str	r2, [r7, #56]	; 0x38
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3d28:	6a28      	ldr	r0, [r5, #32]
    3d2a:	69e9      	ldr	r1, [r5, #28]
	if ((ticker->remainder_current < 0x80000000)
    3d2c:	4a30      	ldr	r2, [pc, #192]	; (3df0 <ticker_job+0x38c>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3d2e:	4401      	add	r1, r0
	if ((ticker->remainder_current < 0x80000000)
    3d30:	482e      	ldr	r0, [pc, #184]	; (3dec <ticker_job+0x388>)
    3d32:	4408      	add	r0, r1
    3d34:	4290      	cmp	r0, r2
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3d36:	bf95      	itete	ls
    3d38:	482f      	ldrls	r0, [pc, #188]	; (3df8 <ticker_job+0x394>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3d3a:	6229      	strhi	r1, [r5, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3d3c:	1840      	addls	r0, r0, r1
		return 1;
	}
	return 0;
    3d3e:	2100      	movhi	r1, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    3d40:	bf98      	it	ls
    3d42:	2101      	movls	r1, #1

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
				ticks_to_expire +=
    3d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3d46:	bf98      	it	ls
    3d48:	6228      	strls	r0, [r5, #32]

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
				ticks_to_expire +=
    3d4a:	4461      	add	r1, ip
    3d4c:	440a      	add	r2, r1
			uint32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    3d4e:	f11e 3eff 	adds.w	lr, lr, #4294967295
				ticks_to_expire +=
    3d52:	63ba      	str	r2, [r7, #56]	; 0x38
			uint32_t count;

			count = 1 + ticker->lazy_periodic;

			ticks_to_expire = 0;
			while (count--) {
    3d54:	d2e8      	bcs.n	3d28 <ticker_job+0x2c4>
    3d56:	637b      	str	r3, [r7, #52]	; 0x34
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
			prepare_ticks_to_expire(ticker,
    3d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				ticks_to_expire +=
				    ticker->ticks_periodic +
				    ticker_remainder_increment(ticker);
			}

			ticker->ticks_to_expire = ticks_to_expire;
    3d5a:	60aa      	str	r2, [r5, #8]
			prepare_ticks_to_expire(ticker,
    3d5c:	6961      	ldr	r1, [r4, #20]
    3d5e:	199a      	adds	r2, r3, r6
    3d60:	4628      	mov	r0, r5
    3d62:	f7ff fcf1 	bl	3748 <prepare_ticks_to_expire>
						    instance->ticks_current,
						    (ticks_previous +
						     ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
    3d66:	8b2a      	ldrh	r2, [r5, #24]
    3d68:	836a      	strh	r2, [r5, #26]
			ticker->force = 0;

			ticker->next = *insert_head;
    3d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			prepare_ticks_to_expire(ticker,
						    instance->ticks_current,
						    (ticks_previous +
						     ticks_expired));
			ticker->lazy_current = ticker->lazy_periodic;
			ticker->force = 0;
    3d6c:	2200      	movs	r2, #0
    3d6e:	70ea      	strb	r2, [r5, #3]

			ticker->next = *insert_head;
    3d70:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    3d74:	f803 2029 	strb.w	r2, [r3, r9, lsl #2]
			*insert_head = id_expired;

			/* set schedule status of node as restarting. */
			ticker->req++;
    3d78:	786a      	ldrb	r2, [r5, #1]
    3d7a:	3201      	adds	r2, #1
    3d7c:	706a      	strb	r2, [r5, #1]
    3d7e:	e003      	b.n	3d88 <ticker_job+0x324>
		} else {
			/* reset schedule status of node */
			ticker->req = ticker->ack;
    3d80:	78aa      	ldrb	r2, [r5, #2]
    3d82:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
    3d86:	706a      	strb	r2, [r5, #1]
			ticker->ticks_to_expire -= ticks_elapsed;
			break;
		}

		/* decrement ticks_elapsed and collect expired ticks */
		ticks_elapsed -= ticks_to_expire;
    3d88:	ebc8 0b0b 	rsb	fp, r8, fp
    3d8c:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
    3d90:	e799      	b.n	3cc6 <ticker_job+0x262>
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
			flag_compare_update = 1;
    3d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
	if (flag_elapsed) {
		ticker_job_worker_bottom_half(instance, ticks_previous,
						 ticks_elapsed, &insert_head);

		/* detect change in head of the list */
		if (instance->ticker_id_head != ticker_id_old_head) {
    3d94:	7e23      	ldrb	r3, [r4, #24]
			flag_compare_update = 1;
    3d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3d98:	428b      	cmp	r3, r1
    3d9a:	bf18      	it	ne
    3d9c:	2201      	movne	r2, #1
    3d9e:	62ba      	str	r2, [r7, #40]	; 0x28
{
	struct ticker_node *node;
	struct ticker_user *users;
	uint8_t count_user;

	node = &instance->node[0];
    3da0:	6823      	ldr	r3, [r4, #0]
    3da2:	637b      	str	r3, [r7, #52]	; 0x34
	users = &instance->user[0];
    3da4:	6863      	ldr	r3, [r4, #4]
    3da6:	60bb      	str	r3, [r7, #8]
	count_user = instance->count_user;
    3da8:	7a63      	ldrb	r3, [r4, #9]
    3daa:	633b      	str	r3, [r7, #48]	; 0x30
	while (count_user--) {
    3dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3dae:	2b00      	cmp	r3, #0
    3db0:	f000 8138 	beq.w	4024 <ticker_job+0x5c0>
    3db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3db6:	3b01      	subs	r3, #1
    3db8:	b2db      	uxtb	r3, r3
    3dba:	633b      	str	r3, [r7, #48]	; 0x30
		struct ticker_user *user;
		uint8_t user_ops_first;

		user = &users[count_user];
    3dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3dbe:	68bb      	ldr	r3, [r7, #8]
    3dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3dc4:	627b      	str	r3, [r7, #36]	; 0x24
		user_ops_first = user->first;
    3dc6:	f893 b001 	ldrb.w	fp, [r3, #1]
		while ((insert_head != TICKER_NULL)
    3dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3dcc:	2bff      	cmp	r3, #255	; 0xff
    3dce:	d01d      	beq.n	3e0c <ticker_job+0x3a8>
			struct ticker_node *ticker;
			uint32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    3dd0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
    3dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				insert_head = ticker->next;
    3dd6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
			struct ticker_node *ticker;
			uint32_t status;

			if (insert_head != TICKER_NULL) {
				id_insert = insert_head;
				ticker = &node[id_insert];
    3dda:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3dde:	eb02 0583 	add.w	r5, r2, r3, lsl #2
				insert_head = ticker->next;
    3de2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3de6:	63fb      	str	r3, [r7, #60]	; 0x3c

				user_op = 0;
    3de8:	2600      	movs	r6, #0
    3dea:	e051      	b.n	3e90 <ticker_job+0x42c>
    3dec:	ff172b5a 	.word	0xff172b5a
    3df0:	7f172b59 	.word	0x7f172b59
    3df4:	01d1a94a 	.word	0x01d1a94a
    3df8:	fe2e56b6 	.word	0xfe2e56b6
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
    3dfc:	2300      	movs	r3, #0
    3dfe:	548b      	strb	r3, [r1, r2]
					user_op->status =
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    3e00:	6a73      	ldr	r3, [r6, #36]	; 0x24
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
					user_op->op = TICKER_USER_OP_TYPE_NONE;
					user_op->status =
    3e02:	2001      	movs	r0, #1
    3e04:	6230      	str	r0, [r6, #32]
					    TICKER_STATUS_FAILURE;

					if (user_op->fp_op_func) {
    3e06:	b10b      	cbz	r3, 3e0c <ticker_job+0x3a8>
						user_op->
    3e08:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    3e0a:	4798      	blx	r3
		uint8_t user_ops_first;

		user = &users[count_user];
		user_ops_first = user->first;
		while ((insert_head != TICKER_NULL)
		       || (user_ops_first != user->middle)
    3e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e0e:	789b      	ldrb	r3, [r3, #2]
    3e10:	455b      	cmp	r3, fp
    3e12:	d0cb      	beq.n	3dac <ticker_job+0x348>
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				uint8_t first;

				user_op = &user->user_op[user_ops_first];
    3e14:	232c      	movs	r3, #44	; 0x2c
    3e16:	fb1b f203 	smulbb	r2, fp, r3
    3e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e1c:	6859      	ldr	r1, [r3, #4]
				first = user_ops_first + 1;
    3e1e:	f10b 0301 	add.w	r3, fp, #1
    3e22:	fa5f fb83 	uxtb.w	fp, r3
				if (first == user->count_user_op) {
    3e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e28:	781b      	ldrb	r3, [r3, #0]
					first = 0;
    3e2a:	455b      	cmp	r3, fp
    3e2c:	bf08      	it	eq
    3e2e:	f04f 0b00 	moveq.w	fp, #0
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    3e32:	5c8b      	ldrb	r3, [r1, r2]
    3e34:	2b03      	cmp	r3, #3
				user_op = 0;
				_user_op = TICKER_USER_OP_TYPE_START;
			} else {
				uint8_t first;

				user_op = &user->user_op[user_ops_first];
    3e36:	eb01 0602 	add.w	r6, r1, r2
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
				ticker = &node[id_insert];
				if (_user_op != TICKER_USER_OP_TYPE_START) {
    3e3a:	d1e7      	bne.n	3e0c <ticker_job+0x3a8>
					first = 0;
				}
				user_ops_first = first;

				_user_op = user_op->op;
				id_insert = user_op->id;
    3e3c:	f896 a001 	ldrb.w	sl, [r6, #1]
				ticker = &node[id_insert];
    3e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3e42:	eb0a 05ca 	add.w	r5, sl, sl, lsl #3
    3e46:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				if (_user_op != TICKER_USER_OP_TYPE_START) {
					continue;
				}

				if (((ticker->req - ticker->ack) & 0xff) != 0) {
    3e4a:	786b      	ldrb	r3, [r5, #1]
    3e4c:	f895 8002 	ldrb.w	r8, [r5, #2]
    3e50:	ebc8 0803 	rsb	r8, r8, r3
    3e54:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    3e58:	d1d0      	bne.n	3dfc <ticker_job+0x398>

					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
    3e5a:	68f3      	ldr	r3, [r6, #12]
					}

					continue;
				}

				ticker->ticks_periodic =
    3e5c:	606b      	str	r3, [r5, #4]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
    3e5e:	6933      	ldr	r3, [r6, #16]
					continue;
				}

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
    3e60:	61eb      	str	r3, [r5, #28]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
    3e62:	8ab3      	ldrh	r3, [r6, #20]

				ticker->ticks_periodic =
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
    3e64:	832b      	strh	r3, [r5, #24]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
    3e66:	8af3      	ldrh	r3, [r6, #22]
				    user_op->params.start.ticks_periodic;
				ticker->remainder_periodic =
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
    3e68:	82eb      	strh	r3, [r5, #22]
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
    3e6a:	69b3      	ldr	r3, [r6, #24]
				    user_op->params.start.remainder_periodic;
				ticker->lazy_periodic =
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
    3e6c:	60eb      	str	r3, [r5, #12]
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;
    3e6e:	69f3      	ldr	r3, [r6, #28]
				    user_op->params.start.lazy;
				ticker->ticks_slot =
				    user_op->params.start.ticks_slot;
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
    3e70:	612b      	str	r3, [r5, #16]
				    user_op->params.start.context;

				ticker->ticks_to_expire =
				    user_op->params.start.ticks_first;
    3e72:	68b3      	ldr	r3, [r6, #8]
				ticker->timeout_func =
				    user_op->params.start.fp_timeout_func;
				ticker->context =
				    user_op->params.start.context;

				ticker->ticks_to_expire =
    3e74:	60ab      	str	r3, [r5, #8]
				    user_op->params.start.ticks_first;
				ticker->ticks_to_expire_minus = 0;
    3e76:	f8a5 8014 	strh.w	r8, [r5, #20]
				prepare_ticks_to_expire(ticker,
    3e7a:	6872      	ldr	r2, [r6, #4]
    3e7c:	6961      	ldr	r1, [r4, #20]
    3e7e:	4628      	mov	r0, r5
    3e80:	f7ff fc62 	bl	3748 <prepare_ticks_to_expire>
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
				ticker->lazy_current = 0;
				ticker->force = 1;
    3e84:	2301      	movs	r3, #1
							    ticks_current,
							    user_op->params.
							    start.
							    ticks_at_start);

				ticker->remainder_current = 0;
    3e86:	f8c5 8020 	str.w	r8, [r5, #32]
				ticker->lazy_current = 0;
    3e8a:	f8a5 801a 	strh.w	r8, [r5, #26]
				ticker->force = 1;
    3e8e:	70eb      	strb	r3, [r5, #3]
			}

			/* Prepare to insert */
			ticker->next = TICKER_NULL;
    3e90:	23ff      	movs	r3, #255	; 0xff
    3e92:	702b      	strb	r3, [r5, #0]
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_current;
	uint32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    3e94:	fa0f f38a 	sxth.w	r3, sl
    3e98:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3e9c:	009b      	lsls	r3, r3, #2
    3e9e:	607b      	str	r3, [r7, #4]
	uint8_t collide;
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_current;
	uint32_t ticks_slot_previous;

	node = &instance->node[0];
    3ea0:	6822      	ldr	r2, [r4, #0]
	ticker_new = &node[id];
    3ea2:	687b      	ldr	r3, [r7, #4]
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    3ea4:	8b61      	ldrh	r1, [r4, #26]
    3ea6:	63b9      	str	r1, [r7, #56]	; 0x38
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_current;
	uint32_t ticks_slot_previous;

	node = &instance->node[0];
	ticker_new = &node[id];
    3ea8:	18d3      	adds	r3, r2, r3
    3eaa:	623b      	str	r3, [r7, #32]
	ticks_to_expire = ticker_new->ticks_to_expire;
    3eac:	f8d3 9008 	ldr.w	r9, [r3, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    3eb0:	7e23      	ldrb	r3, [r4, #24]
	previous = current;
    3eb2:	61bb      	str	r3, [r7, #24]

	node = &instance->node[0];
	ticker_new = &node[id];
	ticks_to_expire = ticker_new->ticks_to_expire;

	collide = ticker_id_slot_previous = TICKER_NULL;
    3eb4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
    3eb8:	2bff      	cmp	r3, #255	; 0xff
    3eba:	d01d      	beq.n	3ef8 <ticker_job+0x494>
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
    3ebc:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
    3ec0:	eb02 0e8c 	add.w	lr, r2, ip, lsl #2
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
    3ec4:	f8de 1008 	ldr.w	r1, [lr, #8]
	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
	while ((current != TICKER_NULL)
	       &&
    3ec8:	4589      	cmp	r9, r1
    3eca:	d915      	bls.n	3ef8 <ticker_job+0x494>
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;

		if (ticker_current->ticks_slot != 0) {
    3ecc:	f8be e016 	ldrh.w	lr, [lr, #22]
	       &&
	       (ticks_to_expire >
		(ticks_to_expire_current =
		 (ticker_current = &node[current])->ticks_to_expire))
	    ) {
		ticks_to_expire -= ticks_to_expire_current;
    3ed0:	ebc1 0909 	rsb	r9, r1, r9

		if (ticker_current->ticks_slot != 0) {
    3ed4:	f1be 0f00 	cmp.w	lr, #0
    3ed8:	d003      	beq.n	3ee2 <ticker_job+0x47e>
			ticks_slot_previous = ticker_current->ticks_slot;
    3eda:	f8c7 e038 	str.w	lr, [r7, #56]	; 0x38
    3ede:	4698      	mov	r8, r3
    3ee0:	e006      	b.n	3ef0 <ticker_job+0x48c>
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    3ee2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3ee4:	4281      	cmp	r1, r0
				ticks_slot_previous -= ticks_to_expire_current;
    3ee6:	bf3a      	itte	cc
    3ee8:	1a41      	subcc	r1, r0, r1
    3eea:	63b9      	strcc	r1, [r7, #56]	; 0x38
			} else {
				ticks_slot_previous = 0;
    3eec:	f8c7 e038 	strcs.w	lr, [r7, #56]	; 0x38
			}
		}
		previous = current;
		current = ticker_current->next;
    3ef0:	61bb      	str	r3, [r7, #24]
    3ef2:	f812 302c 	ldrb.w	r3, [r2, ip, lsl #2]
    3ef6:	e7df      	b.n	3eb8 <ticker_job+0x454>
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);
    3ef8:	6a39      	ldr	r1, [r7, #32]
    3efa:	8ac9      	ldrh	r1, [r1, #22]
    3efc:	6179      	str	r1, [r7, #20]
		}
		previous = current;
		current = ticker_current->next;
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
    3efe:	eb01 0c09 	add.w	ip, r1, r9
    3f02:	4619      	mov	r1, r3
 ****************************************************************************/
static uint8_t ticker_by_slot_get(struct ticker_node *node,
					uint8_t ticker_id_head,
					uint32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    3f04:	29ff      	cmp	r1, #255	; 0xff
    3f06:	d014      	beq.n	3f32 <ticker_job+0x4ce>
		struct ticker_node *ticker;
		uint32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    3f08:	fa0f fe81 	sxth.w	lr, r1
    3f0c:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    3f10:	eb02 008e 	add.w	r0, r2, lr, lsl #2
    3f14:	6138      	str	r0, [r7, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    3f16:	6880      	ldr	r0, [r0, #8]
    3f18:	60f8      	str	r0, [r7, #12]

		if (ticks_slot <= ticks_to_expire) {
    3f1a:	4560      	cmp	r0, ip
    3f1c:	d208      	bcs.n	3f30 <ticker_job+0x4cc>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    3f1e:	6938      	ldr	r0, [r7, #16]
    3f20:	8ac0      	ldrh	r0, [r0, #22]
    3f22:	b930      	cbnz	r0, 3f32 <ticker_job+0x4ce>
			break;
		}

		ticks_slot -= ticks_to_expire;
    3f24:	68f9      	ldr	r1, [r7, #12]
    3f26:	ebc1 0c0c 	rsb	ip, r1, ip
		ticker_id_head = ticker->next;
    3f2a:	f812 102e 	ldrb.w	r1, [r2, lr, lsl #2]
    3f2e:	e7e9      	b.n	3f04 <ticker_job+0x4a0>

		ticker = &node[ticker_id_head];
		ticks_to_expire = ticker->ticks_to_expire;

		if (ticks_slot <= ticks_to_expire) {
			return TICKER_NULL;
    3f30:	21ff      	movs	r1, #255	; 0xff
	}

	collide = ticker_by_slot_get(&node[0], current, ticks_to_expire +
				ticker_new->ticks_slot);

	if ((ticker_new->ticks_slot == 0)
    3f32:	6978      	ldr	r0, [r7, #20]
    3f34:	b120      	cbz	r0, 3f40 <ticker_job+0x4dc>
	    || ((ticks_slot_previous <= ticks_to_expire)
    3f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3f38:	4581      	cmp	r9, r0
    3f3a:	d31c      	bcc.n	3f76 <ticker_job+0x512>
		&& (collide == TICKER_NULL))
    3f3c:	29ff      	cmp	r1, #255	; 0xff
    3f3e:	d121      	bne.n	3f84 <ticker_job+0x520>
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
    3f40:	6a39      	ldr	r1, [r7, #32]
    3f42:	f8c1 9008 	str.w	r9, [r1, #8]
		ticker_new->next = current;
    3f46:	700b      	strb	r3, [r1, #0]

		if (previous == current) {
    3f48:	69b9      	ldr	r1, [r7, #24]
    3f4a:	428b      	cmp	r3, r1
			instance->ticker_id_head = id;
		} else {
			node[previous].next = id;
    3f4c:	bf17      	itett	ne
    3f4e:	f9b7 1018 	ldrshne.w	r1, [r7, #24]
	    ) {
		ticker_new->ticks_to_expire = ticks_to_expire;
		ticker_new->next = current;

		if (previous == current) {
			instance->ticker_id_head = id;
    3f52:	f884 a018 	strbeq.w	sl, [r4, #24]
		} else {
			node[previous].next = id;
    3f56:	eb01 01c1 	addne.w	r1, r1, r1, lsl #3
    3f5a:	f802 a021 	strbne.w	sl, [r2, r1, lsl #2]
		}

		if (current != TICKER_NULL) {
    3f5e:	2bff      	cmp	r3, #255	; 0xff
    3f60:	f000 812e 	beq.w	41c0 <ticker_job+0x75c>
			node[current].ticks_to_expire -= ticks_to_expire;
    3f64:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3f68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3f6c:	689a      	ldr	r2, [r3, #8]
    3f6e:	ebc9 0202 	rsb	r2, r9, r2
    3f72:	609a      	str	r2, [r3, #8]
    3f74:	e124      	b.n	41c0 <ticker_job+0x75c>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    3f76:	45c2      	cmp	sl, r8
    3f78:	f000 8122 	beq.w	41c0 <ticker_job+0x75c>
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    3f7c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3f80:	d104      	bne.n	3f8c <ticker_job+0x528>
    3f82:	e023      	b.n	3fcc <ticker_job+0x568>

			/* Prepare to insert */
			ticker->next = TICKER_NULL;

			/* If insert collides advance to next interval */
			while (id_insert !=
    3f84:	458a      	cmp	sl, r1
    3f86:	f000 811b 	beq.w	41c0 <ticker_job+0x75c>
    3f8a:	4688      	mov	r8, r1
			       (id_collide =
				ticker_enqueue(instance, id_insert))) {
				struct ticker_node *ticker_preempt;

				ticker_preempt = (id_collide != TICKER_NULL) ?
					&node[id_collide] : 0;
    3f8c:	fa0f f988 	sxth.w	r9, r8
    3f90:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
    3f94:	63bb      	str	r3, [r7, #56]	; 0x38

				if (ticker_preempt
    3f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f9a:	eb13 0982 	adds.w	r9, r3, r2, lsl #2
    3f9e:	d015      	beq.n	3fcc <ticker_job+0x568>
				    && (ticker->force > ticker_preempt->force)
    3fa0:	78ea      	ldrb	r2, [r5, #3]
    3fa2:	f899 3003 	ldrb.w	r3, [r9, #3]
    3fa6:	429a      	cmp	r2, r3
    3fa8:	d910      	bls.n	3fcc <ticker_job+0x568>
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
					    ticker_dequeue(instance,
    3faa:	4641      	mov	r1, r8
    3fac:	4620      	mov	r0, r4
    3fae:	f7ff fb9d 	bl	36ec <ticker_dequeue>
							      id_collide);

					/* unschedule node */
					ticker_preempt->req =
    3fb2:	f899 3002 	ldrb.w	r3, [r9, #2]
    3fb6:	f889 3001 	strb.w	r3, [r9, #1]
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    3fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3fbe:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
				    && (ticker->force > ticker_preempt->force)
				    ) {
					/* dequeue and get the reminder of ticks
					 * to expire.
					 */
					ticker_preempt->ticks_to_expire =
    3fc2:	f8c9 0008 	str.w	r0, [r9, #8]
					/* unschedule node */
					ticker_preempt->req =
					    ticker_preempt->ack;

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
    3fc6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    3fca:	e01a      	b.n	4002 <ticker_job+0x59e>
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
    3fcc:	6869      	ldr	r1, [r5, #4]
    3fce:	b1d9      	cbz	r1, 4008 <ticker_job+0x5a4>
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3fd0:	6a2a      	ldr	r2, [r5, #32]
    3fd2:	69eb      	ldr	r3, [r5, #28]
	if ((ticker->remainder_current < 0x80000000)
    3fd4:	4881      	ldr	r0, [pc, #516]	; (41dc <ticker_job+0x778>)
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    3fd6:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3fda:	4413      	add	r3, r2
	if ((ticker->remainder_current < 0x80000000)
    3fdc:	4a80      	ldr	r2, [pc, #512]	; (41e0 <ticker_job+0x77c>)
    3fde:	441a      	add	r2, r3
    3fe0:	4282      	cmp	r2, r0
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3fe2:	bf96      	itet	ls
    3fe4:	4a7f      	ldrls	r2, [pc, #508]	; (41e4 <ticker_job+0x780>)
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
    3fe6:	622b      	strhi	r3, [r5, #32]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3fe8:	18d2      	addls	r2, r2, r3

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    3fea:	68ab      	ldr	r3, [r5, #8]
static uint8_t ticker_remainder_increment(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
    3fec:	bf98      	it	ls
    3fee:	622a      	strls	r2, [r5, #32]

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    3ff0:	4419      	add	r1, r3
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    3ff2:	8b6b      	ldrh	r3, [r5, #26]
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
	}
	return 0;
    3ff4:	bf8c      	ite	hi
    3ff6:	2200      	movhi	r2, #0
{
	ticker->remainder_current += ticker->remainder_periodic;
	if ((ticker->remainder_current < 0x80000000)
	    && (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
		return 1;
    3ff8:	2201      	movls	r2, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    3ffa:	440a      	add	r2, r1
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    3ffc:	3301      	adds	r3, #1

					/* enqueue for re-insertion */
					ticker_preempt->next = insert_head;
					insert_head = id_collide;
				} else if (ticker->ticks_periodic != 0) {
					ticker->ticks_to_expire +=
    3ffe:	60aa      	str	r2, [r5, #8]
					    ticker->ticks_periodic +
					    ticker_remainder_increment
					    (ticker);
					ticker->lazy_current++;
    4000:	836b      	strh	r3, [r5, #26]
    4002:	f8c7 803c 	str.w	r8, [r7, #60]	; 0x3c
    4006:	e74b      	b.n	3ea0 <ticker_job+0x43c>
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;

				status = TICKER_STATUS_SUCCESS;
			} else {
				status = TICKER_STATUS_FAILURE;
    4008:	2001      	movs	r0, #1
			}

			if (user_op) {
    400a:	2e00      	cmp	r6, #0
    400c:	f43f aedd 	beq.w	3dca <ticker_job+0x366>
				user_op->op = TICKER_USER_OP_TYPE_NONE;
    4010:	2300      	movs	r3, #0
    4012:	7033      	strb	r3, [r6, #0]
				user_op->status = status;

				if (user_op->fp_op_func) {
    4014:	6a73      	ldr	r3, [r6, #36]	; 0x24
				status = TICKER_STATUS_FAILURE;
			}

			if (user_op) {
				user_op->op = TICKER_USER_OP_TYPE_NONE;
				user_op->status = status;
    4016:	6230      	str	r0, [r6, #32]

				if (user_op->fp_op_func) {
    4018:	2b00      	cmp	r3, #0
    401a:	f43f aed6 	beq.w	3dca <ticker_job+0x366>
					user_op->fp_op_func(user_op->status,
    401e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4020:	4798      	blx	r3
    4022:	e6d2      	b.n	3dca <ticker_job+0x366>

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    4024:	7e23      	ldrb	r3, [r4, #24]
    4026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4028:	4293      	cmp	r3, r2
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    402a:	69fb      	ldr	r3, [r7, #28]

	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
    402c:	d102      	bne.n	4034 <ticker_job+0x5d0>
		flag_compare_update = 1;
	}

	/* Processing any list inquiries */
	if (!pending) {
    402e:	2b00      	cmp	r3, #0
    4030:	d165      	bne.n	40fe <ticker_job+0x69a>
    4032:	e004      	b.n	403e <ticker_job+0x5da>
    4034:	2b00      	cmp	r3, #0
    4036:	f040 80c8 	bne.w	41ca <ticker_job+0x766>
	/* Handle insertions */
	ticker_job_list_insert(instance, insert_head);

	/* detect change in head of the list */
	if (instance->ticker_id_head != ticker_id_old_head) {
		flag_compare_update = 1;
    403a:	2301      	movs	r3, #1
    403c:	62bb      	str	r3, [r7, #40]	; 0x28
    403e:	7a65      	ldrb	r5, [r4, #9]
					struct ticker_instance *instance)
{
	struct ticker_user *users;
	uint8_t count_user;

	users = &instance->user[0];
    4040:	6863      	ldr	r3, [r4, #4]
    4042:	63bb      	str	r3, [r7, #56]	; 0x38
    4044:	3d01      	subs	r5, #1
    4046:	b2eb      	uxtb	r3, r5
    4048:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (user->first != user->last) {
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			uint8_t first;

			user_op = &user->user_op[user->first];
    404a:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
			fp_op_func = 0;

			switch (user_op->op) {
			case TICKER_USER_OP_TYPE_IDLE_GET:
				user_op->status =
    404e:	f04f 0800 	mov.w	r8, #0
	struct ticker_user *users;
	uint8_t count_user;

	users = &instance->user[0];
	count_user = instance->count_user;
	while (count_user--) {
    4052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4054:	2bff      	cmp	r3, #255	; 0xff
    4056:	d052      	beq.n	40fe <ticker_job+0x69a>
		struct ticker_user *user;

		user = &users[count_user];
    4058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    405a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    405c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
		while (user->first != user->last) {
    4060:	7873      	ldrb	r3, [r6, #1]
    4062:	78f2      	ldrb	r2, [r6, #3]
    4064:	429a      	cmp	r2, r3
    4066:	d045      	beq.n	40f4 <ticker_job+0x690>
			struct ticker_user_op *user_op;
			ticker_op_func fp_op_func;
			uint8_t first;

			user_op = &user->user_op[user->first];
    4068:	fb13 f20b 	smulbb	r2, r3, fp
    406c:	6871      	ldr	r1, [r6, #4]
    406e:	188b      	adds	r3, r1, r2
			fp_op_func = 0;

			switch (user_op->op) {
    4070:	5c8a      	ldrb	r2, [r1, r2]
    4072:	2a01      	cmp	r2, #1
    4074:	d02e      	beq.n	40d4 <ticker_job+0x670>
    4076:	2a02      	cmp	r2, #2
    4078:	d133      	bne.n	40e2 <ticker_job+0x67e>
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    407a:	f8d3 c004 	ldr.w	ip, [r3, #4]
    407e:	689a      	ldr	r2, [r3, #8]
	struct ticker_node *ticker;
	uint32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
    4080:	f89c 0000 	ldrb.w	r0, [ip]
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
				break;

			case TICKER_USER_OP_TYPE_SLOT_GET:
				ticker_by_next_slot_get(instance,
    4084:	f8d3 900c 	ldr.w	r9, [r3, #12]
	struct ticker_node *node;
	uint8_t _ticker_id_head;
	struct ticker_node *ticker;
	uint32_t _ticks_to_expire;

	node = instance->node;
    4088:	f8d4 e000 	ldr.w	lr, [r4]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
    408c:	28ff      	cmp	r0, #255	; 0xff
    408e:	d003      	beq.n	4098 <ticker_job+0x634>
	    || (*ticks_current != instance->ticks_current)) {
    4090:	6811      	ldr	r1, [r2, #0]
    4092:	6965      	ldr	r5, [r4, #20]
    4094:	42a9      	cmp	r1, r5
    4096:	d004      	beq.n	40a2 <ticker_job+0x63e>
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
    4098:	6960      	ldr	r0, [r4, #20]

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
	if ((_ticker_id_head == TICKER_NULL)
	    || (*ticks_current != instance->ticks_current)) {
		_ticker_id_head = instance->ticker_id_head;
    409a:	7e21      	ldrb	r1, [r4, #24]
		*ticks_current = instance->ticks_current;
    409c:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0;
    409e:	2200      	movs	r2, #0
    40a0:	e010      	b.n	40c4 <ticker_job+0x660>
	} else {
		ticker = &node[_ticker_id_head];
    40a2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
	uint32_t _ticks_to_expire;

	node = instance->node;

	_ticker_id_head = *ticker_id_head;
	_ticks_to_expire = *ticks_to_expire;
    40a6:	f8d9 2000 	ldr.w	r2, [r9]
		_ticker_id_head = instance->ticker_id_head;
		*ticks_current = instance->ticks_current;
		_ticks_to_expire = 0;
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
    40aa:	f81e 1020 	ldrb.w	r1, [lr, r0, lsl #2]
    40ae:	e009      	b.n	40c4 <ticker_job+0x660>
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
    40b0:	eb01 0ac1 	add.w	sl, r1, r1, lsl #3
    40b4:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
    40b8:	8ac5      	ldrh	r5, [r0, #22]
    40ba:	6880      	ldr	r0, [r0, #8]
    40bc:	b92d      	cbnz	r5, 40ca <ticker_job+0x666>
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
    40be:	f81e 102a 	ldrb.w	r1, [lr, sl, lsl #2]
	}

	while ((_ticker_id_head != TICKER_NULL)
	       && ((ticker = &node[_ticker_id_head])->ticks_slot == 0)
	    ) {
		_ticks_to_expire += ticker->ticks_to_expire;
    40c2:	4402      	add	r2, r0
	} else {
		ticker = &node[_ticker_id_head];
		_ticker_id_head = ticker->next;
	}

	while ((_ticker_id_head != TICKER_NULL)
    40c4:	29ff      	cmp	r1, #255	; 0xff
    40c6:	d1f3      	bne.n	40b0 <ticker_job+0x64c>
    40c8:	e000      	b.n	40cc <ticker_job+0x668>
		_ticks_to_expire += ticker->ticks_to_expire;
		_ticker_id_head = ticker->next;
	}

	if (_ticker_id_head != TICKER_NULL) {
		_ticks_to_expire += ticker->ticks_to_expire;
    40ca:	4402      	add	r2, r0
	}

	*ticker_id_head = _ticker_id_head;
    40cc:	f88c 1000 	strb.w	r1, [ip]
	*ticks_to_expire = _ticks_to_expire;
    40d0:	f8c9 2000 	str.w	r2, [r9]
							   slot_get.
							   ticks_to_expire);

				user_op->status =
				    TICKER_STATUS_SUCCESS;
				fp_op_func = user_op->fp_op_func;
    40d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
							   user_op->
							   params.
							   slot_get.
							   ticks_to_expire);

				user_op->status =
    40d6:	f8c3 8020 	str.w	r8, [r3, #32]
			default:
				/* do nothing for other ops */
				break;
			}

			if (fp_op_func) {
    40da:	b112      	cbz	r2, 40e2 <ticker_job+0x67e>
				fp_op_func(user_op->status,
    40dc:	6a99      	ldr	r1, [r3, #40]	; 0x28
    40de:	6a18      	ldr	r0, [r3, #32]
    40e0:	4790      	blx	r2
					   user_op->op_context);
			}

			first = user->first + 1;
    40e2:	7873      	ldrb	r3, [r6, #1]
			if (first == user->count_user_op) {
    40e4:	7832      	ldrb	r2, [r6, #0]
			if (fp_op_func) {
				fp_op_func(user_op->status,
					   user_op->op_context);
			}

			first = user->first + 1;
    40e6:	3301      	adds	r3, #1
    40e8:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
				first = 0;
    40ea:	429a      	cmp	r2, r3
    40ec:	bf08      	it	eq
    40ee:	2300      	moveq	r3, #0
			}
			user->first = first;
    40f0:	7073      	strb	r3, [r6, #1]
    40f2:	e7b5      	b.n	4060 <ticker_job+0x5fc>
    40f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40f6:	1e5d      	subs	r5, r3, #1
    40f8:	b2eb      	uxtb	r3, r5
    40fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    40fc:	e7a9      	b.n	4052 <ticker_job+0x5ee>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    40fe:	2300      	movs	r3, #0
    4100:	7723      	strb	r3, [r4, #28]

	/* update compare if head changed */
	if (flag_compare_update) {
    4102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4104:	2b00      	cmp	r3, #0
    4106:	d050      	beq.n	41aa <ticker_job+0x746>
	uint32_t ctr_post;
	uint32_t ctr;
	uint32_t cc;
	uint32_t i;

	if (instance->ticker_id_head == TICKER_NULL) {
    4108:	7e23      	ldrb	r3, [r4, #24]
    410a:	2bff      	cmp	r3, #255	; 0xff
    410c:	d105      	bne.n	411a <ticker_job+0x6b6>
		if (cntr_stop() == 0) {
    410e:	f7fe fe63 	bl	2dd8 <cntr_stop>
    4112:	2800      	cmp	r0, #0
    4114:	d149      	bne.n	41aa <ticker_job+0x746>
			instance->ticks_slot_previous = 0;
    4116:	8360      	strh	r0, [r4, #26]
    4118:	e047      	b.n	41aa <ticker_job+0x746>
		}

		return;
	}

	if (ticker_id_old_head == TICKER_NULL) {
    411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    411c:	2bff      	cmp	r3, #255	; 0xff
    411e:	d106      	bne.n	412e <ticker_job+0x6ca>
		uint32_t ticks_current;

		ticks_current = cntr_cnt_get();
    4120:	f7fe fe8a 	bl	2e38 <cntr_cnt_get>
    4124:	4605      	mov	r5, r0

		if (cntr_start() == 0) {
    4126:	f7fe fe45 	bl	2db4 <cntr_start>
    412a:	b900      	cbnz	r0, 412e <ticker_job+0x6ca>
			instance->ticks_current = ticks_current;
    412c:	6165      	str	r5, [r4, #20]
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    412e:	7e23      	ldrb	r3, [r4, #24]
    4130:	6822      	ldr	r2, [r4, #0]
	 */
	i = 10;
	do {
		uint32_t ticks_elapsed;

		LL_ASSERT(i);
    4132:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 41f8 <ticker_job+0x794>
    4136:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 41fc <ticker_job+0x798>
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    413a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    413e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	/* Iterate few times, if required, to ensure that compare is
	 * correctly set to a future value. This is required in case
	 * the operation is pre-empted and current h/w counter runs
	 * ahead of compare value to be set.
	 */
	i = 10;
    4142:	260a      	movs	r6, #10
		}
	}

	node = &instance->node[0];
	ticker = &node[instance->ticker_id_head];
	ticks_to_expire = ticker->ticks_to_expire;
    4144:	f8d3 8008 	ldr.w	r8, [r3, #8]
		uint32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    4148:	f7fe fe76 	bl	2e38 <cntr_cnt_get>
		cc = instance->ticks_current;
    414c:	6965      	ldr	r5, [r4, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
    414e:	1b43      	subs	r3, r0, r5
    4150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4154:	3303      	adds	r3, #3

		ctr = cntr_cnt_get();
		cc = instance->ticks_current;
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
    4156:	4543      	cmp	r3, r8
    4158:	bf2c      	ite	cs
    415a:	18ed      	addcs	r5, r5, r3
    415c:	4445      	addcc	r5, r8
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;
    415e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
		uint32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;

		ctr = cntr_cnt_get();
    4162:	4683      	mov	fp, r0
				COUNTER_CMP_OFFSET_MIN;
		cc += ((ticks_elapsed < ticks_to_expire) ?
		       ticks_to_expire : ticks_elapsed);
		cc &= 0x00FFFFFF;

		instance->fp_cmp_set(cc);
    4164:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4166:	4628      	mov	r0, r5
    4168:	4798      	blx	r3

		ctr_post = cntr_cnt_get();
    416a:	f7fe fe65 	bl	2e38 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    416e:	ebcb 0000 	rsb	r0, fp, r0
    4172:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4176:	ebcb 0505 	rsb	r5, fp, r5
    417a:	3003      	adds	r0, #3
    417c:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    4180:	42a8      	cmp	r0, r5
	i = 10;
	do {
		uint32_t ticks_elapsed;

		LL_ASSERT(i);
		i--;
    4182:	f106 36ff 	add.w	r6, r6, #4294967295

		instance->fp_cmp_set(cc);

		ctr_post = cntr_cnt_get();
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
    4186:	d910      	bls.n	41aa <ticker_job+0x746>
	 */
	i = 10;
	do {
		uint32_t ticks_elapsed;

		LL_ASSERT(i);
    4188:	2e00      	cmp	r6, #0
    418a:	d1dd      	bne.n	4148 <ticker_job+0x6e4>
    418c:	f8cd 9004 	str.w	r9, [sp, #4]
    4190:	f8cd a000 	str.w	sl, [sp]
    4194:	4b14      	ldr	r3, [pc, #80]	; (41e8 <ticker_job+0x784>)
    4196:	4a15      	ldr	r2, [pc, #84]	; (41ec <ticker_job+0x788>)
    4198:	4915      	ldr	r1, [pc, #84]	; (41f0 <ticker_job+0x78c>)
    419a:	4816      	ldr	r0, [pc, #88]	; (41f4 <ticker_job+0x790>)
    419c:	f7fd f806 	bl	11ac <printk>
    41a0:	4631      	mov	r1, r6
    41a2:	4630      	mov	r0, r6
    41a4:	f008 fa54 	bl	c650 <_SysFatalErrorHandler>
    41a8:	e7ce      	b.n	4148 <ticker_job+0x6e4>
	if (flag_compare_update) {
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
    41aa:	7f63      	ldrb	r3, [r4, #29]
    41ac:	b18b      	cbz	r3, 41d2 <ticker_job+0x76e>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    41ae:	2201      	movs	r2, #1
    41b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41b2:	4611      	mov	r1, r2
    41b4:	2002      	movs	r0, #2
	}

	DEBUG_TICKER_JOB(0);
}
    41b6:	3744      	adds	r7, #68	; 0x44
    41b8:	46bd      	mov	sp, r7
    41ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ticker_job_compare_update(instance, ticker_id_old_head);
	}

	/* trigger worker if deferred */
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
    41be:	4718      	bx	r3
				}
			}

			/* Update flags */
			if (id_insert == id_collide) {
				ticker->req = ticker->ack + 1;
    41c0:	78ab      	ldrb	r3, [r5, #2]
    41c2:	3301      	adds	r3, #1
    41c4:	706b      	strb	r3, [r5, #1]

				status = TICKER_STATUS_SUCCESS;
    41c6:	2000      	movs	r0, #0
    41c8:	e71f      	b.n	400a <ticker_job+0x5a6>
		/* Handle inquiries */
		ticker_job_list_inquire(instance);
	}

	/* Permit worker job to run */
	instance->job_guard = 0;
    41ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    41ce:	7723      	strb	r3, [r4, #28]
    41d0:	e79a      	b.n	4108 <ticker_job+0x6a4>
	if (instance->worker_trigger) {
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_JOB(0);
}
    41d2:	3744      	adds	r7, #68	; 0x44
    41d4:	46bd      	mov	sp, r7
    41d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    41da:	bf00      	nop
    41dc:	7f172b59 	.word	0x7f172b59
    41e0:	ff172b5a 	.word	0xff172b5a
    41e4:	fe2e56b6 	.word	0xfe2e56b6
    41e8:	0000eec7 	.word	0x0000eec7
    41ec:	0000dcfd 	.word	0x0000dcfd
    41f0:	0000dd04 	.word	0x0000dd04
    41f4:	0000e343 	.word	0x0000e343
    41f8:	0000dd4e 	.word	0x0000dd4e
    41fc:	0000dd53 	.word	0x0000dd53

00004200 <ticker_init>:
 * Public Interface
 ****************************************************************************/
uint32_t ticker_init(uint8_t instance_index, uint8_t count_node, void *node,
		    uint8_t count_user, void *user, uint8_t count_op,
		    void *user_op)
{
    4200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4204:	af00      	add	r7, sp, #0
    4206:	4688      	mov	r8, r1
    4208:	f897 4020 	ldrb.w	r4, [r7, #32]
    420c:	69f9      	ldr	r1, [r7, #28]
    420e:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
	    || (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)
	    ) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
    4212:	b148      	cbz	r0, 4228 <ticker_init+0x28>
    4214:	2801      	cmp	r0, #1
    4216:	d139      	bne.n	428c <ticker_init+0x8c>
		instance->fp_sched = ticker_instance0_sched;
		instance->fp_cmp_set = ticker_instance0_cmp_set;
		break;

	case 1:
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
    4218:	4d1e      	ldr	r5, [pc, #120]	; (4294 <ticker_init+0x94>)
    421a:	4e1f      	ldr	r6, [pc, #124]	; (4298 <ticker_init+0x98>)
    421c:	64ee      	str	r6, [r5, #76]	; 0x4c
		instance->fp_sched = ticker_instance1_sched;
    421e:	4e1f      	ldr	r6, [pc, #124]	; (429c <ticker_init+0x9c>)
    4220:	652e      	str	r6, [r5, #80]	; 0x50
		instance->fp_cmp_set = ticker_instance1_cmp_set;
    4222:	4e1f      	ldr	r6, [pc, #124]	; (42a0 <ticker_init+0xa0>)
    4224:	656e      	str	r6, [r5, #84]	; 0x54
		break;
    4226:	e006      	b.n	4236 <ticker_init+0x36>
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
	case 0:
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
    4228:	4d1a      	ldr	r5, [pc, #104]	; (4294 <ticker_init+0x94>)
    422a:	4e1e      	ldr	r6, [pc, #120]	; (42a4 <ticker_init+0xa4>)
    422c:	622e      	str	r6, [r5, #32]
		instance->fp_sched = ticker_instance0_sched;
    422e:	4e1e      	ldr	r6, [pc, #120]	; (42a8 <ticker_init+0xa8>)
    4230:	626e      	str	r6, [r5, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
    4232:	4e1e      	ldr	r6, [pc, #120]	; (42ac <ticker_init+0xac>)
    4234:	62ae      	str	r6, [r5, #40]	; 0x28

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    4236:	4e17      	ldr	r6, [pc, #92]	; (4294 <ticker_init+0x94>)
    4238:	252c      	movs	r5, #44	; 0x2c
    423a:	fb05 f900 	mul.w	r9, r5, r0
    423e:	eb06 0c09 	add.w	ip, r6, r9
	instance->node = node;
    4242:	f846 2009 	str.w	r2, [r6, r9]

	default:
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    4246:	f88c 8008 	strb.w	r8, [ip, #8]
	instance->node = node;

	instance->count_user = count_user;
    424a:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->user = user;
    424e:	f8cc 1004 	str.w	r1, [ip, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
    4252:	3b01      	subs	r3, #1
    4254:	b2db      	uxtb	r3, r3
    4256:	2bff      	cmp	r3, #255	; 0xff
    4258:	d00b      	beq.n	4272 <ticker_init+0x72>
		users[count_user].user_op = user_op_;
    425a:	b21a      	sxth	r2, r3
    425c:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
    4260:	f8cc e004 	str.w	lr, [ip, #4]
		user_op_ += users[count_user].count_user_op;
    4264:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
		count_op -= users[count_user].count_user_op;
    4268:	1aa4      	subs	r4, r4, r2
	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
		users[count_user].user_op = user_op_;
		user_op_ += users[count_user].count_user_op;
    426a:	fb02 ee05 	mla	lr, r2, r5, lr
		count_op -= users[count_user].count_user_op;
    426e:	b2e4      	uxtb	r4, r4
    4270:	e7ef      	b.n	4252 <ticker_init+0x52>
	}

	if (count_op) {
    4272:	b95c      	cbnz	r4, 428c <ticker_init+0x8c>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
    4274:	222c      	movs	r2, #44	; 0x2c
    4276:	fb02 6000 	mla	r0, r2, r0, r6
    427a:	7603      	strb	r3, [r0, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
    427c:	7643      	strb	r3, [r0, #25]
	instance->ticks_slot_previous = 0;
    427e:	8344      	strh	r4, [r0, #26]
	instance->ticks_current = 0;
    4280:	6144      	str	r4, [r0, #20]
	instance->ticks_elapsed_first = 0;
    4282:	7284      	strb	r4, [r0, #10]
	instance->ticks_elapsed_last = 0;
    4284:	72c4      	strb	r4, [r0, #11]

	return TICKER_STATUS_SUCCESS;
    4286:	4620      	mov	r0, r4
    4288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		user_op_ += users[count_user].count_user_op;
		count_op -= users[count_user].count_user_op;
	}

	if (count_op) {
		return TICKER_STATUS_FAILURE;
    428c:	2001      	movs	r0, #1
	instance->ticks_current = 0;
	instance->ticks_elapsed_first = 0;
	instance->ticks_elapsed_last = 0;

	return TICKER_STATUS_SUCCESS;
}
    428e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4292:	bf00      	nop
    4294:	20000a84 	.word	0x20000a84
    4298:	00003911 	.word	0x00003911
    429c:	000037b1 	.word	0x000037b1
    42a0:	00003791 	.word	0x00003791
    42a4:	0000395d 	.word	0x0000395d
    42a8:	00003859 	.word	0x00003859
    42ac:	000037a1 	.word	0x000037a1

000042b0 <ticker_trigger>:

void ticker_trigger(uint8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    42b0:	4a08      	ldr	r2, [pc, #32]	; (42d4 <ticker_trigger+0x24>)
    42b2:	232c      	movs	r3, #44	; 0x2c

	return TICKER_STATUS_SUCCESS;
}

void ticker_trigger(uint8_t instance_index)
{
    42b4:	b480      	push	{r7}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    42b6:	fb03 2000 	mla	r0, r3, r0, r2

	return TICKER_STATUS_SUCCESS;
}

void ticker_trigger(uint8_t instance_index)
{
    42ba:	af00      	add	r7, sp, #0
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
    42bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    42be:	b12b      	cbz	r3, 42cc <ticker_trigger+0x1c>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    42c0:	2201      	movs	r2, #1
    42c2:	4611      	mov	r1, r2
    42c4:	2000      	movs	r0, #0
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    42c6:	46bd      	mov	sp, r7
    42c8:	bc80      	pop	{r7}
void ticker_trigger(uint8_t instance_index)
{
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
    42ca:	4718      	bx	r3
						   CALL_ID_WORKER, 1);
	}

	DEBUG_TICKER_ISR(0);
}
    42cc:	46bd      	mov	sp, r7
    42ce:	bc80      	pop	{r7}
    42d0:	4770      	bx	lr
    42d2:	bf00      	nop
    42d4:	20000a84 	.word	0x20000a84

000042d8 <ticker_start>:
		     uint32_t ticks_first, uint32_t ticks_periodic,
		     uint32_t remainder_periodic, uint16_t lazy,
		     uint16_t ticks_slot,
		     ticker_timeout_func ticker_timeout_func, void *context,
		     ticker_op_func fp_op_func, void *op_context)
{
    42d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t last;
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    42dc:	4d23      	ldr	r5, [pc, #140]	; (436c <ticker_start+0x94>)
    42de:	242c      	movs	r4, #44	; 0x2c
    42e0:	fb04 5000 	mla	r0, r4, r0, r5
    42e4:	fa0f f881 	sxth.w	r8, r1
    42e8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    42ec:	eb0c 0ec8 	add.w	lr, ip, r8, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    42f0:	f81c c038 	ldrb.w	ip, [ip, r8, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    42f4:	f89e 6003 	ldrb.w	r6, [lr, #3]
    42f8:	1c75      	adds	r5, r6, #1
    42fa:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    42fc:	45ac      	cmp	ip, r5
    42fe:	bf98      	it	ls
    4300:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    4302:	f89e c001 	ldrb.w	ip, [lr, #1]
    4306:	45ac      	cmp	ip, r5
		     uint32_t ticks_first, uint32_t ticks_periodic,
		     uint32_t remainder_periodic, uint16_t lazy,
		     uint16_t ticks_slot,
		     ticker_timeout_func ticker_timeout_func, void *context,
		     ticker_op_func fp_op_func, void *op_context)
{
    4308:	af00      	add	r7, sp, #0
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    430a:	d02b      	beq.n	4364 <ticker_start+0x8c>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    430c:	f8de c004 	ldr.w	ip, [lr, #4]
    4310:	fb16 f604 	smulbb	r6, r6, r4
    4314:	eb0c 0406 	add.w	r4, ip, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
    4318:	f04f 0803 	mov.w	r8, #3
    431c:	f80c 8006 	strb.w	r8, [ip, r6]
	user_op->id = _ticker_id;
	user_op->params.start.ticks_at_start = ticks_anchor;
    4320:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    4322:	69bb      	ldr	r3, [r7, #24]
    4324:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    4326:	69fb      	ldr	r3, [r7, #28]
    4328:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    432a:	6a3b      	ldr	r3, [r7, #32]
    432c:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    432e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    4330:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
    4332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    4334:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
    4336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4338:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
    433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    433c:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4340:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    4342:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    4344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_START;
	user_op->id = _ticker_id;
    4346:	7062      	strb	r2, [r4, #1]
	user_op->params.start.remainder_periodic = remainder_periodic;
	user_op->params.start.ticks_slot = ticks_slot;
	user_op->params.start.lazy = lazy;
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
	user_op->params.start.context = context;
	user_op->status = TICKER_STATUS_BUSY;
    4348:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    434a:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    434c:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4350:	6a45      	ldr	r5, [r0, #36]	; 0x24
    4352:	6a03      	ldr	r3, [r0, #32]
    4354:	4608      	mov	r0, r1
    4356:	4798      	blx	r3
    4358:	2200      	movs	r2, #0
    435a:	4631      	mov	r1, r6
    435c:	47a8      	blx	r5

	return user_op->status;
    435e:	6a20      	ldr	r0, [r4, #32]
    4360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    4364:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    4366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    436a:	bf00      	nop
    436c:	20000a84 	.word	0x20000a84

00004370 <ticker_update>:
uint32_t ticker_update(uint8_t instance_index, uint8_t user_id,
		      uint8_t _ticker_id, uint16_t ticks_drift_plus,
		      uint16_t ticks_drift_minus, uint16_t ticks_slot_plus,
		      uint16_t ticks_slot_minus, uint16_t lazy, uint8_t force,
		      ticker_op_func fp_op_func, void *op_context)
{
    4370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	uint8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    4374:	4d21      	ldr	r5, [pc, #132]	; (43fc <ticker_update+0x8c>)
    4376:	242c      	movs	r4, #44	; 0x2c
    4378:	fb04 5000 	mla	r0, r4, r0, r5
    437c:	fa0f f881 	sxth.w	r8, r1
    4380:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4384:	eb0c 0ec8 	add.w	lr, ip, r8, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    4388:	f81c c038 	ldrb.w	ip, [ip, r8, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    438c:	f89e 6003 	ldrb.w	r6, [lr, #3]
    4390:	1c75      	adds	r5, r6, #1
    4392:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    4394:	45ac      	cmp	ip, r5
    4396:	bf98      	it	ls
    4398:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    439a:	f89e c001 	ldrb.w	ip, [lr, #1]
    439e:	45ac      	cmp	ip, r5
uint32_t ticker_update(uint8_t instance_index, uint8_t user_id,
		      uint8_t _ticker_id, uint16_t ticks_drift_plus,
		      uint16_t ticks_drift_minus, uint16_t ticks_slot_plus,
		      uint16_t ticks_slot_minus, uint16_t lazy, uint8_t force,
		      ticker_op_func fp_op_func, void *op_context)
{
    43a0:	af00      	add	r7, sp, #0
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    43a2:	d028      	beq.n	43f6 <ticker_update+0x86>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    43a4:	f8de c004 	ldr.w	ip, [lr, #4]
    43a8:	fb16 f604 	smulbb	r6, r6, r4
    43ac:	eb0c 0406 	add.w	r4, ip, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    43b0:	f04f 0804 	mov.w	r8, #4
    43b4:	f80c 8006 	strb.w	r8, [ip, r6]
	user_op->id = _ticker_id;
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    43b8:	80a3      	strh	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    43ba:	8b3b      	ldrh	r3, [r7, #24]
    43bc:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    43be:	8bbb      	ldrh	r3, [r7, #28]
    43c0:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    43c2:	8c3b      	ldrh	r3, [r7, #32]
    43c4:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
    43c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    43c8:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
    43ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    43ce:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    43d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    43d2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    43d4:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    43d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
	user_op->id = _ticker_id;
    43d8:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
	user_op->params.update.lazy = lazy;
	user_op->params.update.force = force;
	user_op->status = TICKER_STATUS_BUSY;
    43da:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    43dc:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    43de:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    43e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    43e4:	6a03      	ldr	r3, [r0, #32]
    43e6:	4608      	mov	r0, r1
    43e8:	4798      	blx	r3
    43ea:	2200      	movs	r2, #0
    43ec:	4631      	mov	r1, r6
    43ee:	47a8      	blx	r5

	return user_op->status;
    43f0:	6a20      	ldr	r0, [r4, #32]
    43f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    43f6:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    43f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43fc:	20000a84 	.word	0x20000a84

00004400 <ticker_stop>:

uint32_t ticker_stop(uint8_t instance_index, uint8_t user_id,
		    uint8_t _ticker_id, ticker_op_func fp_op_func,
		    void *op_context)
{
    4400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	uint8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    4404:	4c1b      	ldr	r4, [pc, #108]	; (4474 <ticker_stop+0x74>)
    4406:	252c      	movs	r5, #44	; 0x2c
    4408:	fb05 4000 	mla	r0, r5, r0, r4
    440c:	fa0f f881 	sxth.w	r8, r1
    4410:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4414:	eb0c 0ec8 	add.w	lr, ip, r8, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    4418:	f81c c038 	ldrb.w	ip, [ip, r8, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    441c:	f89e 6003 	ldrb.w	r6, [lr, #3]
    4420:	1c74      	adds	r4, r6, #1
    4422:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
		last = 0;
    4424:	45a4      	cmp	ip, r4
    4426:	bf98      	it	ls
    4428:	2400      	movls	r4, #0
	}

	if (last == user->first) {
    442a:	f89e c001 	ldrb.w	ip, [lr, #1]
    442e:	45a4      	cmp	ip, r4
}

uint32_t ticker_stop(uint8_t instance_index, uint8_t user_id,
		    uint8_t _ticker_id, ticker_op_func fp_op_func,
		    void *op_context)
{
    4430:	af00      	add	r7, sp, #0
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    4432:	d01b      	beq.n	446c <ticker_stop+0x6c>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    4434:	f8de c004 	ldr.w	ip, [lr, #4]
    4438:	fb16 f605 	smulbb	r6, r6, r5
    443c:	eb0c 0506 	add.w	r5, ip, r6
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    4440:	f04f 0805 	mov.w	r8, #5
    4444:	f80c 8006 	strb.w	r8, [ip, r6]
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    4448:	626b      	str	r3, [r5, #36]	; 0x24
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
	user_op->status = TICKER_STATUS_BUSY;
    444a:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    444c:	69bb      	ldr	r3, [r7, #24]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_STOP;
	user_op->id = _ticker_id;
    444e:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4450:	622e      	str	r6, [r5, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    4452:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
    4454:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4458:	6a44      	ldr	r4, [r0, #36]	; 0x24
    445a:	6a03      	ldr	r3, [r0, #32]
    445c:	4608      	mov	r0, r1
    445e:	4798      	blx	r3
    4460:	2200      	movs	r2, #0
    4462:	4631      	mov	r1, r6
    4464:	47a0      	blx	r4

	return user_op->status;
    4466:	6a28      	ldr	r0, [r5, #32]
    4468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    446c:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4472:	bf00      	nop
    4474:	20000a84 	.word	0x20000a84

00004478 <ticker_next_slot_get>:
uint32_t ticker_next_slot_get(uint8_t instance_index, uint8_t user_id,
			     uint8_t *_ticker_id,
			     uint32_t *ticks_current,
			     uint32_t *ticks_to_expire,
			     ticker_op_func fp_op_func, void *op_context)
{
    4478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	uint8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    447c:	4d1e      	ldr	r5, [pc, #120]	; (44f8 <ticker_next_slot_get+0x80>)
    447e:	242c      	movs	r4, #44	; 0x2c
    4480:	fb04 5000 	mla	r0, r4, r0, r5
    4484:	fa0f f881 	sxth.w	r8, r1
    4488:	f8d0 c004 	ldr.w	ip, [r0, #4]
    448c:	eb0c 0ec8 	add.w	lr, ip, r8, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    4490:	f81c c038 	ldrb.w	ip, [ip, r8, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    4494:	f89e 6003 	ldrb.w	r6, [lr, #3]
    4498:	1c75      	adds	r5, r6, #1
    449a:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
		last = 0;
    449c:	45ac      	cmp	ip, r5
    449e:	bf98      	it	ls
    44a0:	2500      	movls	r5, #0
	}

	if (last == user->first) {
    44a2:	f89e c001 	ldrb.w	ip, [lr, #1]
    44a6:	45ac      	cmp	ip, r5
uint32_t ticker_next_slot_get(uint8_t instance_index, uint8_t user_id,
			     uint8_t *_ticker_id,
			     uint32_t *ticks_current,
			     uint32_t *ticks_to_expire,
			     ticker_op_func fp_op_func, void *op_context)
{
    44a8:	af00      	add	r7, sp, #0
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    44aa:	d021      	beq.n	44f0 <ticker_next_slot_get+0x78>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    44ac:	f8de c004 	ldr.w	ip, [lr, #4]
    44b0:	fb16 f604 	smulbb	r6, r6, r4
    44b4:	eb0c 0406 	add.w	r4, ip, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
    44b8:	f04f 0802 	mov.w	r8, #2
    44bc:	f80c 8006 	strb.w	r8, [ip, r6]
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
    44c0:	60a3      	str	r3, [r4, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
    44c2:	69bb      	ldr	r3, [r7, #24]
    44c4:	60e3      	str	r3, [r4, #12]
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
    44c6:	69fb      	ldr	r3, [r7, #28]
    44c8:	6263      	str	r3, [r4, #36]	; 0x24
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    44ca:	26ff      	movs	r6, #255	; 0xff
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    44cc:	6a3b      	ldr	r3, [r7, #32]
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
	user_op->params.slot_get.ticker_id = _ticker_id;
    44ce:	6062      	str	r2, [r4, #4]
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
	user_op->id = TICKER_NULL;
    44d0:	7066      	strb	r6, [r4, #1]
	user_op->params.slot_get.ticker_id = _ticker_id;
	user_op->params.slot_get.ticks_current = ticks_current;
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
	user_op->status = TICKER_STATUS_BUSY;
    44d2:	f8c4 8020 	str.w	r8, [r4, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    44d6:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
    44d8:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    44dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    44de:	6a03      	ldr	r3, [r0, #32]
    44e0:	4608      	mov	r0, r1
    44e2:	4798      	blx	r3
    44e4:	2200      	movs	r2, #0
    44e6:	4641      	mov	r1, r8
    44e8:	47a8      	blx	r5

	return user_op->status;
    44ea:	6a20      	ldr	r0, [r4, #32]
    44ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    44f0:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    44f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44f6:	bf00      	nop
    44f8:	20000a84 	.word	0x20000a84

000044fc <ticker_job_idle_get>:

uint32_t ticker_job_idle_get(uint8_t instance_index, uint8_t user_id,
			    ticker_op_func fp_op_func, void *op_context)
{
    44fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	uint8_t last;
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];
    4500:	4c1b      	ldr	r4, [pc, #108]	; (4570 <ticker_job_idle_get+0x74>)
    4502:	252c      	movs	r5, #44	; 0x2c
    4504:	fb05 4000 	mla	r0, r5, r0, r4
    4508:	fa0f f881 	sxth.w	r8, r1
    450c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4510:	eb0c 0ec8 	add.w	lr, ip, r8, lsl #3

	last = user->last + 1;
	if (last >= user->count_user_op) {
    4514:	f81c c038 	ldrb.w	ip, [ip, r8, lsl #3]
	struct ticker_user *user;
	struct ticker_user_op *user_op;

	user = &instance->user[user_id];

	last = user->last + 1;
    4518:	f89e 6003 	ldrb.w	r6, [lr, #3]
    451c:	1c74      	adds	r4, r6, #1
    451e:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
		last = 0;
    4520:	45a4      	cmp	ip, r4
    4522:	bf98      	it	ls
    4524:	2400      	movls	r4, #0
	}

	if (last == user->first) {
    4526:	f89e c001 	ldrb.w	ip, [lr, #1]
    452a:	45a4      	cmp	ip, r4
	return user_op->status;
}

uint32_t ticker_job_idle_get(uint8_t instance_index, uint8_t user_id,
			    ticker_op_func fp_op_func, void *op_context)
{
    452c:	af00      	add	r7, sp, #0
	last = user->last + 1;
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
    452e:	d01b      	beq.n	4568 <ticker_job_idle_get+0x6c>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    4530:	f8de c004 	ldr.w	ip, [lr, #4]
    4534:	fb16 f605 	smulbb	r6, r6, r5
    4538:	eb0c 0506 	add.w	r5, ip, r6
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
    453c:	f04f 0801 	mov.w	r8, #1
    4540:	f80c 8006 	strb.w	r8, [ip, r6]
	user_op->id = TICKER_NULL;
    4544:	26ff      	movs	r6, #255	; 0xff
    4546:	706e      	strb	r6, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    4548:	2602      	movs	r6, #2
	user_op->fp_op_func = fp_op_func;
    454a:	626a      	str	r2, [r5, #36]	; 0x24
	}

	user_op = &user->user_op[user->last];
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
	user_op->id = TICKER_NULL;
	user_op->status = TICKER_STATUS_BUSY;
    454c:	622e      	str	r6, [r5, #32]
	user_op->fp_op_func = fp_op_func;
	user_op->op_context = op_context;
    454e:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
    4550:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4554:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4556:	6a03      	ldr	r3, [r0, #32]
    4558:	4608      	mov	r0, r1
    455a:	4798      	blx	r3
    455c:	2200      	movs	r2, #0
    455e:	4631      	mov	r1, r6
    4560:	47a0      	blx	r4

	return user_op->status;
    4562:	6a28      	ldr	r0, [r5, #32]
    4564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (last >= user->count_user_op) {
		last = 0;
	}

	if (last == user->first) {
		return TICKER_STATUS_FAILURE;
    4568:	2001      	movs	r0, #1
	user->last = last;

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);

	return user_op->status;
}
    456a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    456e:	bf00      	nop
    4570:	20000a84 	.word	0x20000a84

00004574 <ticker_job_sched>:

void ticker_job_sched(uint8_t instance_index, uint8_t user_id)
{
    4574:	b5b0      	push	{r4, r5, r7, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4576:	4a08      	ldr	r2, [pc, #32]	; (4598 <ticker_job_sched+0x24>)
    4578:	232c      	movs	r3, #44	; 0x2c
    457a:	fb03 2000 	mla	r0, r3, r0, r2

	return user_op->status;
}

void ticker_job_sched(uint8_t instance_index, uint8_t user_id)
{
    457e:	af00      	add	r7, sp, #0
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4580:	6a44      	ldr	r4, [r0, #36]	; 0x24
    4582:	6a03      	ldr	r3, [r0, #32]
    4584:	4608      	mov	r0, r1
    4586:	4798      	blx	r3
    4588:	2200      	movs	r2, #0
    458a:	2102      	movs	r1, #2
    458c:	4623      	mov	r3, r4
}
    458e:	46bd      	mov	sp, r7
    4590:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}

void ticker_job_sched(uint8_t instance_index, uint8_t user_id)
{
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
    4594:	4718      	bx	r3
    4596:	bf00      	nop
    4598:	20000a84 	.word	0x20000a84

0000459c <ticker_ticks_now_get>:
}

uint32_t ticker_ticks_now_get(void)
{
    459c:	b480      	push	{r7}
    459e:	af00      	add	r7, sp, #0
	return cntr_cnt_get();
}
    45a0:	46bd      	mov	sp, r7
    45a2:	bc80      	pop	{r7}
	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
}

uint32_t ticker_ticks_now_get(void)
{
	return cntr_cnt_get();
    45a4:	f7fe bc48 	b.w	2e38 <cntr_cnt_get>

000045a8 <ticker_ticks_diff_get>:
}

uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
    45a8:	b580      	push	{r7, lr}
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
    45aa:	1a40      	subs	r0, r0, r1
{
	return cntr_cnt_get();
}

uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
    45ac:	af00      	add	r7, sp, #0
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
}
    45ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    45b2:	bd80      	pop	{r7, pc}

000045b4 <cpu_sleep>:

#ifndef _CPU_H_
#define _CPU_H_

static inline void cpu_sleep(void)
{
    45b4:	b580      	push	{r7, lr}
    45b6:	af00      	add	r7, sp, #0
    45b8:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    45ba:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    45bc:	bf20      	wfe
    45be:	bd80      	pop	{r7, pc}

000045c0 <ticker_if_done>:
	}
}
#endif

static void ticker_if_done(uint32_t status, void *ops_context)
{
    45c0:	b580      	push	{r7, lr}
	*((uint32_t volatile *)ops_context) = status;
    45c2:	6008      	str	r0, [r1, #0]
	}
}
#endif

static void ticker_if_done(uint32_t status, void *ops_context)
{
    45c4:	af00      	add	r7, sp, #0
	*((uint32_t volatile *)ops_context) = status;
    45c6:	bd80      	pop	{r7, pc}

000045c8 <prepare_reduced>:
		}
	}
}

static void prepare_reduced(uint32_t status, void *op_context)
{
    45c8:	b580      	push	{r7, lr}
    45ca:	af00      	add	r7, sp, #0
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, obs ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    45cc:	b918      	cbnz	r0, 45d6 <prepare_reduced+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start |= ((uint32_t)1 << 31);
    45ce:	680b      	ldr	r3, [r1, #0]
    45d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    45d4:	600b      	str	r3, [r1, #0]
    45d6:	bd80      	pop	{r7, pc}

000045d8 <prepare_normal>:
	}
}

static void prepare_normal(uint32_t status, void *op_context)
{
    45d8:	b580      	push	{r7, lr}
    45da:	af00      	add	r7, sp, #0
	/* It is acceptable that ticker_update will fail, if ticker is stopped;
	 * for example, obs ticker is stopped on connection estblishment but
	 * is also preempted.
	 */
	if (status == 0) {
    45dc:	b918      	cbnz	r0, 45e6 <prepare_normal+0xe>
		struct shdr *hdr = (struct shdr *)op_context;

		hdr->ticks_xtal_to_start &= ~((uint32_t)1 << 31);
    45de:	680b      	ldr	r3, [r1, #0]
    45e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    45e4:	600b      	str	r3, [r1, #0]
    45e6:	bd80      	pop	{r7, pc}

000045e8 <channel_calc>:
}

static uint8_t channel_calc(uint8_t *channel_use, uint8_t hop,
			    uint16_t latency, uint8_t *channel_map,
			    uint8_t channel_count)
{
    45e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t channel_next;

	channel_next = ((*channel_use) + (hop * (1 + latency))) % 37;
    45ea:	7804      	ldrb	r4, [r0, #0]
    45ec:	fb02 1101 	mla	r1, r2, r1, r1
    45f0:	4421      	add	r1, r4
    45f2:	2225      	movs	r2, #37	; 0x25
    45f4:	fb91 f4f2 	sdiv	r4, r1, r2
    45f8:	fb02 1214 	mls	r2, r2, r4, r1
    45fc:	b2d1      	uxtb	r1, r2
	*channel_use = channel_next;
    45fe:	7001      	strb	r1, [r0, #0]

	if ((channel_map[channel_next >> 3] & (1 << (channel_next % 8))) == 0) {
    4600:	08c8      	lsrs	r0, r1, #3
    4602:	f002 0207 	and.w	r2, r2, #7
    4606:	5c1c      	ldrb	r4, [r3, r0]
}

static uint8_t channel_calc(uint8_t *channel_use, uint8_t hop,
			    uint16_t latency, uint8_t *channel_map,
			    uint8_t channel_count)
{
    4608:	af00      	add	r7, sp, #0
	uint8_t channel_next;

	channel_next = ((*channel_use) + (hop * (1 + latency))) % 37;
	*channel_use = channel_next;

	if ((channel_map[channel_next >> 3] & (1 << (channel_next % 8))) == 0) {
    460a:	fa44 f202 	asr.w	r2, r4, r2
    460e:	f012 0401 	ands.w	r4, r2, #1
}

static uint8_t channel_calc(uint8_t *channel_use, uint8_t hop,
			    uint16_t latency, uint8_t *channel_map,
			    uint8_t channel_count)
{
    4612:	7d3d      	ldrb	r5, [r7, #20]
	uint8_t channel_next;

	channel_next = ((*channel_use) + (hop * (1 + latency))) % 37;
	*channel_use = channel_next;

	if ((channel_map[channel_next >> 3] & (1 << (channel_next % 8))) == 0) {
    4614:	d11c      	bne.n	4650 <channel_calc+0x68>
		uint8_t channel_index;
		uint8_t byte_count;

		channel_index = channel_next % channel_count;
    4616:	fbb1 f2f5 	udiv	r2, r1, r5
    461a:	fb05 1012 	mls	r0, r5, r2, r1
    461e:	b2c0      	uxtb	r0, r0
    4620:	1e5d      	subs	r5, r3, #1
		channel_next = 0;
    4622:	4621      	mov	r1, r4
    4624:	3304      	adds	r3, #4

		byte_count = 5;
		while (byte_count--) {
    4626:	429d      	cmp	r5, r3
    4628:	d012      	beq.n	4650 <channel_calc+0x68>
			uint8_t bite;
			uint8_t bit_count;

			bite = *channel_map;
    462a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
			bit_count = 8;
			while (bit_count--) {
    462e:	2400      	movs	r4, #0
    4630:	190a      	adds	r2, r1, r4
    4632:	2c08      	cmp	r4, #8
    4634:	b2d2      	uxtb	r2, r2
    4636:	d008      	beq.n	464a <channel_calc+0x62>
				if (bite & 0x01) {
    4638:	f016 0f01 	tst.w	r6, #1
    463c:	d002      	beq.n	4644 <channel_calc+0x5c>
					if (channel_index == 0) {
    463e:	b130      	cbz	r0, 464e <channel_calc+0x66>
						break;
					}
					channel_index--;
    4640:	3801      	subs	r0, #1
    4642:	b2c0      	uxtb	r0, r0
				}
				channel_next++;
				bite >>= 1;
    4644:	0876      	lsrs	r6, r6, #1
    4646:	3401      	adds	r4, #1
    4648:	e7f2      	b.n	4630 <channel_calc+0x48>
    464a:	4611      	mov	r1, r2
    464c:	e7eb      	b.n	4626 <channel_calc+0x3e>
    464e:	4611      	mov	r1, r2
	} else {
		/* channel can be used, return it */
	}

	return channel_next;
}
    4650:	4608      	mov	r0, r1
    4652:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004654 <packet_rx_acquired_count_get>:
	}
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static uint8_t packet_rx_acquired_count_get(void)
{
    4654:	b580      	push	{r7, lr}
	if (_radio.packet_rx_acquire >=
    4656:	4b0a      	ldr	r3, [pc, #40]	; (4680 <packet_rx_acquired_count_get+0x2c>)
    4658:	f893 024e 	ldrb.w	r0, [r3, #590]	; 0x24e
	    _radio.packet_rx_last) {
    465c:	f893 224d 	ldrb.w	r2, [r3, #589]	; 0x24d
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static uint8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    4660:	4290      	cmp	r0, r2
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
			_radio.packet_rx_last +
    4662:	bf3b      	ittet	cc
    4664:	f893 224d 	ldrbcc.w	r2, [r3, #589]	; 0x24d
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    4668:	f893 324c 	ldrbcc.w	r3, [r3, #588]	; 0x24c
static uint8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    466c:	f893 324d 	ldrbcs.w	r3, [r3, #589]	; 0x24d
	} else {
		return (_radio.packet_rx_count -
    4670:	18c0      	addcc	r0, r0, r3
#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static uint8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
    4672:	bf2c      	ite	cs
    4674:	1ac0      	subcs	r0, r0, r3
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    4676:	1a80      	subcc	r0, r0, r2
	}
}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static uint8_t packet_rx_acquired_count_get(void)
{
    4678:	af00      	add	r7, sp, #0
	if (_radio.packet_rx_acquire >=
	    _radio.packet_rx_last) {
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
	} else {
		return (_radio.packet_rx_count -
    467a:	b2c0      	uxtb	r0, r0
			_radio.packet_rx_last +
			_radio.packet_rx_acquire);
	}
}
    467c:	bd80      	pop	{r7, pc}
    467e:	bf00      	nop
    4680:	20000b44 	.word	0x20000b44

00004684 <packet_rx_reserve_get>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static struct radio_pdu_node_rx *packet_rx_reserve_get(uint8_t count)
{
    4684:	b590      	push	{r4, r7, lr}
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (_radio.packet_rx_last > _radio.packet_rx_acquire) {
    4686:	4a10      	ldr	r2, [pc, #64]	; (46c8 <packet_rx_reserve_get+0x44>)
    4688:	f892 324e 	ldrb.w	r3, [r2, #590]	; 0x24e
    468c:	f892 124d 	ldrb.w	r1, [r2, #589]	; 0x24d
    4690:	4299      	cmp	r1, r3
		if (count >
		    ((_radio.packet_rx_count - _radio.packet_rx_last) +
    4692:	bf88      	it	hi
    4694:	f892 424d 	ldrbhi.w	r4, [r2, #589]	; 0x24d
    4698:	4611      	mov	r1, r2
static struct radio_pdu_node_rx *packet_rx_reserve_get(uint8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (_radio.packet_rx_last > _radio.packet_rx_acquire) {
		if (count >
    469a:	bf89      	itett	hi
    469c:	f892 224c 	ldrbhi.w	r2, [r2, #588]	; 0x24c
		     _radio.packet_rx_acquire)) {
			return 0;
		}
	} else {
		if (count >
		    (_radio.packet_rx_acquire - _radio.packet_rx_last)) {
    46a0:	f892 224d 	ldrbls.w	r2, [r2, #589]	; 0x24d
static struct radio_pdu_node_rx *packet_rx_reserve_get(uint8_t count)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	if (_radio.packet_rx_last > _radio.packet_rx_acquire) {
		if (count >
    46a4:	1b12      	subhi	r2, r2, r4
    46a6:	189b      	addhi	r3, r3, r2
		    ((_radio.packet_rx_count - _radio.packet_rx_last) +
		     _radio.packet_rx_acquire)) {
			return 0;
		}
	} else {
		if (count >
    46a8:	bf98      	it	ls
    46aa:	1a9b      	subls	r3, r3, r2
    46ac:	4298      	cmp	r0, r3
		    (_radio.packet_rx_acquire - _radio.packet_rx_last)) {
			return 0;
		}
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    46ae:	bfdf      	itttt	le
    46b0:	f8d1 3248 	ldrle.w	r3, [r1, #584]	; 0x248
    46b4:	f891 224d 	ldrble.w	r2, [r1, #589]	; 0x24d
    46b8:	f853 0022 	ldrle.w	r0, [r3, r2, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    46bc:	2301      	movle	r3, #1
	}
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static struct radio_pdu_node_rx *packet_rx_reserve_get(uint8_t count)
{
    46be:	af00      	add	r7, sp, #0
			return 0;
		}
	}

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    46c0:	bfd4      	ite	le
    46c2:	7103      	strble	r3, [r0, #4]

	if (_radio.packet_rx_last > _radio.packet_rx_acquire) {
		if (count >
		    ((_radio.packet_rx_count - _radio.packet_rx_last) +
		     _radio.packet_rx_acquire)) {
			return 0;
    46c4:	2000      	movgt	r0, #0

	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;

	return radio_pdu_node_rx;
}
    46c6:	bd90      	pop	{r4, r7, pc}
    46c8:	20000b44 	.word	0x20000b44

000046cc <conn_update_req>:
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static uint32_t conn_update_req(struct connection *conn)
{
    46cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->llcp_req != conn->llcp_ack) {
    46ce:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
    46d2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    46d6:	42a3      	cmp	r3, r4
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
		(conn->llcp_version.sub_version_number >= RADIO_BLE_SUB_VERSION_NUMBER));
}

static uint32_t conn_update_req(struct connection *conn)
{
    46d8:	af00      	add	r7, sp, #0
	if (conn->llcp_req != conn->llcp_ack) {
    46da:	d13a      	bne.n	4752 <conn_update_req+0x86>
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
    46dc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    46e0:	f013 0501 	ands.w	r5, r3, #1
    46e4:	d00b      	beq.n	46fe <conn_update_req+0x32>

static uint32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    46e6:	f890 309a 	ldrb.w	r3, [r0, #154]	; 0x9a
    46ea:	079b      	lsls	r3, r3, #30
    46ec:	d533      	bpl.n	4756 <conn_update_req+0x8a>
	return 0;
}

static uint32_t is_peer_compatible(struct connection *conn)
{
	return ((conn->llcp_version.rx) &&
    46ee:	f890 309b 	ldrb.w	r3, [r0, #155]	; 0x9b
    46f2:	2b07      	cmp	r3, #7
    46f4:	d92f      	bls.n	4756 <conn_update_req+0x8a>
		(conn->llcp_version.version_number >= RADIO_BLE_VERSION_NUMBER) &&
		(conn->llcp_version.company_id == RADIO_BLE_COMPANY_ID) &&
    46f6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    46fa:	3301      	adds	r3, #1
    46fc:	d12b      	bne.n	4756 <conn_update_req+0x8a>
	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
    46fe:	8cc1      	ldrh	r1, [r0, #38]	; 0x26

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
    4700:	8c82      	ldrh	r2, [r0, #36]	; 0x24
		conn->llcp.connection_update.latency = conn->latency;
    4702:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
		conn->llcp.connection_update.timeout = conn->conn_interval *
    4706:	8e41      	ldrh	r1, [r0, #50]	; 0x32

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
    4708:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    470c:	2300      	movs	r3, #0
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    470e:	434a      	muls	r2, r1
    4710:	217d      	movs	r1, #125	; 0x7d
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    4712:	2601      	movs	r6, #1
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    4714:	429d      	cmp	r5, r3
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
    4716:	fb01 f202 	mul.w	r2, r1, r2
    471a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    471e:	fb92 f2f1 	sdiv	r2, r2, r1
    4722:	f8a0 2070 	strh.w	r2, [r0, #112]	; 0x70
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    4726:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
		return 1;
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
    472a:	f880 6094 	strb.w	r6, [r0, #148]	; 0x94
		conn->llcp.connection_update.interval = conn->conn_interval;
		conn->llcp.connection_update.latency = conn->latency;
		conn->llcp.connection_update.timeout = conn->conn_interval *
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
    472e:	bf0c      	ite	eq
    4730:	4631      	moveq	r1, r6
    4732:	2102      	movne	r1, #2
    4734:	f361 0202 	bfi	r2, r1, #0, #3
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    4738:	f366 02c4 	bfi	r2, r6, #3, #2

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
		conn->llcp_ack--;
    473c:	3c01      	subs	r4, #1
	}

	if ((conn->role.master.role == 0) || (is_peer_compatible(conn))) {
		/** Perform slave intiated conn param req */
		conn->llcp.connection_update.win_size = 1;
		conn->llcp.connection_update.win_offset_us = 0;
    473e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
			conn->supervision_reload * 125 / 1000;
		/* conn->llcp.connection_update.instant     = 0; */
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;
    4742:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
		conn->llcp_ack--;
    4746:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
		conn->llcp.connection_update.state =
			(conn->role.master.role == 0) ?
			LLCP_CONN_STATE_INITIATE : LLCP_CONN_STATE_REQ;
		conn->llcp.connection_update.is_internal = 1;

		conn->llcp_type = LLCP_CONNECTION_UPDATE;
    474a:	f880 606a 	strb.w	r6, [r0, #106]	; 0x6a
		conn->llcp_ack--;

		return 0;
    474e:	4618      	mov	r0, r3
    4750:	bdf0      	pop	{r4, r5, r6, r7, pc}
}

static uint32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
		return 1;
    4752:	2001      	movs	r0, #1
    4754:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_ack--;

		return 0;
	}

	return 2;
    4756:	2002      	movs	r0, #2
}
    4758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000475c <ctrl_tx_enqueue>:
	return pdu_data_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    475c:	b5b0      	push	{r4, r5, r7, lr}
    475e:	b082      	sub	sp, #8
    4760:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    4762:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    4766:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
    476a:	f011 0f80 	tst.w	r1, #128	; 0x80
	return pdu_data_tx;
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
    476e:	af02      	add	r7, sp, #8
    4770:	4604      	mov	r4, r0
	/* check if a packet was tx-ed and not acked by peer */
	if (
    4772:	d112      	bne.n	479a <ctrl_tx_enqueue+0x3e>
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    4774:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
			    struct radio_pdu_node_tx *node_tx)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    (conn->empty == 0) &&
    4778:	b17b      	cbz	r3, 479a <ctrl_tx_enqueue+0x3e>
	    /* and data/ctrl packet is in the head */
	    (conn->pkt_tx_head) && (
    477a:	0709      	lsls	r1, r1, #28
    477c:	d501      	bpl.n	4782 <ctrl_tx_enqueue+0x26>
				    /* data PDU tx is not paused */
				    (conn->pause_tx == 0) ||
    477e:	4293      	cmp	r3, r2
    4780:	d10b      	bne.n	479a <ctrl_tx_enqueue+0x3e>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
    4782:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
    4786:	428b      	cmp	r3, r1
			conn->pkt_tx_data = conn->pkt_tx_data->next;
    4788:	bf04      	itt	eq
    478a:	6819      	ldreq	r1, [r3, #0]
    478c:	f8c4 1104 	streq.w	r1, [r4, #260]	; 0x104
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (conn->pkt_tx_ctrl == 0) {
    4790:	b962      	cbnz	r2, 47ac <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head->next;
    4792:	681a      	ldr	r2, [r3, #0]
    4794:	602a      	str	r2, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
    4796:	601d      	str	r5, [r3, #0]
    4798:	e005      	b.n	47a6 <ctrl_tx_enqueue+0x4a>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
    479a:	b93a      	cbnz	r2, 47ac <ctrl_tx_enqueue+0x50>
			node_tx->next = conn->pkt_tx_head;
    479c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
    47a0:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
    47a2:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
			conn->pkt_tx_ctrl = node_tx;
    47a6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    47aa:	e017      	b.n	47dc <ctrl_tx_enqueue+0x80>
		} else {
			/* TODO support for more than 2 pending ctrl packets. */
			LL_ASSERT(conn->pkt_tx_ctrl->next == conn->pkt_tx_data);
    47ac:	6812      	ldr	r2, [r2, #0]
    47ae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    47b2:	429a      	cmp	r2, r3
    47b4:	d00d      	beq.n	47d2 <ctrl_tx_enqueue+0x76>
    47b6:	4b0c      	ldr	r3, [pc, #48]	; (47e8 <ctrl_tx_enqueue+0x8c>)
    47b8:	9301      	str	r3, [sp, #4]
    47ba:	4b0c      	ldr	r3, [pc, #48]	; (47ec <ctrl_tx_enqueue+0x90>)
    47bc:	9300      	str	r3, [sp, #0]
    47be:	490c      	ldr	r1, [pc, #48]	; (47f0 <ctrl_tx_enqueue+0x94>)
    47c0:	4b0c      	ldr	r3, [pc, #48]	; (47f4 <ctrl_tx_enqueue+0x98>)
    47c2:	4a0d      	ldr	r2, [pc, #52]	; (47f8 <ctrl_tx_enqueue+0x9c>)
    47c4:	480d      	ldr	r0, [pc, #52]	; (47fc <ctrl_tx_enqueue+0xa0>)
    47c6:	f7fc fcf1 	bl	11ac <printk>
    47ca:	2100      	movs	r1, #0
    47cc:	4608      	mov	r0, r1
    47ce:	f007 ff3f 	bl	c650 <_SysFatalErrorHandler>

			node_tx->next = conn->pkt_tx_ctrl->next;
    47d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    47d6:	681a      	ldr	r2, [r3, #0]
    47d8:	602a      	str	r2, [r5, #0]
			conn->pkt_tx_ctrl->next = node_tx;
    47da:	601d      	str	r5, [r3, #0]
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
    47dc:	682b      	ldr	r3, [r5, #0]
    47de:	b90b      	cbnz	r3, 47e4 <ctrl_tx_enqueue+0x88>
		conn->pkt_tx_last = node_tx;
    47e0:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	}
}
    47e4:	46bd      	mov	sp, r7
    47e6:	bdb0      	pop	{r4, r5, r7, pc}
    47e8:	0000dd4e 	.word	0x0000dd4e
    47ec:	0000dd53 	.word	0x0000dd53
    47f0:	0000dd04 	.word	0x0000dd04
    47f4:	0000f271 	.word	0x0000f271
    47f8:	0000dcfd 	.word	0x0000dcfd
    47fc:	0000e366 	.word	0x0000e366

00004800 <start_enc_rsp_send>:
	ctrl_tx_enqueue(conn, node_tx);
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
    4800:	b5b0      	push	{r4, r5, r7, lr}
    4802:	b082      	sub	sp, #8
    4804:	4605      	mov	r5, r0
    4806:	af02      	add	r7, sp, #8
	struct radio_pdu_node_tx *node_tx = NULL;

	if (!pdu_ctrl_tx) {
    4808:	b9a1      	cbnz	r1, 4834 <start_enc_rsp_send+0x34>
		/* acquire tx mem */
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    480a:	4814      	ldr	r0, [pc, #80]	; (485c <start_enc_rsp_send+0x5c>)
    480c:	f7fe f973 	bl	2af6 <mem_acquire>
		LL_ASSERT(node_tx);
    4810:	4604      	mov	r4, r0
    4812:	b968      	cbnz	r0, 4830 <start_enc_rsp_send+0x30>
    4814:	4b12      	ldr	r3, [pc, #72]	; (4860 <start_enc_rsp_send+0x60>)
    4816:	9301      	str	r3, [sp, #4]
    4818:	4b12      	ldr	r3, [pc, #72]	; (4864 <start_enc_rsp_send+0x64>)
    481a:	9300      	str	r3, [sp, #0]
    481c:	4912      	ldr	r1, [pc, #72]	; (4868 <start_enc_rsp_send+0x68>)
    481e:	4b13      	ldr	r3, [pc, #76]	; (486c <start_enc_rsp_send+0x6c>)
    4820:	4a13      	ldr	r2, [pc, #76]	; (4870 <start_enc_rsp_send+0x70>)
    4822:	4814      	ldr	r0, [pc, #80]	; (4874 <start_enc_rsp_send+0x74>)
    4824:	f7fc fcc2 	bl	11ac <printk>
    4828:	4621      	mov	r1, r4
    482a:	4620      	mov	r0, r4
    482c:	f007 ff10 	bl	c650 <_SysFatalErrorHandler>

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
    4830:	1d21      	adds	r1, r4, #4
    4832:	e000      	b.n	4836 <start_enc_rsp_send+0x36>
}

static void start_enc_rsp_send(struct connection *conn,
			       struct pdu_data *pdu_ctrl_tx)
{
	struct radio_pdu_node_tx *node_tx = NULL;
    4834:	2400      	movs	r4, #0
		LL_ASSERT(node_tx);

		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	}

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    4836:	780b      	ldrb	r3, [r1, #0]
    4838:	f043 0303 	orr.w	r3, r3, #3
    483c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    483e:	2301      	movs	r3, #1
    4840:	704b      	strb	r3, [r1, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
    4842:	2306      	movs	r3, #6
    4844:	70cb      	strb	r3, [r1, #3]
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
    4846:	b134      	cbz	r4, 4856 <start_enc_rsp_send+0x56>
		ctrl_tx_enqueue(conn, node_tx);
    4848:	4621      	mov	r1, r4
    484a:	4628      	mov	r0, r5
	}
}
    484c:	46bd      	mov	sp, r7
    484e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;

	if (node_tx) {
		ctrl_tx_enqueue(conn, node_tx);
    4852:	f7ff bf83 	b.w	475c <ctrl_tx_enqueue>
	}
}
    4856:	46bd      	mov	sp, r7
    4858:	bdb0      	pop	{r4, r5, r7, pc}
    485a:	bf00      	nop
    485c:	20000dac 	.word	0x20000dac
    4860:	0000dd4e 	.word	0x0000dd4e
    4864:	0000dd53 	.word	0x0000dd53
    4868:	0000dd04 	.word	0x0000dd04
    486c:	0000f0f6 	.word	0x0000f0f6
    4870:	0000dcfd 	.word	0x0000dcfd
    4874:	0000e3b4 	.word	0x0000e3b4

00004878 <pause_enc_rsp_send>:

	ctrl_tx_enqueue(conn, node_tx);
}

static void pause_enc_rsp_send(struct connection *conn)
{
    4878:	b5b0      	push	{r4, r5, r7, lr}
    487a:	b082      	sub	sp, #8
    487c:	4605      	mov	r5, r0
    487e:	af02      	add	r7, sp, #8
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    4880:	4810      	ldr	r0, [pc, #64]	; (48c4 <pause_enc_rsp_send+0x4c>)
    4882:	f7fe f938 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    4886:	4604      	mov	r4, r0
    4888:	b968      	cbnz	r0, 48a6 <pause_enc_rsp_send+0x2e>
    488a:	4b0f      	ldr	r3, [pc, #60]	; (48c8 <pause_enc_rsp_send+0x50>)
    488c:	9301      	str	r3, [sp, #4]
    488e:	4b0f      	ldr	r3, [pc, #60]	; (48cc <pause_enc_rsp_send+0x54>)
    4890:	9300      	str	r3, [sp, #0]
    4892:	490f      	ldr	r1, [pc, #60]	; (48d0 <pause_enc_rsp_send+0x58>)
    4894:	4b0f      	ldr	r3, [pc, #60]	; (48d4 <pause_enc_rsp_send+0x5c>)
    4896:	4a10      	ldr	r2, [pc, #64]	; (48d8 <pause_enc_rsp_send+0x60>)
    4898:	4810      	ldr	r0, [pc, #64]	; (48dc <pause_enc_rsp_send+0x64>)
    489a:	f7fc fc87 	bl	11ac <printk>
    489e:	4621      	mov	r1, r4
    48a0:	4620      	mov	r0, r4
    48a2:	f007 fed5 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    48a6:	7923      	ldrb	r3, [r4, #4]
    48a8:	f043 0303 	orr.w	r3, r3, #3
    48ac:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    48ae:	2301      	movs	r3, #1
    48b0:	7163      	strb	r3, [r4, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    48b2:	4621      	mov	r1, r4
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
    48b4:	230b      	movs	r3, #11
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    48b6:	4628      	mov	r0, r5
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
    48b8:	71e3      	strb	r3, [r4, #7]
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
}
    48ba:	46bd      	mov	sp, r7
    48bc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;

	ctrl_tx_enqueue(conn, node_tx);
    48c0:	f7ff bf4c 	b.w	475c <ctrl_tx_enqueue>
    48c4:	20000dac 	.word	0x20000dac
    48c8:	0000dd4e 	.word	0x0000dd4e
    48cc:	0000dd53 	.word	0x0000dd53
    48d0:	0000dd04 	.word	0x0000dd04
    48d4:	0000f12a 	.word	0x0000f12a
    48d8:	0000dcfd 	.word	0x0000dcfd
    48dc:	0000e3b4 	.word	0x0000e3b4

000048e0 <ticker_op_latency_cancelled>:
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}

static void ticker_op_latency_cancelled(uint32_t ticker_status,
					   void *params)
{
    48e0:	b590      	push	{r4, r7, lr}
    48e2:	b083      	sub	sp, #12
    48e4:	460c      	mov	r4, r1
    48e6:	af02      	add	r7, sp, #8
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    48e8:	b168      	cbz	r0, 4906 <ticker_op_latency_cancelled+0x26>
    48ea:	4b0b      	ldr	r3, [pc, #44]	; (4918 <ticker_op_latency_cancelled+0x38>)
    48ec:	9301      	str	r3, [sp, #4]
    48ee:	4b0b      	ldr	r3, [pc, #44]	; (491c <ticker_op_latency_cancelled+0x3c>)
    48f0:	9300      	str	r3, [sp, #0]
    48f2:	490b      	ldr	r1, [pc, #44]	; (4920 <ticker_op_latency_cancelled+0x40>)
    48f4:	4b0b      	ldr	r3, [pc, #44]	; (4924 <ticker_op_latency_cancelled+0x44>)
    48f6:	4a0c      	ldr	r2, [pc, #48]	; (4928 <ticker_op_latency_cancelled+0x48>)
    48f8:	480c      	ldr	r0, [pc, #48]	; (492c <ticker_op_latency_cancelled+0x4c>)
    48fa:	f7fc fc57 	bl	11ac <printk>
    48fe:	2100      	movs	r1, #0
    4900:	4608      	mov	r0, r1
    4902:	f007 fea5 	bl	c650 <_SysFatalErrorHandler>

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    4906:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
}
    490a:	3704      	adds	r7, #4
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);

	conn = (struct connection *)params;
	conn->role.slave.latency_cancel = 0;
    490c:	f36f 1304 	bfc	r3, #4, #1
    4910:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
    4914:	46bd      	mov	sp, r7
    4916:	bd90      	pop	{r4, r7, pc}
    4918:	0000dd4e 	.word	0x0000dd4e
    491c:	0000dd53 	.word	0x0000dd53
    4920:	0000dd04 	.word	0x0000dd04
    4924:	0000f1e4 	.word	0x0000f1e4
    4928:	0000dcfd 	.word	0x0000dcfd
    492c:	0000e3dd 	.word	0x0000e3dd

00004930 <packet_rx_allocate>:

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(uint8_t max)
{
    4930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    4934:	4d20      	ldr	r5, [pc, #128]	; (49b8 <packet_rx_allocate+0x88>)
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    4936:	f895 424e 	ldrb.w	r4, [r5, #590]	; 0x24e

static void packet_rx_allocate(uint8_t max)
{
	uint8_t acquire;

	if (max > _radio.link_rx_data_quota) {
    493a:	f895 6260 	ldrb.w	r6, [r5, #608]	; 0x260
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
    493e:	f895 324c 	ldrb.w	r3, [r5, #588]	; 0x24c

	if (max > _radio.link_rx_data_quota) {
		max = _radio.link_rx_data_quota;
	}

	acquire = _radio.packet_rx_acquire + 1;
    4942:	3401      	adds	r4, #1
    4944:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
    4946:	42a3      	cmp	r3, r4
    4948:	bf08      	it	eq
    494a:	2400      	moveq	r4, #0
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
			acquire = 0;
    494c:	4286      	cmp	r6, r0

	*pdu_data_tx = _pdu_data_tx;
}

static void packet_rx_allocate(uint8_t max)
{
    494e:	af00      	add	r7, sp, #0
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
			acquire = 0;
    4950:	bf28      	it	cs
    4952:	4606      	movcs	r6, r0
	acquire = _radio.packet_rx_acquire + 1;
	if (acquire == _radio.packet_rx_count) {
		acquire = 0;
	}

	while ((max--) && (acquire != _radio.packet_rx_last)) {
    4954:	46a9      	mov	r9, r5
    4956:	b366      	cbz	r6, 49b2 <packet_rx_allocate+0x82>
    4958:	f895 324d 	ldrb.w	r3, [r5, #589]	; 0x24d
    495c:	429c      	cmp	r4, r3
    495e:	d028      	beq.n	49b2 <packet_rx_allocate+0x82>
		void *link;
		struct radio_pdu_node_rx *radio_pdu_node_rx;

		link = mem_acquire(&_radio.link_rx_free);
    4960:	4816      	ldr	r0, [pc, #88]	; (49bc <packet_rx_allocate+0x8c>)
    4962:	f7fe f8c8 	bl	2af6 <mem_acquire>
		if (!link) {
    4966:	4680      	mov	r8, r0
    4968:	b318      	cbz	r0, 49b2 <packet_rx_allocate+0x82>
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
    496a:	4815      	ldr	r0, [pc, #84]	; (49c0 <packet_rx_allocate+0x90>)
    496c:	f7fe f8c3 	bl	2af6 <mem_acquire>
		if (!radio_pdu_node_rx) {
    4970:	b930      	cbnz	r0, 4980 <packet_rx_allocate+0x50>
			mem_release(link, &_radio.link_rx_free);
    4972:	4912      	ldr	r1, [pc, #72]	; (49bc <packet_rx_allocate+0x8c>)
    4974:	4640      	mov	r0, r8
			acquire = 0;
		}

		_radio.link_rx_data_quota--;
	}
}
    4976:	46bd      	mov	sp, r7
    4978:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			break;
		}

		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
		if (!radio_pdu_node_rx) {
			mem_release(link, &_radio.link_rx_free);
    497c:	f7fe b8d7 	b.w	2b2e <mem_release>
			break;
		}

		radio_pdu_node_rx->hdr.onion.link = link;
    4980:	f8c0 8000 	str.w	r8, [r0]

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
    4984:	f899 224e 	ldrb.w	r2, [r9, #590]	; 0x24e
    4988:	f8d9 3248 	ldr.w	r3, [r9, #584]	; 0x248
    498c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		_radio.packet_rx_acquire = acquire;
    4990:	f889 424e 	strb.w	r4, [r9, #590]	; 0x24e

		acquire = _radio.packet_rx_acquire + 1;
		if (acquire == _radio.packet_rx_count) {
    4994:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
		radio_pdu_node_rx->hdr.onion.link = link;

		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
		_radio.packet_rx_acquire = acquire;

		acquire = _radio.packet_rx_acquire + 1;
    4998:	3401      	adds	r4, #1
    499a:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
			acquire = 0;
    499c:	42a3      	cmp	r3, r4
    499e:	bf08      	it	eq
    49a0:	2400      	moveq	r4, #0
		}

		_radio.link_rx_data_quota--;
    49a2:	f895 3260 	ldrb.w	r3, [r5, #608]	; 0x260
    49a6:	3e01      	subs	r6, #1
    49a8:	3b01      	subs	r3, #1
    49aa:	f885 3260 	strb.w	r3, [r5, #608]	; 0x260
    49ae:	b2f6      	uxtb	r6, r6
    49b0:	e7d1      	b.n	4956 <packet_rx_allocate+0x26>
    49b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    49b6:	bf00      	nop
    49b8:	20000b44 	.word	0x20000b44
    49bc:	20000d98 	.word	0x20000d98
    49c0:	20000d80 	.word	0x20000d80

000049c4 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    49c4:	b5b0      	push	{r4, r5, r7, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    49c6:	4c38      	ldr	r4, [pc, #224]	; (4aa8 <common_init+0xe4>)
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    49c8:	b082      	sub	sp, #8
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    49ca:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    49ce:	af02      	add	r7, sp, #8
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    49d0:	b142      	cbz	r2, 49e4 <common_init+0x20>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    49d2:	f504 7307 	add.w	r3, r4, #540	; 0x21c
    49d6:	f44f 7188 	mov.w	r1, #272	; 0x110
    49da:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
    49de:	f7fe f85f 	bl	2aa0 <mem_init>
    49e2:	e001      	b.n	49e8 <common_init+0x24>
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    49e4:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
    49e8:	4b30      	ldr	r3, [pc, #192]	; (4aac <common_init+0xe8>)
    49ea:	f894 2246 	ldrb.w	r2, [r4, #582]	; 0x246
    49ee:	f8b4 1244 	ldrh.w	r1, [r4, #580]	; 0x244
    49f2:	f8d4 0238 	ldr.w	r0, [r4, #568]	; 0x238
    49f6:	f7fe f853 	bl	2aa0 <mem_init>
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    49fa:	f894 124c 	ldrb.w	r1, [r4, #588]	; 0x24c
    49fe:	f894 2220 	ldrb.w	r2, [r4, #544]	; 0x220
    4a02:	4b2b      	ldr	r3, [pc, #172]	; (4ab0 <common_init+0xec>)
    4a04:	f8d4 0250 	ldr.w	r0, [r4, #592]	; 0x250
    4a08:	440a      	add	r2, r1
    4a0a:	2108      	movs	r1, #8
    4a0c:	f7fe f848 	bl	2aa0 <mem_init>
		 (_radio.packet_rx_count + _radio.connection_count),
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4a10:	4b28      	ldr	r3, [pc, #160]	; (4ab4 <common_init+0xf0>)
    4a12:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4a16:	2202      	movs	r2, #2
    4a18:	2124      	movs	r1, #36	; 0x24
    4a1a:	f7fe f841 	bl	2aa0 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4a1e:	f894 2280 	ldrb.w	r2, [r4, #640]	; 0x280
    4a22:	4b25      	ldr	r3, [pc, #148]	; (4ab8 <common_init+0xf4>)
    4a24:	f8b4 1274 	ldrh.w	r1, [r4, #628]	; 0x274
    4a28:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    4a2c:	3a01      	subs	r2, #1
    4a2e:	b292      	uxth	r2, r2
    4a30:	f7fe f836 	bl	2aa0 <mem_init>
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4a34:	481e      	ldr	r0, [pc, #120]	; (4ab0 <common_init+0xec>)
    4a36:	f7fe f85e 	bl	2af6 <mem_acquire>
	LL_ASSERT(link);
    4a3a:	4605      	mov	r5, r0
    4a3c:	b968      	cbnz	r0, 4a5a <common_init+0x96>
    4a3e:	4b1f      	ldr	r3, [pc, #124]	; (4abc <common_init+0xf8>)
    4a40:	9301      	str	r3, [sp, #4]
    4a42:	4b1f      	ldr	r3, [pc, #124]	; (4ac0 <common_init+0xfc>)
    4a44:	9300      	str	r3, [sp, #0]
    4a46:	491f      	ldr	r1, [pc, #124]	; (4ac4 <common_init+0x100>)
    4a48:	4b1f      	ldr	r3, [pc, #124]	; (4ac8 <common_init+0x104>)
    4a4a:	4a20      	ldr	r2, [pc, #128]	; (4acc <common_init+0x108>)
    4a4c:	4820      	ldr	r0, [pc, #128]	; (4ad0 <common_init+0x10c>)
    4a4e:	f7fc fbad 	bl	11ac <printk>
    4a52:	4629      	mov	r1, r5
    4a54:	4628      	mov	r0, r5
    4a56:	f007 fdfb 	bl	c650 <_SysFatalErrorHandler>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4a5a:	4a1e      	ldr	r2, [pc, #120]	; (4ad4 <common_init+0x110>)
    4a5c:	4628      	mov	r0, r5
    4a5e:	1f11      	subs	r1, r2, #4
    4a60:	f7fe f89d 	bl	2b9e <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;
    4a64:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    4a68:	f043 0307 	orr.w	r3, r3, #7
    4a6c:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	/* initialise connection channel map */
	_radio.data_channel_map[0] = 0xFF;
	_radio.data_channel_map[1] = 0xFF;
	_radio.data_channel_map[2] = 0xFF;
	_radio.data_channel_map[3] = 0xFF;
	_radio.data_channel_map[4] = 0x1F;
    4a70:	231f      	movs	r3, #31
    4a72:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	_radio.data_channel_count = 37;
    4a76:	2325      	movs	r3, #37	; 0x25
    4a78:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4a7c:	231b      	movs	r3, #27

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;

	/* initialise connection channel map */
	_radio.data_channel_map[0] = 0xFF;
    4a7e:	20ff      	movs	r0, #255	; 0xff
	_radio.data_channel_map[4] = 0x1F;
	_radio.data_channel_count = 37;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4a80:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    4a84:	f44f 73a4 	mov.w	r3, #328	; 0x148

	/* initialise advertiser channel map */
	_radio.advertiser.chl_map = 0x07;

	/* initialise connection channel map */
	_radio.data_channel_map[0] = 0xFF;
    4a88:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	_radio.data_channel_map[1] = 0xFF;
    4a8c:	f884 022b 	strb.w	r0, [r4, #555]	; 0x22b
	_radio.data_channel_map[2] = 0xFF;
    4a90:	f884 022c 	strb.w	r0, [r4, #556]	; 0x22c
	_radio.data_channel_map[3] = 0xFF;
    4a94:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	_radio.data_channel_count = 37;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
    4a98:	f8a4 3234 	strh.w	r3, [r4, #564]	; 0x234
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
}
    4a9c:	46bd      	mov	sp, r7
    4a9e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
	_radio.default_tx_time = RADIO_LL_LENGTH_TIME_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4aa2:	f7ff bf45 	b.w	4930 <packet_rx_allocate>
    4aa6:	bf00      	nop
    4aa8:	20000b44 	.word	0x20000b44
    4aac:	20000d80 	.word	0x20000d80
    4ab0:	20000d98 	.word	0x20000d98
    4ab4:	20000dac 	.word	0x20000dac
    4ab8:	20000db4 	.word	0x20000db4
    4abc:	0000dd4e 	.word	0x0000dd4e
    4ac0:	0000dd53 	.word	0x0000dd53
    4ac4:	0000dd04 	.word	0x0000dd04
    4ac8:	0000f109 	.word	0x0000f109
    4acc:	0000dcfd 	.word	0x0000dcfd
    4ad0:	0000e411 	.word	0x0000e411
    4ad4:	20000da0 	.word	0x20000da0

00004ad8 <tx_cmplt_get>:
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    4ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t _first;
	uint8_t cmplt;

	_first = *first;
    4adc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
    4ade:	4294      	cmp	r4, r2
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    4ae0:	af00      	add	r7, sp, #0
    4ae2:	4682      	mov	sl, r0
    4ae4:	4688      	mov	r8, r1
    4ae6:	4691      	mov	r9, r2
	uint8_t _first;
	uint8_t cmplt;

	_first = *first;
	if (_first == last) {
    4ae8:	d03c      	beq.n	4b64 <tx_cmplt_get+0x8c>
		return 0;
	}

	cmplt = 0;
	*handle = _radio.pkt_release[_first].handle;
    4aea:	4e20      	ldr	r6, [pc, #128]	; (4b6c <tx_cmplt_get+0x94>)
    4aec:	f8d6 327c 	ldr.w	r3, [r6, #636]	; 0x27c
    4af0:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
    4af4:	8003      	strh	r3, [r0, #0]
	_first = *first;
	if (_first == last) {
		return 0;
	}

	cmplt = 0;
    4af6:	2500      	movs	r5, #0
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    4af8:	f04f 0b01 	mov.w	fp, #1
	*handle = _radio.pkt_release[_first].handle;
	do {
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_data_tx;

		if (*handle != _radio.pkt_release[_first].handle) {
    4afc:	b222      	sxth	r2, r4
    4afe:	f8d6 027c 	ldr.w	r0, [r6, #636]	; 0x27c
    4b02:	f8ba e000 	ldrh.w	lr, [sl]
    4b06:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    4b0a:	f830 2032 	ldrh.w	r2, [r0, r2, lsl #3]
    4b0e:	4596      	cmp	lr, r2
    4b10:	d123      	bne.n	4b5a <tx_cmplt_get+0x82>
			break;
		}

		node_tx = _radio.pkt_release[_first].node_tx;
    4b12:	6848      	ldr	r0, [r1, #4]
		/*@FIXME: assign before first 3 if conditions */
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
    4b14:	2801      	cmp	r0, #1
    4b16:	f020 0303 	bic.w	r3, r0, #3
    4b1a:	d90a      	bls.n	4b32 <tx_cmplt_get+0x5a>
    4b1c:	b173      	cbz	r3, 4b3c <tx_cmplt_get+0x64>
		    ((((uint32_t)node_tx & ~(0x00000003)) != 0) &&
    4b1e:	1d02      	adds	r2, r0, #4
    4b20:	d00c      	beq.n	4b3c <tx_cmplt_get+0x64>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
    4b22:	7942      	ldrb	r2, [r0, #5]
    4b24:	b152      	cbz	r2, 4b3c <tx_cmplt_get+0x64>
    4b26:	7902      	ldrb	r2, [r0, #4]
    4b28:	f002 0203 	and.w	r2, r2, #3
    4b2c:	3a01      	subs	r2, #1
    4b2e:	2a01      	cmp	r2, #1
    4b30:	d804      	bhi.n	4b3c <tx_cmplt_get+0x64>

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    4b32:	3501      	adds	r5, #1
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
		      (pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_CONTINUE)))) {

			/* data packet, hence count num cmplt */
			_radio.pkt_release[_first].node_tx =
    4b34:	f8c1 b004 	str.w	fp, [r1, #4]
				(struct radio_pdu_node_tx *)1;

			cmplt++;
    4b38:	b2ed      	uxtb	r5, r5
    4b3a:	e001      	b.n	4b40 <tx_cmplt_get+0x68>
		} else {
			/* ctrl packet, hence not num cmplt */
			_radio.pkt_release[_first].node_tx =
    4b3c:	2202      	movs	r2, #2
    4b3e:	604a      	str	r2, [r1, #4]
				(struct radio_pdu_node_tx *)2;
		}

		if (((uint32_t)node_tx & ~(0x00000003)) != 0) {
    4b40:	b113      	cbz	r3, 4b48 <tx_cmplt_get+0x70>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
    4b42:	490b      	ldr	r1, [pc, #44]	; (4b70 <tx_cmplt_get+0x98>)
    4b44:	f7fd fff3 	bl	2b2e <mem_release>
		}

		_first = _first + 1;
    4b48:	3401      	adds	r4, #1
		if (_first == _radio.packet_tx_count) {
    4b4a:	f896 2280 	ldrb.w	r2, [r6, #640]	; 0x280

		if (((uint32_t)node_tx & ~(0x00000003)) != 0) {
			mem_release(node_tx, &_radio.pkt_tx_data_free);
		}

		_first = _first + 1;
    4b4e:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
			_first = 0;
    4b50:	42a2      	cmp	r2, r4
    4b52:	bf08      	it	eq
    4b54:	2400      	moveq	r4, #0
		}

	} while (_first != last);
    4b56:	454c      	cmp	r4, r9
    4b58:	d1d0      	bne.n	4afc <tx_cmplt_get+0x24>

	*first = _first;
    4b5a:	f888 4000 	strb.w	r4, [r8]

	return cmplt;
    4b5e:	4628      	mov	r0, r5
    4b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t _first;
	uint8_t cmplt;

	_first = *first;
	if (_first == last) {
		return 0;
    4b64:	2000      	movs	r0, #0
	} while (_first != last);

	*first = _first;

	return cmplt;
}
    4b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b6a:	bf00      	nop
    4b6c:	20000b44 	.word	0x20000b44
    4b70:	20000db4 	.word	0x20000db4

00004b74 <connection_get>:

	return 0;
}

static struct connection *connection_get(uint16_t handle)
{
    4b74:	b598      	push	{r3, r4, r7, lr}
	struct connection *conn;

	if (handle < _radio.connection_count) {
    4b76:	4b0a      	ldr	r3, [pc, #40]	; (4ba0 <connection_get+0x2c>)
    4b78:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
    4b7c:	4282      	cmp	r2, r0

	return 0;
}

static struct connection *connection_get(uint16_t handle)
{
    4b7e:	af00      	add	r7, sp, #0
    4b80:	4604      	mov	r4, r0
	struct connection *conn;

	if (handle < _radio.connection_count) {
    4b82:	d90a      	bls.n	4b9a <connection_get+0x26>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
    4b84:	4602      	mov	r2, r0
    4b86:	f44f 7188 	mov.w	r1, #272	; 0x110
    4b8a:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    4b8e:	f7fd ffee 	bl	2b6e <mem_get>
		if ((conn) && (conn->handle == handle)) {
    4b92:	b110      	cbz	r0, 4b9a <connection_get+0x26>
    4b94:	8c03      	ldrh	r3, [r0, #32]
    4b96:	42a3      	cmp	r3, r4
    4b98:	d000      	beq.n	4b9c <connection_get+0x28>
			return conn;
		}
	}

	return 0;
    4b9a:	2000      	movs	r0, #0
}
    4b9c:	bd98      	pop	{r3, r4, r7, pc}
    4b9e:	bf00      	nop
    4ba0:	20000b44 	.word	0x20000b44

00004ba4 <role_disable>:

}

static uint32_t role_disable(uint8_t ticker_id_primary,
			     uint8_t ticker_id_stop)
{
    4ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t volatile ticker_status;
	uint32_t ticks_xtal_to_start = 0;
	uint32_t ticks_active_to_start = 0;

	switch (ticker_id_primary) {
    4ba8:	2805      	cmp	r0, #5

}

static uint32_t role_disable(uint8_t ticker_id_primary,
			     uint8_t ticker_id_stop)
{
    4baa:	b086      	sub	sp, #24
    4bac:	4604      	mov	r4, r0
    4bae:	af02      	add	r7, sp, #8
    4bb0:	468a      	mov	sl, r1
	uint32_t volatile ticker_status;
	uint32_t ticks_xtal_to_start = 0;
	uint32_t ticks_active_to_start = 0;

	switch (ticker_id_primary) {
    4bb2:	d007      	beq.n	4bc4 <role_disable+0x20>
    4bb4:	2806      	cmp	r0, #6
    4bb6:	d10b      	bne.n	4bd0 <role_disable+0x2c>
		ticks_active_to_start =
			_radio.advertiser.hdr.ticks_active_to_start;
		break;

	case RADIO_TICKER_ID_OBS:
		ticks_xtal_to_start =
    4bb8:	4b9e      	ldr	r3, [pc, #632]	; (4e34 <role_disable+0x290>)
    4bba:	f8d3 91b0 	ldr.w	r9, [r3, #432]	; 0x1b0
			_radio.observer.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    4bbe:	f8d3 61b4 	ldr.w	r6, [r3, #436]	; 0x1b4
			_radio.observer.hdr.ticks_active_to_start;
		break;
    4bc2:	e022      	b.n	4c0a <role_disable+0x66>
	uint32_t ticks_xtal_to_start = 0;
	uint32_t ticks_active_to_start = 0;

	switch (ticker_id_primary) {
	case RADIO_TICKER_ID_ADV:
		ticks_xtal_to_start =
    4bc4:	4b9b      	ldr	r3, [pc, #620]	; (4e34 <role_disable+0x290>)
    4bc6:	f8d3 90c4 	ldr.w	r9, [r3, #196]	; 0xc4
			_radio.advertiser.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
    4bca:	f8d3 60c8 	ldr.w	r6, [r3, #200]	; 0xc8
			_radio.advertiser.hdr.ticks_active_to_start;
		break;
    4bce:	e01c      	b.n	4c0a <role_disable+0x66>
			_radio.observer.hdr.ticks_xtal_to_start;
		ticks_active_to_start =
			_radio.observer.hdr.ticks_active_to_start;
		break;
	default:
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    4bd0:	d90b      	bls.n	4bea <role_disable+0x46>
			struct connection *conn;
			uint16_t conn_handle;

			conn_handle = ticker_id_primary -
				      RADIO_TICKER_ID_FIRST_CONNECTION;
			conn = connection_get(conn_handle);
    4bd2:	3807      	subs	r0, #7
    4bd4:	b280      	uxth	r0, r0
    4bd6:	f7ff ffcd 	bl	4b74 <connection_get>
			if (!conn) {
    4bda:	b910      	cbnz	r0, 4be2 <role_disable+0x3e>
				return 1;
    4bdc:	f04f 0801 	mov.w	r8, #1
    4be0:	e122      	b.n	4e28 <role_disable+0x284>
			}

			ticks_xtal_to_start =
    4be2:	f8d0 9000 	ldr.w	r9, [r0]
				conn->hdr.ticks_xtal_to_start;
			ticks_active_to_start =
    4be6:	6846      	ldr	r6, [r0, #4]
    4be8:	e00f      	b.n	4c0a <role_disable+0x66>
				conn->hdr.ticks_active_to_start;
		} else {
			BT_ASSERT(0);
    4bea:	4b93      	ldr	r3, [pc, #588]	; (4e38 <role_disable+0x294>)
    4bec:	9301      	str	r3, [sp, #4]
    4bee:	4b93      	ldr	r3, [pc, #588]	; (4e3c <role_disable+0x298>)
    4bf0:	9300      	str	r3, [sp, #0]
    4bf2:	4a93      	ldr	r2, [pc, #588]	; (4e40 <role_disable+0x29c>)
    4bf4:	4b93      	ldr	r3, [pc, #588]	; (4e44 <role_disable+0x2a0>)
    4bf6:	4994      	ldr	r1, [pc, #592]	; (4e48 <role_disable+0x2a4>)
    4bf8:	4894      	ldr	r0, [pc, #592]	; (4e4c <role_disable+0x2a8>)
    4bfa:	f7fc fad7 	bl	11ac <printk>
    4bfe:	2100      	movs	r1, #0
    4c00:	4608      	mov	r0, r1
    4c02:	f007 fd25 	bl	c650 <_SysFatalErrorHandler>
static uint32_t role_disable(uint8_t ticker_id_primary,
			     uint8_t ticker_id_stop)
{
	uint32_t volatile ticker_status;
	uint32_t ticks_xtal_to_start = 0;
	uint32_t ticks_active_to_start = 0;
    4c06:	2600      	movs	r6, #0

static uint32_t role_disable(uint8_t ticker_id_primary,
			     uint8_t ticker_id_stop)
{
	uint32_t volatile ticker_status;
	uint32_t ticks_xtal_to_start = 0;
    4c08:	46b1      	mov	r9, r6
		break;
	}

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ticker_status =
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c0a:	4b91      	ldr	r3, [pc, #580]	; (4e50 <role_disable+0x2ac>)
    4c0c:	9700      	str	r7, [sp, #0]
    4c0e:	4622      	mov	r2, r4
    4c10:	2103      	movs	r1, #3
    4c12:	2000      	movs	r0, #0
    4c14:	f7ff fbf4 	bl	4400 <ticker_stop>
		}
		break;
	}

	/* Step 1: Is Primary started? Stop the Primary ticker */
	ticker_status =
    4c18:	6038      	str	r0, [r7, #0]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_APP,
			    ticker_id_primary, ticker_if_done,
			    (void *)&ticker_status);

	if (ticker_status == TICKER_STATUS_BUSY) {
    4c1a:	683b      	ldr	r3, [r7, #0]
    4c1c:	2b02      	cmp	r3, #2
    4c1e:	d005      	beq.n	4c2c <role_disable+0x88>
		while (ticker_status == TICKER_STATUS_BUSY) {
			cpu_sleep();
		}
	}

	if (ticker_status != TICKER_STATUS_SUCCESS) {
    4c20:	f8d7 8000 	ldr.w	r8, [r7]
    4c24:	f1b8 0f00 	cmp.w	r8, #0
    4c28:	d00f      	beq.n	4c4a <role_disable+0xa6>
    4c2a:	e7d7      	b.n	4bdc <role_disable+0x38>
			    ticker_id_primary, ticker_if_done,
			    (void *)&ticker_status);

	if (ticker_status == TICKER_STATUS_BUSY) {
		/* if inside our event, enable Job. */
		if (_radio.ticker_id_event == ticker_id_primary) {
    4c2c:	4b81      	ldr	r3, [pc, #516]	; (4e34 <role_disable+0x290>)
    4c2e:	7b5b      	ldrb	r3, [r3, #13]
    4c30:	429c      	cmp	r4, r3
    4c32:	d104      	bne.n	4c3e <role_disable+0x9a>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4c34:	2201      	movs	r2, #1
    4c36:	4611      	mov	r1, r2
    4c38:	4610      	mov	r0, r2
    4c3a:	f006 fb5b 	bl	b2f4 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);
		}

		/** @todo design to avoid this wait */
		while (ticker_status == TICKER_STATUS_BUSY) {
    4c3e:	683b      	ldr	r3, [r7, #0]
    4c40:	2b02      	cmp	r3, #2
    4c42:	d1ed      	bne.n	4c20 <role_disable+0x7c>
			cpu_sleep();
    4c44:	f7ff fcb6 	bl	45b4 <cpu_sleep>
    4c48:	e7f9      	b.n	4c3e <role_disable+0x9a>
	if (ticker_status != TICKER_STATUS_SUCCESS) {
		return 1;
	}

	/* Inside our event, gracefully handle XTAL and Radio actives */
	if ((_radio.ticker_id_prepare == ticker_id_primary)
    4c4a:	4d7a      	ldr	r5, [pc, #488]	; (4e34 <role_disable+0x290>)
    4c4c:	7b2b      	ldrb	r3, [r5, #12]
    4c4e:	429c      	cmp	r4, r3
    4c50:	d003      	beq.n	4c5a <role_disable+0xb6>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
    4c52:	7b6b      	ldrb	r3, [r5, #13]
    4c54:	429c      	cmp	r4, r3
    4c56:	f040 80e7 	bne.w	4e28 <role_disable+0x284>
		mayfly_radio_inactive};
	uint32_t volatile ticker_status_event;

	/* Step 2: Is caller before Event? Stop Event */
	ticker_status_event =
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4c5a:	1d3b      	adds	r3, r7, #4
    4c5c:	2200      	movs	r2, #0
    4c5e:	9300      	str	r3, [sp, #0]
    4c60:	2103      	movs	r1, #3
    4c62:	4b7b      	ldr	r3, [pc, #492]	; (4e50 <role_disable+0x2ac>)
    4c64:	4610      	mov	r0, r2
    4c66:	f7ff fbcb 	bl	4400 <ticker_stop>
	static struct mayfly s_mfy_radio_inactive = {0, 0, s_link, 0,
		mayfly_radio_inactive};
	uint32_t volatile ticker_status_event;

	/* Step 2: Is caller before Event? Stop Event */
	ticker_status_event =
    4c6a:	6078      	str	r0, [r7, #4]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_APP, RADIO_TICKER_ID_EVENT,
			    ticker_if_done, (void *)&ticker_status_event);

	if (ticker_status_event == TICKER_STATUS_BUSY) {
    4c6c:	687b      	ldr	r3, [r7, #4]
    4c6e:	2b02      	cmp	r3, #2
    4c70:	d115      	bne.n	4c9e <role_disable+0xfa>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4c72:	2201      	movs	r2, #1
    4c74:	4611      	mov	r1, r2
    4c76:	4610      	mov	r0, r2
    4c78:	f006 fb3c 	bl	b2f4 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 1);

		LL_ASSERT(ticker_status_event != TICKER_STATUS_BUSY);
    4c7c:	687b      	ldr	r3, [r7, #4]
    4c7e:	2b02      	cmp	r3, #2
    4c80:	d10d      	bne.n	4c9e <role_disable+0xfa>
    4c82:	4b6d      	ldr	r3, [pc, #436]	; (4e38 <role_disable+0x294>)
    4c84:	9301      	str	r3, [sp, #4]
    4c86:	4b6d      	ldr	r3, [pc, #436]	; (4e3c <role_disable+0x298>)
    4c88:	9300      	str	r3, [sp, #0]
    4c8a:	496f      	ldr	r1, [pc, #444]	; (4e48 <role_disable+0x2a4>)
    4c8c:	4b71      	ldr	r3, [pc, #452]	; (4e54 <role_disable+0x2b0>)
    4c8e:	4a6c      	ldr	r2, [pc, #432]	; (4e40 <role_disable+0x29c>)
    4c90:	4871      	ldr	r0, [pc, #452]	; (4e58 <role_disable+0x2b4>)
    4c92:	f7fc fa8b 	bl	11ac <printk>
    4c96:	2100      	movs	r1, #0
    4c98:	4608      	mov	r0, r1
    4c9a:	f007 fcd9 	bl	c650 <_SysFatalErrorHandler>
	}

	if (ticker_status_event == TICKER_STATUS_SUCCESS) {
    4c9e:	687c      	ldr	r4, [r7, #4]
    4ca0:	2c00      	cmp	r4, #0
    4ca2:	d15b      	bne.n	4d5c <role_disable+0x1b8>

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ticker_status_pre_event =
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4ca4:	f107 0308 	add.w	r3, r7, #8
    4ca8:	9300      	str	r3, [sp, #0]
    4caa:	2201      	movs	r2, #1
    4cac:	4b68      	ldr	r3, [pc, #416]	; (4e50 <role_disable+0x2ac>)
    4cae:	2103      	movs	r1, #3
    4cb0:	4620      	mov	r0, r4
    4cb2:	f7ff fba5 	bl	4400 <ticker_stop>
		uint32_t volatile ticker_status_pre_event;

		/* Step 2.1: Is caller between Primary and Marker0?
		 * Stop the Marker0 event
		 */
		ticker_status_pre_event =
    4cb6:	60b8      	str	r0, [r7, #8]
				    RADIO_TICKER_USER_ID_APP,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_if_done,
				    (void *)&ticker_status_pre_event);

		if (ticker_status_pre_event == TICKER_STATUS_BUSY) {
    4cb8:	68bb      	ldr	r3, [r7, #8]
    4cba:	2b02      	cmp	r3, #2
    4cbc:	d115      	bne.n	4cea <role_disable+0x146>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4cbe:	2201      	movs	r2, #1
    4cc0:	4611      	mov	r1, r2
    4cc2:	4610      	mov	r0, r2
    4cc4:	f006 fb16 	bl	b2f4 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ticker_status_event != TICKER_STATUS_BUSY);
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	2b02      	cmp	r3, #2
    4ccc:	d10d      	bne.n	4cea <role_disable+0x146>
    4cce:	4b5a      	ldr	r3, [pc, #360]	; (4e38 <role_disable+0x294>)
    4cd0:	9301      	str	r3, [sp, #4]
    4cd2:	4b5a      	ldr	r3, [pc, #360]	; (4e3c <role_disable+0x298>)
    4cd4:	9300      	str	r3, [sp, #0]
    4cd6:	495c      	ldr	r1, [pc, #368]	; (4e48 <role_disable+0x2a4>)
    4cd8:	4b5e      	ldr	r3, [pc, #376]	; (4e54 <role_disable+0x2b0>)
    4cda:	4a59      	ldr	r2, [pc, #356]	; (4e40 <role_disable+0x29c>)
    4cdc:	485e      	ldr	r0, [pc, #376]	; (4e58 <role_disable+0x2b4>)
    4cde:	f7fc fa65 	bl	11ac <printk>
    4ce2:	4621      	mov	r1, r4
    4ce4:	4620      	mov	r0, r4
    4ce6:	f007 fcb3 	bl	c650 <_SysFatalErrorHandler>
		}

		if (ticker_status_pre_event == TICKER_STATUS_SUCCESS) {
    4cea:	68ba      	ldr	r2, [r7, #8]
    4cec:	b9e2      	cbnz	r2, 4d28 <role_disable+0x184>
			/* Step 2.1.1: Check and deassert Radio Active or XTAL
			 * start
			 */
			if (ticks_active_to_start > ticks_xtal_to_start) {
    4cee:	45b1      	cmp	r9, r6
    4cf0:	d218      	bcs.n	4d24 <role_disable+0x180>
				uint32_t retval;

				/* radio active asserted, handle deasserting
				 * here
				 */
				retval = mayfly_enqueue(
    4cf2:	4b5a      	ldr	r3, [pc, #360]	; (4e5c <role_disable+0x2b8>)
    4cf4:	4611      	mov	r1, r2
    4cf6:	2001      	movs	r0, #1
    4cf8:	f7fd ff9e 	bl	2c38 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_JOB,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
				LL_ASSERT(!retval);
    4cfc:	2800      	cmp	r0, #0
    4cfe:	f000 8093 	beq.w	4e28 <role_disable+0x284>
    4d02:	4b4d      	ldr	r3, [pc, #308]	; (4e38 <role_disable+0x294>)
    4d04:	9301      	str	r3, [sp, #4]
    4d06:	4b4d      	ldr	r3, [pc, #308]	; (4e3c <role_disable+0x298>)
    4d08:	9300      	str	r3, [sp, #0]
    4d0a:	4a4d      	ldr	r2, [pc, #308]	; (4e40 <role_disable+0x29c>)
    4d0c:	4b51      	ldr	r3, [pc, #324]	; (4e54 <role_disable+0x2b0>)
    4d0e:	494e      	ldr	r1, [pc, #312]	; (4e48 <role_disable+0x2a4>)
    4d10:	4853      	ldr	r0, [pc, #332]	; (4e60 <role_disable+0x2bc>)
    4d12:	f7fc fa4b 	bl	11ac <printk>
    4d16:	2100      	movs	r1, #0
    4d18:	4608      	mov	r0, r1
    4d1a:	f007 fc99 	bl	c650 <_SysFatalErrorHandler>

		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	return 0;
    4d1e:	f04f 0800 	mov.w	r8, #0
    4d22:	e081      	b.n	4e28 <role_disable+0x284>
				LL_ASSERT(!retval);
			} else {
				uint32_t retval;

				/* XTAL started, handle XTAL stop here */
				retval = mayfly_enqueue(
    4d24:	4b4f      	ldr	r3, [pc, #316]	; (4e64 <role_disable+0x2c0>)
    4d26:	e7e5      	b.n	4cf4 <role_disable+0x150>
						RADIO_TICKER_USER_ID_JOB,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
				LL_ASSERT(!retval);
			}
		} else if (ticker_status_pre_event == TICKER_STATUS_FAILURE) {
    4d28:	68b8      	ldr	r0, [r7, #8]
    4d2a:	2801      	cmp	r0, #1
    4d2c:	d119      	bne.n	4d62 <role_disable+0x1be>
			uint32_t retval;

			/* Step 2.1.2: Deassert Radio Active and XTAL start */

			/* radio active asserted, handle deasserting here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4d2e:	2200      	movs	r2, #0
    4d30:	4b4a      	ldr	r3, [pc, #296]	; (4e5c <role_disable+0x2b8>)
    4d32:	4611      	mov	r1, r2
    4d34:	f7fd ff80 	bl	2c38 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_inactive);
			LL_ASSERT(!retval);
    4d38:	b168      	cbz	r0, 4d56 <role_disable+0x1b2>
    4d3a:	4b3f      	ldr	r3, [pc, #252]	; (4e38 <role_disable+0x294>)
    4d3c:	9301      	str	r3, [sp, #4]
    4d3e:	4b3f      	ldr	r3, [pc, #252]	; (4e3c <role_disable+0x298>)
    4d40:	9300      	str	r3, [sp, #0]
    4d42:	4941      	ldr	r1, [pc, #260]	; (4e48 <role_disable+0x2a4>)
    4d44:	4b43      	ldr	r3, [pc, #268]	; (4e54 <role_disable+0x2b0>)
    4d46:	4a3e      	ldr	r2, [pc, #248]	; (4e40 <role_disable+0x29c>)
    4d48:	4845      	ldr	r0, [pc, #276]	; (4e60 <role_disable+0x2bc>)
    4d4a:	f7fc fa2f 	bl	11ac <printk>
    4d4e:	2100      	movs	r1, #0
    4d50:	4608      	mov	r0, r1
    4d52:	f007 fc7d 	bl	c650 <_SysFatalErrorHandler>

			/* XTAL started, handle XTAL stop here */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4d56:	4b43      	ldr	r3, [pc, #268]	; (4e64 <role_disable+0x2c0>)
    4d58:	2200      	movs	r2, #0
    4d5a:	e7cb      	b.n	4cf4 <role_disable+0x150>
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
		} else {
			LL_ASSERT(0);
		}
	} else if (ticker_status_event == TICKER_STATUS_FAILURE) {
    4d5c:	687c      	ldr	r4, [r7, #4]
    4d5e:	2c01      	cmp	r4, #1
    4d60:	d00e      	beq.n	4d80 <role_disable+0x1dc>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
		} else {
			LL_ASSERT(0);
    4d62:	4b35      	ldr	r3, [pc, #212]	; (4e38 <role_disable+0x294>)
    4d64:	9301      	str	r3, [sp, #4]
    4d66:	4b35      	ldr	r3, [pc, #212]	; (4e3c <role_disable+0x298>)
    4d68:	9300      	str	r3, [sp, #0]
    4d6a:	4a35      	ldr	r2, [pc, #212]	; (4e40 <role_disable+0x29c>)
    4d6c:	4b39      	ldr	r3, [pc, #228]	; (4e54 <role_disable+0x2b0>)
    4d6e:	4936      	ldr	r1, [pc, #216]	; (4e48 <role_disable+0x2a4>)
    4d70:	4836      	ldr	r0, [pc, #216]	; (4e4c <role_disable+0x2a8>)
    4d72:	f7fc fa1b 	bl	11ac <printk>
    4d76:	2100      	movs	r1, #0
    4d78:	4608      	mov	r0, r1
    4d7a:	f007 fc69 	bl	c650 <_SysFatalErrorHandler>
    4d7e:	e053      	b.n	4e28 <role_disable+0x284>
		 */
		/* Stop ticker "may" be in use for direct adv or observer,
		 * hence stop may fail if ticker not used.
		 */
		ticker_status_stop =
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    4d80:	f107 030c 	add.w	r3, r7, #12
    4d84:	9300      	str	r3, [sp, #0]
    4d86:	4652      	mov	r2, sl
    4d88:	4b31      	ldr	r3, [pc, #196]	; (4e50 <role_disable+0x2ac>)
    4d8a:	2103      	movs	r1, #3
    4d8c:	2000      	movs	r0, #0
    4d8e:	f7ff fb37 	bl	4400 <ticker_stop>
		 * (role dependent)
		 */
		/* Stop ticker "may" be in use for direct adv or observer,
		 * hence stop may fail if ticker not used.
		 */
		ticker_status_stop =
    4d92:	60f8      	str	r0, [r7, #12]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_APP, ticker_id_stop,
				    ticker_if_done,
				    (void *)&ticker_status_stop);

		if (ticker_status_stop == TICKER_STATUS_BUSY) {
    4d94:	68fb      	ldr	r3, [r7, #12]
    4d96:	2b02      	cmp	r3, #2
    4d98:	d115      	bne.n	4dc6 <role_disable+0x222>
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    4d9a:	4622      	mov	r2, r4
    4d9c:	4621      	mov	r1, r4
    4d9e:	4620      	mov	r0, r4
    4da0:	f006 faa8 	bl	b2f4 <mayfly_enable>
				      RADIO_TICKER_USER_ID_JOB, 1);

			LL_ASSERT(ticker_status_event != TICKER_STATUS_BUSY);
    4da4:	687b      	ldr	r3, [r7, #4]
    4da6:	2b02      	cmp	r3, #2
    4da8:	d10d      	bne.n	4dc6 <role_disable+0x222>
    4daa:	4b23      	ldr	r3, [pc, #140]	; (4e38 <role_disable+0x294>)
    4dac:	9301      	str	r3, [sp, #4]
    4dae:	4b23      	ldr	r3, [pc, #140]	; (4e3c <role_disable+0x298>)
    4db0:	9300      	str	r3, [sp, #0]
    4db2:	4925      	ldr	r1, [pc, #148]	; (4e48 <role_disable+0x2a4>)
    4db4:	4b27      	ldr	r3, [pc, #156]	; (4e54 <role_disable+0x2b0>)
    4db6:	4a22      	ldr	r2, [pc, #136]	; (4e40 <role_disable+0x29c>)
    4db8:	4827      	ldr	r0, [pc, #156]	; (4e58 <role_disable+0x2b4>)
    4dba:	f7fc f9f7 	bl	11ac <printk>
    4dbe:	2100      	movs	r1, #0
    4dc0:	4608      	mov	r0, r1
    4dc2:	f007 fc45 	bl	c650 <_SysFatalErrorHandler>
		}

		LL_ASSERT((ticker_status_stop == TICKER_STATUS_SUCCESS) ||
    4dc6:	68fb      	ldr	r3, [r7, #12]
    4dc8:	b183      	cbz	r3, 4dec <role_disable+0x248>
    4dca:	68fb      	ldr	r3, [r7, #12]
    4dcc:	2b01      	cmp	r3, #1
    4dce:	d00d      	beq.n	4dec <role_disable+0x248>
    4dd0:	4b19      	ldr	r3, [pc, #100]	; (4e38 <role_disable+0x294>)
    4dd2:	9301      	str	r3, [sp, #4]
    4dd4:	4b19      	ldr	r3, [pc, #100]	; (4e3c <role_disable+0x298>)
    4dd6:	9300      	str	r3, [sp, #0]
    4dd8:	491b      	ldr	r1, [pc, #108]	; (4e48 <role_disable+0x2a4>)
    4dda:	4b1e      	ldr	r3, [pc, #120]	; (4e54 <role_disable+0x2b0>)
    4ddc:	4a18      	ldr	r2, [pc, #96]	; (4e40 <role_disable+0x29c>)
    4dde:	4822      	ldr	r0, [pc, #136]	; (4e68 <role_disable+0x2c4>)
    4de0:	f7fc f9e4 	bl	11ac <printk>
    4de4:	2100      	movs	r1, #0
    4de6:	4608      	mov	r0, r1
    4de8:	f007 fc32 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status_stop == TICKER_STATUS_FAILURE));

		if (_radio.role != ROLE_NONE) {
    4dec:	7bab      	ldrb	r3, [r5, #14]
    4dee:	b1db      	cbz	r3, 4e28 <role_disable+0x284>
			static struct mayfly s_mfy_radio_stop = {0, 0, s_link,
				0, mayfly_radio_stop};
			uint32_t retval;

			/* Radio state STOP is supplied in params */
			s_mfy_radio_stop.param = (void *)STATE_STOP;
    4df0:	4b1e      	ldr	r3, [pc, #120]	; (4e6c <role_disable+0x2c8>)
    4df2:	2204      	movs	r2, #4
    4df4:	609a      	str	r2, [r3, #8]

			/* Stop Radio Tx/Rx */
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
    4df6:	2200      	movs	r2, #0
    4df8:	4611      	mov	r1, r2
    4dfa:	2001      	movs	r0, #1
    4dfc:	f7fd ff1c 	bl	2c38 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_radio_stop);
			LL_ASSERT(!retval);
    4e00:	b168      	cbz	r0, 4e1e <role_disable+0x27a>
    4e02:	4b0d      	ldr	r3, [pc, #52]	; (4e38 <role_disable+0x294>)
    4e04:	9301      	str	r3, [sp, #4]
    4e06:	4b0d      	ldr	r3, [pc, #52]	; (4e3c <role_disable+0x298>)
    4e08:	9300      	str	r3, [sp, #0]
    4e0a:	490f      	ldr	r1, [pc, #60]	; (4e48 <role_disable+0x2a4>)
    4e0c:	4b11      	ldr	r3, [pc, #68]	; (4e54 <role_disable+0x2b0>)
    4e0e:	4a0c      	ldr	r2, [pc, #48]	; (4e40 <role_disable+0x29c>)
    4e10:	4813      	ldr	r0, [pc, #76]	; (4e60 <role_disable+0x2bc>)
    4e12:	f7fc f9cb 	bl	11ac <printk>
    4e16:	2100      	movs	r1, #0
    4e18:	4608      	mov	r0, r1
    4e1a:	f007 fc19 	bl	c650 <_SysFatalErrorHandler>

			/* wait for radio ISR to exit */
			while (_radio.role != ROLE_NONE) {
    4e1e:	7bab      	ldrb	r3, [r5, #14]
    4e20:	b113      	cbz	r3, 4e28 <role_disable+0x284>
				cpu_sleep();
    4e22:	f7ff fbc7 	bl	45b4 <cpu_sleep>
    4e26:	e7fa      	b.n	4e1e <role_disable+0x27a>
		role_active_disable(ticker_id_stop,
				    ticks_xtal_to_start, ticks_active_to_start);
	}

	return 0;
}
    4e28:	4640      	mov	r0, r8
    4e2a:	3710      	adds	r7, #16
    4e2c:	46bd      	mov	sp, r7
    4e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e32:	bf00      	nop
    4e34:	20000b44 	.word	0x20000b44
    4e38:	0000dd4e 	.word	0x0000dd4e
    4e3c:	0000dd53 	.word	0x0000dd53
    4e40:	0000dcfd 	.word	0x0000dcfd
    4e44:	0000f2e4 	.word	0x0000f2e4
    4e48:	0000dd04 	.word	0x0000dd04
    4e4c:	0000e191 	.word	0x0000e191
    4e50:	000045c1 	.word	0x000045c1
    4e54:	0000effe 	.word	0x0000effe
    4e58:	0000e437 	.word	0x0000e437
    4e5c:	20000270 	.word	0x20000270
    4e60:	0000e471 	.word	0x0000e471
    4e64:	20000210 	.word	0x20000210
    4e68:	0000e49a 	.word	0x0000e49a
    4e6c:	20000200 	.word	0x20000200

00004e70 <mayfly_radio_stop>:
	}
}
#endif /* SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    4e70:	b590      	push	{r4, r7, lr}
	enum state state = (enum state)((uint32_t)params & 0xff);
    4e72:	b2c4      	uxtb	r4, r0
	uint32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4e74:	1f23      	subs	r3, r4, #4
	}
}
#endif /* SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    4e76:	b083      	sub	sp, #12
	enum state state = (enum state)((uint32_t)params & 0xff);
	uint32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4e78:	2b01      	cmp	r3, #1
	}
}
#endif /* SCHED_ADVANCED */

static void mayfly_radio_stop(void *params)
{
    4e7a:	af02      	add	r7, sp, #8
	enum state state = (enum state)((uint32_t)params & 0xff);
	uint32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
    4e7c:	d90d      	bls.n	4e9a <mayfly_radio_stop+0x2a>
    4e7e:	4b11      	ldr	r3, [pc, #68]	; (4ec4 <mayfly_radio_stop+0x54>)
    4e80:	9301      	str	r3, [sp, #4]
    4e82:	4b11      	ldr	r3, [pc, #68]	; (4ec8 <mayfly_radio_stop+0x58>)
    4e84:	9300      	str	r3, [sp, #0]
    4e86:	4911      	ldr	r1, [pc, #68]	; (4ecc <mayfly_radio_stop+0x5c>)
    4e88:	4b11      	ldr	r3, [pc, #68]	; (4ed0 <mayfly_radio_stop+0x60>)
    4e8a:	4a12      	ldr	r2, [pc, #72]	; (4ed4 <mayfly_radio_stop+0x64>)
    4e8c:	4812      	ldr	r0, [pc, #72]	; (4ed8 <mayfly_radio_stop+0x68>)
    4e8e:	f7fc f98d 	bl	11ac <printk>
    4e92:	2100      	movs	r1, #0
    4e94:	4608      	mov	r0, r1
    4e96:	f007 fbdb 	bl	c650 <_SysFatalErrorHandler>

	radio_used = ((_radio.state != STATE_NONE) &&
    4e9a:	4a10      	ldr	r2, [pc, #64]	; (4edc <mayfly_radio_stop+0x6c>)
    4e9c:	7bd3      	ldrb	r3, [r2, #15]
		      (_radio.state != STATE_STOP) &&
    4e9e:	b14b      	cbz	r3, 4eb4 <mayfly_radio_stop+0x44>
	enum state state = (enum state)((uint32_t)params & 0xff);
	uint32_t radio_used;

	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
    4ea0:	3b04      	subs	r3, #4
    4ea2:	2b01      	cmp	r3, #1
    4ea4:	d906      	bls.n	4eb4 <mayfly_radio_stop+0x44>
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
		if (radio_used) {
			_radio.state = state;
    4ea6:	73d4      	strb	r4, [r2, #15]
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    4ea8:	3704      	adds	r7, #4
    4eaa:	46bd      	mov	sp, r7
    4eac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
		if (radio_used) {
			_radio.state = state;
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
    4eb0:	f7fe b96a 	b.w	3188 <radio_disable>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));

	radio_used = ((_radio.state != STATE_NONE) &&
		      (_radio.state != STATE_STOP) &&
		      (_radio.state != STATE_ABORT));
	if (radio_used || !radio_is_idle()) {
    4eb4:	f7fe f996 	bl	31e4 <radio_is_idle>
    4eb8:	2800      	cmp	r0, #0
    4eba:	d0f5      	beq.n	4ea8 <mayfly_radio_stop+0x38>
		}

		/** @todo try designing so as to not to abort tx packet */
		radio_disable();
	}
}
    4ebc:	3704      	adds	r7, #4
    4ebe:	46bd      	mov	sp, r7
    4ec0:	bd90      	pop	{r4, r7, pc}
    4ec2:	bf00      	nop
    4ec4:	0000dd4e 	.word	0x0000dd4e
    4ec8:	0000dd53 	.word	0x0000dd53
    4ecc:	0000dd04 	.word	0x0000dd04
    4ed0:	0000f375 	.word	0x0000f375
    4ed4:	0000dcfd 	.word	0x0000dcfd
    4ed8:	0000e4f2 	.word	0x0000e4f2
    4edc:	20000b44 	.word	0x20000b44

00004ee0 <rx_packet_set>:

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    4ee0:	b5b0      	push	{r4, r5, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_rx) {
    4ee2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
{
	uint8_t phy;
	uint16_t max_rx_octets;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_rx_octets = conn->max_rx_octets;
    4ee6:	8e02      	ldrh	r2, [r0, #48]	; 0x30
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_rx) {
    4ee8:	f003 0310 	and.w	r3, r3, #16

	DEBUG_RADIO_START_M(0);
}

static void rx_packet_set(struct connection *conn, struct pdu_data *pdu_data_rx)
{
    4eec:	4604      	mov	r4, r0
    4eee:	af00      	add	r7, sp, #0
    4ef0:	460d      	mov	r5, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_rx) {
    4ef2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    4ef6:	b15b      	cbz	r3, 4f10 <rx_packet_set+0x30>
		radio_pkt_configure(phy, 8, (max_rx_octets + 4));
    4ef8:	3204      	adds	r2, #4
    4efa:	b2d2      	uxtb	r2, r2
    4efc:	2108      	movs	r1, #8
    4efe:	2000      	movs	r0, #0
    4f00:	f7fe f900 	bl	3104 <radio_pkt_configure>

		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
    4f04:	4629      	mov	r1, r5
    4f06:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    4f0a:	f7fe fb0d 	bl	3528 <radio_ccm_rx_pkt_set>
    4f0e:	e004      	b.n	4f1a <rx_packet_set+0x3a>
						      pdu_data_rx));
	} else {
		radio_pkt_configure(phy, 8, max_rx_octets);
    4f10:	b2d2      	uxtb	r2, r2
    4f12:	2108      	movs	r1, #8
    4f14:	f7fe f8f6 	bl	3104 <radio_pkt_configure>

		radio_pkt_rx_set(pdu_data_rx);
    4f18:	4628      	mov	r0, r5
	}
}
    4f1a:	46bd      	mov	sp, r7
    4f1c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx,
						      pdu_data_rx));
	} else {
		radio_pkt_configure(phy, 8, max_rx_octets);

		radio_pkt_rx_set(pdu_data_rx);
    4f20:	f7fe b912 	b.w	3148 <radio_pkt_rx_set>

00004f24 <pdu_node_tx_release>:
	}
}

static void pdu_node_tx_release(uint16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    4f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t last;

	last = _radio.packet_release_last + 1;
    4f28:	4c18      	ldr	r4, [pc, #96]	; (4f8c <pdu_node_tx_release+0x68>)
	}
}

static void pdu_node_tx_release(uint16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    4f2a:	b082      	sub	sp, #8
	uint8_t last;

	last = _radio.packet_release_last + 1;
    4f2c:	f894 5284 	ldrb.w	r5, [r4, #644]	; 0x284
	if (last == _radio.packet_tx_count) {
    4f30:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
static void pdu_node_tx_release(uint16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
	uint8_t last;

	last = _radio.packet_release_last + 1;
    4f34:	3501      	adds	r5, #1
    4f36:	b2ed      	uxtb	r5, r5
	if (last == _radio.packet_tx_count) {
		last = 0;
    4f38:	42ab      	cmp	r3, r5
    4f3a:	bf08      	it	eq
    4f3c:	2500      	moveq	r5, #0
	}

	LL_ASSERT(last != _radio.packet_release_first);
    4f3e:	f894 3283 	ldrb.w	r3, [r4, #643]	; 0x283
    4f42:	42ab      	cmp	r3, r5
	}
}

static void pdu_node_tx_release(uint16_t handle,
				struct radio_pdu_node_tx *node_tx)
{
    4f44:	af02      	add	r7, sp, #8
    4f46:	4680      	mov	r8, r0
    4f48:	460e      	mov	r6, r1
	last = _radio.packet_release_last + 1;
	if (last == _radio.packet_tx_count) {
		last = 0;
	}

	LL_ASSERT(last != _radio.packet_release_first);
    4f4a:	d10d      	bne.n	4f68 <pdu_node_tx_release+0x44>
    4f4c:	4b10      	ldr	r3, [pc, #64]	; (4f90 <pdu_node_tx_release+0x6c>)
    4f4e:	9301      	str	r3, [sp, #4]
    4f50:	4b10      	ldr	r3, [pc, #64]	; (4f94 <pdu_node_tx_release+0x70>)
    4f52:	9300      	str	r3, [sp, #0]
    4f54:	4910      	ldr	r1, [pc, #64]	; (4f98 <pdu_node_tx_release+0x74>)
    4f56:	4b11      	ldr	r3, [pc, #68]	; (4f9c <pdu_node_tx_release+0x78>)
    4f58:	4a11      	ldr	r2, [pc, #68]	; (4fa0 <pdu_node_tx_release+0x7c>)
    4f5a:	4812      	ldr	r0, [pc, #72]	; (4fa4 <pdu_node_tx_release+0x80>)
    4f5c:	f7fc f926 	bl	11ac <printk>
    4f60:	2100      	movs	r1, #0
    4f62:	4608      	mov	r0, r1
    4f64:	f007 fb74 	bl	c650 <_SysFatalErrorHandler>

	/* Enqueue app mem for release */
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
    4f68:	f894 2284 	ldrb.w	r2, [r4, #644]	; 0x284
    4f6c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    4f70:	f823 8032 	strh.w	r8, [r3, r2, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
    4f74:	f894 2284 	ldrb.w	r2, [r4, #644]	; 0x284
    4f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4f7c:	605e      	str	r6, [r3, #4]
	_radio.packet_release_last = last;
    4f7e:	f884 5284 	strb.w	r5, [r4, #644]	; 0x284

	/* callback to trigger application action */
	packet_rx_callback();
}
    4f82:	46bd      	mov	sp, r7
    4f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    4f88:	f006 ba56 	b.w	b438 <radio_event_callback>
    4f8c:	20000b44 	.word	0x20000b44
    4f90:	0000dd4e 	.word	0x0000dd4e
    4f94:	0000dd53 	.word	0x0000dd53
    4f98:	0000dd04 	.word	0x0000dd04
    4f9c:	0000efea 	.word	0x0000efea
    4fa0:	0000dcfd 	.word	0x0000dcfd
    4fa4:	0000e543 	.word	0x0000e543

00004fa8 <packet_tx_enqueue>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(uint8_t max)
{
    4fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4fac:	4d27      	ldr	r5, [pc, #156]	; (504c <packet_tx_enqueue+0xa4>)
	/* callback to trigger application action */
	packet_rx_callback();
}

static void packet_tx_enqueue(uint8_t max)
{
    4fae:	af00      	add	r7, sp, #0
    4fb0:	4606      	mov	r6, r0
    4fb2:	46a9      	mov	r9, r5
		struct connection *conn;
		uint8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
    4fb4:	f04f 0800 	mov.w	r8, #0
	packet_rx_callback();
}

static void packet_tx_enqueue(uint8_t max)
{
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
    4fb8:	2e00      	cmp	r6, #0
    4fba:	d045      	beq.n	5048 <packet_tx_enqueue+0xa0>
    4fbc:	f895 3281 	ldrb.w	r3, [r5, #641]	; 0x281
    4fc0:	f895 2282 	ldrb.w	r2, [r5, #642]	; 0x282
    4fc4:	429a      	cmp	r2, r3
    4fc6:	d03f      	beq.n	5048 <packet_tx_enqueue+0xa0>
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		uint8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4fc8:	f895 a281 	ldrb.w	sl, [r5, #641]	; 0x281
    4fcc:	f8d5 b278 	ldr.w	fp, [r5, #632]	; 0x278
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4fd0:	f8d5 0218 	ldr.w	r0, [r5, #536]	; 0x218
    4fd4:	f83b 203a 	ldrh.w	r2, [fp, sl, lsl #3]
		struct pdu_data_q_tx *pdu_data_q_tx;
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		uint8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
    4fd8:	eb0b 03ca 	add.w	r3, fp, sl, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
		node_tx_new->next = NULL;
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4fdc:	f44f 7188 	mov.w	r1, #272	; 0x110
		struct radio_pdu_node_tx *node_tx_new;
		struct connection *conn;
		uint8_t first;

		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
		node_tx_new = pdu_data_q_tx->node_tx;
    4fe0:	685c      	ldr	r4, [r3, #4]
		node_tx_new->next = NULL;
    4fe2:	f8c4 8000 	str.w	r8, [r4]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    4fe6:	f7fd fdc2 	bl	2b6e <mem_get>
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
    4fea:	f83b 303a 	ldrh.w	r3, [fp, sl, lsl #3]
    4fee:	8c02      	ldrh	r2, [r0, #32]
    4ff0:	429a      	cmp	r2, r3
    4ff2:	d112      	bne.n	501a <packet_tx_enqueue+0x72>
			if (conn->pkt_tx_data == 0) {
    4ff4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    4ff8:	b943      	cbnz	r3, 500c <packet_tx_enqueue+0x64>
				conn->pkt_tx_data = node_tx_new;

				if (conn->pkt_tx_head == 0) {
    4ffa:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				pdu_data_q_tx->handle);

		if (conn->handle == pdu_data_q_tx->handle) {
			if (conn->pkt_tx_data == 0) {
				conn->pkt_tx_data = node_tx_new;
    4ffe:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104

				if (conn->pkt_tx_head == 0) {
    5002:	b91b      	cbnz	r3, 500c <packet_tx_enqueue+0x64>
					conn->pkt_tx_head = node_tx_new;
    5004:	f8c0 40fc 	str.w	r4, [r0, #252]	; 0xfc
					conn->pkt_tx_last = NULL;
    5008:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
				}
			}

			if (conn->pkt_tx_last) {
    500c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    5010:	b103      	cbz	r3, 5014 <packet_tx_enqueue+0x6c>
				conn->pkt_tx_last->next = node_tx_new;
    5012:	601c      	str	r4, [r3, #0]
			}

			conn->pkt_tx_last = node_tx_new;
    5014:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    5018:	e008      	b.n	502c <packet_tx_enqueue+0x84>
			pdu_data_tx = (struct pdu_data *)node_tx_new->pdu_data;

			/* By setting it resv, when app gets num cmplt, no
			 * num cmplt is counted, but the buffer is released
			 */
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    501a:	7923      	ldrb	r3, [r4, #4]
    501c:	f36f 0301 	bfc	r3, #0, #2
    5020:	7123      	strb	r3, [r4, #4]

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
    5022:	4621      	mov	r1, r4
    5024:	f83b 003a 	ldrh.w	r0, [fp, sl, lsl #3]
    5028:	f7ff ff7c 	bl	4f24 <pdu_node_tx_release>
		}

		first = _radio.packet_tx_first + 1;
    502c:	f899 3281 	ldrb.w	r3, [r9, #641]	; 0x281
		if (first == _radio.packet_tx_count) {
    5030:	f899 2280 	ldrb.w	r2, [r9, #640]	; 0x280
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
		}

		first = _radio.packet_tx_first + 1;
    5034:	3301      	adds	r3, #1
    5036:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
			first = 0;
    5038:	429a      	cmp	r2, r3
    503a:	bf08      	it	eq
    503c:	2300      	moveq	r3, #0
    503e:	3e01      	subs	r6, #1
		}
		_radio.packet_tx_first = first;
    5040:	f889 3281 	strb.w	r3, [r9, #641]	; 0x281
    5044:	b2f6      	uxtb	r6, r6
    5046:	e7b7      	b.n	4fb8 <packet_tx_enqueue+0x10>
    5048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    504c:	20000b44 	.word	0x20000b44

00005050 <connection_release>:
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    5050:	b5b0      	push	{r4, r5, r7, lr}
	uint32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5052:	2201      	movs	r2, #1
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    5054:	b082      	sub	sp, #8
    5056:	4604      	mov	r4, r0
	uint32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    5058:	4611      	mov	r1, r2
    505a:	2000      	movs	r0, #0
	/* callback to trigger application action */
	packet_rx_callback();
}

static void connection_release(struct connection *conn)
{
    505c:	af02      	add	r7, sp, #8
	uint32_t ticker_status;

	/* Enable Ticker Job, we are in a radio event which disabled it if
	 * worker0 and job0 priority where same.
	 */
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    505e:	f006 f949 	bl	b2f4 <mayfly_enable>
	/** @todo correctly stop tickers ensuring crystal and radio active are
	 * placed in right states
	 */

	/* Stop Master/Slave role ticker */
	ticker_status =
    5062:	f894 2020 	ldrb.w	r2, [r4, #32]
    5066:	f641 032c 	movw	r3, #6188	; 0x182c
    506a:	2100      	movs	r1, #0
    506c:	3207      	adds	r2, #7
    506e:	9300      	str	r3, [sp, #0]
    5070:	b2d2      	uxtb	r2, r2
    5072:	4b4d      	ldr	r3, [pc, #308]	; (51a8 <connection_release+0x158>)
    5074:	4608      	mov	r0, r1
    5076:	f7ff f9c3 	bl	4400 <ticker_stop>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			    RADIO_TICKER_USER_ID_WORKER,
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    507a:	f030 0302 	bics.w	r3, r0, #2
    507e:	d00d      	beq.n	509c <connection_release+0x4c>
    5080:	4b4a      	ldr	r3, [pc, #296]	; (51ac <connection_release+0x15c>)
    5082:	9301      	str	r3, [sp, #4]
    5084:	4b4a      	ldr	r3, [pc, #296]	; (51b0 <connection_release+0x160>)
    5086:	9300      	str	r3, [sp, #0]
    5088:	494a      	ldr	r1, [pc, #296]	; (51b4 <connection_release+0x164>)
    508a:	4b4b      	ldr	r3, [pc, #300]	; (51b8 <connection_release+0x168>)
    508c:	4a4b      	ldr	r2, [pc, #300]	; (51bc <connection_release+0x16c>)
    508e:	484c      	ldr	r0, [pc, #304]	; (51c0 <connection_release+0x170>)
    5090:	f7fc f88c 	bl	11ac <printk>
    5094:	2100      	movs	r1, #0
    5096:	4608      	mov	r0, r1
    5098:	f007 fada 	bl	c650 <_SysFatalErrorHandler>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    509c:	4d49      	ldr	r5, [pc, #292]	; (51c4 <connection_release+0x174>)
    509e:	7beb      	ldrb	r3, [r5, #15]
    50a0:	2b05      	cmp	r3, #5
    50a2:	d149      	bne.n	5138 <connection_release+0xe8>
    50a4:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
    50a6:	7b2a      	ldrb	r2, [r5, #12]
			    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Stop Marker 0 and event single-shot tickers */
	if ((_radio.state == STATE_ABORT) &&
    50a8:	3307      	adds	r3, #7
    50aa:	429a      	cmp	r2, r3
    50ac:	d144      	bne.n	5138 <connection_release+0xe8>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
					  conn->handle))) {
		ticker_status =
    50ae:	f641 0338 	movw	r3, #6200	; 0x1838
    50b2:	2100      	movs	r1, #0
    50b4:	9300      	str	r3, [sp, #0]
    50b6:	2201      	movs	r2, #1
    50b8:	4b3b      	ldr	r3, [pc, #236]	; (51a8 <connection_release+0x158>)
    50ba:	4608      	mov	r0, r1
    50bc:	f7ff f9a0 	bl	4400 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    50c0:	f030 0302 	bics.w	r3, r0, #2
    50c4:	d00d      	beq.n	50e2 <connection_release+0x92>
    50c6:	4b39      	ldr	r3, [pc, #228]	; (51ac <connection_release+0x15c>)
    50c8:	9301      	str	r3, [sp, #4]
    50ca:	4b39      	ldr	r3, [pc, #228]	; (51b0 <connection_release+0x160>)
    50cc:	9300      	str	r3, [sp, #0]
    50ce:	4939      	ldr	r1, [pc, #228]	; (51b4 <connection_release+0x164>)
    50d0:	4b39      	ldr	r3, [pc, #228]	; (51b8 <connection_release+0x168>)
    50d2:	4a3a      	ldr	r2, [pc, #232]	; (51bc <connection_release+0x16c>)
    50d4:	483a      	ldr	r0, [pc, #232]	; (51c0 <connection_release+0x170>)
    50d6:	f7fc f869 	bl	11ac <printk>
    50da:	2100      	movs	r1, #0
    50dc:	4608      	mov	r0, r1
    50de:	f007 fab7 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    50e2:	2200      	movs	r2, #0
    50e4:	f641 033f 	movw	r3, #6207	; 0x183f
    50e8:	9300      	str	r3, [sp, #0]
    50ea:	4611      	mov	r1, r2
    50ec:	4b2e      	ldr	r3, [pc, #184]	; (51a8 <connection_release+0x158>)
    50ee:	4610      	mov	r0, r2
    50f0:	f7ff f986 	bl	4400 <ticker_stop>
		    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_EVENT,
				ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    50f4:	f030 0302 	bics.w	r3, r0, #2
    50f8:	d01e      	beq.n	5138 <connection_release+0xe8>
    50fa:	4b2c      	ldr	r3, [pc, #176]	; (51ac <connection_release+0x15c>)
    50fc:	9301      	str	r3, [sp, #4]
    50fe:	4b2c      	ldr	r3, [pc, #176]	; (51b0 <connection_release+0x160>)
    5100:	9300      	str	r3, [sp, #0]
    5102:	4a2e      	ldr	r2, [pc, #184]	; (51bc <connection_release+0x16c>)
    5104:	4b2c      	ldr	r3, [pc, #176]	; (51b8 <connection_release+0x168>)
    5106:	492b      	ldr	r1, [pc, #172]	; (51b4 <connection_release+0x164>)
    5108:	482d      	ldr	r0, [pc, #180]	; (51c0 <connection_release+0x170>)
    510a:	f7fc f84f 	bl	11ac <printk>
    510e:	2100      	movs	r1, #0
    5110:	4608      	mov	r0, r1
    5112:	f007 fa9d 	bl	c650 <_SysFatalErrorHandler>
    5116:	e00f      	b.n	5138 <connection_release+0xe8>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5118:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    511c:	4299      	cmp	r1, r3
    511e:	d01e      	beq.n	515e <connection_release+0x10e>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5120:	790b      	ldrb	r3, [r1, #4]
    5122:	f36f 0301 	bfc	r3, #0, #2
    5126:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5128:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc

		pdu_node_tx_release(conn->handle, node_tx);
    512c:	8c20      	ldrh	r0, [r4, #32]
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    512e:	681b      	ldr	r3, [r3, #0]
    5130:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

		pdu_node_tx_release(conn->handle, node_tx);
    5134:	f7ff fef6 	bl	4f24 <pdu_node_tx_release>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* flush and release, data packet before ctrl */
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
    5138:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    513c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    5140:	4299      	cmp	r1, r3
    5142:	d1e9      	bne.n	5118 <connection_release+0xc8>
    5144:	e00b      	b.n	515e <connection_release+0x10e>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    5146:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    514a:	4298      	cmp	r0, r3
    514c:	d00b      	beq.n	5166 <connection_release+0x116>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
		void *release;

		release = conn->pkt_tx_head;
		conn->pkt_tx_head = conn->pkt_tx_head->next;
    514e:	6803      	ldr	r3, [r0, #0]
    5150:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
    5154:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

		mem_release(release, &_radio.pkt_tx_ctrl_free);
    5158:	491b      	ldr	r1, [pc, #108]	; (51c8 <connection_release+0x178>)
    515a:	f7fd fce8 	bl	2b2e <mem_release>

		pdu_node_tx_release(conn->handle, node_tx);
	}

	/* flush and release, ctrl packet before data */
	while ((conn->pkt_tx_head) &&
    515e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
    5162:	2800      	cmp	r0, #0
    5164:	d1ef      	bne.n	5146 <connection_release+0xf6>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
		conn->pkt_tx_ctrl = conn->pkt_tx_head;

		mem_release(release, &_radio.pkt_tx_ctrl_free);
	}
	conn->pkt_tx_ctrl = NULL;
    5166:	2300      	movs	r3, #0
    5168:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100

	/* flush and release, rest of data */
	while (conn->pkt_tx_head) {
    516c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    5170:	b171      	cbz	r1, 5190 <connection_release+0x140>
		/* By setting it resv, when app gets num cmplt, no num cmplt
		 * is counted, but the buffer is released
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
    5172:	790b      	ldrb	r3, [r1, #4]
    5174:	f36f 0301 	bfc	r3, #0, #2
    5178:	710b      	strb	r3, [r1, #4]

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    517a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
		conn->pkt_tx_data = conn->pkt_tx_head;

		pdu_node_tx_release(conn->handle, node_tx);
    517e:	8c20      	ldrh	r0, [r4, #32]
		 */
		node_tx = conn->pkt_tx_head;
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;

		conn->pkt_tx_head = conn->pkt_tx_head->next;
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
		conn->pkt_tx_data = conn->pkt_tx_head;
    5186:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104

		pdu_node_tx_release(conn->handle, node_tx);
    518a:	f7ff fecb 	bl	4f24 <pdu_node_tx_release>
    518e:	e7ed      	b.n	516c <connection_release+0x11c>
	}

	conn->handle = 0xffff;
    5190:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5194:	8423      	strh	r3, [r4, #32]

	/* reset mutex */
	if (_radio.conn_upd == conn) {
    5196:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    519a:	429c      	cmp	r4, r3
		_radio.conn_upd = NULL;
    519c:	bf04      	itt	eq
    519e:	4b09      	ldreq	r3, [pc, #36]	; (51c4 <connection_release+0x174>)
    51a0:	f8c3 1294 	streq.w	r1, [r3, #660]	; 0x294
	}
}
    51a4:	46bd      	mov	sp, r7
    51a6:	bdb0      	pop	{r4, r5, r7, pc}
    51a8:	00005c59 	.word	0x00005c59
    51ac:	0000dd4e 	.word	0x0000dd4e
    51b0:	0000dd53 	.word	0x0000dd53
    51b4:	0000dd04 	.word	0x0000dd04
    51b8:	0000f01f 	.word	0x0000f01f
    51bc:	0000dcfd 	.word	0x0000dcfd
    51c0:	0000e588 	.word	0x0000e588
    51c4:	20000b44 	.word	0x20000b44
    51c8:	20000dac 	.word	0x20000dac

000051cc <prepare_pdu_data_tx>:
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    51cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    51ce:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    51d2:	4604      	mov	r4, r0
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    51d4:	0618      	lsls	r0, r3, #24
	}
}

static void prepare_pdu_data_tx(struct connection *conn,
				struct pdu_data **pdu_data_tx)
{
    51d6:	af00      	add	r7, sp, #0
    51d8:	460e      	mov	r6, r1
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;

	if ((conn->empty != 0) || /* empty packet */
    51da:	d430      	bmi.n	523e <prepare_pdu_data_tx+0x72>
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    51dc:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc

	if ((conn->empty != 0) || /* empty packet */
    51e0:	b368      	cbz	r0, 523e <prepare_pdu_data_tx+0x72>
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    51e2:	0719      	lsls	r1, r3, #28
				struct pdu_data **pdu_data_tx)
{
	struct pdu_data *_pdu_data_tx;

	/*@FIXME: assign before checking first 3 conditions */
	_pdu_data_tx = (struct pdu_data *)conn->pkt_tx_head->pdu_data;
    51e4:	f100 0204 	add.w	r2, r0, #4

	if ((conn->empty != 0) || /* empty packet */
	   /* no ctrl or data packet */
	   (conn->pkt_tx_head == 0) ||
    51e8:	d543      	bpl.n	5272 <prepare_pdu_data_tx+0xa6>
	   /* data tx paused, only control packets allowed */
	   ((conn->pause_tx) && (_pdu_data_tx != 0) &&
    51ea:	7941      	ldrb	r1, [r0, #5]
    51ec:	2900      	cmp	r1, #0
    51ee:	d040      	beq.n	5272 <prepare_pdu_data_tx+0xa6>
	    (_pdu_data_tx->len != 0) &&
    51f0:	7901      	ldrb	r1, [r0, #4]
    51f2:	f001 0103 	and.w	r1, r1, #3
    51f6:	2903      	cmp	r1, #3
    51f8:	d121      	bne.n	523e <prepare_pdu_data_tx+0x72>
	    ((_pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    51fa:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    51fe:	f011 0f01 	tst.w	r1, #1
    5202:	f003 0140 	and.w	r1, r3, #64	; 0x40
    5206:	79c3      	ldrb	r3, [r0, #7]
    5208:	d10b      	bne.n	5222 <prepare_pdu_data_tx+0x56>
	     ((conn->role.master.role == 0) &&
    520a:	b909      	cbnz	r1, 5210 <prepare_pdu_data_tx+0x44>
	      (((conn->refresh == 0) &&
    520c:	2b02      	cmp	r3, #2
    520e:	e003      	b.n	5218 <prepare_pdu_data_tx+0x4c>
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT)) ||
	       ((conn->refresh != 0) &&
    5210:	1e99      	subs	r1, r3, #2
    5212:	2901      	cmp	r1, #1
    5214:	d92d      	bls.n	5272 <prepare_pdu_data_tx+0xa6>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    5216:	2b0b      	cmp	r3, #11
    5218:	d02b      	beq.n	5272 <prepare_pdu_data_tx+0xa6>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode !=
		 PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT)) ||
    521a:	2b11      	cmp	r3, #17
    521c:	d80f      	bhi.n	523e <prepare_pdu_data_tx+0x72>
    521e:	492e      	ldr	r1, [pc, #184]	; (52d8 <prepare_pdu_data_tx+0x10c>)
    5220:	e009      	b.n	5236 <prepare_pdu_data_tx+0x6a>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT)))) ||
	     ((conn->role.slave.role != 0) &&
    5222:	b909      	cbnz	r1, 5228 <prepare_pdu_data_tx+0x5c>
	      (((conn->refresh == 0) &&
    5224:	2b02      	cmp	r3, #2
    5226:	e002      	b.n	522e <prepare_pdu_data_tx+0x62>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT)) ||
	       ((conn->refresh != 0) &&
    5228:	2b02      	cmp	r3, #2
    522a:	d022      	beq.n	5272 <prepare_pdu_data_tx+0xa6>
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
    522c:	2b04      	cmp	r3, #4
    522e:	d020      	beq.n	5272 <prepare_pdu_data_tx+0xa6>
	      (((conn->refresh == 0) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_REQ) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_START_ENC_RSP) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND) &&
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT)) ||
    5230:	2b11      	cmp	r3, #17
    5232:	d804      	bhi.n	523e <prepare_pdu_data_tx+0x72>
    5234:	4929      	ldr	r1, [pc, #164]	; (52dc <prepare_pdu_data_tx+0x110>)
    5236:	fa21 f303 	lsr.w	r3, r1, r3
    523a:	07db      	lsls	r3, r3, #31
    523c:	d419      	bmi.n	5272 <prepare_pdu_data_tx+0xa6>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    523e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    5242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5246:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    524a:	f7fd ffed 	bl	3228 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    524e:	7803      	ldrb	r3, [r0, #0]
    5250:	2201      	movs	r2, #1
    5252:	f362 0301 	bfi	r3, r2, #0, #2
    5256:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    5258:	2300      	movs	r3, #0
    525a:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    525c:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
    5260:	7803      	ldrb	r3, [r0, #0]
    5262:	b112      	cbz	r2, 526a <prepare_pdu_data_tx+0x9e>
		pdu_data_tx->md = 1;
    5264:	f043 0310 	orr.w	r3, r3, #16
    5268:	e001      	b.n	526e <prepare_pdu_data_tx+0xa2>
	} else {
		pdu_data_tx->md = 0;
    526a:	f362 1304 	bfi	r3, r2, #4, #1
    526e:	7003      	strb	r3, [r0, #0]
    5270:	e029      	b.n	52c6 <prepare_pdu_data_tx+0xfa>
	} else {
		uint16_t max_tx_octets;

		_pdu_data_tx =
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);
    5272:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d

		if (!conn->packet_tx_head_len) {
    5276:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
		(_pdu_data_tx->payload.llctrl.opcode != PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT))))))) {
			_pdu_data_tx = empty_tx_enqueue(conn);
	} else {
		uint16_t max_tx_octets;

		_pdu_data_tx =
    527a:	18d0      	adds	r0, r2, r3
			(struct pdu_data *)(conn->pkt_tx_head->pdu_data +
					    conn->packet_tx_head_offset);

		if (!conn->packet_tx_head_len) {
    527c:	b911      	cbnz	r1, 5284 <prepare_pdu_data_tx+0xb8>
			conn->packet_tx_head_len = _pdu_data_tx->len;
    527e:	7841      	ldrb	r1, [r0, #1]
    5280:	f884 110c 	strb.w	r1, [r4, #268]	; 0x10c
		}

		if (conn->packet_tx_head_offset) {
    5284:	b123      	cbz	r3, 5290 <prepare_pdu_data_tx+0xc4>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    5286:	5cd1      	ldrb	r1, [r2, r3]
    5288:	2501      	movs	r5, #1
    528a:	f365 0101 	bfi	r1, r5, #0, #2
    528e:	54d1      	strb	r1, [r2, r3]
		}

		_pdu_data_tx->len = conn->packet_tx_head_len -
    5290:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    5294:	f894 510d 	ldrb.w	r5, [r4, #269]	; 0x10d
    5298:	1b4d      	subs	r5, r1, r5
    529a:	b2ed      	uxtb	r5, r5
    529c:	7045      	strb	r5, [r0, #1]
		    conn->packet_tx_head_offset;
		_pdu_data_tx->md = 0;
    529e:	5cd1      	ldrb	r1, [r2, r3]
    52a0:	f36f 1104 	bfc	r1, #4, #1
    52a4:	54d1      	strb	r1, [r2, r3]

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		max_tx_octets = conn->max_tx_octets;
    52a6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
		max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		if (_pdu_data_tx->len > max_tx_octets) {
    52a8:	42a9      	cmp	r1, r5
			_pdu_data_tx->len = max_tx_octets;
    52aa:	bf3f      	itttt	cc
    52ac:	7041      	strbcc	r1, [r0, #1]
			_pdu_data_tx->md = 1;
    52ae:	5cd1      	ldrbcc	r1, [r2, r3]
    52b0:	f041 0110 	orrcc.w	r1, r1, #16
    52b4:	54d1      	strbcc	r1, [r2, r3]
		}

		if (conn->pkt_tx_head->next) {
    52b6:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
    52ba:	6809      	ldr	r1, [r1, #0]
    52bc:	b119      	cbz	r1, 52c6 <prepare_pdu_data_tx+0xfa>
			_pdu_data_tx->md = 1;
    52be:	5cd1      	ldrb	r1, [r2, r3]
    52c0:	f041 0110 	orr.w	r1, r1, #16
    52c4:	54d1      	strb	r1, [r2, r3]
		}
	}

	_pdu_data_tx->rfu0 = 0;
    52c6:	7803      	ldrb	r3, [r0, #0]
    52c8:	f36f 1347 	bfc	r3, #5, #3
    52cc:	7003      	strb	r3, [r0, #0]
	_pdu_data_tx->resv = 0;
    52ce:	2300      	movs	r3, #0
    52d0:	7083      	strb	r3, [r0, #2]

	*pdu_data_tx = _pdu_data_tx;
    52d2:	6030      	str	r0, [r6, #0]
    52d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52d6:	bf00      	nop
    52d8:	00022040 	.word	0x00022040
    52dc:	00022060 	.word	0x00022060

000052e0 <tx_packet_set>:
	}
}

static void tx_packet_set(struct connection *conn,
			  struct pdu_data *pdu_data_tx)
{
    52e0:	b5b0      	push	{r4, r5, r7, lr}
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_tx) {
    52e2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
{
	uint8_t phy;
	uint16_t max_tx_octets;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	max_tx_octets = conn->max_tx_octets;
    52e6:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_tx) {
    52e8:	f003 0320 	and.w	r3, r3, #32
	}
}

static void tx_packet_set(struct connection *conn,
			  struct pdu_data *pdu_data_tx)
{
    52ec:	4604      	mov	r4, r0
    52ee:	af00      	add	r7, sp, #0
    52f0:	460d      	mov	r5, r1
#else /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */
	max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* !CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	phy = RADIO_PHY_CONN;
	if (conn->enc_tx) {
    52f2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    52f6:	b15b      	cbz	r3, 5310 <tx_packet_set+0x30>
		radio_pkt_configure(phy, 8, (max_tx_octets + 4));
    52f8:	3204      	adds	r2, #4
    52fa:	b2d2      	uxtb	r2, r2
    52fc:	2108      	movs	r1, #8
    52fe:	2000      	movs	r0, #0
    5300:	f7fd ff00 	bl	3104 <radio_pkt_configure>

		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
    5304:	4629      	mov	r1, r5
    5306:	f104 00da 	add.w	r0, r4, #218	; 0xda
    530a:	f7fe f945 	bl	3598 <radio_ccm_tx_pkt_set>
    530e:	e004      	b.n	531a <tx_packet_set+0x3a>
						      pdu_data_tx));
	} else {
		radio_pkt_configure(phy, 8, max_tx_octets);
    5310:	b2d2      	uxtb	r2, r2
    5312:	2108      	movs	r1, #8
    5314:	f7fd fef6 	bl	3104 <radio_pkt_configure>

		radio_pkt_tx_set(pdu_data_tx);
    5318:	4628      	mov	r0, r5
	}
}
    531a:	46bd      	mov	sp, r7
    531c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
						      pdu_data_tx));
	} else {
		radio_pkt_configure(phy, 8, max_tx_octets);

		radio_pkt_tx_set(pdu_data_tx);
    5320:	f7fd bf1a 	b.w	3158 <radio_pkt_tx_set>

00005324 <channel_set>:

	return channel_next;
}

static void channel_set(uint32_t channel)
{
    5324:	b590      	push	{r4, r7, lr}
	switch (channel) {
    5326:	2826      	cmp	r0, #38	; 0x26

	return channel_next;
}

static void channel_set(uint32_t channel)
{
    5328:	b083      	sub	sp, #12
    532a:	4604      	mov	r4, r0
    532c:	af02      	add	r7, sp, #8
	switch (channel) {
    532e:	d005      	beq.n	533c <channel_set+0x18>
    5330:	2827      	cmp	r0, #39	; 0x27
    5332:	d007      	beq.n	5344 <channel_set+0x20>
    5334:	2825      	cmp	r0, #37	; 0x25
    5336:	d107      	bne.n	5348 <channel_set+0x24>
	case 37:
		radio_freq_chnl_set(2);
    5338:	2002      	movs	r0, #2
    533a:	e000      	b.n	533e <channel_set+0x1a>
		break;

	case 38:
		radio_freq_chnl_set(26);
    533c:	201a      	movs	r0, #26
    533e:	f7fd feb7 	bl	30b0 <radio_freq_chnl_set>
		break;
    5342:	e018      	b.n	5376 <channel_set+0x52>

	case 39:
		radio_freq_chnl_set(80);
    5344:	2050      	movs	r0, #80	; 0x50
    5346:	e7fa      	b.n	533e <channel_set+0x1a>
		break;

	default:
		if (channel < 11) {
    5348:	280a      	cmp	r0, #10
    534a:	d801      	bhi.n	5350 <channel_set+0x2c>
			radio_freq_chnl_set(4 + (2 * channel));
    534c:	3002      	adds	r0, #2
    534e:	e002      	b.n	5356 <channel_set+0x32>
		} else if (channel < 40) {
    5350:	2827      	cmp	r0, #39	; 0x27
    5352:	d802      	bhi.n	535a <channel_set+0x36>
			radio_freq_chnl_set(28 + (2 * (channel - 11)));
    5354:	3003      	adds	r0, #3
    5356:	0040      	lsls	r0, r0, #1
    5358:	e7f1      	b.n	533e <channel_set+0x1a>
		} else {
			LL_ASSERT(0);
    535a:	4b0a      	ldr	r3, [pc, #40]	; (5384 <channel_set+0x60>)
    535c:	9301      	str	r3, [sp, #4]
    535e:	4b0a      	ldr	r3, [pc, #40]	; (5388 <channel_set+0x64>)
    5360:	9300      	str	r3, [sp, #0]
    5362:	490a      	ldr	r1, [pc, #40]	; (538c <channel_set+0x68>)
    5364:	4b0a      	ldr	r3, [pc, #40]	; (5390 <channel_set+0x6c>)
    5366:	4a0b      	ldr	r2, [pc, #44]	; (5394 <channel_set+0x70>)
    5368:	480b      	ldr	r0, [pc, #44]	; (5398 <channel_set+0x74>)
    536a:	f7fb ff1f 	bl	11ac <printk>
    536e:	2100      	movs	r1, #0
    5370:	4608      	mov	r0, r1
    5372:	f007 f96d 	bl	c650 <_SysFatalErrorHandler>
		}
		break;
	}

	radio_whiten_iv_set(channel);
    5376:	4620      	mov	r0, r4
}
    5378:	3704      	adds	r7, #4
    537a:	46bd      	mov	sp, r7
    537c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
			LL_ASSERT(0);
		}
		break;
	}

	radio_whiten_iv_set(channel);
    5380:	f7fd be9e 	b.w	30c0 <radio_whiten_iv_set>
    5384:	0000dd4e 	.word	0x0000dd4e
    5388:	0000dd53 	.word	0x0000dd53
    538c:	0000dd04 	.word	0x0000dd04
    5390:	0000f20b 	.word	0x0000f20b
    5394:	0000dcfd 	.word	0x0000dcfd
    5398:	0000e191 	.word	0x0000e191

0000539c <adv_setup>:

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    539c:	b5b0      	push	{r4, r5, r7, lr}
	uint8_t bitmap;
	uint8_t channel;

	/* Use latest adv packet */
	if (_radio.advertiser.adv_data.first !=
    539e:	4c1c      	ldr	r4, [pc, #112]	; (5410 <adv_setup+0x74>)
    53a0:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
    53a4:	f894 2158 	ldrb.w	r2, [r4, #344]	; 0x158
    53a8:	429a      	cmp	r2, r3

	DEBUG_RADIO_PREPARE_A(0);
}

static void adv_setup(void)
{
    53aa:	af00      	add	r7, sp, #0
	uint8_t bitmap;
	uint8_t channel;

	/* Use latest adv packet */
	if (_radio.advertiser.adv_data.first !=
    53ac:	d006      	beq.n	53bc <adv_setup+0x20>
	    _radio.advertiser.adv_data.last) {
		uint8_t first;

		first = _radio.advertiser.adv_data.first + 1;
    53ae:	3301      	adds	r3, #1
    53b0:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
			first = 0;
    53b2:	2b02      	cmp	r3, #2
    53b4:	bf08      	it	eq
    53b6:	2300      	moveq	r3, #0
		}
		_radio.advertiser.adv_data.first = first;
    53b8:	f884 3157 	strb.w	r3, [r4, #343]	; 0x157
	}

	radio_pkt_tx_set(&_radio.advertiser.adv_data.data
    53bc:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
    53c0:	2028      	movs	r0, #40	; 0x28
    53c2:	fb00 4003 	mla	r0, r0, r3, r4
    53c6:	f200 1007 	addw	r0, r0, #263	; 0x107
    53ca:	f7fd fec5 	bl	3158 <radio_pkt_tx_set>
			 [_radio.advertiser.adv_data.first][0]);
	radio_switch_complete_and_rx();
    53ce:	f7fd ff37 	bl	3240 <radio_switch_complete_and_rx>

	bitmap = _radio.advertiser.chl_map_current;
    53d2:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    53d6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    53da:	b2da      	uxtb	r2, r3
    53dc:	4611      	mov	r1, r2
	channel = 0;
	while ((bitmap & 0x01) == 0) {
    53de:	2000      	movs	r0, #0
    53e0:	f011 0f01 	tst.w	r1, #1
    53e4:	f100 0501 	add.w	r5, r0, #1
    53e8:	d102      	bne.n	53f0 <adv_setup+0x54>
		channel++;
		bitmap >>= 1;
    53ea:	0849      	lsrs	r1, r1, #1
    53ec:	4628      	mov	r0, r5
    53ee:	e7f7      	b.n	53e0 <adv_setup+0x44>
	}
	_radio.advertiser.chl_map_current &=
    53f0:	3a01      	subs	r2, #1
    53f2:	4013      	ands	r3, r2
    53f4:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
		(_radio.advertiser.chl_map_current - 1);

	channel_set(37 + channel);
    53f8:	b2c0      	uxtb	r0, r0
	channel = 0;
	while ((bitmap & 0x01) == 0) {
		channel++;
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
    53fa:	f363 02c5 	bfi	r2, r3, #3, #3
		(_radio.advertiser.chl_map_current - 1);

	channel_set(37 + channel);
    53fe:	3025      	adds	r0, #37	; 0x25
	channel = 0;
	while ((bitmap & 0x01) == 0) {
		channel++;
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
    5400:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
		(_radio.advertiser.chl_map_current - 1);

	channel_set(37 + channel);
}
    5404:	46bd      	mov	sp, r7
    5406:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		bitmap >>= 1;
	}
	_radio.advertiser.chl_map_current &=
		(_radio.advertiser.chl_map_current - 1);

	channel_set(37 + channel);
    540a:	f7ff bf8b 	b.w	5324 <channel_set>
    540e:	bf00      	nop
    5410:	20000b44 	.word	0x20000b44
    5414:	00000000 	.word	0x00000000

00005418 <sched_free_win_offset_calc>:
					   uint8_t is_select,
					   uint32_t *ticks_to_offset_next,
					   uint16_t conn_interval,
					   uint8_t *offset_max,
					   uint8_t *win_offset)
{
    5418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    541c:	b08f      	sub	sp, #60	; 0x3c
    541e:	af04      	add	r7, sp, #16
    5420:	4682      	mov	sl, r0
    5422:	60fb      	str	r3, [r7, #12]
	uint8_t ticker_id_prev;
	uint8_t ticker_id_other;
	uint8_t offset_index;
	uint16_t _win_offset;

	if (conn_curr->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    5424:	6803      	ldr	r3, [r0, #0]
					   uint8_t is_select,
					   uint32_t *ticks_to_offset_next,
					   uint16_t conn_interval,
					   uint8_t *offset_max,
					   uint8_t *win_offset)
{
    5426:	6039      	str	r1, [r7, #0]
	uint8_t ticker_id_prev;
	uint8_t ticker_id_other;
	uint8_t offset_index;
	uint16_t _win_offset;

	if (conn_curr->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    5428:	2b00      	cmp	r3, #0
					   uint8_t is_select,
					   uint32_t *ticks_to_offset_next,
					   uint16_t conn_interval,
					   uint8_t *offset_max,
					   uint8_t *win_offset)
{
    542a:	4691      	mov	r9, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id_other;
	uint8_t offset_index;
	uint16_t _win_offset;

	if (conn_curr->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    542c:	da08      	bge.n	5440 <sched_free_win_offset_calc+0x28>
				(conn_curr->hdr.ticks_active_to_start >
				conn_curr->hdr.ticks_preempt_to_start) ?
				conn_curr->hdr.ticks_active_to_start :
				conn_curr->hdr.ticks_preempt_to_start;

		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
    542e:	6881      	ldr	r1, [r0, #8]
    5430:	6842      	ldr	r2, [r0, #4]
    5432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    5436:	4291      	cmp	r1, r2
    5438:	bf2c      	ite	cs
    543a:	1a5b      	subcs	r3, r3, r1
    543c:	1a9b      	subcc	r3, r3, r2
    543e:	e000      	b.n	5442 <sched_free_win_offset_calc+0x2a>
					   uint32_t *ticks_to_offset_next,
					   uint16_t conn_interval,
					   uint8_t *offset_max,
					   uint8_t *win_offset)
{
	uint32_t ticks_prepare_reduced = 0;
    5440:	2300      	movs	r3, #0
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
    5442:	2400      	movs	r4, #0
					   uint32_t *ticks_to_offset_next,
					   uint16_t conn_interval,
					   uint8_t *offset_max,
					   uint8_t *win_offset)
{
	uint32_t ticks_prepare_reduced = 0;
    5444:	60bb      	str	r3, [r7, #8]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    5446:	23ff      	movs	r3, #255	; 0xff
    5448:	767b      	strb	r3, [r7, #25]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
    544a:	837c      	strh	r4, [r7, #26]
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    544c:	61fc      	str	r4, [r7, #28]
    544e:	623c      	str	r4, [r7, #32]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
    5450:	613b      	str	r3, [r7, #16]
    5452:	469b      	mov	fp, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
		ticks_anchor_prev = offset_index = _win_offset = 0;
	ticks_slot_prev_abs = 0;
    5454:	617c      	str	r4, [r7, #20]
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
	}

	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
    5456:	4625      	mov	r5, r4
		ticks_anchor_prev = offset_index = _win_offset = 0;
    5458:	607c      	str	r4, [r7, #4]
	do {
		uint32_t volatile ticker_status;
		struct connection *conn;

		ticker_status =
			ticker_next_slot_get(
    545a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    545e:	9302      	str	r3, [sp, #8]
    5460:	4b7d      	ldr	r3, [pc, #500]	; (5658 <sched_free_win_offset_calc+0x240>)
    5462:	9301      	str	r3, [sp, #4]
    5464:	f107 0320 	add.w	r3, r7, #32
    5468:	9300      	str	r3, [sp, #0]
    546a:	f107 0219 	add.w	r2, r7, #25
    546e:	f107 031c 	add.w	r3, r7, #28
    5472:	2101      	movs	r1, #1
    5474:	2000      	movs	r0, #0
    5476:	f7fe ffff 	bl	4478 <ticker_next_slot_get>
	ticks_slot_prev_abs = 0;
	do {
		uint32_t volatile ticker_status;
		struct connection *conn;

		ticker_status =
    547a:	6278      	str	r0, [r7, #36]	; 0x24
					     RADIO_TICKER_USER_ID_JOB,
					     &ticker_id, &ticks_anchor,
					     &ticks_to_expire, ticker_if_done,
					     (void *)&ticker_status);

		while (ticker_status == TICKER_STATUS_BUSY) {
    547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    547e:	2b02      	cmp	r3, #2
    5480:	d104      	bne.n	548c <sched_free_win_offset_calc+0x74>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    5482:	2101      	movs	r1, #1
    5484:	2000      	movs	r0, #0
    5486:	f7ff f875 	bl	4574 <ticker_job_sched>
    548a:	e7f7      	b.n	547c <sched_free_win_offset_calc+0x64>
					 RADIO_TICKER_USER_ID_JOB);
		}

		LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    548e:	b16b      	cbz	r3, 54ac <sched_free_win_offset_calc+0x94>
    5490:	4b72      	ldr	r3, [pc, #456]	; (565c <sched_free_win_offset_calc+0x244>)
    5492:	9301      	str	r3, [sp, #4]
    5494:	4b72      	ldr	r3, [pc, #456]	; (5660 <sched_free_win_offset_calc+0x248>)
    5496:	9300      	str	r3, [sp, #0]
    5498:	4972      	ldr	r1, [pc, #456]	; (5664 <sched_free_win_offset_calc+0x24c>)
    549a:	4b73      	ldr	r3, [pc, #460]	; (5668 <sched_free_win_offset_calc+0x250>)
    549c:	4a73      	ldr	r2, [pc, #460]	; (566c <sched_free_win_offset_calc+0x254>)
    549e:	4874      	ldr	r0, [pc, #464]	; (5670 <sched_free_win_offset_calc+0x258>)
    54a0:	f7fb fe84 	bl	11ac <printk>
    54a4:	2100      	movs	r1, #0
    54a6:	4608      	mov	r0, r1
    54a8:	f007 f8d2 	bl	c650 <_SysFatalErrorHandler>

		if (ticker_id == 0xff) {
    54ac:	7e7b      	ldrb	r3, [r7, #25]
    54ae:	2bff      	cmp	r3, #255	; 0xff
    54b0:	f000 8093 	beq.w	55da <sched_free_win_offset_calc+0x1c2>
			break;
		}

		if ((ticker_id_prev != 0xff) &&
    54b4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    54b8:	d011      	beq.n	54de <sched_free_win_offset_calc+0xc6>
    54ba:	69fb      	ldr	r3, [r7, #28]
    54bc:	687a      	ldr	r2, [r7, #4]
    54be:	429a      	cmp	r2, r3
    54c0:	d00d      	beq.n	54de <sched_free_win_offset_calc+0xc6>
		    (ticks_anchor != ticks_anchor_prev)) {
			LL_ASSERT(0);
    54c2:	4b66      	ldr	r3, [pc, #408]	; (565c <sched_free_win_offset_calc+0x244>)
    54c4:	9301      	str	r3, [sp, #4]
    54c6:	4b66      	ldr	r3, [pc, #408]	; (5660 <sched_free_win_offset_calc+0x248>)
    54c8:	9300      	str	r3, [sp, #0]
    54ca:	4966      	ldr	r1, [pc, #408]	; (5664 <sched_free_win_offset_calc+0x24c>)
    54cc:	4b66      	ldr	r3, [pc, #408]	; (5668 <sched_free_win_offset_calc+0x250>)
    54ce:	4a67      	ldr	r2, [pc, #412]	; (566c <sched_free_win_offset_calc+0x254>)
    54d0:	4868      	ldr	r0, [pc, #416]	; (5674 <sched_free_win_offset_calc+0x25c>)
    54d2:	f7fb fe6b 	bl	11ac <printk>
    54d6:	2100      	movs	r1, #0
    54d8:	4608      	mov	r0, r1
    54da:	f007 f8b9 	bl	c650 <_SysFatalErrorHandler>
		}

		if (ticker_id < RADIO_TICKER_ID_ADV) {
    54de:	7e7a      	ldrb	r2, [r7, #25]
    54e0:	2a04      	cmp	r2, #4
    54e2:	d975      	bls.n	55d0 <sched_free_win_offset_calc+0x1b8>
			continue;
		}

		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    54e4:	2a06      	cmp	r2, #6
    54e6:	d972      	bls.n	55ce <sched_free_win_offset_calc+0x1b6>
			 */
			ticker_id_other = ticker_id;
			continue;
		}

		if (ticker_id_other != 0xFF) {
    54e8:	693b      	ldr	r3, [r7, #16]
    54ea:	2bff      	cmp	r3, #255	; 0xff
    54ec:	d175      	bne.n	55da <sched_free_win_offset_calc+0x1c2>
			break;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    54ee:	4b62      	ldr	r3, [pc, #392]	; (5678 <sched_free_win_offset_calc+0x260>)
    54f0:	3a07      	subs	r2, #7
    54f2:	b292      	uxth	r2, r2
    54f4:	f44f 7188 	mov.w	r1, #272	; 0x110
    54f8:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    54fc:	f7fd fb37 	bl	2b6e <mem_get>
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));

		if ((conn != conn_curr) && ((is_select) ||
    5500:	4582      	cmp	sl, r0

		if (ticker_id_other != 0xFF) {
			break;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    5502:	4680      	mov	r8, r0
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));

		if ((conn != conn_curr) && ((is_select) ||
    5504:	d064      	beq.n	55d0 <sched_free_win_offset_calc+0x1b8>
    5506:	683b      	ldr	r3, [r7, #0]
    5508:	b91b      	cbnz	r3, 5512 <sched_free_win_offset_calc+0xfa>
    550a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    550e:	07db      	lsls	r3, r3, #31
    5510:	d45e      	bmi.n	55d0 <sched_free_win_offset_calc+0x1b8>
					    (conn->role.master.role == 0))) {
			uint32_t ticks_to_expire_normal =
    5512:	68bb      	ldr	r3, [r7, #8]
    5514:	6a3e      	ldr	r6, [r7, #32]
    5516:	441e      	add	r6, r3
				ticks_to_expire + ticks_prepare_reduced;

			if (conn->hdr.ticks_xtal_to_start &
    5518:	f8d8 3000 	ldr.w	r3, [r8]
    551c:	2b00      	cmp	r3, #0
    551e:	da0c      	bge.n	553a <sched_free_win_offset_calc+0x122>
					(conn->hdr.ticks_active_to_start >
					 conn->hdr.ticks_preempt_to_start) ?
					conn->hdr.ticks_active_to_start :
					conn->hdr.ticks_preempt_to_start;

				ticks_to_expire_normal -=
    5520:	f8d8 0008 	ldr.w	r0, [r8, #8]
    5524:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    552c:	4288      	cmp	r0, r1
    552e:	bf2c      	ite	cs
    5530:	ebc2 0300 	rsbcs	r3, r2, r0
    5534:	ebc2 0301 	rsbcc	r3, r2, r1
    5538:	441e      	add	r6, r3
					((conn->hdr.ticks_xtal_to_start &
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if (*ticks_to_offset_next < ticks_to_expire_normal) {
    553a:	f8d9 3000 	ldr.w	r3, [r9]
    553e:	429e      	cmp	r6, r3
    5540:	d93b      	bls.n	55ba <sched_free_win_offset_calc+0x1a2>
    5542:	429d      	cmp	r5, r3
    5544:	bf38      	it	cc
    5546:	461d      	movcc	r5, r3
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    5548:	f04f 0b07 	mov.w	fp, #7
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
					ticks_to_expire_prev =
						*ticks_to_offset_next;
				}

				while ((offset_index < *offset_max) &&
    554c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    554e:	781b      	ldrb	r3, [r3, #0]
    5550:	42a3      	cmp	r3, r4
    5552:	d92c      	bls.n	55ae <sched_free_win_offset_calc+0x196>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
    5554:	4629      	mov	r1, r5
    5556:	4630      	mov	r0, r6
    5558:	f7ff f826 	bl	45a8 <ticker_ticks_diff_get>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
					ticks_to_expire_prev =
						*ticks_to_offset_next;
				}

				while ((offset_index < *offset_max) &&
    555c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    5560:	697a      	ldr	r2, [r7, #20]
    5562:	3364      	adds	r3, #100	; 0x64
    5564:	4413      	add	r3, r2
    5566:	4298      	cmp	r0, r3
    5568:	d321      	bcc.n	55ae <sched_free_win_offset_calc+0x196>
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    556a:	697b      	ldr	r3, [r7, #20]
    556c:	4a43      	ldr	r2, [pc, #268]	; (567c <sched_free_win_offset_calc+0x264>)
    556e:	18eb      	adds	r3, r5, r3
    5570:	fba3 0102 	umull	r0, r1, r3, r2
    5574:	fb0b 1103 	mla	r1, fp, r3, r1
    5578:	a335      	add	r3, pc, #212	; (adr r3, 5650 <sched_free_win_offset_calc+0x238>)
    557a:	e9d3 2300 	ldrd	r2, r3, [r3]
    557e:	f7fa fe4d 	bl	21c <__aeabi_uldivmod>
    5582:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5586:	fbb0 f0f3 	udiv	r0, r0, r3
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
    558a:	68fb      	ldr	r3, [r7, #12]
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    558c:	b280      	uxth	r0, r0
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
    558e:	4298      	cmp	r0, r3
							      ticks_to_expire_prev) >=
					(ticks_slot_prev_abs +
					 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							    625 + 1250) +
					 conn->hdr.ticks_slot))) {
					_win_offset =
    5590:	8378      	strh	r0, [r7, #26]
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
    5592:	d20b      	bcs.n	55ac <sched_free_win_offset_calc+0x194>
						ticks_to_expire_prev = 0;

						break;
					}

					memcpy(win_offset +
    5594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5596:	2202      	movs	r2, #2
    5598:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    559c:	f107 011a 	add.w	r1, r7, #26
					       (sizeof(uint16_t) * offset_index),
					       &_win_offset, sizeof(uint16_t));
					offset_index++;
    55a0:	3401      	adds	r4, #1
						ticks_to_expire_prev = 0;

						break;
					}

					memcpy(win_offset +
    55a2:	f7fb fc5c 	bl	e5e <memcpy>
					       (sizeof(uint16_t) * offset_index),
					       &_win_offset, sizeof(uint16_t));
					offset_index++;
    55a6:	b2e4      	uxtb	r4, r4

					ticks_to_expire_prev +=
    55a8:	3528      	adds	r5, #40	; 0x28
    55aa:	e7cf      	b.n	554c <sched_free_win_offset_calc+0x134>
					 conn->hdr.ticks_slot))) {
					_win_offset =
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
								   ticks_slot_prev_abs) / 1250;
					if (_win_offset >= conn_interval) {
						ticks_to_expire_prev = 0;
    55ac:	2500      	movs	r5, #0
						TICKER_US_TO_TICKS(1250);
				}

				*ticks_to_offset_next = ticks_to_expire_prev;

				if (_win_offset >= conn_interval) {
    55ae:	8b7b      	ldrh	r3, [r7, #26]
    55b0:	68fa      	ldr	r2, [r7, #12]

					ticks_to_expire_prev +=
						TICKER_US_TO_TICKS(1250);
				}

				*ticks_to_offset_next = ticks_to_expire_prev;
    55b2:	f8c9 5000 	str.w	r5, [r9]

				if (_win_offset >= conn_interval) {
    55b6:	4293      	cmp	r3, r2
    55b8:	d20f      	bcs.n	55da <sched_free_win_offset_calc+0x1c2>
					break;
				}
			}

			ticks_anchor_prev = ticks_anchor;
    55ba:	69fb      	ldr	r3, [r7, #28]
    55bc:	607b      	str	r3, [r7, #4]
			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    55be:	f8d8 300c 	ldr.w	r3, [r8, #12]
					break;
				}
			}

			ticks_anchor_prev = ticks_anchor;
			ticker_id_prev = ticker_id;
    55c2:	f897 b019 	ldrb.w	fp, [r7, #25]
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    55c6:	3364      	adds	r3, #100	; 0x64
    55c8:	617b      	str	r3, [r7, #20]
    55ca:	4635      	mov	r5, r6
    55cc:	e000      	b.n	55d0 <sched_free_win_offset_calc+0x1b8>
    55ce:	613a      	str	r2, [r7, #16]
				TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
						   625 + 1250) +
				conn->hdr.ticks_slot;
		}
	} while (offset_index < *offset_max);
    55d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    55d2:	781b      	ldrb	r3, [r3, #0]
    55d4:	42a3      	cmp	r3, r4
    55d6:	f63f af40 	bhi.w	545a <sched_free_win_offset_calc+0x42>

	if (ticker_id == 0xFF) {
    55da:	7e7b      	ldrb	r3, [r7, #25]
    55dc:	2bff      	cmp	r3, #255	; 0xff
    55de:	d12e      	bne.n	563e <sched_free_win_offset_calc+0x226>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
    55e0:	f8d9 3000 	ldr.w	r3, [r9]
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
			_win_offset =
    55e4:	4e25      	ldr	r6, [pc, #148]	; (567c <sched_free_win_offset_calc+0x264>)
    55e6:	429d      	cmp	r5, r3
    55e8:	bf38      	it	cc
    55ea:	461d      	movcc	r5, r3
    55ec:	f04f 0807 	mov.w	r8, #7
	if (ticker_id == 0xFF) {
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
    55f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    55f2:	781b      	ldrb	r3, [r3, #0]
    55f4:	42a3      	cmp	r3, r4
    55f6:	d920      	bls.n	563a <sched_free_win_offset_calc+0x222>
			_win_offset =
    55f8:	697b      	ldr	r3, [r7, #20]
    55fa:	18eb      	adds	r3, r5, r3
    55fc:	fba3 0106 	umull	r0, r1, r3, r6
    5600:	fb08 1103 	mla	r1, r8, r3, r1
    5604:	a312      	add	r3, pc, #72	; (adr r3, 5650 <sched_free_win_offset_calc+0x238>)
    5606:	e9d3 2300 	ldrd	r2, r3, [r3]
    560a:	f7fa fe07 	bl	21c <__aeabi_uldivmod>
    560e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    5612:	fbb0 f0f3 	udiv	r0, r0, r3
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
    5616:	68fb      	ldr	r3, [r7, #12]
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
			_win_offset =
    5618:	b280      	uxth	r0, r0
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
    561a:	4283      	cmp	r3, r0
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
			ticks_to_expire_prev = *ticks_to_offset_next;
		}

		while (offset_index < *offset_max) {
			_win_offset =
    561c:	8378      	strh	r0, [r7, #26]
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
    561e:	d90b      	bls.n	5638 <sched_free_win_offset_calc+0x220>
				ticks_to_expire_prev = 0;

				break;
			}

			memcpy(win_offset + (sizeof(uint16_t) * offset_index),
    5620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5622:	2202      	movs	r2, #2
    5624:	eb03 0044 	add.w	r0, r3, r4, lsl #1
    5628:	f107 011a 	add.w	r1, r7, #26
			       &_win_offset, sizeof(uint16_t));
			offset_index++;
    562c:	3401      	adds	r4, #1
				ticks_to_expire_prev = 0;

				break;
			}

			memcpy(win_offset + (sizeof(uint16_t) * offset_index),
    562e:	f7fb fc16 	bl	e5e <memcpy>
			       &_win_offset, sizeof(uint16_t));
			offset_index++;
    5632:	b2e4      	uxtb	r4, r4

			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
    5634:	3528      	adds	r5, #40	; 0x28
    5636:	e7db      	b.n	55f0 <sched_free_win_offset_calc+0x1d8>
		while (offset_index < *offset_max) {
			_win_offset =
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
						   ticks_slot_prev_abs) / 1250;
			if (_win_offset >= conn_interval) {
				ticks_to_expire_prev = 0;
    5638:	2500      	movs	r5, #0
			offset_index++;

			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
    563a:	f8c9 5000 	str.w	r5, [r9]
	}

	*offset_max = offset_index;
    563e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
    5640:	372c      	adds	r7, #44	; 0x2c
		}

		*ticks_to_offset_next = ticks_to_expire_prev;
	}

	*offset_max = offset_index;
    5642:	701c      	strb	r4, [r3, #0]
}
    5644:	46bd      	mov	sp, r7
    5646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    564a:	bf00      	nop
    564c:	f3af 8000 	nop.w
    5650:	3b9aca00 	.word	0x3b9aca00
    5654:	00000000 	.word	0x00000000
    5658:	000045c1 	.word	0x000045c1
    565c:	0000dd4e 	.word	0x0000dd4e
    5660:	0000dd53 	.word	0x0000dd53
    5664:	0000dd04 	.word	0x0000dd04
    5668:	0000f2fe 	.word	0x0000f2fe
    566c:	0000dcfd 	.word	0x0000dcfd
    5670:	0000e3dd 	.word	0x0000e3dd
    5674:	0000e191 	.word	0x0000e191
    5678:	20000b44 	.word	0x20000b44
    567c:	1afd498d 	.word	0x1afd498d

00005680 <mayfly_sched_win_offset_select>:
				   &offset_max,
				   (uint8_t *)conn->llcp.connection_update.pdu_win_offset);
}

static void mayfly_sched_win_offset_select(void *params)
{
    5680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5684:	b089      	sub	sp, #36	; 0x24
	uint16_t win_offset_m[OFFSET_M_MAX];
	uint8_t offset_m_max = OFFSET_M_MAX;
	uint16_t win_offset_s;
	uint8_t offset_index_s = 0;

	ticks_to_offset =
    5686:	f8b0 2076 	ldrh.w	r2, [r0, #118]	; 0x76
				   &offset_max,
				   (uint8_t *)conn->llcp.connection_update.pdu_win_offset);
}

static void mayfly_sched_win_offset_select(void *params)
{
    568a:	af02      	add	r7, sp, #8
    568c:	4604      	mov	r4, r0
	uint16_t win_offset_m[OFFSET_M_MAX];
	uint8_t offset_m_max = OFFSET_M_MAX;
	uint16_t win_offset_s;
	uint8_t offset_index_s = 0;

	ticks_to_offset =
    568e:	4834      	ldr	r0, [pc, #208]	; (5760 <mayfly_sched_win_offset_select+0xe0>)
#define OFFSET_S_MAX 6
#define OFFSET_M_MAX 6
	struct connection *conn = (struct connection *)params;
	uint32_t ticks_to_offset;
	uint16_t win_offset_m[OFFSET_M_MAX];
	uint8_t offset_m_max = OFFSET_M_MAX;
    5690:	2306      	movs	r3, #6
	uint16_t win_offset_s;
	uint8_t offset_index_s = 0;

	ticks_to_offset =
    5692:	fba2 0100 	umull	r0, r1, r2, r0
#define OFFSET_S_MAX 6
#define OFFSET_M_MAX 6
	struct connection *conn = (struct connection *)params;
	uint32_t ticks_to_offset;
	uint16_t win_offset_m[OFFSET_M_MAX];
	uint8_t offset_m_max = OFFSET_M_MAX;
    5696:	717b      	strb	r3, [r7, #5]
	uint16_t win_offset_s;
	uint8_t offset_index_s = 0;

	ticks_to_offset =
    5698:	f240 1323 	movw	r3, #291	; 0x123
    569c:	fb03 1102 	mla	r1, r3, r2, r1
    56a0:	a32d      	add	r3, pc, #180	; (adr r3, 5758 <mayfly_sched_win_offset_select+0xd8>)
    56a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    56a6:	f7fa fdb9 	bl	21c <__aeabi_uldivmod>
    56aa:	f107 0218 	add.w	r2, r7, #24
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    56ae:	1d79      	adds	r1, r7, #5
    56b0:	f107 060c 	add.w	r6, r7, #12
	uint16_t win_offset_m[OFFSET_M_MAX];
	uint8_t offset_m_max = OFFSET_M_MAX;
	uint16_t win_offset_s;
	uint8_t offset_index_s = 0;

	ticks_to_offset =
    56b4:	f842 0d10 	str.w	r0, [r2, #-16]!
		TICKER_US_TO_TICKS(conn->llcp.connection_update.offset0 * 1250);

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
    56b8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    56bc:	9100      	str	r1, [sp, #0]
    56be:	9601      	str	r6, [sp, #4]
    56c0:	2101      	movs	r1, #1
    56c2:	4620      	mov	r0, r4
    56c4:	f7ff fea8 	bl	5418 <sched_free_win_offset_calc>
    56c8:	f104 0576 	add.w	r5, r4, #118	; 0x76
    56cc:	f104 0882 	add.w	r8, r4, #130	; 0x82
		memcpy((uint8_t *)&win_offset_s,
		       ((uint8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(uint16_t) * offset_index_s)), sizeof(uint16_t));

		while (offset_index_m < offset_m_max) {
			if ((win_offset_s != 0xffff) &&
    56d0:	f64f 79ff 	movw	r9, #65535	; 0xffff
				   &offset_m_max, (uint8_t *)&win_offset_m[0]);

	while (offset_index_s < OFFSET_S_MAX) {
		uint8_t offset_index_m = 0;

		memcpy((uint8_t *)&win_offset_s,
    56d4:	2202      	movs	r2, #2
    56d6:	4629      	mov	r1, r5
    56d8:	1db8      	adds	r0, r7, #6
    56da:	f7fb fbc0 	bl	e5e <memcpy>
		       ((uint8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(uint16_t) * offset_index_s)), sizeof(uint16_t));

		while (offset_index_m < offset_m_max) {
    56de:	7978      	ldrb	r0, [r7, #5]
			if ((win_offset_s != 0xffff) &&
    56e0:	88fa      	ldrh	r2, [r7, #6]

		memcpy((uint8_t *)&win_offset_s,
		       ((uint8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(uint16_t) * offset_index_s)), sizeof(uint16_t));

		while (offset_index_m < offset_m_max) {
    56e2:	2300      	movs	r3, #0
    56e4:	b2d9      	uxtb	r1, r3
    56e6:	4288      	cmp	r0, r1
    56e8:	d907      	bls.n	56fa <mayfly_sched_win_offset_select+0x7a>
			if ((win_offset_s != 0xffff) &&
    56ea:	454a      	cmp	r2, r9
    56ec:	d003      	beq.n	56f6 <mayfly_sched_win_offset_select+0x76>
			    (win_offset_s == win_offset_m[offset_index_m])) {
    56ee:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
		memcpy((uint8_t *)&win_offset_s,
		       ((uint8_t *)&conn->llcp.connection_update.offset0 +
			(sizeof(uint16_t) * offset_index_s)), sizeof(uint16_t));

		while (offset_index_m < offset_m_max) {
			if ((win_offset_s != 0xffff) &&
    56f2:	428a      	cmp	r2, r1
    56f4:	d020      	beq.n	5738 <mayfly_sched_win_offset_select+0xb8>
    56f6:	3301      	adds	r3, #1
    56f8:	e7f4      	b.n	56e4 <mayfly_sched_win_offset_select+0x64>
    56fa:	3502      	adds	r5, #2

	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
				   conn->llcp.connection_update.interval,
				   &offset_m_max, (uint8_t *)&win_offset_m[0]);

	while (offset_index_s < OFFSET_S_MAX) {
    56fc:	4545      	cmp	r5, r8
    56fe:	d1e9      	bne.n	56d4 <mayfly_sched_win_offset_select+0x54>
		       &win_offset_s, sizeof(uint16_t));
	} else {
		struct pdu_data *pdu_ctrl_tx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    5700:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    5704:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* reset mutex */
		_radio.conn_upd = NULL;
    5708:	4b16      	ldr	r3, [pc, #88]	; (5764 <mayfly_sched_win_offset_select+0xe4>)
    570a:	2200      	movs	r2, #0
    570c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

		/* send reject_ind_ext */
		pdu_ctrl_tx = (struct pdu_data *)
			((uint8_t *)conn->llcp.connection_update.pdu_win_offset -
    5710:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
			 offsetof(struct pdu_data,
				  payload.llctrl.ctrldata.conn_update_req.win_offset));
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    5714:	f813 2c05 	ldrb.w	r2, [r3, #-5]
    5718:	f042 0203 	orr.w	r2, r2, #3
    571c:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
    5720:	2203      	movs	r2, #3
    5722:	f803 2c04 	strb.w	r2, [r3, #-4]
			offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_reject_ind_ext);
		pdu_ctrl_tx->payload.llctrl.opcode =
    5726:	2211      	movs	r2, #17
    5728:	f803 2c02 	strb.w	r2, [r3, #-2]
			PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT;
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    572c:	220f      	movs	r2, #15
    572e:	f803 2c01 	strb.w	r2, [r3, #-1]
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.
			error_code = 0x20; /* Unsupported parameter value */
    5732:	2220      	movs	r2, #32
    5734:	701a      	strb	r2, [r3, #0]
    5736:	e00a      	b.n	574e <mayfly_sched_win_offset_select+0xce>

		offset_index_s++;
	}

	if (offset_index_s < OFFSET_S_MAX) {
		conn->llcp.connection_update.win_offset_us =
    5738:	f240 43e2 	movw	r3, #1250	; 0x4e2
    573c:	4353      	muls	r3, r2
    573e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			win_offset_s * 1250;
		memcpy(conn->llcp.connection_update.pdu_win_offset,
    5742:	2202      	movs	r2, #2
    5744:	1db9      	adds	r1, r7, #6
    5746:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    574a:	f7fb fb88 	bl	e5e <memcpy>
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
		pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.
			error_code = 0x20; /* Unsupported parameter value */
	}
}
    574e:	371c      	adds	r7, #28
    5750:	46bd      	mov	sp, r7
    5752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5756:	bf00      	nop
    5758:	1afd498d 	.word	0x1afd498d
    575c:	00000007 	.word	0x00000007
    5760:	09ce5400 	.word	0x09ce5400
    5764:	20000b44 	.word	0x20000b44

00005768 <mayfly_sched_free_win_offset_calc>:

	*offset_max = offset_index;
}

static void mayfly_sched_free_win_offset_calc(void *params)
{
    5768:	b580      	push	{r7, lr}
    576a:	b084      	sub	sp, #16
    576c:	af02      	add	r7, sp, #8
	struct connection *conn = (struct connection *)params;
	uint32_t ticks_to_offset_default = 0;
    576e:	2300      	movs	r3, #0
    5770:	607b      	str	r3, [r7, #4]
	uint32_t *ticks_to_offset_next;
	uint8_t offset_max = 6;
    5772:	2306      	movs	r3, #6
    5774:	70fb      	strb	r3, [r7, #3]

	ticks_to_offset_next = &ticks_to_offset_default;

	if (conn->role.slave.role != 0) {
    5776:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    577a:	07db      	lsls	r3, r3, #31
		conn->llcp.connection_update.ticks_to_offset_next =
    577c:	bf42      	ittt	mi
    577e:	4602      	movmi	r2, r0
    5780:	6e43      	ldrmi	r3, [r0, #100]	; 0x64
    5782:	f842 3f88 	strmi.w	r3, [r2, #136]!

		ticks_to_offset_next =
			&conn->llcp.connection_update.ticks_to_offset_next;
	}

	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    5786:	f8d0 1090 	ldr.w	r1, [r0, #144]	; 0x90
    578a:	9101      	str	r1, [sp, #4]
    578c:	f107 0103 	add.w	r1, r7, #3
	struct connection *conn = (struct connection *)params;
	uint32_t ticks_to_offset_default = 0;
	uint32_t *ticks_to_offset_next;
	uint8_t offset_max = 6;

	ticks_to_offset_next = &ticks_to_offset_default;
    5790:	bf58      	it	pl
    5792:	1d3a      	addpl	r2, r7, #4

		ticks_to_offset_next =
			&conn->llcp.connection_update.ticks_to_offset_next;
	}

	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
    5794:	9100      	str	r1, [sp, #0]
    5796:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    579a:	2100      	movs	r1, #0
    579c:	f7ff fe3c 	bl	5418 <sched_free_win_offset_calc>
				   conn->llcp.connection_update.interval,
				   &offset_max,
				   (uint8_t *)conn->llcp.connection_update.pdu_win_offset);
}
    57a0:	3708      	adds	r7, #8
    57a2:	46bd      	mov	sp, r7
    57a4:	bd80      	pop	{r7, pc}
	...

000057a8 <sched_after_mstr_free_slot_get>:
#if SCHED_ADVANCED
static void sched_after_mstr_free_slot_get(uint8_t user_id,
					   uint32_t ticks_slot_abs,
					   uint32_t *ticks_anchor,
					   uint32_t *us_offset)
{
    57a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ac:	b08b      	sub	sp, #44	; 0x2c
    57ae:	af04      	add	r7, sp, #16
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_prev;
	uint32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    57b0:	2400      	movs	r4, #0
	uint8_t ticker_id_prev;
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_prev;
	uint32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    57b2:	25ff      	movs	r5, #255	; 0xff
#if SCHED_ADVANCED
static void sched_after_mstr_free_slot_get(uint8_t user_id,
					   uint32_t ticks_slot_abs,
					   uint32_t *ticks_anchor,
					   uint32_t *us_offset)
{
    57b4:	4681      	mov	r9, r0
    57b6:	468a      	mov	sl, r1
    57b8:	4693      	mov	fp, r2
    57ba:	4698      	mov	r8, r3
	uint8_t ticker_id_prev;
	uint32_t ticks_to_expire;
	uint32_t ticks_to_expire_prev;
	uint32_t ticks_slot_prev_abs;

	ticker_id = ticker_id_prev = 0xff;
    57bc:	73fd      	strb	r5, [r7, #15]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
    57be:	601c      	str	r4, [r3, #0]
    57c0:	613c      	str	r4, [r7, #16]
    57c2:	4626      	mov	r6, r4
	while (1) {
		uint32_t volatile ticker_status;
		struct connection *conn;

		ticker_status =
			ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    57c4:	f107 0314 	add.w	r3, r7, #20
    57c8:	9302      	str	r3, [sp, #8]
    57ca:	4b3d      	ldr	r3, [pc, #244]	; (58c0 <sched_after_mstr_free_slot_get+0x118>)
    57cc:	9301      	str	r3, [sp, #4]
    57ce:	f107 0310 	add.w	r3, r7, #16
    57d2:	9300      	str	r3, [sp, #0]
    57d4:	f107 020f 	add.w	r2, r7, #15
    57d8:	465b      	mov	r3, fp
    57da:	4649      	mov	r1, r9
    57dc:	2000      	movs	r0, #0
    57de:	f7fe fe4b 	bl	4478 <ticker_next_slot_get>
	ticks_slot_prev_abs = 0;
	while (1) {
		uint32_t volatile ticker_status;
		struct connection *conn;

		ticker_status =
    57e2:	6178      	str	r0, [r7, #20]
			ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					     user_id, &ticker_id, ticks_anchor,
					     &ticks_to_expire, ticker_if_done,
					     (void *)&ticker_status);

		while (ticker_status == TICKER_STATUS_BUSY) {
    57e4:	697b      	ldr	r3, [r7, #20]
    57e6:	2b02      	cmp	r3, #2
    57e8:	d104      	bne.n	57f4 <sched_after_mstr_free_slot_get+0x4c>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    57ea:	4649      	mov	r1, r9
    57ec:	2000      	movs	r0, #0
    57ee:	f7fe fec1 	bl	4574 <ticker_job_sched>
    57f2:	e7f7      	b.n	57e4 <sched_after_mstr_free_slot_get+0x3c>
					 user_id);
		}

		LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    57f4:	697b      	ldr	r3, [r7, #20]
    57f6:	b16b      	cbz	r3, 5814 <sched_after_mstr_free_slot_get+0x6c>
    57f8:	4b32      	ldr	r3, [pc, #200]	; (58c4 <sched_after_mstr_free_slot_get+0x11c>)
    57fa:	9301      	str	r3, [sp, #4]
    57fc:	4b32      	ldr	r3, [pc, #200]	; (58c8 <sched_after_mstr_free_slot_get+0x120>)
    57fe:	9300      	str	r3, [sp, #0]
    5800:	4932      	ldr	r1, [pc, #200]	; (58cc <sched_after_mstr_free_slot_get+0x124>)
    5802:	4b33      	ldr	r3, [pc, #204]	; (58d0 <sched_after_mstr_free_slot_get+0x128>)
    5804:	4a33      	ldr	r2, [pc, #204]	; (58d4 <sched_after_mstr_free_slot_get+0x12c>)
    5806:	4834      	ldr	r0, [pc, #208]	; (58d8 <sched_after_mstr_free_slot_get+0x130>)
    5808:	f7fb fcd0 	bl	11ac <printk>
    580c:	2100      	movs	r1, #0
    580e:	4608      	mov	r0, r1
    5810:	f006 ff1e 	bl	c650 <_SysFatalErrorHandler>

		if (ticker_id == 0xff) {
    5814:	7bfa      	ldrb	r2, [r7, #15]
    5816:	2aff      	cmp	r2, #255	; 0xff
    5818:	d045      	beq.n	58a6 <sched_after_mstr_free_slot_get+0xfe>
			break;
		}

		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
    581a:	2a06      	cmp	r2, #6
    581c:	d9d2      	bls.n	57c4 <sched_after_mstr_free_slot_get+0x1c>
			continue;
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    581e:	4b2f      	ldr	r3, [pc, #188]	; (58dc <sched_after_mstr_free_slot_get+0x134>)
    5820:	3a07      	subs	r2, #7
    5822:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    5826:	b292      	uxth	r2, r2
    5828:	f44f 7188 	mov.w	r1, #272	; 0x110
    582c:	f7fd f99f 	bl	2b6e <mem_get>
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));
		if ((conn) && (conn->role.master.role == 0)) {
    5830:	4603      	mov	r3, r0
    5832:	2800      	cmp	r0, #0
    5834:	d0c6      	beq.n	57c4 <sched_after_mstr_free_slot_get+0x1c>
    5836:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
    583a:	07d2      	lsls	r2, r2, #31
    583c:	d4c2      	bmi.n	57c4 <sched_after_mstr_free_slot_get+0x1c>
			uint32_t ticks_to_expire_normal = ticks_to_expire;

			if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    583e:	f8d0 e000 	ldr.w	lr, [r0]
		}

		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
			       (ticker_id - RADIO_TICKER_ID_FIRST_CONNECTION));
		if ((conn) && (conn->role.master.role == 0)) {
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    5842:	693a      	ldr	r2, [r7, #16]

			if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    5844:	f1be 0f00 	cmp.w	lr, #0
    5848:	da09      	bge.n	585e <sched_after_mstr_free_slot_get+0xb6>
    584a:	6841      	ldr	r1, [r0, #4]
    584c:	6880      	ldr	r0, [r0, #8]
					(conn->hdr.ticks_active_to_start >
					 conn->hdr.ticks_preempt_to_start) ?
					conn->hdr.ticks_active_to_start :
					conn->hdr.ticks_preempt_to_start;

				ticks_to_expire_normal -=
    584e:	f02e 4e00 	bic.w	lr, lr, #2147483648	; 0x80000000
    5852:	4288      	cmp	r0, r1
    5854:	bf2c      	ite	cs
    5856:	1812      	addcs	r2, r2, r0
    5858:	1852      	addcc	r2, r2, r1
    585a:	ebce 0202 	rsb	r2, lr, r2
					((conn->hdr.ticks_xtal_to_start &
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
    585e:	2dff      	cmp	r5, #255	; 0xff
    5860:	d104      	bne.n	586c <sched_after_mstr_free_slot_get+0xc4>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    5862:	68dc      	ldr	r4, [r3, #12]
			     (ticks_slot_prev_abs + ticks_slot_abs +
			      TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 2)))) {
				break;
			}

			ticker_id_prev = ticker_id;
    5864:	7bfd      	ldrb	r5, [r7, #15]
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_prev_abs =
    5866:	3427      	adds	r4, #39	; 0x27
			      TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US << 2)))) {
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    5868:	4616      	mov	r6, r2
    586a:	e7ab      	b.n	57c4 <sched_after_mstr_free_slot_get+0x1c>
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    586c:	4631      	mov	r1, r6
    586e:	4610      	mov	r0, r2
    5870:	603b      	str	r3, [r7, #0]
    5872:	607a      	str	r2, [r7, #4]
    5874:	f7fe fe98 	bl	45a8 <ticker_ticks_diff_get>
					((conn->hdr.ticks_xtal_to_start &
					  (~((uint32_t)1 << 31))) -
					 ticks_prepare_to_start);
			}

			if ((ticker_id_prev != 0xFF) &&
    5878:	f10a 0102 	add.w	r1, sl, #2
    587c:	4421      	add	r1, r4
    587e:	4288      	cmp	r0, r1
    5880:	687a      	ldr	r2, [r7, #4]
    5882:	683b      	ldr	r3, [r7, #0]
    5884:	d9ed      	bls.n	5862 <sched_after_mstr_free_slot_get+0xba>
				conn->hdr.ticks_slot;
		}
	}

	if (ticker_id_prev != 0xff) {
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
    5886:	4816      	ldr	r0, [pc, #88]	; (58e0 <sched_after_mstr_free_slot_get+0x138>)
    5888:	4434      	add	r4, r6
    588a:	fba4 0100 	umull	r0, r1, r4, r0
    588e:	2307      	movs	r3, #7
    5890:	fb03 1104 	mla	r1, r3, r4, r1
    5894:	a308      	add	r3, pc, #32	; (adr r3, 58b8 <sched_after_mstr_free_slot_get+0x110>)
    5896:	e9d3 2300 	ldrd	r2, r3, [r3]
    589a:	f7fa fcbf 	bl	21c <__aeabi_uldivmod>
    589e:	3020      	adds	r0, #32
    58a0:	f8c8 0000 	str.w	r0, [r8]
    58a4:	e001      	b.n	58aa <sched_after_mstr_free_slot_get+0x102>
				TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US) +
				conn->hdr.ticks_slot;
		}
	}

	if (ticker_id_prev != 0xff) {
    58a6:	2dff      	cmp	r5, #255	; 0xff
    58a8:	d1ed      	bne.n	5886 <sched_after_mstr_free_slot_get+0xde>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
						ticks_slot_prev_abs) +
			(RADIO_TICKER_JITTER_US << 1);
	}
}
    58aa:	371c      	adds	r7, #28
    58ac:	46bd      	mov	sp, r7
    58ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58b2:	bf00      	nop
    58b4:	f3af 8000 	nop.w
    58b8:	3b9aca00 	.word	0x3b9aca00
    58bc:	00000000 	.word	0x00000000
    58c0:	000045c1 	.word	0x000045c1
    58c4:	0000dd4e 	.word	0x0000dd4e
    58c8:	0000dd53 	.word	0x0000dd53
    58cc:	0000dd04 	.word	0x0000dd04
    58d0:	0000efcb 	.word	0x0000efcb
    58d4:	0000dcfd 	.word	0x0000dcfd
    58d8:	0000e3dd 	.word	0x0000e3dd
    58dc:	20000b44 	.word	0x20000b44
    58e0:	1afd498d 	.word	0x1afd498d
    58e4:	f3af 8000 	nop.w

000058e8 <sched_after_mstr_free_offset_get>:

static void sched_after_mstr_free_offset_get(uint16_t conn_interval,
					     uint32_t ticks_slot,
					     uint32_t ticks_anchor,
					     uint32_t *win_offset_us)
{
    58e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ea:	b083      	sub	sp, #12
    58ec:	af00      	add	r7, sp, #0
    58ee:	4616      	mov	r6, r2
	uint32_t ticks_anchor_offset = ticks_anchor;
    58f0:	f107 0208 	add.w	r2, r7, #8

static void sched_after_mstr_free_offset_get(uint16_t conn_interval,
					     uint32_t ticks_slot,
					     uint32_t ticks_anchor,
					     uint32_t *win_offset_us)
{
    58f4:	4605      	mov	r5, r0
	uint32_t ticks_anchor_offset = ticks_anchor;
    58f6:	f842 6d04 	str.w	r6, [r2, #-4]!

	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    58fa:	2001      	movs	r0, #1
    58fc:	3127      	adds	r1, #39	; 0x27

static void sched_after_mstr_free_offset_get(uint16_t conn_interval,
					     uint32_t ticks_slot,
					     uint32_t ticks_anchor,
					     uint32_t *win_offset_us)
{
    58fe:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;

	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
    5900:	f7ff ff52 	bl	57a8 <sched_after_mstr_free_slot_get>
				       (TICKER_US_TO_TICKS(
						RADIO_TICKER_XTAL_OFFSET_US) +
					ticks_slot), &ticks_anchor_offset,
				       win_offset_us);

	if (ticks_anchor_offset != ticks_anchor) {
    5904:	6878      	ldr	r0, [r7, #4]
    5906:	4286      	cmp	r6, r0
    5908:	d011      	beq.n	592e <sched_after_mstr_free_offset_get+0x46>
		*win_offset_us +=
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
    590a:	4631      	mov	r1, r6
    590c:	f7fe fe4c 	bl	45a8 <ticker_ticks_diff_get>
						RADIO_TICKER_XTAL_OFFSET_US) +
					ticks_slot), &ticks_anchor_offset,
				       win_offset_us);

	if (ticks_anchor_offset != ticks_anchor) {
		*win_offset_us +=
    5910:	4b11      	ldr	r3, [pc, #68]	; (5958 <sched_after_mstr_free_offset_get+0x70>)
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
    5912:	4602      	mov	r2, r0
						RADIO_TICKER_XTAL_OFFSET_US) +
					ticks_slot), &ticks_anchor_offset,
				       win_offset_us);

	if (ticks_anchor_offset != ticks_anchor) {
		*win_offset_us +=
    5914:	fba0 0103 	umull	r0, r1, r0, r3
    5918:	2307      	movs	r3, #7
    591a:	fb03 1102 	mla	r1, r3, r2, r1
    591e:	a30c      	add	r3, pc, #48	; (adr r3, 5950 <sched_after_mstr_free_offset_get+0x68>)
    5920:	e9d3 2300 	ldrd	r2, r3, [r3]
    5924:	f7fa fc7a 	bl	21c <__aeabi_uldivmod>
    5928:	6823      	ldr	r3, [r4, #0]
    592a:	4418      	add	r0, r3
    592c:	6020      	str	r0, [r4, #0]
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
								 ticks_anchor));
	}

	if ((*win_offset_us & ((uint32_t)1 << 31)) == 0) {
    592e:	6823      	ldr	r3, [r4, #0]
    5930:	2b00      	cmp	r3, #0
    5932:	db08      	blt.n	5946 <sched_after_mstr_free_offset_get+0x5e>
		uint32_t conn_interval_us = conn_interval * 1250;
    5934:	f240 40e2 	movw	r0, #1250	; 0x4e2
    5938:	4368      	muls	r0, r5

		while (*win_offset_us > conn_interval_us) {
    593a:	6823      	ldr	r3, [r4, #0]
    593c:	4298      	cmp	r0, r3
    593e:	d202      	bcs.n	5946 <sched_after_mstr_free_offset_get+0x5e>
			*win_offset_us -= conn_interval_us;
    5940:	1a1b      	subs	r3, r3, r0
    5942:	6023      	str	r3, [r4, #0]
    5944:	e7f9      	b.n	593a <sched_after_mstr_free_offset_get+0x52>
		}
	}
}
    5946:	370c      	adds	r7, #12
    5948:	46bd      	mov	sp, r7
    594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    594c:	f3af 8000 	nop.w
    5950:	3b9aca00 	.word	0x3b9aca00
    5954:	00000000 	.word	0x00000000
    5958:	1afd498d 	.word	0x1afd498d
    595c:	f3af 8000 	nop.w

00005960 <mayfly_sched_win_offset_use>:
					 (uint32_t)params,
					 &_radio.observer.win_offset_us);
}

static void mayfly_sched_win_offset_use(void *params)
{
    5960:	b590      	push	{r4, r7, lr}
    5962:	b083      	sub	sp, #12
    5964:	4604      	mov	r4, r0
    5966:	af00      	add	r7, sp, #0
	struct connection *conn = (struct connection *)params;
	uint16_t win_offset;

	sched_after_mstr_free_offset_get(conn->conn_interval,
    5968:	f100 038c 	add.w	r3, r0, #140	; 0x8c
    596c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    5970:	68c1      	ldr	r1, [r0, #12]
    5972:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    5974:	f7ff ffb8 	bl	58e8 <sched_after_mstr_free_offset_get>
				conn->hdr.ticks_slot,
				conn->llcp.connection_update.ticks_ref,
				&conn->llcp.connection_update.win_offset_us);

	win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    5978:	f107 0108 	add.w	r1, r7, #8
    597c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
	memcpy(conn->llcp.connection_update.pdu_win_offset, &win_offset,
    5980:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
	sched_after_mstr_free_offset_get(conn->conn_interval,
				conn->hdr.ticks_slot,
				conn->llcp.connection_update.ticks_ref,
				&conn->llcp.connection_update.win_offset_us);

	win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    5984:	f240 42e2 	movw	r2, #1250	; 0x4e2
    5988:	fbb3 f3f2 	udiv	r3, r3, r2
	memcpy(conn->llcp.connection_update.pdu_win_offset, &win_offset,
    598c:	2202      	movs	r2, #2
	sched_after_mstr_free_offset_get(conn->conn_interval,
				conn->hdr.ticks_slot,
				conn->llcp.connection_update.ticks_ref,
				&conn->llcp.connection_update.win_offset_us);

	win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    598e:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.connection_update.pdu_win_offset, &win_offset,
    5992:	f7fb fa64 	bl	e5e <memcpy>
	       sizeof(uint16_t));
}
    5996:	370c      	adds	r7, #12
    5998:	46bd      	mov	sp, r7
    599a:	bd90      	pop	{r4, r7, pc}

0000599c <mayfly_sched_after_mstr_free_offset_get>:
		}
	}
}

static void mayfly_sched_after_mstr_free_offset_get(void *params)
{
    599c:	b490      	push	{r4, r7}
	sched_after_mstr_free_offset_get(_radio.observer.conn_interval,
    599e:	4c06      	ldr	r4, [pc, #24]	; (59b8 <mayfly_sched_after_mstr_free_offset_get+0x1c>)
    59a0:	4602      	mov	r2, r0
    59a2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
    59a6:	f8b4 0206 	ldrh.w	r0, [r4, #518]	; 0x206
		}
	}
}

static void mayfly_sched_after_mstr_free_offset_get(void *params)
{
    59aa:	af00      	add	r7, sp, #0
	sched_after_mstr_free_offset_get(_radio.observer.conn_interval,
    59ac:	f504 7305 	add.w	r3, r4, #532	; 0x214
					 _radio.observer.ticks_conn_slot,
					 (uint32_t)params,
					 &_radio.observer.win_offset_us);
}
    59b0:	46bd      	mov	sp, r7
    59b2:	bc90      	pop	{r4, r7}
	}
}

static void mayfly_sched_after_mstr_free_offset_get(void *params)
{
	sched_after_mstr_free_offset_get(_radio.observer.conn_interval,
    59b4:	f7ff bf98 	b.w	58e8 <sched_after_mstr_free_offset_get>
    59b8:	20000b44 	.word	0x20000b44

000059bc <packet_rx_enqueue>:
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    59bc:	b590      	push	{r4, r7, lr}
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	uint8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    59be:	4c22      	ldr	r4, [pc, #136]	; (5a48 <packet_rx_enqueue+0x8c>)
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    59c0:	b083      	sub	sp, #12
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	uint8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    59c2:	f894 324d 	ldrb.w	r3, [r4, #589]	; 0x24d
    59c6:	f894 224e 	ldrb.w	r2, [r4, #590]	; 0x24e
    59ca:	429a      	cmp	r2, r3
		       &s_mfy_callback);
#endif
}

static void packet_rx_enqueue(void)
{
    59cc:	af02      	add	r7, sp, #8
	void *link;
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	uint8_t last;

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
    59ce:	d10d      	bne.n	59ec <packet_rx_enqueue+0x30>
    59d0:	4b1e      	ldr	r3, [pc, #120]	; (5a4c <packet_rx_enqueue+0x90>)
    59d2:	9301      	str	r3, [sp, #4]
    59d4:	4b1e      	ldr	r3, [pc, #120]	; (5a50 <packet_rx_enqueue+0x94>)
    59d6:	9300      	str	r3, [sp, #0]
    59d8:	491e      	ldr	r1, [pc, #120]	; (5a54 <packet_rx_enqueue+0x98>)
    59da:	4b1f      	ldr	r3, [pc, #124]	; (5a58 <packet_rx_enqueue+0x9c>)
    59dc:	4a1f      	ldr	r2, [pc, #124]	; (5a5c <packet_rx_enqueue+0xa0>)
    59de:	4820      	ldr	r0, [pc, #128]	; (5a60 <packet_rx_enqueue+0xa4>)
    59e0:	f7fb fbe4 	bl	11ac <printk>
    59e4:	2100      	movs	r1, #0
    59e6:	4608      	mov	r0, r1
    59e8:	f006 fe32 	bl	c650 <_SysFatalErrorHandler>

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    59ec:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
    59f0:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
    59f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    59f8:	f894 3284 	ldrb.w	r3, [r4, #644]	; 0x284

	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);

	/* Remember the rx node and acquired link mem */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
	link = radio_pdu_node_rx->hdr.onion.link;
    59fc:	6801      	ldr	r1, [r0, #0]

	/* serialize release queue with rx queue by storing reference to last
	 * element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    59fe:	7003      	strb	r3, [r0, #0]
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    5a00:	f894 324d 	ldrb.w	r3, [r4, #589]	; 0x24d
	if (last == _radio.packet_rx_count) {
    5a04:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;

	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
    5a08:	3301      	adds	r3, #1
    5a0a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
		last = 0;
    5a0c:	429a      	cmp	r2, r3
    5a0e:	bf08      	it	eq
    5a10:	2300      	moveq	r3, #0
	}
	_radio.packet_rx_last = last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    5a12:	4a14      	ldr	r2, [pc, #80]	; (5a64 <packet_rx_enqueue+0xa8>)
	/* dequeue from acquired rx queue */
	last = _radio.packet_rx_last + 1;
	if (last == _radio.packet_rx_count) {
		last = 0;
	}
	_radio.packet_rx_last = last;
    5a14:	f884 324d 	strb.w	r3, [r4, #589]	; 0x24d

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    5a18:	f7fd f8c6 	bl	2ba8 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    5a1c:	4604      	mov	r4, r0
    5a1e:	b968      	cbnz	r0, 5a3c <packet_rx_enqueue+0x80>
    5a20:	4b0a      	ldr	r3, [pc, #40]	; (5a4c <packet_rx_enqueue+0x90>)
    5a22:	9301      	str	r3, [sp, #4]
    5a24:	4b0a      	ldr	r3, [pc, #40]	; (5a50 <packet_rx_enqueue+0x94>)
    5a26:	9300      	str	r3, [sp, #0]
    5a28:	490a      	ldr	r1, [pc, #40]	; (5a54 <packet_rx_enqueue+0x98>)
    5a2a:	4b0b      	ldr	r3, [pc, #44]	; (5a58 <packet_rx_enqueue+0x9c>)
    5a2c:	4a0b      	ldr	r2, [pc, #44]	; (5a5c <packet_rx_enqueue+0xa0>)
    5a2e:	480e      	ldr	r0, [pc, #56]	; (5a68 <packet_rx_enqueue+0xac>)
    5a30:	f7fb fbbc 	bl	11ac <printk>
    5a34:	4621      	mov	r1, r4
    5a36:	4620      	mov	r0, r4
    5a38:	f006 fe0a 	bl	c650 <_SysFatalErrorHandler>

	/* callback to trigger application action */
	packet_rx_callback();
}
    5a3c:	3704      	adds	r7, #4
    5a3e:	46bd      	mov	sp, r7
    5a40:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    5a44:	f005 bcf8 	b.w	b438 <radio_event_callback>
    5a48:	20000b44 	.word	0x20000b44
    5a4c:	0000dd4e 	.word	0x0000dd4e
    5a50:	0000dd53 	.word	0x0000dd53
    5a54:	0000dd04 	.word	0x0000dd04
    5a58:	0000f22e 	.word	0x0000f22e
    5a5c:	0000dcfd 	.word	0x0000dcfd
    5a60:	0000e5d6 	.word	0x0000e5d6
    5a64:	20000da0 	.word	0x20000da0
    5a68:	0000e411 	.word	0x0000e411

00005a6c <event_adv_stop>:
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(uint32_t ticks_at_expire, uint32_t remainder,
		    uint16_t lazy, void *context)
{
    5a6c:	b590      	push	{r4, r7, lr}
    5a6e:	b083      	sub	sp, #12
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	/* Stop Direct Adv */
	ticker_status =
    5a70:	f241 0323 	movw	r3, #4131	; 0x1023
    5a74:	2100      	movs	r1, #0
    5a76:	2205      	movs	r2, #5
    5a78:	9300      	str	r3, [sp, #0]
	DEBUG_RADIO_START_A(0);
}

void event_adv_stop(uint32_t ticks_at_expire, uint32_t remainder,
		    uint16_t lazy, void *context)
{
    5a7a:	af02      	add	r7, sp, #8
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	/* Stop Direct Adv */
	ticker_status =
    5a7c:	4b37      	ldr	r3, [pc, #220]	; (5b5c <event_adv_stop+0xf0>)
    5a7e:	4608      	mov	r0, r1
    5a80:	f7fe fcbe 	bl	4400 <ticker_stop>
	    ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
			RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_ADV,
			ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5a84:	f030 0302 	bics.w	r3, r0, #2
    5a88:	d00d      	beq.n	5aa6 <event_adv_stop+0x3a>
    5a8a:	4b35      	ldr	r3, [pc, #212]	; (5b60 <event_adv_stop+0xf4>)
    5a8c:	9301      	str	r3, [sp, #4]
    5a8e:	4b35      	ldr	r3, [pc, #212]	; (5b64 <event_adv_stop+0xf8>)
    5a90:	9300      	str	r3, [sp, #0]
    5a92:	4935      	ldr	r1, [pc, #212]	; (5b68 <event_adv_stop+0xfc>)
    5a94:	4b35      	ldr	r3, [pc, #212]	; (5b6c <event_adv_stop+0x100>)
    5a96:	4a36      	ldr	r2, [pc, #216]	; (5b70 <event_adv_stop+0x104>)
    5a98:	4836      	ldr	r0, [pc, #216]	; (5b74 <event_adv_stop+0x108>)
    5a9a:	f7fb fb87 	bl	11ac <printk>
    5a9e:	2100      	movs	r1, #0
    5aa0:	4608      	mov	r0, r1
    5aa2:	f006 fdd5 	bl	c650 <_SysFatalErrorHandler>
		  (ticker_status == TICKER_STATUS_BUSY));
	/** @todo synchronize stopping of scanner, i.e. pre-event and event
	 * needs to complete
	 */
	/* below lines are temporary */
	ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5aa6:	f241 032d 	movw	r3, #4141	; 0x102d
    5aaa:	2100      	movs	r1, #0
    5aac:	9300      	str	r3, [sp, #0]
    5aae:	2201      	movs	r2, #1
    5ab0:	4b2a      	ldr	r3, [pc, #168]	; (5b5c <event_adv_stop+0xf0>)
    5ab2:	4608      	mov	r0, r1
    5ab4:	f7fe fca4 	bl	4400 <ticker_stop>
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_MARKER_0,
				    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5ab8:	f030 0302 	bics.w	r3, r0, #2
    5abc:	d00d      	beq.n	5ada <event_adv_stop+0x6e>
    5abe:	4b28      	ldr	r3, [pc, #160]	; (5b60 <event_adv_stop+0xf4>)
    5ac0:	9301      	str	r3, [sp, #4]
    5ac2:	4b28      	ldr	r3, [pc, #160]	; (5b64 <event_adv_stop+0xf8>)
    5ac4:	9300      	str	r3, [sp, #0]
    5ac6:	4928      	ldr	r1, [pc, #160]	; (5b68 <event_adv_stop+0xfc>)
    5ac8:	4b28      	ldr	r3, [pc, #160]	; (5b6c <event_adv_stop+0x100>)
    5aca:	4a29      	ldr	r2, [pc, #164]	; (5b70 <event_adv_stop+0x104>)
    5acc:	4829      	ldr	r0, [pc, #164]	; (5b74 <event_adv_stop+0x108>)
    5ace:	f7fb fb6d 	bl	11ac <printk>
    5ad2:	2100      	movs	r1, #0
    5ad4:	4608      	mov	r0, r1
    5ad6:	f006 fdbb 	bl	c650 <_SysFatalErrorHandler>
		  (ticker_status == TICKER_STATUS_BUSY));
	ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    5ada:	2200      	movs	r2, #0
    5adc:	f241 0332 	movw	r3, #4146	; 0x1032
    5ae0:	9300      	str	r3, [sp, #0]
    5ae2:	4611      	mov	r1, r2
    5ae4:	4b1d      	ldr	r3, [pc, #116]	; (5b5c <event_adv_stop+0xf0>)
    5ae6:	4610      	mov	r0, r2
    5ae8:	f7fe fc8a 	bl	4400 <ticker_stop>
				    RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_ID_EVENT,
				    ticker_success_assert, (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5aec:	f030 0302 	bics.w	r3, r0, #2
    5af0:	d00d      	beq.n	5b0e <event_adv_stop+0xa2>
    5af2:	4b1b      	ldr	r3, [pc, #108]	; (5b60 <event_adv_stop+0xf4>)
    5af4:	9301      	str	r3, [sp, #4]
    5af6:	4b1b      	ldr	r3, [pc, #108]	; (5b64 <event_adv_stop+0xf8>)
    5af8:	9300      	str	r3, [sp, #0]
    5afa:	491b      	ldr	r1, [pc, #108]	; (5b68 <event_adv_stop+0xfc>)
    5afc:	4b1b      	ldr	r3, [pc, #108]	; (5b6c <event_adv_stop+0x100>)
    5afe:	4a1c      	ldr	r2, [pc, #112]	; (5b70 <event_adv_stop+0x104>)
    5b00:	481c      	ldr	r0, [pc, #112]	; (5b74 <event_adv_stop+0x108>)
    5b02:	f7fb fb53 	bl	11ac <printk>
    5b06:	2100      	movs	r1, #0
    5b08:	4608      	mov	r0, r1
    5b0a:	f006 fda1 	bl	c650 <_SysFatalErrorHandler>
		  (ticker_status == TICKER_STATUS_BUSY));

	/* Prepare the rx packet structure */
	radio_pdu_node_rx = packet_rx_reserve_get(1);
    5b0e:	2001      	movs	r0, #1
    5b10:	f7fe fdb8 	bl	4684 <packet_rx_reserve_get>
	LL_ASSERT(radio_pdu_node_rx);
    5b14:	4604      	mov	r4, r0
    5b16:	b968      	cbnz	r0, 5b34 <event_adv_stop+0xc8>
    5b18:	4b11      	ldr	r3, [pc, #68]	; (5b60 <event_adv_stop+0xf4>)
    5b1a:	9301      	str	r3, [sp, #4]
    5b1c:	4b11      	ldr	r3, [pc, #68]	; (5b64 <event_adv_stop+0xf8>)
    5b1e:	9300      	str	r3, [sp, #0]
    5b20:	4911      	ldr	r1, [pc, #68]	; (5b68 <event_adv_stop+0xfc>)
    5b22:	4b12      	ldr	r3, [pc, #72]	; (5b6c <event_adv_stop+0x100>)
    5b24:	4a12      	ldr	r2, [pc, #72]	; (5b70 <event_adv_stop+0x104>)
    5b26:	4814      	ldr	r0, [pc, #80]	; (5b78 <event_adv_stop+0x10c>)
    5b28:	f7fb fb40 	bl	11ac <printk>
    5b2c:	4621      	mov	r1, r4
    5b2e:	4620      	mov	r0, r4
    5b30:	f006 fd8e 	bl	c650 <_SysFatalErrorHandler>

	/** Connection handle */
	radio_pdu_node_rx->hdr.handle = 0xffff;
    5b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5b38:	80e3      	strh	r3, [r4, #6]
					    /** @todo */
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    5b3a:	2303      	movs	r3, #3
    5b3c:	7123      	strb	r3, [r4, #4]

	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
    5b3e:	2218      	movs	r2, #24
    5b40:	2100      	movs	r1, #0
    5b42:	f104 000b 	add.w	r0, r4, #11
    5b46:	f7fb f9b7 	bl	eb8 <memset>
	radio_le_conn_cmplt->status = 0x3c;
    5b4a:	233c      	movs	r3, #60	; 0x3c

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
}
    5b4c:	3704      	adds	r7, #4
	/* prepare connection complete structure */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	radio_le_conn_cmplt =
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
	radio_le_conn_cmplt->status = 0x3c;
    5b4e:	72e3      	strb	r3, [r4, #11]

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
}
    5b50:	46bd      	mov	sp, r7
    5b52:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
		(struct radio_le_conn_cmplt *)&pdu_data_rx->payload;
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
	radio_le_conn_cmplt->status = 0x3c;

	/* enqueue connection complete structure into queue */
	packet_rx_enqueue();
    5b56:	f7ff bf31 	b.w	59bc <packet_rx_enqueue>
    5b5a:	bf00      	nop
    5b5c:	00005c59 	.word	0x00005c59
    5b60:	0000dd4e 	.word	0x0000dd4e
    5b64:	0000dd53 	.word	0x0000dd53
    5b68:	0000dd04 	.word	0x0000dd04
    5b6c:	0000f353 	.word	0x0000f353
    5b70:	0000dcfd 	.word	0x0000dcfd
    5b74:	0000e588 	.word	0x0000e588
    5b78:	0000e629 	.word	0x0000e629

00005b7c <terminate_ind_rx_enqueue>:
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, uint8_t reason)
{
    5b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b80:	b082      	sub	sp, #8
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    5b82:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
		_radio.conn_upd = NULL;
	}
}

static void terminate_ind_rx_enqueue(struct connection *conn, uint8_t reason)
{
    5b86:	af02      	add	r7, sp, #8
    5b88:	4604      	mov	r4, r0
    5b8a:	4688      	mov	r8, r1
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	void *link;

	/* Prepare the rx packet structure */
	radio_pdu_node_rx =
    5b8c:	f100 06a4 	add.w	r6, r0, #164	; 0xa4
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
    5b90:	b96d      	cbnz	r5, 5bae <terminate_ind_rx_enqueue+0x32>
    5b92:	4b1b      	ldr	r3, [pc, #108]	; (5c00 <terminate_ind_rx_enqueue+0x84>)
    5b94:	9301      	str	r3, [sp, #4]
    5b96:	4b1b      	ldr	r3, [pc, #108]	; (5c04 <terminate_ind_rx_enqueue+0x88>)
    5b98:	9300      	str	r3, [sp, #0]
    5b9a:	491b      	ldr	r1, [pc, #108]	; (5c08 <terminate_ind_rx_enqueue+0x8c>)
    5b9c:	4b1b      	ldr	r3, [pc, #108]	; (5c0c <terminate_ind_rx_enqueue+0x90>)
    5b9e:	4a1c      	ldr	r2, [pc, #112]	; (5c10 <terminate_ind_rx_enqueue+0x94>)
    5ba0:	481c      	ldr	r0, [pc, #112]	; (5c14 <terminate_ind_rx_enqueue+0x98>)
    5ba2:	f7fb fb03 	bl	11ac <printk>
    5ba6:	4629      	mov	r1, r5
    5ba8:	4628      	mov	r0, r5
    5baa:	f006 fd51 	bl	c650 <_SysFatalErrorHandler>

	radio_pdu_node_rx->hdr.handle = conn->handle;
    5bae:	8c23      	ldrh	r3, [r4, #32]
    5bb0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    5bb4:	4a18      	ldr	r2, [pc, #96]	; (5c18 <terminate_ind_rx_enqueue+0x9c>)
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((uint8_t *)radio_pdu_node_rx->pdu_data) = reason;
    5bb6:	f884 80ac 	strb.w	r8, [r4, #172]	; 0xac
	radio_pdu_node_rx =
		(struct radio_pdu_node_rx *)&conn->llcp_terminate.radio_pdu_node_rx;
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);

	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
    5bba:	2304      	movs	r3, #4
    5bbc:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
	    _radio.packet_release_last;
    5bc0:	f892 3284 	ldrb.w	r3, [r2, #644]	; 0x284
	radio_pdu_node_rx->hdr.handle = conn->handle;
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
	*((uint8_t *)radio_pdu_node_rx->pdu_data) = reason;

	/* Get the link mem reserved in the connection context */
	link = radio_pdu_node_rx->hdr.onion.link;
    5bc4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4

	/* Serialize release queue with rx queue by storing reference to
	 * last element in release queue
	 */
	radio_pdu_node_rx->hdr.onion.packet_release_last =
    5bc8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
	    _radio.packet_release_last;

	/* Enqueue into event-cum-data queue */
	link = memq_enqueue(radio_pdu_node_rx, link,
    5bcc:	f502 7217 	add.w	r2, r2, #604	; 0x25c
    5bd0:	4630      	mov	r0, r6
    5bd2:	f7fc ffe9 	bl	2ba8 <memq_enqueue>
			    (void *)&_radio.link_rx_tail);
	LL_ASSERT(link);
    5bd6:	4604      	mov	r4, r0
    5bd8:	b968      	cbnz	r0, 5bf6 <terminate_ind_rx_enqueue+0x7a>
    5bda:	4b09      	ldr	r3, [pc, #36]	; (5c00 <terminate_ind_rx_enqueue+0x84>)
    5bdc:	9301      	str	r3, [sp, #4]
    5bde:	4b09      	ldr	r3, [pc, #36]	; (5c04 <terminate_ind_rx_enqueue+0x88>)
    5be0:	9300      	str	r3, [sp, #0]
    5be2:	4909      	ldr	r1, [pc, #36]	; (5c08 <terminate_ind_rx_enqueue+0x8c>)
    5be4:	4b09      	ldr	r3, [pc, #36]	; (5c0c <terminate_ind_rx_enqueue+0x90>)
    5be6:	4a0a      	ldr	r2, [pc, #40]	; (5c10 <terminate_ind_rx_enqueue+0x94>)
    5be8:	480c      	ldr	r0, [pc, #48]	; (5c1c <terminate_ind_rx_enqueue+0xa0>)
    5bea:	f7fb fadf 	bl	11ac <printk>
    5bee:	4621      	mov	r1, r4
    5bf0:	4620      	mov	r0, r4
    5bf2:	f006 fd2d 	bl	c650 <_SysFatalErrorHandler>

	/* callback to trigger application action */
	packet_rx_callback();
}
    5bf6:	46bd      	mov	sp, r7
    5bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	/* Inline call of callback. If JOB configured as lower priority then
	 * callback will tailchain at end of every radio ISR. If JOB configured
	 * as same then call inline so as to have callback for every radio ISR.
	 */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	radio_event_callback();
    5bfc:	f005 bc1c 	b.w	b438 <radio_event_callback>
    5c00:	0000dd4e 	.word	0x0000dd4e
    5c04:	0000dd53 	.word	0x0000dd53
    5c08:	0000dd04 	.word	0x0000dd04
    5c0c:	0000f069 	.word	0x0000f069
    5c10:	0000dcfd 	.word	0x0000dcfd
    5c14:	0000e65c 	.word	0x0000e65c
    5c18:	20000b44 	.word	0x20000b44
    5c1c:	0000e411 	.word	0x0000e411

00005c20 <rx_fc_lock>:

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(uint16_t handle)
{
    5c20:	b580      	push	{r7, lr}
	if (_radio.fc_req == _radio.fc_ack) {
    5c22:	4a0c      	ldr	r2, [pc, #48]	; (5c54 <rx_fc_lock+0x34>)
    5c24:	f892 328c 	ldrb.w	r3, [r2, #652]	; 0x28c
    5c28:	f892 128d 	ldrb.w	r1, [r2, #653]	; 0x28d
    5c2c:	4299      	cmp	r1, r3

	packet_rx_allocate(0xff);
}

static void rx_fc_lock(uint16_t handle)
{
    5c2e:	af00      	add	r7, sp, #0
	if (_radio.fc_req == _radio.fc_ack) {
    5c30:	d10e      	bne.n	5c50 <rx_fc_lock+0x30>
		uint8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
    5c32:	f892 328c 	ldrb.w	r3, [r2, #652]	; 0x28c
    5c36:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5c3a:	f8a3 0286 	strh.w	r0, [r3, #646]	; 0x286
		req = _radio.fc_req + 1;
    5c3e:	f892 328c 	ldrb.w	r3, [r2, #652]	; 0x28c
    5c42:	3301      	adds	r3, #1
    5c44:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
			req = 0;
    5c46:	2b03      	cmp	r3, #3
    5c48:	bf08      	it	eq
    5c4a:	2300      	moveq	r3, #0
		}
		_radio.fc_req = req;
    5c4c:	f882 328c 	strb.w	r3, [r2, #652]	; 0x28c
    5c50:	bd80      	pop	{r7, pc}
    5c52:	bf00      	nop
    5c54:	20000b44 	.word	0x20000b44

00005c58 <ticker_success_assert>:
{
	*((uint32_t volatile *)ops_context) = status;
}

static void ticker_success_assert(uint32_t status, void *params)
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af02      	add	r7, sp, #8
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5c5e:	b180      	cbz	r0, 5c82 <ticker_success_assert+0x2a>
    5c60:	4b09      	ldr	r3, [pc, #36]	; (5c88 <ticker_success_assert+0x30>)
    5c62:	9301      	str	r3, [sp, #4]
    5c64:	4b09      	ldr	r3, [pc, #36]	; (5c8c <ticker_success_assert+0x34>)
    5c66:	9300      	str	r3, [sp, #0]
    5c68:	4a09      	ldr	r2, [pc, #36]	; (5c90 <ticker_success_assert+0x38>)
    5c6a:	4b0a      	ldr	r3, [pc, #40]	; (5c94 <ticker_success_assert+0x3c>)
    5c6c:	490a      	ldr	r1, [pc, #40]	; (5c98 <ticker_success_assert+0x40>)
    5c6e:	480b      	ldr	r0, [pc, #44]	; (5c9c <ticker_success_assert+0x44>)
    5c70:	f7fb fa9c 	bl	11ac <printk>
    5c74:	2100      	movs	r1, #0
    5c76:	4608      	mov	r0, r1
}
    5c78:	46bd      	mov	sp, r7
    5c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

static void ticker_success_assert(uint32_t status, void *params)
{
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    5c7e:	f006 bce7 	b.w	c650 <_SysFatalErrorHandler>
}
    5c82:	46bd      	mov	sp, r7
    5c84:	bd80      	pop	{r7, pc}
    5c86:	bf00      	nop
    5c88:	0000dd4e 	.word	0x0000dd4e
    5c8c:	0000dd53 	.word	0x0000dd53
    5c90:	0000dcfd 	.word	0x0000dcfd
    5c94:	0000f2a9 	.word	0x0000f2a9
    5c98:	0000dd04 	.word	0x0000dd04
    5c9c:	0000e69f 	.word	0x0000e69f

00005ca0 <ticker_job_disable>:
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(uint32_t status, void *op_context)
{
    5ca0:	b480      	push	{r7}
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    5ca2:	4b07      	ldr	r3, [pc, #28]	; (5cc0 <ticker_job_disable+0x20>)
    5ca4:	7bdb      	ldrb	r3, [r3, #15]
	DEBUG_RADIO_ISR(0);
}

#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
static void ticker_job_disable(uint32_t status, void *op_context)
{
    5ca6:	af00      	add	r7, sp, #0
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
    5ca8:	b133      	cbz	r3, 5cb8 <ticker_job_disable+0x18>
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5caa:	2101      	movs	r1, #1
    5cac:	2200      	movs	r2, #0
    5cae:	4608      	mov	r0, r1
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    5cb0:	46bd      	mov	sp, r7
    5cb2:	bc80      	pop	{r7}
{
	ARG_UNUSED(status);
	ARG_UNUSED(op_context);

	if (_radio.state != STATE_NONE) {
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
    5cb4:	f005 bb1e 	b.w	b2f4 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);
	}
}
    5cb8:	46bd      	mov	sp, r7
    5cba:	bc80      	pop	{r7}
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop
    5cc0:	20000b44 	.word	0x20000b44

00005cc4 <event_stop>:
	}
}

static void event_stop(uint32_t ticks_at_expire, uint32_t remainder,
		       uint16_t lazy, void *context)
{
    5cc4:	b580      	push	{r7, lr}
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    5cc6:	4a0f      	ldr	r2, [pc, #60]	; (5d04 <event_stop+0x40>)
	}
}

static void event_stop(uint32_t ticks_at_expire, uint32_t remainder,
		       uint16_t lazy, void *context)
{
    5cc8:	b082      	sub	sp, #8
	ARG_UNUSED(lazy);

	/* Radio state requested (stop or abort) stored in context is supplied
	 * in params.
	 */
	s_mfy_radio_stop.param = context;
    5cca:	6093      	str	r3, [r2, #8]

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5ccc:	4613      	mov	r3, r2
    5cce:	2200      	movs	r2, #0
	}
}

static void event_stop(uint32_t ticks_at_expire, uint32_t remainder,
		       uint16_t lazy, void *context)
{
    5cd0:	af02      	add	r7, sp, #8
	 * in params.
	 */
	s_mfy_radio_stop.param = context;

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5cd2:	4611      	mov	r1, r2
    5cd4:	4610      	mov	r0, r2
    5cd6:	f7fc ffaf 	bl	2c38 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    5cda:	b180      	cbz	r0, 5cfe <event_stop+0x3a>
    5cdc:	4b0a      	ldr	r3, [pc, #40]	; (5d08 <event_stop+0x44>)
    5cde:	9301      	str	r3, [sp, #4]
    5ce0:	4b0a      	ldr	r3, [pc, #40]	; (5d0c <event_stop+0x48>)
    5ce2:	9300      	str	r3, [sp, #0]
    5ce4:	4a0a      	ldr	r2, [pc, #40]	; (5d10 <event_stop+0x4c>)
    5ce6:	4b0b      	ldr	r3, [pc, #44]	; (5d14 <event_stop+0x50>)
    5ce8:	490b      	ldr	r1, [pc, #44]	; (5d18 <event_stop+0x54>)
    5cea:	480c      	ldr	r0, [pc, #48]	; (5d1c <event_stop+0x58>)
    5cec:	f7fb fa5e 	bl	11ac <printk>
    5cf0:	2100      	movs	r1, #0
    5cf2:	4608      	mov	r0, r1
}
    5cf4:	46bd      	mov	sp, r7
    5cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}

	/* Stop Radio Tx/Rx */
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_stop);
	LL_ASSERT(!retval);
    5cfa:	f006 bca9 	b.w	c650 <_SysFatalErrorHandler>
}
    5cfe:	46bd      	mov	sp, r7
    5d00:	bd80      	pop	{r7, pc}
    5d02:	bf00      	nop
    5d04:	20000230 	.word	0x20000230
    5d08:	0000dd4e 	.word	0x0000dd4e
    5d0c:	0000dd53 	.word	0x0000dd53
    5d10:	0000dcfd 	.word	0x0000dcfd
    5d14:	0000f182 	.word	0x0000f182
    5d18:	0000dd04 	.word	0x0000dd04
    5d1c:	0000e471 	.word	0x0000e471

00005d20 <mayfly_xtal_retain>:
	DEBUG_RADIO_CLOSE(0);
}

#if XTAL_ADVANCED
static void mayfly_xtal_retain(uint8_t retain)
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b082      	sub	sp, #8
	static uint8_t s_xtal_retained;

	if (retain) {
    5d24:	4602      	mov	r2, r0
	DEBUG_RADIO_CLOSE(0);
}

#if XTAL_ADVANCED
static void mayfly_xtal_retain(uint8_t retain)
{
    5d26:	af02      	add	r7, sp, #8
    5d28:	4b12      	ldr	r3, [pc, #72]	; (5d74 <mayfly_xtal_retain+0x54>)
	static uint8_t s_xtal_retained;

	if (retain) {
    5d2a:	b1d0      	cbz	r0, 5d62 <mayfly_xtal_retain+0x42>
		if (!s_xtal_retained) {
    5d2c:	781a      	ldrb	r2, [r3, #0]
    5d2e:	b9f2      	cbnz	r2, 5d6e <mayfly_xtal_retain+0x4e>
			static void *s_link[2];
			static struct mayfly s_mfy_xtal_start = {0, 0, s_link,
				0, mayfly_xtal_start};
			uint32_t retval;

			s_xtal_retained = 1;
    5d30:	2101      	movs	r1, #1
    5d32:	7019      	strb	r1, [r3, #0]

			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d34:	4b10      	ldr	r3, [pc, #64]	; (5d78 <mayfly_xtal_retain+0x58>)
    5d36:	4611      	mov	r1, r2
    5d38:	4610      	mov	r0, r2
    5d3a:	f7fc ff7d 	bl	2c38 <mayfly_enqueue>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    5d3e:	b1b0      	cbz	r0, 5d6e <mayfly_xtal_retain+0x4e>
    5d40:	4b0e      	ldr	r3, [pc, #56]	; (5d7c <mayfly_xtal_retain+0x5c>)
    5d42:	9301      	str	r3, [sp, #4]
    5d44:	4b0e      	ldr	r3, [pc, #56]	; (5d80 <mayfly_xtal_retain+0x60>)
    5d46:	9300      	str	r3, [sp, #0]
    5d48:	4a0e      	ldr	r2, [pc, #56]	; (5d84 <mayfly_xtal_retain+0x64>)
    5d4a:	4b0f      	ldr	r3, [pc, #60]	; (5d88 <mayfly_xtal_retain+0x68>)
    5d4c:	490f      	ldr	r1, [pc, #60]	; (5d8c <mayfly_xtal_retain+0x6c>)
    5d4e:	4810      	ldr	r0, [pc, #64]	; (5d90 <mayfly_xtal_retain+0x70>)
    5d50:	f7fb fa2c 	bl	11ac <printk>
    5d54:	2100      	movs	r1, #0
    5d56:	4608      	mov	r0, r1
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    5d58:	46bd      	mov	sp, r7
    5d5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
			s_xtal_retained = 1;

			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_start);
			LL_ASSERT(!retval);
    5d5e:	f006 bc77 	b.w	c650 <_SysFatalErrorHandler>
		}
	} else {
		if (s_xtal_retained) {
    5d62:	7819      	ldrb	r1, [r3, #0]
    5d64:	b119      	cbz	r1, 5d6e <mayfly_xtal_retain+0x4e>
			static void *s_link[2];
			static struct mayfly s_mfy_xtal_stop = {0, 0, s_link,
				0, mayfly_xtal_stop};
			uint32_t retval;

			s_xtal_retained = 0;
    5d66:	7018      	strb	r0, [r3, #0]

			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d68:	4601      	mov	r1, r0
    5d6a:	4b0a      	ldr	r3, [pc, #40]	; (5d94 <mayfly_xtal_retain+0x74>)
    5d6c:	e7e5      	b.n	5d3a <mayfly_xtal_retain+0x1a>
						RADIO_TICKER_USER_ID_WORKER, 0,
						&s_mfy_xtal_stop);
			LL_ASSERT(!retval);
		}
	}
}
    5d6e:	46bd      	mov	sp, r7
    5d70:	bd80      	pop	{r7, pc}
    5d72:	bf00      	nop
    5d74:	20000b0c 	.word	0x20000b0c
    5d78:	20000250 	.word	0x20000250
    5d7c:	0000dd4e 	.word	0x0000dd4e
    5d80:	0000dd53 	.word	0x0000dd53
    5d84:	0000dcfd 	.word	0x0000dcfd
    5d88:	0000f13d 	.word	0x0000f13d
    5d8c:	0000dd04 	.word	0x0000dd04
    5d90:	0000e471 	.word	0x0000e471
    5d94:	20000280 	.word	0x20000280

00005d98 <event_active>:
	}
}

static void event_active(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    5d98:	b580      	push	{r7, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d9a:	2200      	movs	r2, #0
	}
}

static void event_active(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    5d9c:	b082      	sub	sp, #8
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5d9e:	4b0d      	ldr	r3, [pc, #52]	; (5dd4 <event_active+0x3c>)
	}
}

static void event_active(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    5da0:	af02      	add	r7, sp, #8
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5da2:	4611      	mov	r1, r2
    5da4:	4610      	mov	r0, r2
    5da6:	f7fc ff47 	bl	2c38 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    5daa:	b180      	cbz	r0, 5dce <event_active+0x36>
    5dac:	4b0a      	ldr	r3, [pc, #40]	; (5dd8 <event_active+0x40>)
    5dae:	9301      	str	r3, [sp, #4]
    5db0:	4b0a      	ldr	r3, [pc, #40]	; (5ddc <event_active+0x44>)
    5db2:	9300      	str	r3, [sp, #0]
    5db4:	4a0a      	ldr	r2, [pc, #40]	; (5de0 <event_active+0x48>)
    5db6:	4b0b      	ldr	r3, [pc, #44]	; (5de4 <event_active+0x4c>)
    5db8:	490b      	ldr	r1, [pc, #44]	; (5de8 <event_active+0x50>)
    5dba:	480c      	ldr	r0, [pc, #48]	; (5dec <event_active+0x54>)
    5dbc:	f7fb f9f6 	bl	11ac <printk>
    5dc0:	2100      	movs	r1, #0
    5dc2:	4608      	mov	r0, r1
}
    5dc4:	46bd      	mov	sp, r7
    5dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
    5dca:	f006 bc41 	b.w	c650 <_SysFatalErrorHandler>
}
    5dce:	46bd      	mov	sp, r7
    5dd0:	bd80      	pop	{r7, pc}
    5dd2:	bf00      	nop
    5dd4:	20000220 	.word	0x20000220
    5dd8:	0000dd4e 	.word	0x0000dd4e
    5ddc:	0000dd53 	.word	0x0000dd53
    5de0:	0000dcfd 	.word	0x0000dcfd
    5de4:	0000f093 	.word	0x0000f093
    5de8:	0000dd04 	.word	0x0000dd04
    5dec:	0000e471 	.word	0x0000e471

00005df0 <event_xtal>:
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(uint32_t ticks_at_expire, uint32_t remainder,
				 uint16_t lazy, void *context)
{
    5df0:	b580      	push	{r7, lr}
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5df2:	2200      	movs	r2, #0
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(uint32_t ticks_at_expire, uint32_t remainder,
				 uint16_t lazy, void *context)
{
    5df4:	b082      	sub	sp, #8
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5df6:	4b0d      	ldr	r3, [pc, #52]	; (5e2c <event_xtal+0x3c>)
	clock_control_on(_radio.hf_clock, NULL);
}

static void event_xtal(uint32_t ticks_at_expire, uint32_t remainder,
				 uint16_t lazy, void *context)
{
    5df8:	af02      	add	r7, sp, #8
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    5dfa:	4611      	mov	r1, r2
    5dfc:	4610      	mov	r0, r2
    5dfe:	f7fc ff1b 	bl	2c38 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    5e02:	b180      	cbz	r0, 5e26 <event_xtal+0x36>
    5e04:	4b0a      	ldr	r3, [pc, #40]	; (5e30 <event_xtal+0x40>)
    5e06:	9301      	str	r3, [sp, #4]
    5e08:	4b0a      	ldr	r3, [pc, #40]	; (5e34 <event_xtal+0x44>)
    5e0a:	9300      	str	r3, [sp, #0]
    5e0c:	4a0a      	ldr	r2, [pc, #40]	; (5e38 <event_xtal+0x48>)
    5e0e:	4b0b      	ldr	r3, [pc, #44]	; (5e3c <event_xtal+0x4c>)
    5e10:	490b      	ldr	r1, [pc, #44]	; (5e40 <event_xtal+0x50>)
    5e12:	480c      	ldr	r0, [pc, #48]	; (5e44 <event_xtal+0x54>)
    5e14:	f7fb f9ca 	bl	11ac <printk>
    5e18:	2100      	movs	r1, #0
    5e1a:	4608      	mov	r0, r1
}
    5e1c:	46bd      	mov	sp, r7
    5e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
    5e22:	f006 bc15 	b.w	c650 <_SysFatalErrorHandler>
}
    5e26:	46bd      	mov	sp, r7
    5e28:	bd80      	pop	{r7, pc}
    5e2a:	bf00      	nop
    5e2c:	20000240 	.word	0x20000240
    5e30:	0000dd4e 	.word	0x0000dd4e
    5e34:	0000dd53 	.word	0x0000dd53
    5e38:	0000dcfd 	.word	0x0000dcfd
    5e3c:	0000f32f 	.word	0x0000f32f
    5e40:	0000dd04 	.word	0x0000dd04
    5e44:	0000e471 	.word	0x0000e471

00005e48 <event_common_prepare>:
				 uint32_t *ticks_active_to_start,
				 uint32_t ticks_preempt_to_start,
				 uint8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    5e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e4c:	b08f      	sub	sp, #60	; 0x3c
    5e4e:	af0a      	add	r7, sp, #40	; 0x28
    5e50:	4691      	mov	r9, r2
    5e52:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
    5e56:	60ba      	str	r2, [r7, #8]
    5e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    5e5a:	60fb      	str	r3, [r7, #12]
    5e5c:	607a      	str	r2, [r7, #4]
	uint32_t ticker_status;
	uint32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
    5e5e:	f8d9 4000 	ldr.w	r4, [r9]
				 uint32_t *ticks_active_to_start,
				 uint32_t ticks_preempt_to_start,
				 uint8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    5e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    5e64:	603a      	str	r2, [r7, #0]
	uint32_t ticker_status;
	uint32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	uint32_t _ticks_active_to_start = *ticks_active_to_start;
    5e66:	68fa      	ldr	r2, [r7, #12]
				 uint32_t *ticks_active_to_start,
				 uint32_t ticks_preempt_to_start,
				 uint8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    5e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	uint32_t ticker_status;
	uint32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
	uint32_t _ticks_active_to_start = *ticks_active_to_start;
    5e6a:	6816      	ldr	r6, [r2, #0]
	uint32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    5e6c:	2c00      	cmp	r4, #0
				 uint32_t *ticks_active_to_start,
				 uint32_t ticks_preempt_to_start,
				 uint8_t ticker_id,
				 ticker_timeout_func ticker_timeout_fp,
				 void *context)
{
    5e6e:	4683      	mov	fp, r0
    5e70:	4688      	mov	r8, r1
	uint32_t ticks_to_start;

	/* in case this event is short prepare, xtal to start duration will be
	 * active to start duration.
	 */
	if (_ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    5e72:	da03      	bge.n	5e7c <event_common_prepare+0x34>
		_ticks_xtal_to_start =
    5e74:	42b3      	cmp	r3, r6
    5e76:	bf38      	it	cc
    5e78:	4633      	movcc	r3, r6
    5e7a:	461c      	mov	r4, r3

	/* decide whether its XTAL start or active event that is the current
	 * execution context and accordingly setup the ticker for the other
	 * event (XTAL or active event). These are oneshot ticker.
	 */
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
    5e7c:	42b4      	cmp	r4, r6
    5e7e:	d926      	bls.n	5ece <event_common_prepare+0x86>

		/* XTAL is before Active */
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
		ticks_to_start = _ticks_xtal_to_start;

		ticker_status =
    5e80:	f640 6379 	movw	r3, #3705	; 0xe79
    5e84:	9308      	str	r3, [sp, #32]
    5e86:	4b76      	ldr	r3, [pc, #472]	; (6060 <event_common_prepare+0x218>)
    5e88:	9307      	str	r3, [sp, #28]
    5e8a:	4b76      	ldr	r3, [pc, #472]	; (6064 <event_common_prepare+0x21c>)
    5e8c:	9305      	str	r3, [sp, #20]
    5e8e:	2500      	movs	r5, #0
    5e90:	1ba3      	subs	r3, r4, r6
    5e92:	9300      	str	r3, [sp, #0]
    5e94:	9506      	str	r5, [sp, #24]
    5e96:	465b      	mov	r3, fp
    5e98:	9504      	str	r5, [sp, #16]
    5e9a:	9503      	str	r5, [sp, #12]
    5e9c:	9502      	str	r5, [sp, #8]
    5e9e:	9501      	str	r5, [sp, #4]
    5ea0:	2201      	movs	r2, #1
    5ea2:	4629      	mov	r1, r5
    5ea4:	4628      	mov	r0, r5
    5ea6:	f7fe fa17 	bl	42d8 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_active, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_active, 0,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5eaa:	f030 0302 	bics.w	r3, r0, #2
    5eae:	d042      	beq.n	5f36 <event_common_prepare+0xee>
    5eb0:	4b6d      	ldr	r3, [pc, #436]	; (6068 <event_common_prepare+0x220>)
    5eb2:	9301      	str	r3, [sp, #4]
    5eb4:	4b6d      	ldr	r3, [pc, #436]	; (606c <event_common_prepare+0x224>)
    5eb6:	9300      	str	r3, [sp, #0]
    5eb8:	4a6d      	ldr	r2, [pc, #436]	; (6070 <event_common_prepare+0x228>)
    5eba:	4b6e      	ldr	r3, [pc, #440]	; (6074 <event_common_prepare+0x22c>)
    5ebc:	496e      	ldr	r1, [pc, #440]	; (6078 <event_common_prepare+0x230>)
    5ebe:	486f      	ldr	r0, [pc, #444]	; (607c <event_common_prepare+0x234>)
    5ec0:	f7fb f974 	bl	11ac <printk>
    5ec4:	4629      	mov	r1, r5
    5ec6:	4628      	mov	r0, r5
    5ec8:	f006 fbc2 	bl	c650 <_SysFatalErrorHandler>
    5ecc:	e033      	b.n	5f36 <event_common_prepare+0xee>
			  (ticker_status == TICKER_STATUS_BUSY));

		event_xtal(0, 0, 0, 0);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
    5ece:	d22c      	bcs.n	5f2a <event_common_prepare+0xe2>

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, 0);
    5ed0:	2300      	movs	r3, #0
    5ed2:	461a      	mov	r2, r3
    5ed4:	4619      	mov	r1, r3
    5ed6:	4618      	mov	r0, r3
    5ed8:	f7ff ff5e 	bl	5d98 <event_active>

		ticker_status =
    5edc:	f640 638e 	movw	r3, #3726	; 0xe8e
    5ee0:	9308      	str	r3, [sp, #32]
    5ee2:	4b5f      	ldr	r3, [pc, #380]	; (6060 <event_common_prepare+0x218>)
    5ee4:	9307      	str	r3, [sp, #28]
    5ee6:	2500      	movs	r5, #0
    5ee8:	4b65      	ldr	r3, [pc, #404]	; (6080 <event_common_prepare+0x238>)
    5eea:	9305      	str	r3, [sp, #20]
		event_xtal(0, 0, 0, 0);
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
		uint32_t ticks_to_xtal;

		/* Active is before XTAL */
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
    5eec:	1b34      	subs	r4, r6, r4
		ticks_to_start = _ticks_active_to_start;

		event_active(0, 0, 0, 0);

		ticker_status =
    5eee:	465b      	mov	r3, fp
    5ef0:	9506      	str	r5, [sp, #24]
    5ef2:	9504      	str	r5, [sp, #16]
    5ef4:	9503      	str	r5, [sp, #12]
    5ef6:	9502      	str	r5, [sp, #8]
    5ef8:	e88d 0030 	stmia.w	sp, {r4, r5}
    5efc:	2201      	movs	r2, #1
    5efe:	4629      	mov	r1, r5
    5f00:	4628      	mov	r0, r5
    5f02:	f7fe f9e9 	bl	42d8 <ticker_start>
				     RADIO_TICKER_ID_MARKER_0, ticks_at_expire,
				     ticks_to_xtal, TICKER_NULL_PERIOD,
				     TICKER_NULL_REMAINDER, TICKER_NULL_LAZY,
				     TICKER_NULL_SLOT, event_xtal, 0,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5f06:	f030 0302 	bics.w	r3, r0, #2
    5f0a:	d01b      	beq.n	5f44 <event_common_prepare+0xfc>
    5f0c:	4b56      	ldr	r3, [pc, #344]	; (6068 <event_common_prepare+0x220>)
    5f0e:	9301      	str	r3, [sp, #4]
    5f10:	4b56      	ldr	r3, [pc, #344]	; (606c <event_common_prepare+0x224>)
    5f12:	9300      	str	r3, [sp, #0]
    5f14:	4a56      	ldr	r2, [pc, #344]	; (6070 <event_common_prepare+0x228>)
    5f16:	4b57      	ldr	r3, [pc, #348]	; (6074 <event_common_prepare+0x22c>)
    5f18:	4957      	ldr	r1, [pc, #348]	; (6078 <event_common_prepare+0x230>)
    5f1a:	4858      	ldr	r0, [pc, #352]	; (607c <event_common_prepare+0x234>)
    5f1c:	f7fb f946 	bl	11ac <printk>
    5f20:	4629      	mov	r1, r5
    5f22:	4628      	mov	r0, r5
    5f24:	f006 fb94 	bl	c650 <_SysFatalErrorHandler>
    5f28:	e00c      	b.n	5f44 <event_common_prepare+0xfc>
		/* Active and XTAL are at the same time,
		 * no ticker required to be setup.
		 */
		ticks_to_start = _ticks_xtal_to_start;

		event_active(0, 0, 0, 0);
    5f2a:	2300      	movs	r3, #0
    5f2c:	461a      	mov	r2, r3
    5f2e:	4619      	mov	r1, r3
    5f30:	4618      	mov	r0, r3
    5f32:	f7ff ff31 	bl	5d98 <event_active>
		event_xtal(0, 0, 0, 0);
    5f36:	2300      	movs	r3, #0
    5f38:	461a      	mov	r2, r3
    5f3a:	4619      	mov	r1, r3
    5f3c:	4618      	mov	r0, r3
    5f3e:	f7ff ff57 	bl	5df0 <event_xtal>
    5f42:	e000      	b.n	5f46 <event_common_prepare+0xfe>
    5f44:	4634      	mov	r4, r6

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;

	/* setup the start ticker */
	ticker_status =
    5f46:	f640 63a6 	movw	r3, #3750	; 0xea6
		event_active(0, 0, 0, 0);
		event_xtal(0, 0, 0, 0);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    5f4a:	f8df a140 	ldr.w	sl, [pc, #320]	; 608c <event_common_prepare+0x244>

	/* setup the start ticker */
	ticker_status =
    5f4e:	9308      	str	r3, [sp, #32]
    5f50:	683b      	ldr	r3, [r7, #0]
		event_active(0, 0, 0, 0);
		event_xtal(0, 0, 0, 0);
	}

	/* remember the remainder to be used in pkticker */
	_radio.remainder_anchor = remainder;
    5f52:	f8ca 8008 	str.w	r8, [sl, #8]

	/* setup the start ticker */
	ticker_status =
    5f56:	2500      	movs	r5, #0
    5f58:	9306      	str	r3, [sp, #24]
    5f5a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 6060 <event_common_prepare+0x218>
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	9305      	str	r3, [sp, #20]
    5f62:	f8cd 801c 	str.w	r8, [sp, #28]
    5f66:	465b      	mov	r3, fp
    5f68:	9504      	str	r5, [sp, #16]
    5f6a:	9503      	str	r5, [sp, #12]
    5f6c:	9502      	str	r5, [sp, #8]
    5f6e:	e88d 0030 	stmia.w	sp, {r4, r5}
    5f72:	462a      	mov	r2, r5
    5f74:	4629      	mov	r1, r5
    5f76:	4628      	mov	r0, r5
    5f78:	f7fe f9ae 	bl	42d8 <ticker_start>
			     ticks_at_expire, ticks_to_start,
			     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
			     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
			     ticker_timeout_fp, context, ticker_success_assert,
			     (void *)__LINE__);
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5f7c:	f030 0302 	bics.w	r3, r0, #2
    5f80:	d00d      	beq.n	5f9e <event_common_prepare+0x156>
    5f82:	4b39      	ldr	r3, [pc, #228]	; (6068 <event_common_prepare+0x220>)
    5f84:	9301      	str	r3, [sp, #4]
    5f86:	4b39      	ldr	r3, [pc, #228]	; (606c <event_common_prepare+0x224>)
    5f88:	9300      	str	r3, [sp, #0]
    5f8a:	493b      	ldr	r1, [pc, #236]	; (6078 <event_common_prepare+0x230>)
    5f8c:	4b39      	ldr	r3, [pc, #228]	; (6074 <event_common_prepare+0x22c>)
    5f8e:	4a38      	ldr	r2, [pc, #224]	; (6070 <event_common_prepare+0x228>)
    5f90:	483a      	ldr	r0, [pc, #232]	; (607c <event_common_prepare+0x234>)
    5f92:	f7fb f90b 	bl	11ac <printk>
    5f96:	4629      	mov	r1, r5
    5f98:	4628      	mov	r0, r5
    5f9a:	f006 fb59 	bl	c650 <_SysFatalErrorHandler>
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#else
	event_stop(0, 0, 0, (void *)STATE_ABORT);
    5f9e:	2200      	movs	r2, #0
    5fa0:	2305      	movs	r3, #5
    5fa2:	4611      	mov	r1, r2
    5fa4:	4610      	mov	r0, r2
    5fa6:	f7ff fe8d 	bl	5cc4 <event_stop>
#endif
#undef RADIO_DEFERRED_PREEMPT

  /** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
    5faa:	f8da 3290 	ldr.w	r3, [sl, #656]	; 0x290
    5fae:	429e      	cmp	r6, r3
    5fb0:	d033      	beq.n	601a <event_common_prepare+0x1d2>
		uint32_t ticks_to_start_new =
    5fb2:	f8d9 2000 	ldr.w	r2, [r9]
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((uint32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((uint32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    5fb6:	68f9      	ldr	r1, [r7, #12]
#endif
#undef RADIO_DEFERRED_PREEMPT

  /** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
		uint32_t ticks_to_start_new =
    5fb8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			((_radio.ticks_active_to_start <
			  (*ticks_xtal_to_start & ~(((uint32_t)1 << 31)))) ?
			 (*ticks_xtal_to_start & ~(((uint32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;
    5fbc:	600b      	str	r3, [r1, #0]
#endif
#undef RADIO_DEFERRED_PREEMPT

  /** Handle change in _ticks_active_to_start */
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
		uint32_t ticks_to_start_new =
    5fbe:	429a      	cmp	r2, r3
    5fc0:	bf38      	it	cc
    5fc2:	461a      	movcc	r2, r3
			 (*ticks_xtal_to_start & ~(((uint32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;

		if ((*ticks_xtal_to_start) & ((uint32_t)1 << 31)) {
    5fc4:	f8d9 3000 	ldr.w	r3, [r9]
			*ticks_xtal_to_start &= ~(((uint32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    5fc8:	f8cd 8014 	str.w	r8, [sp, #20]
			 (*ticks_xtal_to_start & ~(((uint32_t)1 << 31))) :
			 _radio.ticks_active_to_start);

		*ticks_active_to_start = _radio.ticks_active_to_start;

		if ((*ticks_xtal_to_start) & ((uint32_t)1 << 31)) {
    5fcc:	2b00      	cmp	r3, #0
			*ticks_xtal_to_start &= ~(((uint32_t)1 << 31));
    5fce:	bfbc      	itt	lt
    5fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    5fd4:	f8c9 3000 	strlt.w	r3, [r9]
		}

		/* drift the primary as required due to active line change */
		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    5fd8:	b292      	uxth	r2, r2
    5fda:	b2a3      	uxth	r3, r4
		if ((*ticks_xtal_to_start) & ((uint32_t)1 << 31)) {
			*ticks_xtal_to_start &= ~(((uint32_t)1 << 31));
		}

		/* drift the primary as required due to active line change */
		ticker_status =
    5fdc:	f640 61d3 	movw	r1, #3795	; 0xed3
    5fe0:	2400      	movs	r4, #0
    5fe2:	9106      	str	r1, [sp, #24]
    5fe4:	9302      	str	r3, [sp, #8]
    5fe6:	9201      	str	r2, [sp, #4]
    5fe8:	9200      	str	r2, [sp, #0]
    5fea:	9404      	str	r4, [sp, #16]
    5fec:	9403      	str	r4, [sp, #12]
    5fee:	68ba      	ldr	r2, [r7, #8]
    5ff0:	4621      	mov	r1, r4
    5ff2:	4620      	mov	r0, r4
    5ff4:	f7fe f9bc 	bl	4370 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      RADIO_TICKER_USER_ID_WORKER, ticker_id,
				      ticks_to_start, ticks_to_start_new,
				      ticks_to_start_new, ticks_to_start, 0, 0,
				      ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    5ff8:	f030 0302 	bics.w	r3, r0, #2
    5ffc:	d00d      	beq.n	601a <event_common_prepare+0x1d2>
    5ffe:	4b1a      	ldr	r3, [pc, #104]	; (6068 <event_common_prepare+0x220>)
    6000:	9301      	str	r3, [sp, #4]
    6002:	4b1a      	ldr	r3, [pc, #104]	; (606c <event_common_prepare+0x224>)
    6004:	9300      	str	r3, [sp, #0]
    6006:	491c      	ldr	r1, [pc, #112]	; (6078 <event_common_prepare+0x230>)
    6008:	4b1a      	ldr	r3, [pc, #104]	; (6074 <event_common_prepare+0x22c>)
    600a:	4a19      	ldr	r2, [pc, #100]	; (6070 <event_common_prepare+0x228>)
    600c:	481b      	ldr	r0, [pc, #108]	; (607c <event_common_prepare+0x234>)
    600e:	f7fb f8cd 	bl	11ac <printk>
    6012:	4621      	mov	r1, r4
    6014:	4620      	mov	r0, r4
    6016:	f006 fb1b 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	/* route all packets queued for connections */
	packet_tx_enqueue(0xFF);
    601a:	20ff      	movs	r0, #255	; 0xff
    601c:	f7fe ffc4 	bl	4fa8 <packet_tx_enqueue>
		static void *s_link[2];
		static struct mayfly s_mfy_xtal_stop_calc = {0, 0, s_link, 0,
			mayfly_xtal_stop_calc};
		uint32_t retval;

		s_mfy_xtal_stop_calc.param = (void *)(uint32_t)ticker_id;
    6020:	4b18      	ldr	r3, [pc, #96]	; (6084 <event_common_prepare+0x23c>)
    6022:	68ba      	ldr	r2, [r7, #8]
    6024:	609a      	str	r2, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6026:	2201      	movs	r2, #1
    6028:	4611      	mov	r1, r2
    602a:	2000      	movs	r0, #0
    602c:	f7fc fe04 	bl	2c38 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    6030:	b188      	cbz	r0, 6056 <event_common_prepare+0x20e>
    6032:	4b0d      	ldr	r3, [pc, #52]	; (6068 <event_common_prepare+0x220>)
    6034:	9301      	str	r3, [sp, #4]
    6036:	4b0d      	ldr	r3, [pc, #52]	; (606c <event_common_prepare+0x224>)
    6038:	9300      	str	r3, [sp, #0]
    603a:	4a0d      	ldr	r2, [pc, #52]	; (6070 <event_common_prepare+0x228>)
    603c:	4b0d      	ldr	r3, [pc, #52]	; (6074 <event_common_prepare+0x22c>)
    603e:	490e      	ldr	r1, [pc, #56]	; (6078 <event_common_prepare+0x230>)
    6040:	4811      	ldr	r0, [pc, #68]	; (6088 <event_common_prepare+0x240>)
    6042:	f7fb f8b3 	bl	11ac <printk>
    6046:	2100      	movs	r1, #0
    6048:	4608      	mov	r0, r1
	}
#endif
}
    604a:	3714      	adds	r7, #20
    604c:	46bd      	mov	sp, r7
    604e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		s_mfy_xtal_stop_calc.param = (void *)(uint32_t)ticker_id;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
					RADIO_TICKER_USER_ID_JOB, 1,
					&s_mfy_xtal_stop_calc);
		LL_ASSERT(!retval);
    6052:	f006 bafd 	b.w	c650 <_SysFatalErrorHandler>
	}
#endif
}
    6056:	3714      	adds	r7, #20
    6058:	46bd      	mov	sp, r7
    605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    605e:	bf00      	nop
    6060:	00005c59 	.word	0x00005c59
    6064:	00005d99 	.word	0x00005d99
    6068:	0000dd4e 	.word	0x0000dd4e
    606c:	0000dd53 	.word	0x0000dd53
    6070:	0000dcfd 	.word	0x0000dcfd
    6074:	0000ef78 	.word	0x0000ef78
    6078:	0000dd04 	.word	0x0000dd04
    607c:	0000e588 	.word	0x0000e588
    6080:	00005df1 	.word	0x00005df1
    6084:	200002a0 	.word	0x200002a0
    6088:	0000e471 	.word	0x0000e471
    608c:	20000b44 	.word	0x20000b44

00006090 <radio_event_adv_prepare>:
			    0x555555);
}

void radio_event_adv_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			     uint16_t lazy, void *context)
{
    6090:	b590      	push	{r4, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6092:	4a0a      	ldr	r2, [pc, #40]	; (60bc <radio_event_adv_prepare+0x2c>)
			    0x555555);
}

void radio_event_adv_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			     uint16_t lazy, void *context)
{
    6094:	b085      	sub	sp, #20
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    6096:	2305      	movs	r3, #5

	event_common_prepare(ticks_at_expire, remainder,
    6098:	2400      	movs	r4, #0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_A(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
    609a:	7313      	strb	r3, [r2, #12]

	event_common_prepare(ticks_at_expire, remainder,
    609c:	9403      	str	r4, [sp, #12]
    609e:	4c08      	ldr	r4, [pc, #32]	; (60c0 <radio_event_adv_prepare+0x30>)
    60a0:	9402      	str	r4, [sp, #8]
    60a2:	9301      	str	r3, [sp, #4]
    60a4:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
    60a8:	9300      	str	r3, [sp, #0]
			    0x555555);
}

void radio_event_adv_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			     uint16_t lazy, void *context)
{
    60aa:	af04      	add	r7, sp, #16

	DEBUG_RADIO_PREPARE_A(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;

	event_common_prepare(ticks_at_expire, remainder,
    60ac:	f102 03c8 	add.w	r3, r2, #200	; 0xc8
    60b0:	32c4      	adds	r2, #196	; 0xc4
    60b2:	f7ff fec9 	bl	5e48 <event_common_prepare>
			     &_radio.advertiser.hdr.ticks_active_to_start,
			     _radio.advertiser.hdr.ticks_preempt_to_start,
			     RADIO_TICKER_ID_ADV, event_adv, 0);

	DEBUG_RADIO_PREPARE_A(0);
}
    60b6:	3704      	adds	r7, #4
    60b8:	46bd      	mov	sp, r7
    60ba:	bd90      	pop	{r4, r7, pc}
    60bc:	20000b44 	.word	0x20000b44
    60c0:	00007681 	.word	0x00007681

000060c4 <mayfly_radio_active.part.8>:
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void mayfly_radio_active(void *params)
    60c4:	b5b0      	push	{r4, r5, r7, lr}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    60c6:	4c0f      	ldr	r4, [pc, #60]	; (6104 <mayfly_radio_active.part.8+0x40>)
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void mayfly_radio_active(void *params)
    60c8:	b082      	sub	sp, #8

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    60ca:	7825      	ldrb	r5, [r4, #0]
	ARG_UNUSED(params);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void mayfly_radio_active(void *params)
    60cc:	af02      	add	r7, sp, #8

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
	} else {
		LL_ASSERT(s_active);
    60ce:	b96d      	cbnz	r5, 60ec <mayfly_radio_active.part.8+0x28>
    60d0:	4b0d      	ldr	r3, [pc, #52]	; (6108 <mayfly_radio_active.part.8+0x44>)
    60d2:	9301      	str	r3, [sp, #4]
    60d4:	4b0d      	ldr	r3, [pc, #52]	; (610c <mayfly_radio_active.part.8+0x48>)
    60d6:	9300      	str	r3, [sp, #0]
    60d8:	490d      	ldr	r1, [pc, #52]	; (6110 <mayfly_radio_active.part.8+0x4c>)
    60da:	4b0e      	ldr	r3, [pc, #56]	; (6114 <mayfly_radio_active.part.8+0x50>)
    60dc:	4a0e      	ldr	r2, [pc, #56]	; (6118 <mayfly_radio_active.part.8+0x54>)
    60de:	480f      	ldr	r0, [pc, #60]	; (611c <mayfly_radio_active.part.8+0x58>)
    60e0:	f7fb f864 	bl	11ac <printk>
    60e4:	4629      	mov	r1, r5
    60e6:	4628      	mov	r0, r5
    60e8:	f006 fab2 	bl	c650 <_SysFatalErrorHandler>

		if (--s_active) {
    60ec:	7820      	ldrb	r0, [r4, #0]
    60ee:	3801      	subs	r0, #1
    60f0:	b2c0      	uxtb	r0, r0
    60f2:	7020      	strb	r0, [r4, #0]
    60f4:	b920      	cbnz	r0, 6100 <mayfly_radio_active.part.8+0x3c>

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
	}
}
    60f6:	46bd      	mov	sp, r7
    60f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
			return;
		}

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
    60fc:	f005 b998 	b.w	b430 <radio_active_callback>
	}
}
    6100:	46bd      	mov	sp, r7
    6102:	bdb0      	pop	{r4, r5, r7, pc}
    6104:	20000b40 	.word	0x20000b40
    6108:	0000dd4e 	.word	0x0000dd4e
    610c:	0000dd53 	.word	0x0000dd53
    6110:	0000dd04 	.word	0x0000dd04
    6114:	0000f2bf 	.word	0x0000f2bf
    6118:	0000dcfd 	.word	0x0000dcfd
    611c:	0000e6cc 	.word	0x0000e6cc

00006120 <mayfly_radio_active>:

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void mayfly_radio_active(void *params)
{
    6120:	b480      	push	{r7}
    6122:	af00      	add	r7, sp, #0
	static uint8_t s_active;

	if ((uint32_t)params) {
    6124:	b148      	cbz	r0, 613a <mayfly_radio_active+0x1a>
		if (s_active++) {
    6126:	4a08      	ldr	r2, [pc, #32]	; (6148 <mayfly_radio_active+0x28>)
    6128:	7813      	ldrb	r3, [r2, #0]
    612a:	1c59      	adds	r1, r3, #1
    612c:	7011      	strb	r1, [r2, #0]
    612e:	b943      	cbnz	r3, 6142 <mayfly_radio_active+0x22>
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    6130:	2001      	movs	r0, #1

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
	}
}
    6132:	46bd      	mov	sp, r7
    6134:	bc80      	pop	{r7}
			return;
		}

		DEBUG_RADIO_ACTIVE(1);

		radio_active_callback(1);
    6136:	f005 b97b 	b.w	b430 <radio_active_callback>

		DEBUG_RADIO_ACTIVE(0);

		radio_active_callback(0);
	}
}
    613a:	46bd      	mov	sp, r7
    613c:	bc80      	pop	{r7}
    613e:	f7ff bfc1 	b.w	60c4 <mayfly_radio_active.part.8>
    6142:	46bd      	mov	sp, r7
    6144:	bc80      	pop	{r7}
    6146:	4770      	bx	lr
    6148:	20000b40 	.word	0x20000b40

0000614c <mayfly_radio_inactive>:
				&s_mfy_radio_active);
	LL_ASSERT(!retval);
}

static void mayfly_radio_inactive(void *params)
{
    614c:	b480      	push	{r7}
    614e:	af00      	add	r7, sp, #0
	ARG_UNUSED(params);

	mayfly_radio_active(0);

	DEBUG_RADIO_CLOSE(0);
}
    6150:	46bd      	mov	sp, r7
    6152:	bc80      	pop	{r7}
    6154:	f7ff bfb6 	b.w	60c4 <mayfly_radio_active.part.8>

00006158 <prepare_normal_set>:
}

static void prepare_normal_set(struct shdr *hdr,
					 uint8_t ticker_user_id,
					 uint8_t ticker_id)
{
    6158:	b5b0      	push	{r4, r5, r7, lr}
    615a:	b088      	sub	sp, #32
	if (hdr->ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    615c:	6803      	ldr	r3, [r0, #0]
    615e:	2b00      	cmp	r3, #0
}

static void prepare_normal_set(struct shdr *hdr,
					 uint8_t ticker_user_id,
					 uint8_t ticker_id)
{
    6160:	af08      	add	r7, sp, #32
	if (hdr->ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6162:	da29      	bge.n	61b8 <prepare_normal_set+0x60>
		uint32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((uint32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    6164:	6885      	ldr	r5, [r0, #8]
    6166:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    616a:	6843      	ldr	r3, [r0, #4]
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		uint32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((uint32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    616c:	9006      	str	r0, [sp, #24]
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    616e:	429d      	cmp	r5, r3
    6170:	bf2c      	ite	cs
    6172:	1b63      	subcs	r3, r4, r5
    6174:	1ae3      	subcc	r3, r4, r3
    6176:	b29b      	uxth	r3, r3
			ticks_active_to_start : hdr->ticks_preempt_to_start;
		uint32_t ticks_drift_minus =
			(hdr->ticks_xtal_to_start & (~((uint32_t)1 << 31))) -
			ticks_prepare_to_start;

		ticker_status =
    6178:	2400      	movs	r4, #0
    617a:	4810      	ldr	r0, [pc, #64]	; (61bc <prepare_normal_set+0x64>)
    617c:	9005      	str	r0, [sp, #20]
    617e:	9301      	str	r3, [sp, #4]
    6180:	9300      	str	r3, [sp, #0]
    6182:	9404      	str	r4, [sp, #16]
    6184:	4623      	mov	r3, r4
    6186:	9403      	str	r4, [sp, #12]
    6188:	9402      	str	r4, [sp, #8]
    618a:	4620      	mov	r0, r4
    618c:	f7fe f8f0 	bl	4370 <ticker_update>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6190:	f030 0302 	bics.w	r3, r0, #2
    6194:	d010      	beq.n	61b8 <prepare_normal_set+0x60>
    6196:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <prepare_normal_set+0x68>)
    6198:	9301      	str	r3, [sp, #4]
    619a:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <prepare_normal_set+0x6c>)
    619c:	9300      	str	r3, [sp, #0]
    619e:	4a0a      	ldr	r2, [pc, #40]	; (61c8 <prepare_normal_set+0x70>)
    61a0:	4b0a      	ldr	r3, [pc, #40]	; (61cc <prepare_normal_set+0x74>)
    61a2:	490b      	ldr	r1, [pc, #44]	; (61d0 <prepare_normal_set+0x78>)
    61a4:	480b      	ldr	r0, [pc, #44]	; (61d4 <prepare_normal_set+0x7c>)
    61a6:	f7fb f801 	bl	11ac <printk>
    61aa:	4621      	mov	r1, r4
    61ac:	4620      	mov	r0, r4
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    61ae:	46bd      	mov	sp, r7
    61b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
				      ticker_user_id,
				      ticker_id, 0, ticks_drift_minus,
				      ticks_drift_minus, 0, 0, 0,
				      prepare_normal, hdr);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    61b4:	f006 ba4c 	b.w	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
}
    61b8:	46bd      	mov	sp, r7
    61ba:	bdb0      	pop	{r4, r5, r7, pc}
    61bc:	000045d9 	.word	0x000045d9
    61c0:	0000dd4e 	.word	0x0000dd4e
    61c4:	0000dd53 	.word	0x0000dd53
    61c8:	0000dcfd 	.word	0x0000dcfd
    61cc:	0000f1a1 	.word	0x0000f1a1
    61d0:	0000dd04 	.word	0x0000dd04
    61d4:	0000e588 	.word	0x0000e588

000061d8 <mayfly_xtal_stop_calc>:
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    61d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61da:	b08d      	sub	sp, #52	; 0x34
    61dc:	af08      	add	r7, sp, #32
	uint32_t volatile ticker_status;
	uint8_t ticker_id;
	uint32_t ticks_current;
	uint32_t ticks_to_expire;

	ticker_id = 0xff;
    61de:	23ff      	movs	r3, #255	; 0xff
    61e0:	70fb      	strb	r3, [r7, #3]
	ticks_to_expire = 0;
	ticker_status =
		ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    61e2:	1d3b      	adds	r3, r7, #4
    61e4:	9302      	str	r3, [sp, #8]
    61e6:	4b84      	ldr	r3, [pc, #528]	; (63f8 <mayfly_xtal_stop_calc+0x220>)
    61e8:	9301      	str	r3, [sp, #4]
    61ea:	f107 030c 	add.w	r3, r7, #12
    61ee:	9300      	str	r3, [sp, #0]
 * close and issues a conn param req or does a conn update.
 *
 * @todo Detect drift for overlapping tickers.
 */
static void mayfly_xtal_stop_calc(void *params)
{
    61f0:	4606      	mov	r6, r0
	uint32_t ticks_to_expire;

	ticker_id = 0xff;
	ticks_to_expire = 0;
	ticker_status =
		ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    61f2:	f107 0308 	add.w	r3, r7, #8
	uint8_t ticker_id;
	uint32_t ticks_current;
	uint32_t ticks_to_expire;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    61f6:	2000      	movs	r0, #0
	ticker_status =
		ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    61f8:	1cfa      	adds	r2, r7, #3
    61fa:	2101      	movs	r1, #1
	uint8_t ticker_id;
	uint32_t ticks_current;
	uint32_t ticks_to_expire;

	ticker_id = 0xff;
	ticks_to_expire = 0;
    61fc:	60f8      	str	r0, [r7, #12]
	ticker_status =
		ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
    61fe:	f7fe f93b 	bl	4478 <ticker_next_slot_get>
	uint32_t ticks_current;
	uint32_t ticks_to_expire;

	ticker_id = 0xff;
	ticks_to_expire = 0;
	ticker_status =
    6202:	6078      	str	r0, [r7, #4]
		ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_JOB, &ticker_id,
				     &ticks_current, &ticks_to_expire,
				     ticker_if_done, (void *)&ticker_status);

	while (ticker_status == TICKER_STATUS_BUSY) {
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	2b02      	cmp	r3, #2
    6208:	d104      	bne.n	6214 <mayfly_xtal_stop_calc+0x3c>
		ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
    620a:	2101      	movs	r1, #1
    620c:	2000      	movs	r0, #0
    620e:	f7fe f9b1 	bl	4574 <ticker_job_sched>
    6212:	e7f7      	b.n	6204 <mayfly_xtal_stop_calc+0x2c>
				 RADIO_TICKER_USER_ID_JOB);
	}

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	b16b      	cbz	r3, 6234 <mayfly_xtal_stop_calc+0x5c>
    6218:	4b78      	ldr	r3, [pc, #480]	; (63fc <mayfly_xtal_stop_calc+0x224>)
    621a:	9301      	str	r3, [sp, #4]
    621c:	4b78      	ldr	r3, [pc, #480]	; (6400 <mayfly_xtal_stop_calc+0x228>)
    621e:	9300      	str	r3, [sp, #0]
    6220:	4978      	ldr	r1, [pc, #480]	; (6404 <mayfly_xtal_stop_calc+0x22c>)
    6222:	4b79      	ldr	r3, [pc, #484]	; (6408 <mayfly_xtal_stop_calc+0x230>)
    6224:	4a79      	ldr	r2, [pc, #484]	; (640c <mayfly_xtal_stop_calc+0x234>)
    6226:	487a      	ldr	r0, [pc, #488]	; (6410 <mayfly_xtal_stop_calc+0x238>)
    6228:	f7fa ffc0 	bl	11ac <printk>
    622c:	2100      	movs	r1, #0
    622e:	4608      	mov	r0, r1
    6230:	f006 fa0e 	bl	c650 <_SysFatalErrorHandler>

	if ((ticker_id != 0xff) &&
    6234:	78fb      	ldrb	r3, [r7, #3]
    6236:	2bff      	cmp	r3, #255	; 0xff
    6238:	d070      	beq.n	631c <mayfly_xtal_stop_calc+0x144>
    623a:	68fb      	ldr	r3, [r7, #12]
    623c:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    6240:	d86c      	bhi.n	631c <mayfly_xtal_stop_calc+0x144>
	    (ticks_to_expire < TICKER_US_TO_TICKS(10000))) {
		mayfly_xtal_retain(1);
    6242:	2001      	movs	r0, #1
    6244:	f7ff fd6c 	bl	5d20 <mayfly_xtal_retain>

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
    6248:	78fa      	ldrb	r2, [r7, #3]
    624a:	2a04      	cmp	r2, #4
    624c:	f240 80cd 	bls.w	63ea <mayfly_xtal_stop_calc+0x212>
			uint32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6250:	2a06      	cmp	r2, #6
	    (ticks_to_expire < TICKER_US_TO_TICKS(10000))) {
		mayfly_xtal_retain(1);

		if (ticker_id >= RADIO_TICKER_ID_ADV) {
#if SCHED_ADVANCED
			uint8_t ticker_id_current = ((uint32_t)params & 0xff);
    6252:	b2f6      	uxtb	r6, r6
			uint32_t ticks_prepare_to_start;
			struct connection *conn = NULL;
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    6254:	d90b      	bls.n	626e <mayfly_xtal_stop_calc+0x96>
				conn = mem_get(_radio.conn_pool,
    6256:	4b6f      	ldr	r3, [pc, #444]	; (6414 <mayfly_xtal_stop_calc+0x23c>)
    6258:	3a07      	subs	r2, #7
    625a:	b292      	uxth	r2, r2
    625c:	f44f 7188 	mov.w	r1, #272	; 0x110
    6260:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    6264:	f7fc fc83 	bl	2b6e <mem_get>
    6268:	4605      	mov	r5, r0
					       CONNECTION_T_SIZE,
					       (ticker_id -
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
    626a:	4604      	mov	r4, r0
    626c:	e006      	b.n	627c <mayfly_xtal_stop_calc+0xa4>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_OBS) {
				hdr = &_radio.observer.hdr;
    626e:	4b6a      	ldr	r3, [pc, #424]	; (6418 <mayfly_xtal_stop_calc+0x240>)
    6270:	f103 04ec 	add.w	r4, r3, #236	; 0xec
    6274:	2a05      	cmp	r2, #5
    6276:	bf08      	it	eq
    6278:	461c      	moveq	r4, r3
    627a:	2500      	movs	r5, #0
			}

			/* compensate for reduced next ticker's prepare or
			 * reduce next ticker's prepare.
			 */
			ticks_prepare_to_start =
    627c:	68a1      	ldr	r1, [r4, #8]
    627e:	6863      	ldr	r3, [r4, #4]
    6280:	428b      	cmp	r3, r1
    6282:	bf38      	it	cc
    6284:	460b      	movcc	r3, r1
				(hdr->ticks_active_to_start >
				 hdr->ticks_preempt_to_start) ?
				hdr->ticks_active_to_start :
				hdr->ticks_preempt_to_start;
			if ((hdr->ticks_xtal_to_start & ((uint32_t)1 << 31)) != 0) {
    6286:	6821      	ldr	r1, [r4, #0]
    6288:	2900      	cmp	r1, #0
    628a:	da06      	bge.n	629a <mayfly_xtal_stop_calc+0xc2>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
    628c:	68fa      	ldr	r2, [r7, #12]
    628e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    6292:	4413      	add	r3, r2
    6294:	1a59      	subs	r1, r3, r1
    6296:	60f9      	str	r1, [r7, #12]
    6298:	e025      	b.n	62e6 <mayfly_xtal_stop_calc+0x10e>
						    ticks_prepare_to_start);
			} else {
				/* Postpone the primary because we dont have
				 * to start xtal.
				 */
				if (hdr->ticks_xtal_to_start >
    629a:	428b      	cmp	r3, r1
    629c:	d223      	bcs.n	62e6 <mayfly_xtal_stop_calc+0x10e>
					uint32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;

					ticker_status =
						ticker_update(
    629e:	1acb      	subs	r3, r1, r3
    62a0:	b29b      	uxth	r3, r3
    62a2:	9406      	str	r4, [sp, #24]
    62a4:	495d      	ldr	r1, [pc, #372]	; (641c <mayfly_xtal_stop_calc+0x244>)
    62a6:	9105      	str	r1, [sp, #20]
    62a8:	2400      	movs	r4, #0
    62aa:	9302      	str	r3, [sp, #8]
    62ac:	78fa      	ldrb	r2, [r7, #3]
    62ae:	9404      	str	r4, [sp, #16]
    62b0:	9403      	str	r4, [sp, #12]
    62b2:	9401      	str	r4, [sp, #4]
    62b4:	9400      	str	r4, [sp, #0]
    62b6:	2101      	movs	r1, #1
    62b8:	4620      	mov	r0, r4
    62ba:	f7fe f859 	bl	4370 <ticker_update>
				    ticks_prepare_to_start) {
					uint32_t ticks_drift_plus =
						hdr->ticks_xtal_to_start -
						ticks_prepare_to_start;

					ticker_status =
    62be:	6078      	str	r0, [r7, #4]
							      ticks_drift_plus, 0,
							      0, ticks_drift_plus,
							      0, 0,
							      prepare_reduced,
							      hdr);
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
    62c0:	687b      	ldr	r3, [r7, #4]
    62c2:	b183      	cbz	r3, 62e6 <mayfly_xtal_stop_calc+0x10e>
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	2b02      	cmp	r3, #2
    62c8:	d00d      	beq.n	62e6 <mayfly_xtal_stop_calc+0x10e>
    62ca:	4b4c      	ldr	r3, [pc, #304]	; (63fc <mayfly_xtal_stop_calc+0x224>)
    62cc:	9301      	str	r3, [sp, #4]
    62ce:	4b4c      	ldr	r3, [pc, #304]	; (6400 <mayfly_xtal_stop_calc+0x228>)
    62d0:	9300      	str	r3, [sp, #0]
    62d2:	494c      	ldr	r1, [pc, #304]	; (6404 <mayfly_xtal_stop_calc+0x22c>)
    62d4:	4b4c      	ldr	r3, [pc, #304]	; (6408 <mayfly_xtal_stop_calc+0x230>)
    62d6:	4a4d      	ldr	r2, [pc, #308]	; (640c <mayfly_xtal_stop_calc+0x234>)
    62d8:	4851      	ldr	r0, [pc, #324]	; (6420 <mayfly_xtal_stop_calc+0x248>)
    62da:	f7fa ff67 	bl	11ac <printk>
    62de:	4621      	mov	r1, r4
    62e0:	4620      	mov	r0, r4
    62e2:	f006 f9b5 	bl	c650 <_SysFatalErrorHandler>
						   ticker_status));
				}
			}

#if SCHED_ADVANCED
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    62e6:	2e06      	cmp	r6, #6
    62e8:	d97f      	bls.n	63ea <mayfly_xtal_stop_calc+0x212>
				/* compensate the current ticker for reduced
				 * prepare.
				 */
				conn_curr =
    62ea:	4b4a      	ldr	r3, [pc, #296]	; (6414 <mayfly_xtal_stop_calc+0x23c>)
    62ec:	1ff2      	subs	r2, r6, #7
    62ee:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    62f2:	b292      	uxth	r2, r2
    62f4:	f44f 7188 	mov.w	r1, #272	; 0x110
    62f8:	f7fc fc39 	bl	2b6e <mem_get>
				ticks_prepare_to_start =
					(conn_curr->hdr.ticks_active_to_start >
					conn_curr->hdr.ticks_preempt_to_start) ?
					conn_curr->hdr.ticks_active_to_start :
					conn_curr->hdr.ticks_preempt_to_start;
				if ((conn_curr->hdr.ticks_xtal_to_start &
    62fc:	6803      	ldr	r3, [r0, #0]
    62fe:	2b00      	cmp	r3, #0
#if SCHED_ADVANCED
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
				/* compensate the current ticker for reduced
				 * prepare.
				 */
				conn_curr =
    6300:	4604      	mov	r4, r0
				ticks_prepare_to_start =
					(conn_curr->hdr.ticks_active_to_start >
					conn_curr->hdr.ticks_preempt_to_start) ?
					conn_curr->hdr.ticks_active_to_start :
					conn_curr->hdr.ticks_preempt_to_start;
				if ((conn_curr->hdr.ticks_xtal_to_start &
    6302:	da2a      	bge.n	635a <mayfly_xtal_stop_calc+0x182>
						((uint32_t)1 << 31)) != 0) {
					ticks_to_expire +=
    6304:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	6881      	ldr	r1, [r0, #8]
    630c:	441a      	add	r2, r3
    630e:	6843      	ldr	r3, [r0, #4]
    6310:	4299      	cmp	r1, r3
    6312:	bf2c      	ite	cs
    6314:	1a53      	subcs	r3, r2, r1
    6316:	1ad3      	subcc	r3, r2, r3
    6318:	60fb      	str	r3, [r7, #12]
    631a:	e01e      	b.n	635a <mayfly_xtal_stop_calc+0x182>
				}
			}
#endif /* SCHED_ADVANCED */
		}
	} else {
		mayfly_xtal_retain(0);
    631c:	2000      	movs	r0, #0
    631e:	f7ff fcff 	bl	5d20 <mayfly_xtal_retain>

		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
    6322:	78fa      	ldrb	r2, [r7, #3]
    6324:	1f53      	subs	r3, r2, #5
    6326:	b2db      	uxtb	r3, r3
    6328:	2bf9      	cmp	r3, #249	; 0xf9
    632a:	d85e      	bhi.n	63ea <mayfly_xtal_stop_calc+0x212>
			struct shdr *hdr = NULL;

			/* Select the role's scheduling header */
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
    632c:	2a06      	cmp	r2, #6
    632e:	d909      	bls.n	6344 <mayfly_xtal_stop_calc+0x16c>
				struct connection *conn;

				conn = mem_get(_radio.conn_pool,
    6330:	4b38      	ldr	r3, [pc, #224]	; (6414 <mayfly_xtal_stop_calc+0x23c>)
    6332:	3a07      	subs	r2, #7
    6334:	b292      	uxth	r2, r2
    6336:	f44f 7188 	mov.w	r1, #272	; 0x110
    633a:	f8d3 0218 	ldr.w	r0, [r3, #536]	; 0x218
    633e:	f7fc fc16 	bl	2b6e <mem_get>
    6342:	e005      	b.n	6350 <mayfly_xtal_stop_calc+0x178>
						RADIO_TICKER_ID_FIRST_CONNECTION));
				hdr = &conn->hdr;
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
				hdr = &_radio.advertiser.hdr;
			} else if (ticker_id == RADIO_TICKER_ID_OBS) {
				hdr = &_radio.observer.hdr;
    6344:	4b34      	ldr	r3, [pc, #208]	; (6418 <mayfly_xtal_stop_calc+0x240>)
    6346:	f103 00ec 	add.w	r0, r3, #236	; 0xec
    634a:	2a05      	cmp	r2, #5
    634c:	bf08      	it	eq
    634e:	4618      	moveq	r0, r3
			} else {
				LL_ASSERT(0);
			}

			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
    6350:	78fa      	ldrb	r2, [r7, #3]
    6352:	2101      	movs	r1, #1
    6354:	f7ff ff00 	bl	6158 <prepare_normal_set>
					   ticker_id);
		}
	}
}
    6358:	e047      	b.n	63ea <mayfly_xtal_stop_calc+0x212>
			}

			/* auto conn param req or conn update procedure to
			 * avoid connection collisions.
			 */
			if ((conn) && (conn_curr) &&
    635a:	2d00      	cmp	r5, #0
    635c:	d045      	beq.n	63ea <mayfly_xtal_stop_calc+0x212>
			    (conn_curr->conn_interval == conn->conn_interval)) {
    635e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
			}

			/* auto conn param req or conn update procedure to
			 * avoid connection collisions.
			 */
			if ((conn) && (conn_curr) &&
    6360:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    6362:	429a      	cmp	r2, r3
    6364:	d141      	bne.n	63ea <mayfly_xtal_stop_calc+0x212>
			    (conn_curr->conn_interval == conn->conn_interval)) {
				uint32_t ticks_conn_interval =
    6366:	482f      	ldr	r0, [pc, #188]	; (6424 <mayfly_xtal_stop_calc+0x24c>)
    6368:	b292      	uxth	r2, r2
    636a:	fba2 0100 	umull	r0, r1, r2, r0
    636e:	f240 1323 	movw	r3, #291	; 0x123
    6372:	fb03 1102 	mla	r1, r3, r2, r1
    6376:	a31e      	add	r3, pc, #120	; (adr r3, 63f0 <mayfly_xtal_stop_calc+0x218>)
    6378:	e9d3 2300 	ldrd	r2, r3, [r3]
    637c:	f7f9 ff4e 	bl	21c <__aeabi_uldivmod>
    6380:	68fb      	ldr	r3, [r7, #12]
    6382:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);

				/* remove laziness, if any, from
				 * ticks_to_expire.
				 */
				while (ticks_to_expire > ticks_conn_interval) {
    6386:	2200      	movs	r2, #0
    6388:	4298      	cmp	r0, r3
    638a:	d202      	bcs.n	6392 <mayfly_xtal_stop_calc+0x1ba>
					ticks_to_expire -= ticks_conn_interval;
    638c:	1a1b      	subs	r3, r3, r0
    638e:	2201      	movs	r2, #1
    6390:	e7fa      	b.n	6388 <mayfly_xtal_stop_calc+0x1b0>
    6392:	b102      	cbz	r2, 6396 <mayfly_xtal_stop_calc+0x1be>
    6394:	60fb      	str	r3, [r7, #12]
				}

				/* if next ticker close to this ticker, send
				 * conn param req.
				 */
				if ((conn_curr->role.slave.role != 0) &&
    6396:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    639a:	f012 0f01 	tst.w	r2, #1
    639e:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
    63a2:	d010      	beq.n	63c6 <mayfly_xtal_stop_calc+0x1ee>
    63a4:	07d0      	lsls	r0, r2, #31
    63a6:	d420      	bmi.n	63ea <mayfly_xtal_stop_calc+0x212>
					(conn->role.master.role == 0) &&
    63a8:	68e2      	ldr	r2, [r4, #12]
    63aa:	323b      	adds	r2, #59	; 0x3b
    63ac:	429a      	cmp	r2, r3
    63ae:	d91c      	bls.n	63ea <mayfly_xtal_stop_calc+0x212>
					 (TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
							     625)
					  + conn_curr->hdr.ticks_slot))) {
					uint32_t status;

					status = conn_update_req(conn_curr);
    63b0:	4620      	mov	r0, r4
    63b2:	f7fe f98b 	bl	46cc <conn_update_req>
					if ((status == 2) &&
    63b6:	2802      	cmp	r0, #2
    63b8:	d117      	bne.n	63ea <mayfly_xtal_stop_calc+0x212>
    63ba:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
    63be:	0799      	lsls	r1, r3, #30
    63c0:	d513      	bpl.n	63ea <mayfly_xtal_stop_calc+0x212>
					    (conn->llcp_version.rx)) {
						conn_update_req(conn);
    63c2:	4628      	mov	r0, r5
    63c4:	e00f      	b.n	63e6 <mayfly_xtal_stop_calc+0x20e>
					}
				} else if ((conn_curr->role.master.role == 0) &&
    63c6:	07d2      	lsls	r2, r2, #31
    63c8:	d50f      	bpl.n	63ea <mayfly_xtal_stop_calc+0x212>
						(conn->role.slave.role != 0) &&
    63ca:	68e2      	ldr	r2, [r4, #12]
    63cc:	323b      	adds	r2, #59	; 0x3b
    63ce:	429a      	cmp	r2, r3
    63d0:	d90b      	bls.n	63ea <mayfly_xtal_stop_calc+0x212>
						 (TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US +
								     625) +
						  conn_curr->hdr.ticks_slot))) {
					uint32_t status;

					status = conn_update_req(conn);
    63d2:	4628      	mov	r0, r5
    63d4:	f7fe f97a 	bl	46cc <conn_update_req>
					if ((status == 2) &&
    63d8:	2802      	cmp	r0, #2
    63da:	d106      	bne.n	63ea <mayfly_xtal_stop_calc+0x212>
    63dc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    63e0:	079b      	lsls	r3, r3, #30
    63e2:	d502      	bpl.n	63ea <mayfly_xtal_stop_calc+0x212>
					    (conn_curr->llcp_version.rx)) {
						conn_update_req(conn_curr);
    63e4:	4620      	mov	r0, r4
    63e6:	f7fe f971 	bl	46cc <conn_update_req>
			/* Use normal prepare */
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
					   ticker_id);
		}
	}
}
    63ea:	3714      	adds	r7, #20
    63ec:	46bd      	mov	sp, r7
    63ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63f0:	1afd498d 	.word	0x1afd498d
    63f4:	00000007 	.word	0x00000007
    63f8:	000045c1 	.word	0x000045c1
    63fc:	0000dd4e 	.word	0x0000dd4e
    6400:	0000dd53 	.word	0x0000dd53
    6404:	0000dd04 	.word	0x0000dd04
    6408:	0000f1ce 	.word	0x0000f1ce
    640c:	0000dcfd 	.word	0x0000dcfd
    6410:	0000e3dd 	.word	0x0000e3dd
    6414:	20000b44 	.word	0x20000b44
    6418:	20000c08 	.word	0x20000c08
    641c:	000045c9 	.word	0x000045c9
    6420:	0000e6f6 	.word	0x0000e6f6
    6424:	09ce5400 	.word	0x09ce5400

00006428 <preempt_calc>:
}

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static uint32_t preempt_calc(struct shdr *hdr, uint8_t ticker_id,
			     uint32_t ticks_at_expire)
{
    6428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    642a:	4615      	mov	r5, r2
    642c:	af00      	add	r7, sp, #0
    642e:	460e      	mov	r6, r1
    6430:	4604      	mov	r4, r0
	uint32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
    6432:	f7fe f8b3 	bl	459c <ticker_ticks_now_get>

#if (RADIO_TICKER_PREEMPT_PART_US <= RADIO_TICKER_PREEMPT_PART_MIN_US)
static uint32_t preempt_calc(struct shdr *hdr, uint8_t ticker_id,
			     uint32_t ticks_at_expire)
{
	uint32_t diff =
    6436:	4629      	mov	r1, r5
    6438:	f7fe f8b6 	bl	45a8 <ticker_ticks_diff_get>
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
    643c:	1cc5      	adds	r5, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    643e:	2d09      	cmp	r5, #9
		mayfly_xtal_retain(0);
    6440:	f04f 0000 	mov.w	r0, #0
{
	uint32_t diff =
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);

	diff += 3;
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
    6444:	d90c      	bls.n	6460 <preempt_calc+0x38>
		mayfly_xtal_retain(0);
    6446:	f7ff fc6b 	bl	5d20 <mayfly_xtal_retain>

		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
    644a:	4620      	mov	r0, r4
    644c:	4632      	mov	r2, r6
    644e:	2100      	movs	r1, #0
    6450:	f7ff fe82 	bl	6158 <prepare_normal_set>

		diff += hdr->ticks_preempt_to_start;
    6454:	68a0      	ldr	r0, [r4, #8]
    6456:	4428      	add	r0, r5
		if (diff <
    6458:	2826      	cmp	r0, #38	; 0x26
    645a:	d802      	bhi.n	6462 <preempt_calc+0x3a>
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MAX_US)) {
			hdr->ticks_preempt_to_start = diff;
    645c:	60a0      	str	r0, [r4, #8]
    645e:	e000      	b.n	6462 <preempt_calc+0x3a>
    6460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		return 1;
    6462:	2001      	movs	r0, #1
	}

	return 0;
}
    6464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00006468 <event_obs_prepare>:
	packet_rx_enqueue();
}

static void event_obs_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			      uint16_t lazy, void *context)
{
    6468:	b5b0      	push	{r4, r5, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_O(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_OBS;
    646a:	4c21      	ldr	r4, [pc, #132]	; (64f0 <event_obs_prepare+0x88>)
	packet_rx_enqueue();
}

static void event_obs_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			      uint16_t lazy, void *context)
{
    646c:	b084      	sub	sp, #16
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_O(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_OBS;
    646e:	2306      	movs	r3, #6

	event_common_prepare(ticks_at_expire, remainder,
    6470:	2200      	movs	r2, #0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_PREPARE_O(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_OBS;
    6472:	7323      	strb	r3, [r4, #12]

	event_common_prepare(ticks_at_expire, remainder,
    6474:	9203      	str	r2, [sp, #12]
    6476:	9301      	str	r3, [sp, #4]
    6478:	4a1e      	ldr	r2, [pc, #120]	; (64f4 <event_obs_prepare+0x8c>)
    647a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    647e:	9202      	str	r2, [sp, #8]
    6480:	9300      	str	r3, [sp, #0]
	packet_rx_enqueue();
}

static void event_obs_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			      uint16_t lazy, void *context)
{
    6482:	af04      	add	r7, sp, #16

	DEBUG_RADIO_PREPARE_O(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_OBS;

	event_common_prepare(ticks_at_expire, remainder,
    6484:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
    6488:	f504 72d8 	add.w	r2, r4, #432	; 0x1b0
	packet_rx_enqueue();
}

static void event_obs_prepare(uint32_t ticks_at_expire, uint32_t remainder,
			      uint16_t lazy, void *context)
{
    648c:	4605      	mov	r5, r0

	DEBUG_RADIO_PREPARE_O(1);

	_radio.ticker_id_prepare = RADIO_TICKER_ID_OBS;

	event_common_prepare(ticks_at_expire, remainder,
    648e:	f7ff fcdb 	bl	5e48 <event_common_prepare>

#if SCHED_ADVANCED
	/* calc next group in us for the anchor where first connection event
	 * to be placed
	 */
	if (_radio.observer.conn) {
    6492:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
    6496:	b34b      	cbz	r3, 64ec <event_obs_prepare+0x84>
			0, 0, s_link, 0,
			mayfly_sched_after_mstr_free_offset_get};
		uint32_t ticks_at_expire_normal = ticks_at_expire;
		uint32_t retval;

		if (_radio.observer.hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6498:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    649c:	2b00      	cmp	r3, #0
    649e:	da0c      	bge.n	64ba <event_obs_prepare+0x52>
				(_radio.observer.hdr.ticks_active_to_start >
				 _radio.observer.hdr.ticks_preempt_to_start) ?
				_radio.observer.hdr.ticks_active_to_start :
				_radio.observer.hdr.ticks_preempt_to_start;

			ticks_at_expire_normal -=
    64a0:	f8d4 01b8 	ldr.w	r0, [r4, #440]	; 0x1b8
    64a4:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    64a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    64ac:	4288      	cmp	r0, r1
    64ae:	bf2c      	ite	cs
    64b0:	ebc2 0300 	rsbcs	r3, r2, r0
    64b4:	ebc2 0301 	rsbcc	r3, r2, r1
    64b8:	441d      	add	r5, r3
				((_radio.observer.hdr.ticks_xtal_to_start &
				  (~((uint32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		s_mfy_sched_after_mstr_free_offset_get.param =
    64ba:	4b0f      	ldr	r3, [pc, #60]	; (64f8 <event_obs_prepare+0x90>)
			(void *)ticks_at_expire_normal;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64bc:	2201      	movs	r2, #1
    64be:	4611      	mov	r1, r2
    64c0:	2000      	movs	r0, #0
				((_radio.observer.hdr.ticks_xtal_to_start &
				  (~((uint32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		s_mfy_sched_after_mstr_free_offset_get.param =
    64c2:	609d      	str	r5, [r3, #8]
			(void *)ticks_at_expire_normal;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    64c4:	f7fc fbb8 	bl	2c38 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_JOB, 1,
				&s_mfy_sched_after_mstr_free_offset_get);
		LL_ASSERT(!retval);
    64c8:	b180      	cbz	r0, 64ec <event_obs_prepare+0x84>
    64ca:	4b0c      	ldr	r3, [pc, #48]	; (64fc <event_obs_prepare+0x94>)
    64cc:	9301      	str	r3, [sp, #4]
    64ce:	4b0c      	ldr	r3, [pc, #48]	; (6500 <event_obs_prepare+0x98>)
    64d0:	9300      	str	r3, [sp, #0]
    64d2:	4a0c      	ldr	r2, [pc, #48]	; (6504 <event_obs_prepare+0x9c>)
    64d4:	4b0c      	ldr	r3, [pc, #48]	; (6508 <event_obs_prepare+0xa0>)
    64d6:	490d      	ldr	r1, [pc, #52]	; (650c <event_obs_prepare+0xa4>)
    64d8:	480d      	ldr	r0, [pc, #52]	; (6510 <event_obs_prepare+0xa8>)
    64da:	f7fa fe67 	bl	11ac <printk>
    64de:	2100      	movs	r1, #0
    64e0:	4608      	mov	r0, r1
	}
#endif

	DEBUG_RADIO_PREPARE_O(0);
}
    64e2:	46bd      	mov	sp, r7
    64e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
			(void *)ticks_at_expire_normal;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_USER_ID_JOB, 1,
				&s_mfy_sched_after_mstr_free_offset_get);
		LL_ASSERT(!retval);
    64e8:	f006 b8b2 	b.w	c650 <_SysFatalErrorHandler>
	}
#endif

	DEBUG_RADIO_PREPARE_O(0);
}
    64ec:	46bd      	mov	sp, r7
    64ee:	bdb0      	pop	{r4, r5, r7, pc}
    64f0:	20000b44 	.word	0x20000b44
    64f4:	000074b5 	.word	0x000074b5
    64f8:	20000290 	.word	0x20000290
    64fc:	0000dd4e 	.word	0x0000dd4e
    6500:	0000dd53 	.word	0x0000dd53
    6504:	0000dcfd 	.word	0x0000dcfd
    6508:	0000ef4d 	.word	0x0000ef4d
    650c:	0000dd04 	.word	0x0000dd04
    6510:	0000e471 	.word	0x0000e471
    6514:	00000000 	.word	0x00000000

00006518 <event_connection_prepare>:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static void event_connection_prepare(uint32_t ticks_at_expire,
				     uint32_t remainder, uint16_t lazy,
				     struct connection *conn)
{
    6518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    651c:	b08f      	sub	sp, #60	; 0x3c
    651e:	461c      	mov	r4, r3
	uint16_t event_counter;

	_radio.ticker_id_prepare =
    6520:	f893 3020 	ldrb.w	r3, [r3, #32]
    6524:	4dc3      	ldr	r5, [pc, #780]	; (6834 <event_connection_prepare+0x31c>)
    6526:	3307      	adds	r3, #7
    6528:	b2db      	uxtb	r3, r3
    652a:	732b      	strb	r3, [r5, #12]
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    652c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static void event_connection_prepare(uint32_t ticks_at_expire,
				     uint32_t remainder, uint16_t lazy,
				     struct connection *conn)
{
    6530:	af0a      	add	r7, sp, #40	; 0x28
    6532:	4683      	mov	fp, r0

	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    6534:	07d8      	lsls	r0, r3, #31
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static void event_connection_prepare(uint32_t ticks_at_expire,
				     uint32_t remainder, uint16_t lazy,
				     struct connection *conn)
{
    6536:	6079      	str	r1, [r7, #4]

	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
    6538:	d509      	bpl.n	654e <event_connection_prepare+0x36>
		conn->role.slave.window_widening_prepare_us +=
    653a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    653c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    653e:	fb02 3303 	mla	r3, r2, r3, r3
    6542:	440b      	add	r3, r1
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
		    conn->role.slave.window_widening_max_us) {
    6544:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
	_radio.ticker_id_prepare =
	    RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle;

	/* Calc window widening */
	if (conn->role.slave.role != 0) {
		conn->role.slave.window_widening_prepare_us +=
    6546:	6523      	str	r3, [r4, #80]	; 0x50
		    conn->role.slave.window_widening_periodic_us * (lazy + 1);
		if (conn->role.slave.window_widening_prepare_us >
    6548:	428b      	cmp	r3, r1
		    conn->role.slave.window_widening_max_us) {
			conn->role.slave.window_widening_prepare_us =
    654a:	bf88      	it	hi
    654c:	6521      	strhi	r1, [r4, #80]	; 0x50
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    654e:	8d23      	ldrh	r3, [r4, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    6550:	8c66      	ldrh	r6, [r4, #34]	; 0x22
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    6552:	441a      	add	r2, r3
    6554:	b292      	uxth	r2, r2

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    6556:	4416      	add	r6, r2
				conn->role.slave.window_widening_max_us;
		}
	}

	/* save the latency for use in event */
	conn->latency_prepare += lazy;
    6558:	8522      	strh	r2, [r4, #40]	; 0x28

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    655a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    655e:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
    6562:	429a      	cmp	r2, r3

	/* save the latency for use in event */
	conn->latency_prepare += lazy;

	/* calc current event counter value */
	event_counter = conn->event_counter + conn->latency_prepare;
    6564:	b2b6      	uxth	r6, r6

	/* check if procedure is requested */
	if (conn->llcp_ack != conn->llcp_req) {
    6566:	f000 8590 	beq.w	708a <event_connection_prepare+0xb72>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    656a:	2200      	movs	r2, #0
    656c:	2305      	movs	r3, #5
    656e:	4611      	mov	r1, r2
    6570:	4610      	mov	r0, r2
    6572:	f7ff fba7 	bl	5cc4 <event_stop>

		switch (conn->llcp_type) {
    6576:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    657a:	3b01      	subs	r3, #1
    657c:	2b05      	cmp	r3, #5
    657e:	f200 8576 	bhi.w	706e <event_connection_prepare+0xb56>
    6582:	e8df f013 	tbh	[pc, r3, lsl #1]
    6586:	0006      	.short	0x0006
    6588:	038e034f 	.word	0x038e034f
    658c:	04ed04c6 	.word	0x04ed04c6
    6590:	055d      	.short	0x055d
					      uint32_t ticks_at_expire)
{
	struct connection *conn_upd;
	uint16_t instant_latency;

	conn_upd = _radio.conn_upd;
    6592:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294

	/* set mutex */
	if (!conn_upd) {
    6596:	b912      	cbnz	r2, 659e <event_connection_prepare+0x86>
		_radio.conn_upd = conn;
    6598:	4ba6      	ldr	r3, [pc, #664]	; (6834 <event_connection_prepare+0x31c>)
    659a:	f8c3 4294 	str.w	r4, [r3, #660]	; 0x294
	}

	instant_latency =
		((event_counter - conn->llcp.connection_update.instant) &
		 0xffff);
	if (conn->llcp.connection_update.state) {
    659e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    65a2:	f013 0307 	ands.w	r3, r3, #7
    65a6:	f000 8163 	beq.w	6870 <event_connection_prepare+0x358>
		if (((conn_upd == 0) || (conn_upd == conn)) &&
    65aa:	b112      	cbz	r2, 65b2 <event_connection_prepare+0x9a>
    65ac:	4294      	cmp	r4, r2
    65ae:	f040 856c 	bne.w	708a <event_connection_prepare+0xb72>
    65b2:	3b04      	subs	r3, #4
    65b4:	2b01      	cmp	r3, #1
    65b6:	f240 8568 	bls.w	708a <event_connection_prepare+0xb72>
#endif
			struct radio_pdu_node_tx *node_tx;
			struct pdu_data *pdu_ctrl_tx;
			uint8_t state;

			node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    65ba:	489f      	ldr	r0, [pc, #636]	; (6838 <event_connection_prepare+0x320>)
    65bc:	f7fc fa9b 	bl	2af6 <mem_acquire>
			if (!node_tx) {
    65c0:	4680      	mov	r8, r0
    65c2:	2800      	cmp	r0, #0
    65c4:	f000 8561 	beq.w	708a <event_connection_prepare+0xb72>
			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if SCHED_ADVANCED
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
#endif
			state = conn->llcp.connection_update.state;
    65c8:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    65cc:	f003 0307 	and.w	r3, r3, #7
			if ((state == LLCP_CONN_STATE_RSP) &&
    65d0:	2b03      	cmp	r3, #3
    65d2:	d106      	bne.n	65e2 <event_connection_prepare+0xca>
    65d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    65d8:	07d9      	lsls	r1, r3, #31
    65da:	f100 80d8 	bmi.w	678e <event_connection_prepare+0x276>
			    (conn->role.master.role == 0)) {
				state = LLCP_CONN_STATE_INITIATE;
#if SCHED_ADVANCED
				fp_mayfly_select_or_use =
    65de:	4997      	ldr	r1, [pc, #604]	; (683c <event_connection_prepare+0x324>)
    65e0:	e008      	b.n	65f4 <event_connection_prepare+0xdc>
					mayfly_sched_win_offset_select;
#endif
			}

			switch (state) {
    65e2:	2b02      	cmp	r3, #2
    65e4:	d064      	beq.n	66b0 <event_connection_prepare+0x198>
    65e6:	2b03      	cmp	r3, #3
    65e8:	f000 80d1 	beq.w	678e <event_connection_prepare+0x276>
    65ec:	2b01      	cmp	r3, #1
    65ee:	f040 8112 	bne.w	6816 <event_connection_prepare+0x2fe>
			}

			pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;

#if SCHED_ADVANCED
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
    65f2:	4993      	ldr	r1, [pc, #588]	; (6840 <event_connection_prepare+0x328>)
#endif
			}

			switch (state) {
			case LLCP_CONN_STATE_INITIATE:
				if (conn->role.master.role == 0) {
    65f4:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    65f8:	f012 0201 	ands.w	r2, r2, #1
    65fc:	d158      	bne.n	66b0 <event_connection_prepare+0x198>
			  uint32_t ticks_at_expire,
			  struct mayfly *mayfly_sched_offset,
			  void (*fp_mayfly_select_or_use)(void *))
{
	/* move to in progress */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    65fe:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    6602:	f362 0302 	bfi	r3, r2, #0, #3
    6606:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95

	/* set instant */
	conn->llcp.connection_update.instant =
    660a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    660c:	3306      	adds	r3, #6
    660e:	4433      	add	r3, r6
    6610:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6614:	f898 3004 	ldrb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    6618:	f888 2007 	strb.w	r2, [r8, #7]
	/* set instant */
	conn->llcp.connection_update.instant =
		event_counter + conn->latency + 6;

	/* place the conn update req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    661c:	f043 0303 	orr.w	r3, r3, #3
    6620:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6624:	230c      	movs	r3, #12
    6626:	f888 3005 	strb.w	r3, [r8, #5]
		sizeof(struct pdu_data_llctrl_conn_update_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.win_size =
		conn->llcp.connection_update.win_size;
    662a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_conn_update_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.win_size =
    662e:	f888 3008 	strb.w	r3, [r8, #8]
		conn->llcp.connection_update.win_size;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.
		win_offset = conn->llcp.connection_update.win_offset_us / 1250;
    6632:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    6636:	f240 42e2 	movw	r2, #1250	; 0x4e2
    663a:	fbb3 f3f2 	udiv	r3, r3, r2
    663e:	f8a8 3009 	strh.w	r3, [r8, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.interval =
    6642:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    6646:	f8a8 300b 	strh.w	r3, [r8, #11]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.latency =
    664a:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    664e:	f8a8 300d 	strh.w	r3, [r8, #13]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.timeout =
    6652:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    6656:	f8a8 300f 	strh.w	r3, [r8, #15]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.instant =
    665a:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    665e:	f8a8 3011 	strh.w	r3, [r8, #17]

		/* calculate window offset that places the connection in the
		 * next available slot after existing masters.
		 */
		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
		if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6662:	6823      	ldr	r3, [r4, #0]
		uint32_t retval;

		/* calculate window offset that places the connection in the
		 * next available slot after existing masters.
		 */
		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
    6664:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
		if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6668:	2b00      	cmp	r3, #0
    666a:	da0c      	bge.n	6686 <event_connection_prepare+0x16e>
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->llcp.connection_update.ticks_ref -=
    666c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    6670:	68a0      	ldr	r0, [r4, #8]
    6672:	6863      	ldr	r3, [r4, #4]
    6674:	4298      	cmp	r0, r3
    6676:	bf2c      	ite	cs
    6678:	ebc2 0300 	rsbcs	r3, r2, r0
    667c:	ebc2 0303 	rsbcc	r3, r2, r3
    6680:	445b      	add	r3, fp
    6682:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				((conn->hdr.ticks_xtal_to_start &
				  (~((uint32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		conn->llcp.connection_update.pdu_win_offset = (uint16_t *)
    6686:	f108 0309 	add.w	r3, r8, #9
    668a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.win_offset;

		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    668e:	4b6d      	ldr	r3, [pc, #436]	; (6844 <event_connection_prepare+0x32c>)
		mayfly_sched_offset->param = (void *)conn;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6690:	2201      	movs	r2, #1
		}

		conn->llcp.connection_update.pdu_win_offset = (uint16_t *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.win_offset;

		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
    6692:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6694:	2000      	movs	r0, #0
    6696:	4611      	mov	r1, r2

		conn->llcp.connection_update.pdu_win_offset = (uint16_t *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_req.win_offset;

		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
		mayfly_sched_offset->param = (void *)conn;
    6698:	609c      	str	r4, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    669a:	f7fc facd 	bl	2c38 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					mayfly_sched_offset);
		LL_ASSERT(!retval);
    669e:	2800      	cmp	r0, #0
    66a0:	f000 8432 	beq.w	6f08 <event_connection_prepare+0x9f0>
    66a4:	4b68      	ldr	r3, [pc, #416]	; (6848 <event_connection_prepare+0x330>)
    66a6:	9301      	str	r3, [sp, #4]
    66a8:	4b68      	ldr	r3, [pc, #416]	; (684c <event_connection_prepare+0x334>)
    66aa:	9300      	str	r3, [sp, #0]
    66ac:	4b68      	ldr	r3, [pc, #416]	; (6850 <event_connection_prepare+0x338>)
    66ae:	e06a      	b.n	6786 <event_connection_prepare+0x26e>
					    struct pdu_data *pdu_ctrl_tx,
					    uint32_t ticks_at_expire,
					    struct mayfly *mayfly_sched_offset)
{
	/* move to wait for conn_update/rsp/rej */
	conn->llcp.connection_update.state = LLCP_CONN_STATE_RSP_WAIT;
    66b0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    66b4:	2205      	movs	r2, #5
    66b6:	f362 0302 	bfi	r3, r2, #0, #3
    66ba:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95

	/* place the conn param req packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    66be:	f898 3004 	ldrb.w	r3, [r8, #4]
    66c2:	f043 0303 	orr.w	r3, r3, #3
    66c6:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    66ca:	2318      	movs	r3, #24
    66cc:	f888 3005 	strb.w	r3, [r8, #5]
		sizeof(struct pdu_data_llctrl_conn_param_req);
	pdu_ctrl_tx->payload.llctrl.opcode =
    66d0:	230f      	movs	r3, #15
    66d2:	f888 3007 	strb.w	r3, [r8, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    66d6:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    66da:	f8a8 3008 	strh.w	r3, [r8, #8]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    66de:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    66e2:	f8a8 300a 	strh.w	r3, [r8, #10]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    66e6:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    66ea:	f8a8 300c 	strh.w	r3, [r8, #12]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    66ee:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    66f2:	f8a8 300e 	strh.w	r3, [r8, #14]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
    66f6:	2300      	movs	r3, #0
    66f8:	f888 3010 	strb.w	r3, [r8, #16]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
    66fc:	f888 3013 	strb.w	r3, [r8, #19]
    6700:	f888 3014 	strb.w	r3, [r8, #20]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    6704:	f04f 33ff 	mov.w	r3, #4294967295
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity = 0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count = event_counter;
    6708:	f8a8 6011 	strh.w	r6, [r8, #17]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 = 0x0000;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 = 0xffff;
    670c:	f888 3015 	strb.w	r3, [r8, #21]
    6710:	f888 3016 	strb.w	r3, [r8, #22]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 = 0xffff;
    6714:	f888 3017 	strb.w	r3, [r8, #23]
    6718:	f888 3018 	strb.w	r3, [r8, #24]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 = 0xffff;
    671c:	f888 3019 	strb.w	r3, [r8, #25]
    6720:	f888 301a 	strb.w	r3, [r8, #26]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 = 0xffff;
    6724:	f888 301b 	strb.w	r3, [r8, #27]
    6728:	f888 301c 	strb.w	r3, [r8, #28]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 = 0xffff;
    672c:	f888 301d 	strb.w	r3, [r8, #29]
    6730:	f888 301e 	strb.w	r3, [r8, #30]

	/* Start Procedure Timeout */
	conn->procedure_expire = conn->procedure_reload;
    6734:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    6736:	8723      	strh	r3, [r4, #56]	; 0x38
#if SCHED_ADVANCED
	{
		uint32_t retval;

		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
		if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6738:	6823      	ldr	r3, [r4, #0]

#if SCHED_ADVANCED
	{
		uint32_t retval;

		conn->llcp.connection_update.ticks_ref = ticks_at_expire;
    673a:	f8c4 b084 	str.w	fp, [r4, #132]	; 0x84
		if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    673e:	2b00      	cmp	r3, #0
    6740:	da0c      	bge.n	675c <event_connection_prepare+0x244>
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->llcp.connection_update.ticks_ref -=
    6742:	68a0      	ldr	r0, [r4, #8]
    6744:	6861      	ldr	r1, [r4, #4]
    6746:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    674a:	4288      	cmp	r0, r1
    674c:	bf2c      	ite	cs
    674e:	ebc2 0300 	rsbcs	r3, r2, r0
    6752:	ebc2 0301 	rsbcc	r3, r2, r1
    6756:	445b      	add	r3, fp
    6758:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				((conn->hdr.ticks_xtal_to_start &
				  (~((uint32_t)1 << 31))) -
				 ticks_prepare_to_start);
		}

		conn->llcp.connection_update.pdu_win_offset = (uint16_t *)
    675c:	f108 0313 	add.w	r3, r8, #19
    6760:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0;

		mayfly_sched_offset->fp = mayfly_sched_free_win_offset_calc;
    6764:	4b37      	ldr	r3, [pc, #220]	; (6844 <event_connection_prepare+0x32c>)
    6766:	4a3b      	ldr	r2, [pc, #236]	; (6854 <event_connection_prepare+0x33c>)
    6768:	60da      	str	r2, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    676a:	2201      	movs	r2, #1
    676c:	4611      	mov	r1, r2
    676e:	2000      	movs	r0, #0

		conn->llcp.connection_update.pdu_win_offset = (uint16_t *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0;

		mayfly_sched_offset->fp = mayfly_sched_free_win_offset_calc;
		mayfly_sched_offset->param = (void *)conn;
    6770:	609c      	str	r4, [r3, #8]

		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    6772:	f7fc fa61 	bl	2c38 <mayfly_enqueue>
					RADIO_TICKER_USER_ID_JOB, 1,
					mayfly_sched_offset);
		LL_ASSERT(!retval);
    6776:	2800      	cmp	r0, #0
    6778:	f000 83c6 	beq.w	6f08 <event_connection_prepare+0x9f0>
    677c:	4b32      	ldr	r3, [pc, #200]	; (6848 <event_connection_prepare+0x330>)
    677e:	9301      	str	r3, [sp, #4]
    6780:	4b32      	ldr	r3, [pc, #200]	; (684c <event_connection_prepare+0x334>)
    6782:	9300      	str	r3, [sp, #0]
    6784:	4b34      	ldr	r3, [pc, #208]	; (6858 <event_connection_prepare+0x340>)
    6786:	4a35      	ldr	r2, [pc, #212]	; (685c <event_connection_prepare+0x344>)
    6788:	4935      	ldr	r1, [pc, #212]	; (6860 <event_connection_prepare+0x348>)
    678a:	4836      	ldr	r0, [pc, #216]	; (6864 <event_connection_prepare+0x34c>)
    678c:	e04b      	b.n	6826 <event_connection_prepare+0x30e>

static inline void event_conn_update_st_rsp(struct connection *conn,
					    struct pdu_data *pdu_ctrl_tx)
{
	/* procedure request acked */
	conn->llcp_ack = conn->llcp_req;
    678e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6792:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

	/* reset mutex */
	_radio.conn_upd = NULL;
    6796:	2300      	movs	r3, #0
    6798:	f8c5 3294 	str.w	r3, [r5, #660]	; 0x294

	/** @todo REJECT_IND_EXT */

	/* place the conn param rsp packet as next in tx queue */
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    679c:	f898 3004 	ldrb.w	r3, [r8, #4]
    67a0:	f043 0303 	orr.w	r3, r3, #3
    67a4:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    67a8:	2318      	movs	r3, #24
    67aa:	f888 3005 	strb.w	r3, [r8, #5]
		sizeof(struct pdu_data_llctrl_conn_param_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    67ae:	2310      	movs	r3, #16
    67b0:	f888 3007 	strb.w	r3, [r8, #7]
		PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_min =
    67b4:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    67b8:	f8a8 3008 	strh.w	r3, [r8, #8]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.interval_max =
    67bc:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    67c0:	f8a8 300a 	strh.w	r3, [r8, #10]
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
    67c4:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    67c8:	f8a8 300c 	strh.w	r3, [r8, #12]
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
    67cc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    67d0:	f8a8 300e 	strh.w	r3, [r8, #14]
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
		conn->llcp.connection_update.preferred_periodicity;
    67d4:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
		conn->llcp.connection_update.interval;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.latency =
		conn->llcp.connection_update.latency;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.timeout =
		conn->llcp.connection_update.timeout;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity =
    67d8:	f888 3010 	strb.w	r3, [r8, #16]
		conn->llcp.connection_update.preferred_periodicity;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.reference_conn_event_count =
    67dc:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    67e0:	f8a8 3011 	strh.w	r3, [r8, #17]
		conn->llcp.connection_update.instant;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset0 =
    67e4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
    67e8:	f8a8 3013 	strh.w	r3, [r8, #19]
		conn->llcp.connection_update.offset0;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset1 =
    67ec:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
    67f0:	f8a8 3015 	strh.w	r3, [r8, #21]
		conn->llcp.connection_update.offset1;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset2 =
    67f4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
    67f8:	f8a8 3017 	strh.w	r3, [r8, #23]
		conn->llcp.connection_update.offset2;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset3 =
    67fc:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    6800:	f8a8 3019 	strh.w	r3, [r8, #25]
		conn->llcp.connection_update.offset3;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset4 =
    6804:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    6808:	f8a8 301b 	strh.w	r3, [r8, #27]
		conn->llcp.connection_update.offset4;
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_param_req.offset5 =
    680c:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
    6810:	f8a8 301d 	strh.w	r3, [r8, #29]
    6814:	e378      	b.n	6f08 <event_connection_prepare+0x9f0>
			case LLCP_CONN_STATE_RSP:
				event_conn_update_st_rsp(conn, pdu_ctrl_tx);
				break;

			default:
				LL_ASSERT(0);
    6816:	4b0c      	ldr	r3, [pc, #48]	; (6848 <event_connection_prepare+0x330>)
    6818:	9301      	str	r3, [sp, #4]
    681a:	4b0c      	ldr	r3, [pc, #48]	; (684c <event_connection_prepare+0x334>)
    681c:	9300      	str	r3, [sp, #0]
    681e:	4a0f      	ldr	r2, [pc, #60]	; (685c <event_connection_prepare+0x344>)
    6820:	4b11      	ldr	r3, [pc, #68]	; (6868 <event_connection_prepare+0x350>)
    6822:	490f      	ldr	r1, [pc, #60]	; (6860 <event_connection_prepare+0x348>)
    6824:	4811      	ldr	r0, [pc, #68]	; (686c <event_connection_prepare+0x354>)
    6826:	f7fa fcc1 	bl	11ac <printk>
    682a:	2100      	movs	r1, #0
    682c:	4608      	mov	r0, r1
    682e:	f005 ff0f 	bl	c650 <_SysFatalErrorHandler>
    6832:	e369      	b.n	6f08 <event_connection_prepare+0x9f0>
    6834:	20000b44 	.word	0x20000b44
    6838:	20000dac 	.word	0x20000dac
    683c:	00005681 	.word	0x00005681
    6840:	00005961 	.word	0x00005961
    6844:	200001f0 	.word	0x200001f0
    6848:	0000dd4e 	.word	0x0000dd4e
    684c:	0000dd53 	.word	0x0000dd53
    6850:	0000f1b4 	.word	0x0000f1b4
    6854:	00005769 	.word	0x00005769
    6858:	0000ef5f 	.word	0x0000ef5f
    685c:	0000dcfd 	.word	0x0000dcfd
    6860:	0000dd04 	.word	0x0000dd04
    6864:	0000e471 	.word	0x0000e471
    6868:	0000f217 	.word	0x0000f217
    686c:	0000e191 	.word	0x0000e191
	/* set mutex */
	if (!conn_upd) {
		_radio.conn_upd = conn;
	}

	instant_latency =
    6870:	f8b4 8074 	ldrh.w	r8, [r4, #116]	; 0x74
    6874:	ebc8 0806 	rsb	r8, r8, r6
    6878:	fa1f f888 	uxth.w	r8, r8
				break;
			}

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else if (instant_latency <= 0x7FFF) {
    687c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    6880:	f040 8403 	bne.w	708a <event_connection_prepare+0xb72>
		uint16_t conn_interval_new;
		uint16_t latency;
		uint32_t mayfly_was_enabled;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    6884:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    6888:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    688c:	f8d5 2294 	ldr.w	r2, [r5, #660]	; 0x294
		conn->llcp_ack = conn->llcp_req;

		/* Reset ticker_id_prepare as role is not continued further
		 * due to conn update at this event.
		 */
		_radio.ticker_id_prepare = 0;
    6890:	732b      	strb	r3, [r5, #12]

		/* reset mutex */
		if (_radio.conn_upd == conn) {
    6892:	4294      	cmp	r4, r2
			_radio.conn_upd = NULL;
    6894:	bf04      	itt	eq
    6896:	4a76      	ldreq	r2, [pc, #472]	; (6a70 <event_connection_prepare+0x558>)
    6898:	f8c2 3294 	streq.w	r3, [r2, #660]	; 0x294
		}

		/* Prepare the rx packet structure */
		if ((conn->llcp.connection_update.interval !=
    689c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    689e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    68a0:	429a      	cmp	r2, r3
    68a2:	d10c      	bne.n	68be <event_connection_prepare+0x3a6>
		     conn->conn_interval) ||
		    (conn->llcp.connection_update.latency != conn->latency) ||
    68a4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    68a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    68a8:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
    68ac:	4353      	muls	r3, r2
    68ae:	227d      	movs	r2, #125	; 0x7d
    68b0:	4353      	muls	r3, r2
    68b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    68b6:	fb93 f3f2 	sdiv	r3, r3, r2
    68ba:	4299      	cmp	r1, r3
    68bc:	d023      	beq.n	6906 <event_connection_prepare+0x3ee>
		    (conn->llcp.connection_update.timeout !=
		     (conn->conn_interval * conn->supervision_reload * 125 / 1000))) {
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    68be:	2002      	movs	r0, #2
    68c0:	f7fd fee0 	bl	4684 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    68c4:	4606      	mov	r6, r0
    68c6:	b968      	cbnz	r0, 68e4 <event_connection_prepare+0x3cc>
    68c8:	4b6a      	ldr	r3, [pc, #424]	; (6a74 <event_connection_prepare+0x55c>)
    68ca:	9301      	str	r3, [sp, #4]
    68cc:	4b6a      	ldr	r3, [pc, #424]	; (6a78 <event_connection_prepare+0x560>)
    68ce:	9300      	str	r3, [sp, #0]
    68d0:	496a      	ldr	r1, [pc, #424]	; (6a7c <event_connection_prepare+0x564>)
    68d2:	4b6b      	ldr	r3, [pc, #428]	; (6a80 <event_connection_prepare+0x568>)
    68d4:	4a6b      	ldr	r2, [pc, #428]	; (6a84 <event_connection_prepare+0x56c>)
    68d6:	486c      	ldr	r0, [pc, #432]	; (6a88 <event_connection_prepare+0x570>)
    68d8:	f7fa fc68 	bl	11ac <printk>
    68dc:	4631      	mov	r1, r6
    68de:	4630      	mov	r0, r6
    68e0:	f005 feb6 	bl	c650 <_SysFatalErrorHandler>

			radio_pdu_node_rx->hdr.handle = conn->handle;
    68e4:	8c23      	ldrh	r3, [r4, #32]
    68e6:	80f3      	strh	r3, [r6, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    68e8:	2305      	movs	r3, #5
    68ea:	7133      	strb	r3, [r6, #4]
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    68ec:	2300      	movs	r3, #0
    68ee:	72f3      	strb	r3, [r6, #11]
			radio_le_conn_update_cmplt->interval =
    68f0:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    68f4:	81b3      	strh	r3, [r6, #12]
				conn->llcp.connection_update.interval;
			radio_le_conn_update_cmplt->latency =
    68f6:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    68fa:	81f3      	strh	r3, [r6, #14]
				conn->llcp.connection_update.latency;
			radio_le_conn_update_cmplt->timeout =
    68fc:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    6900:	8233      	strh	r3, [r6, #16]
				conn->llcp.connection_update.timeout;

			/* enqueue connection update complete structure
			 * into queue.
			 */
			packet_rx_enqueue();
    6902:	f7ff f85b 	bl	59bc <packet_rx_enqueue>
		}

		/* restore to normal prepare */
		if (conn->hdr.ticks_xtal_to_start & ((uint32_t)1 << 31)) {
    6906:	6823      	ldr	r3, [r4, #0]
    6908:	f8d4 9004 	ldr.w	r9, [r4, #4]
    690c:	2b00      	cmp	r3, #0
    690e:	da0a      	bge.n	6926 <event_connection_prepare+0x40e>
			uint32_t ticks_prepare_to_start =
    6910:	68a2      	ldr	r2, [r4, #8]
				(conn->hdr.ticks_active_to_start >
				 conn->hdr.ticks_preempt_to_start) ?
				conn->hdr.ticks_active_to_start :
				conn->hdr.ticks_preempt_to_start;

			conn->hdr.ticks_xtal_to_start &= ~((uint32_t)1 << 31);
    6912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6916:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
    6918:	454a      	cmp	r2, r9
    691a:	bf2c      	ite	cs
    691c:	ebc3 0302 	rsbcs	r3, r3, r2
    6920:	ebc3 0309 	rsbcc	r3, r3, r9
    6924:	449b      	add	fp, r3
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    6926:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		latency = conn_interval_old /
			conn->llcp.connection_update.interval;
    6928:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
					    ticks_prepare_to_start);
		}

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * conn->conn_interval;
    692c:	fb13 f308 	smulbb	r3, r3, r8
    6930:	b299      	uxth	r1, r3
		latency = conn_interval_old /
    6932:	fbb1 f3f6 	udiv	r3, r1, r6
    6936:	60bb      	str	r3, [r7, #8]
			conn->llcp.connection_update.interval;
		conn_interval_new = latency *
    6938:	893b      	ldrh	r3, [r7, #8]
    693a:	fb16 f203 	smulbb	r2, r6, r3
    693e:	b293      	uxth	r3, r2
			conn->llcp.connection_update.interval;
		if (conn_interval_new > conn_interval_old) {
    6940:	4299      	cmp	r1, r3
    6942:	4a52      	ldr	r2, [pc, #328]	; (6a8c <event_connection_prepare+0x574>)
    6944:	d213      	bcs.n	696e <event_connection_prepare+0x456>
			ticks_at_expire +=
    6946:	1a5b      	subs	r3, r3, r1
    6948:	f240 1e23 	movw	lr, #291	; 0x123
    694c:	17d9      	asrs	r1, r3, #31
    694e:	fb0e fe03 	mul.w	lr, lr, r3
    6952:	fb02 ee01 	mla	lr, r2, r1, lr
    6956:	fba3 0102 	umull	r0, r1, r3, r2
    695a:	4471      	add	r1, lr
    695c:	a342      	add	r3, pc, #264	; (adr r3, 6a68 <event_connection_prepare+0x550>)
    695e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6962:	f7f9 fc5b 	bl	21c <__aeabi_uldivmod>
    6966:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    696a:	4483      	add	fp, r0
    696c:	e013      	b.n	6996 <event_connection_prepare+0x47e>
				TICKER_US_TO_TICKS((conn_interval_new -
						    conn_interval_old) * 1250);
		} else {
			ticks_at_expire -=
    696e:	1acb      	subs	r3, r1, r3
    6970:	f240 1e23 	movw	lr, #291	; 0x123
    6974:	17d9      	asrs	r1, r3, #31
    6976:	fb0e fe03 	mul.w	lr, lr, r3
    697a:	fb02 ee01 	mla	lr, r2, r1, lr
    697e:	fba3 0102 	umull	r0, r1, r3, r2
    6982:	4471      	add	r1, lr
    6984:	a338      	add	r3, pc, #224	; (adr r3, 6a68 <event_connection_prepare+0x550>)
    6986:	e9d3 2300 	ldrd	r2, r3, [r3]
    698a:	f7f9 fc47 	bl	21c <__aeabi_uldivmod>
    698e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6992:	ebc0 0b0b 	rsb	fp, r0, fp
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    6996:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6998:	68ba      	ldr	r2, [r7, #8]
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    699a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    699e:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 6a98 <event_connection_prepare+0x580>
		} else {
			ticks_at_expire -=
				TICKER_US_TO_TICKS((conn_interval_old -
						    conn_interval_new) * 1250);
		}
		conn->latency_prepare -= (instant_latency - latency);
    69a2:	ebc8 0303 	rsb	r3, r8, r3
    69a6:	4413      	add	r3, r2
    69a8:	8523      	strh	r3, [r4, #40]	; 0x28

		/* calculate the offset, window widening and interval */
		ticks_slot_offset =
    69aa:	6823      	ldr	r3, [r4, #0]
    69ac:	4599      	cmp	r9, r3
    69ae:	bf38      	it	cc
    69b0:	4699      	movcc	r9, r3
    69b2:	f8c7 9000 	str.w	r9, [r7]
    69b6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    69ba:	607b      	str	r3, [r7, #4]
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    69bc:	f240 49e2 	movw	r9, #1250	; 0x4e2
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    69c0:	f011 0f01 	tst.w	r1, #1
		ticks_slot_offset =
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
    69c4:	fb09 f606 	mul.w	r6, r9, r6
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
    69c8:	d068      	beq.n	6a9c <event_connection_prepare+0x584>
			conn->role.slave.window_widening_prepare_us -=
    69ca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    69cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    69ce:	4830      	ldr	r0, [pc, #192]	; (6a90 <event_connection_prepare+0x578>)
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
    69d0:	fb03 2218 	mls	r2, r3, r8, r2
    69d4:	6522      	str	r2, [r4, #80]	; 0x50
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
    69d6:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
				   gc_lookup_ppm[conn->role.slave.sca]) *
    69da:	f3c1 0142 	ubfx	r1, r1, #1, #3
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    69de:	f830 5013 	ldrh.w	r5, [r0, r3, lsl #1]
    69e2:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - 150;
			conn->role.slave.window_size_prepare_us =
    69e6:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    69ea:	68b8      	ldr	r0, [r7, #8]
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    69ec:	441d      	add	r5, r3
    69ee:	4375      	muls	r5, r6
    69f0:	f505 2374 	add.w	r3, r5, #999424	; 0xf4000
    69f4:	f203 233f 	addw	r3, r3, #575	; 0x23f
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - 150;
			conn->role.slave.window_size_prepare_us =
    69f8:	fb09 f101 	mul.w	r1, r9, r1
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
    69fc:	4d25      	ldr	r5, [pc, #148]	; (6a94 <event_connection_prepare+0x57c>)
    69fe:	fbb3 f5f5 	udiv	r5, r3, r5
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - 150;
    6a02:	0873      	lsrs	r3, r6, #1
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
				conn->role.slave.window_widening_periodic_us *
    6a04:	4368      	muls	r0, r5
				(conn_interval_us >> 1) - 150;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;

			conn->role.slave.window_widening_prepare_us +=
    6a06:	eb02 0800 	add.w	r8, r2, r0
			conn->role.slave.window_widening_periodic_us =
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
				(conn_interval_us >> 1) - 150;
    6a0a:	3b96      	subs	r3, #150	; 0x96
			conn->role.slave.window_size_prepare_us =
    6a0c:	65a1      	str	r1, [r4, #88]	; 0x58
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    6a0e:	2100      	movs	r1, #0

			conn->role.slave.window_widening_prepare_us +=
    6a10:	4598      	cmp	r8, r3
    6a12:	bf94      	ite	ls
    6a14:	f8c4 8050 	strls.w	r8, [r4, #80]	; 0x50
    6a18:	6523      	strhi	r3, [r4, #80]	; 0x50
		if (conn->role.slave.role != 0) {
			conn->role.slave.window_widening_prepare_us -=
				conn->role.slave.window_widening_periodic_us *
				instant_latency;

			conn->role.slave.window_widening_periodic_us =
    6a1a:	64a5      	str	r5, [r4, #72]	; 0x48
				(((gc_lookup_ppm[_radio.sca] +
				   gc_lookup_ppm[conn->role.slave.sca]) *
				  conn_interval_us) + (1000000 - 1)) / 1000000;
			conn->role.slave.window_widening_max_us =
    6a1c:	64e3      	str	r3, [r4, #76]	; 0x4c
				(conn_interval_us >> 1) - 150;
			conn->role.slave.window_size_prepare_us =
				conn->llcp.connection_update.win_size * 1250;
			conn->role.slave.ticks_to_offset = 0;
    6a1e:	6661      	str	r1, [r4, #100]	; 0x64
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    6a20:	a311      	add	r3, pc, #68	; (adr r3, 6a68 <event_connection_prepare+0x550>)
    6a22:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a26:	fba0 010a 	umull	r0, r1, r0, sl
    6a2a:	f7f9 fbf7 	bl	21c <__aeabi_uldivmod>
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    6a2e:	687b      	ldr	r3, [r7, #4]
			    conn->role.slave.window_widening_max_us) {
				conn->role.slave.window_widening_prepare_us =
					conn->role.slave.window_widening_max_us;
			}

			ticks_at_expire -=
    6a30:	ebc0 0b0b 	rsb	fp, r0, fp
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
    6a34:	fbb3 f0f9 	udiv	r0, r3, r9
    6a38:	fb09 f000 	mul.w	r0, r9, r0
			}

			ticks_at_expire -=
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    6a3c:	a30a      	add	r3, pc, #40	; (adr r3, 6a68 <event_connection_prepare+0x550>)
    6a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a42:	fba0 010a 	umull	r0, r1, r0, sl
    6a46:	f7f9 fbe9 	bl	21c <__aeabi_uldivmod>
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    6a4a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
    6a4e:	f003 0318 	and.w	r3, r3, #24
    6a52:	2b10      	cmp	r3, #16
			}

			ticks_at_expire -=
				TICKER_US_TO_TICKS(conn->role.slave.window_widening_periodic_us *
						   latency);
			ticks_win_offset =
    6a54:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
				TICKER_US_TO_TICKS((conn->llcp.connection_update.win_offset_us /
						    1250) * 1250);
			periodic_us -=
    6a58:	eba6 0505 	sub.w	r5, r6, r5
				conn->role.slave.window_widening_periodic_us;

			if (conn->llcp.connection_update.is_internal == 2) {
    6a5c:	d129      	bne.n	6ab2 <event_connection_prepare+0x59a>
				conn_update_req(conn);
    6a5e:	4620      	mov	r0, r4
    6a60:	f7fd fe34 	bl	46cc <conn_update_req>
    6a64:	e025      	b.n	6ab2 <event_connection_prepare+0x59a>
    6a66:	bf00      	nop
    6a68:	1afd498d 	.word	0x1afd498d
    6a6c:	00000007 	.word	0x00000007
    6a70:	20000b44 	.word	0x20000b44
    6a74:	0000dd4e 	.word	0x0000dd4e
    6a78:	0000dd53 	.word	0x0000dd53
    6a7c:	0000dd04 	.word	0x0000dd04
    6a80:	0000f217 	.word	0x0000f217
    6a84:	0000dcfd 	.word	0x0000dcfd
    6a88:	0000e629 	.word	0x0000e629
    6a8c:	09ce5400 	.word	0x09ce5400
    6a90:	0000efa2 	.word	0x0000efa2
    6a94:	000f4240 	.word	0x000f4240
    6a98:	3b9aca00 	.word	0x3b9aca00
			}
		} else {
			ticks_win_offset =
    6a9c:	6879      	ldr	r1, [r7, #4]
    6a9e:	a3ba      	add	r3, pc, #744	; (adr r3, 6d88 <event_connection_prepare+0x870>)
    6aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
    6aa4:	fba1 010a 	umull	r0, r1, r1, sl
    6aa8:	f7f9 fbb8 	bl	21c <__aeabi_uldivmod>
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us = conn->llcp.connection_update.interval * 1250;
		periodic_us = conn_interval_us;
    6aac:	4635      	mov	r5, r6

			if (conn->llcp.connection_update.is_internal == 2) {
				conn_update_req(conn);
			}
		} else {
			ticks_win_offset =
    6aae:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
    6ab2:	f8b4 206e 	ldrh.w	r2, [r4, #110]	; 0x6e
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    6ab6:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    6aba:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
			}
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
    6abe:	84a3      	strh	r3, [r4, #36]	; 0x24
		conn->latency = conn->llcp.connection_update.latency;
		conn->supervision_reload =
    6ac0:	f242 7310 	movw	r3, #10000	; 0x2710
    6ac4:	434b      	muls	r3, r1
    6ac6:	fbb3 f3f6 	udiv	r3, r3, r6
    6aca:	8663      	strh	r3, [r4, #50]	; 0x32
			RADIO_CONN_EVENTS((conn->llcp.connection_update.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
    6acc:	4bb0      	ldr	r3, [pc, #704]	; (6d90 <event_connection_prepare+0x878>)
    6ace:	fbb3 f3f6 	udiv	r3, r3, r6
    6ad2:	86e3      	strh	r3, [r4, #54]	; 0x36
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    6ad4:	4baf      	ldr	r3, [pc, #700]	; (6d94 <event_connection_prepare+0x87c>)
    6ad6:	fbb3 f6f6 	udiv	r6, r3, r6
						      conn_interval_us);
		conn->appto_reload =
    6ada:	1c93      	adds	r3, r2, #2
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    6adc:	b2b6      	uxth	r6, r6
						      conn_interval_us);
		conn->appto_reload =
    6ade:	429e      	cmp	r6, r3
    6ae0:	bfc4      	itt	gt
    6ae2:	f5c2 437f 	rsbgt	r3, r2, #65280	; 0xff00
    6ae6:	33fe      	addgt	r3, #254	; 0xfe
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    6ae8:	87e6      	strh	r6, [r4, #62]	; 0x3e
						      conn_interval_us);
		conn->appto_reload =
    6aea:	bfc8      	it	gt
    6aec:	18f6      	addgt	r6, r6, r3
			(conn->apto_reload > (conn->latency + 2)) ?
			(conn->apto_reload - (conn->latency + 2)) :
			conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    6aee:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
		} else {
			ticks_win_offset =
				TICKER_US_TO_TICKS(conn->llcp.connection_update.win_offset_us);
		}
		conn->conn_interval = conn->llcp.connection_update.interval;
		conn->latency = conn->llcp.connection_update.latency;
    6af2:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
						      conn_interval_us);
		conn->appto_reload =
    6af4:	bfc8      	it	gt
    6af6:	b2b6      	uxthgt	r6, r6
			(conn->apto_reload > (conn->latency + 2)) ?
			(conn->apto_reload - (conn->latency + 2)) :
			conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		if (!conn->llcp.connection_update.is_internal) {
    6af8:	f013 0318 	ands.w	r3, r3, #24
			conn->supervision_expire = 0;
    6afc:	bf08      	it	eq
    6afe:	86a3      	strheq	r3, [r4, #52]	; 0x34
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    6b00:	2101      	movs	r1, #1
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
						      conn_interval_us);
		conn->appto_reload =
    6b02:	8766      	strh	r6, [r4, #58]	; 0x3a
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    6b04:	2000      	movs	r0, #0
    6b06:	f004 fc23 	bl	b350 <mayfly_is_enabled>
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6b0a:	2200      	movs	r2, #0
		}

		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		mayfly_was_enabled =
    6b0c:	6078      	str	r0, [r7, #4]
			mayfly_is_enabled(RADIO_TICKER_USER_ID_WORKER,
					  RADIO_TICKER_USER_ID_JOB);
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6b0e:	2101      	movs	r1, #1
    6b10:	4610      	mov	r0, r2
    6b12:	f004 fbef 	bl	b2f4 <mayfly_enable>
			      RADIO_TICKER_USER_ID_JOB, 0);

		/* start slave/master with new timings */
		ticker_status =
    6b16:	f894 2020 	ldrb.w	r2, [r4, #32]
    6b1a:	f241 23ad 	movw	r3, #4781	; 0x12ad
    6b1e:	2100      	movs	r1, #0
    6b20:	3207      	adds	r2, #7
    6b22:	9300      	str	r3, [sp, #0]
    6b24:	b2d2      	uxtb	r2, r2
    6b26:	4b9c      	ldr	r3, [pc, #624]	; (6d98 <event_connection_prepare+0x880>)
    6b28:	4608      	mov	r0, r1
    6b2a:	f7fd fc69 	bl	4400 <ticker_stop>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
				    RADIO_TICKER_USER_ID_WORKER,
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6b2e:	f030 0302 	bics.w	r3, r0, #2
    6b32:	d00d      	beq.n	6b50 <event_connection_prepare+0x638>
    6b34:	4b99      	ldr	r3, [pc, #612]	; (6d9c <event_connection_prepare+0x884>)
    6b36:	9301      	str	r3, [sp, #4]
    6b38:	4b99      	ldr	r3, [pc, #612]	; (6da0 <event_connection_prepare+0x888>)
    6b3a:	9300      	str	r3, [sp, #0]
    6b3c:	4999      	ldr	r1, [pc, #612]	; (6da4 <event_connection_prepare+0x88c>)
    6b3e:	4b9a      	ldr	r3, [pc, #616]	; (6da8 <event_connection_prepare+0x890>)
    6b40:	4a9a      	ldr	r2, [pc, #616]	; (6dac <event_connection_prepare+0x894>)
    6b42:	489b      	ldr	r0, [pc, #620]	; (6db0 <event_connection_prepare+0x898>)
    6b44:	f7fa fb32 	bl	11ac <printk>
    6b48:	2100      	movs	r1, #0
    6b4a:	4608      	mov	r0, r1
    6b4c:	f005 fd80 	bl	c650 <_SysFatalErrorHandler>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     ticks_at_expire, ticks_win_offset,
				     TICKER_US_TO_TICKS(periodic_us),
    6b50:	fba5 9a0a 	umull	r9, sl, r5, sl
    6b54:	a38c      	add	r3, pc, #560	; (adr r3, 6d88 <event_connection_prepare+0x870>)
    6b56:	e9d3 2300 	ldrd	r2, r3, [r3]
    6b5a:	4648      	mov	r0, r9
    6b5c:	4651      	mov	r1, sl
    6b5e:	f7f9 fb5d 	bl	21c <__aeabi_uldivmod>
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6b62:	2300      	movs	r3, #0
    6b64:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    6b68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    6b6c:	68b9      	ldr	r1, [r7, #8]
    6b6e:	4a91      	ldr	r2, [pc, #580]	; (6db4 <event_connection_prepare+0x89c>)
    6b70:	f894 6020 	ldrb.w	r6, [r4, #32]
    6b74:	2307      	movs	r3, #7
    6b76:	434b      	muls	r3, r1
    6b78:	68f9      	ldr	r1, [r7, #12]
    6b7a:	fb02 3301 	mla	r3, r2, r1, r3
    6b7e:	68b9      	ldr	r1, [r7, #8]
    6b80:	fba1 1202 	umull	r1, r2, r1, r2
    6b84:	441a      	add	r2, r3
    6b86:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    6b8a:	4608      	mov	r0, r1
    6b8c:	ebb9 0000 	subs.w	r0, r9, r0
    6b90:	4611      	mov	r1, r2
    6b92:	f04f 0300 	mov.w	r3, #0
    6b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6b9a:	eb6a 0101 	sbc.w	r1, sl, r1
    6b9e:	f7f9 fb3d 	bl	21c <__aeabi_uldivmod>
    6ba2:	68e3      	ldr	r3, [r4, #12]
    6ba4:	683a      	ldr	r2, [r7, #0]
    6ba6:	4984      	ldr	r1, [pc, #528]	; (6db8 <event_connection_prepare+0x8a0>)
    6ba8:	441a      	add	r2, r3
    6baa:	b293      	uxth	r3, r2
    6bac:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    6bb0:	9406      	str	r4, [sp, #24]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6bb2:	f012 0f01 	tst.w	r2, #1
    6bb6:	f106 0607 	add.w	r6, r6, #7
    6bba:	4a80      	ldr	r2, [pc, #512]	; (6dbc <event_connection_prepare+0x8a4>)
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    6bbc:	9304      	str	r3, [sp, #16]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6bbe:	bf08      	it	eq
    6bc0:	460a      	moveq	r2, r1
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    6bc2:	f241 21bd 	movw	r1, #4797	; 0x12bd
    6bc6:	2400      	movs	r4, #0
    6bc8:	9108      	str	r1, [sp, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    6bca:	b2f6      	uxtb	r6, r6
				    RADIO_TICKER_ID_FIRST_CONNECTION +
				    conn->handle, ticker_success_assert,
				    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    6bcc:	4972      	ldr	r1, [pc, #456]	; (6d98 <event_connection_prepare+0x880>)
    6bce:	9107      	str	r1, [sp, #28]
    6bd0:	9205      	str	r2, [sp, #20]
    6bd2:	9002      	str	r0, [sp, #8]
    6bd4:	465b      	mov	r3, fp
    6bd6:	9403      	str	r4, [sp, #12]
    6bd8:	9501      	str	r5, [sp, #4]
    6bda:	f8cd 8000 	str.w	r8, [sp]
    6bde:	4632      	mov	r2, r6
    6be0:	4621      	mov	r1, r4
    6be2:	4620      	mov	r0, r4
    6be4:	f7fd fb78 	bl	42d8 <ticker_start>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     (conn->role.slave.role != 0) ?
				     event_slave_prepare : event_master_prepare,
				     conn, ticker_success_assert,
				     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    6be8:	f030 0302 	bics.w	r3, r0, #2
    6bec:	d00d      	beq.n	6c0a <event_connection_prepare+0x6f2>
    6bee:	4b6b      	ldr	r3, [pc, #428]	; (6d9c <event_connection_prepare+0x884>)
    6bf0:	9301      	str	r3, [sp, #4]
    6bf2:	4b6b      	ldr	r3, [pc, #428]	; (6da0 <event_connection_prepare+0x888>)
    6bf4:	9300      	str	r3, [sp, #0]
    6bf6:	496b      	ldr	r1, [pc, #428]	; (6da4 <event_connection_prepare+0x88c>)
    6bf8:	4b6b      	ldr	r3, [pc, #428]	; (6da8 <event_connection_prepare+0x890>)
    6bfa:	4a6c      	ldr	r2, [pc, #432]	; (6dac <event_connection_prepare+0x894>)
    6bfc:	486c      	ldr	r0, [pc, #432]	; (6db0 <event_connection_prepare+0x898>)
    6bfe:	f7fa fad5 	bl	11ac <printk>
    6c02:	4621      	mov	r1, r4
    6c04:	4620      	mov	r0, r4
    6c06:	f005 fd23 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	f000 83f3 	beq.w	73f8 <event_connection_prepare+0xee0>
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6c12:	2201      	movs	r2, #1
    6c14:	4611      	mov	r1, r2
    6c16:	2000      	movs	r0, #0
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}
    6c18:	3714      	adds	r7, #20
    6c1a:	46bd      	mov	sp, r7
    6c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));

		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
    6c20:	f004 bb68 	b.w	b2f4 <mayfly_enable>
}

static inline void event_ch_map_prep(struct connection *conn,
				     uint16_t event_counter)
{
	if (conn->llcp.channel_map.initiate) {
    6c24:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    6c28:	b30b      	cbz	r3, 6c6e <event_connection_prepare+0x756>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6c2a:	4865      	ldr	r0, [pc, #404]	; (6dc0 <event_connection_prepare+0x8a8>)
    6c2c:	f7fb ff63 	bl	2af6 <mem_acquire>
		if (node_tx) {
    6c30:	4680      	mov	r8, r0
    6c32:	2800      	cmp	r0, #0
    6c34:	f000 8229 	beq.w	708a <event_connection_prepare+0xb72>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* reset initiate flag */
			conn->llcp.channel_map.initiate = 0;
    6c38:	2300      	movs	r3, #0
    6c3a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c

			/* set instant */
			conn->llcp.channel_map.instant =
    6c3e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6c40:	3306      	adds	r3, #6
    6c42:	4433      	add	r3, r6
    6c44:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
				event_counter + conn->latency + 6;

			/* place the channel map req packet as next in
			 * tx queue
			 */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6c48:	7903      	ldrb	r3, [r0, #4]
    6c4a:	f043 0303 	orr.w	r3, r3, #3
    6c4e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    6c50:	2308      	movs	r3, #8
    6c52:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_channel_map_req);
			pdu_ctrl_tx->payload.llctrl.opcode =
    6c54:	2301      	movs	r3, #1
    6c56:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_CHANNEL_MAP_REQ;
			memcpy(&pdu_ctrl_tx->payload.llctrl.
    6c58:	2205      	movs	r2, #5
    6c5a:	f104 016d 	add.w	r1, r4, #109	; 0x6d
    6c5e:	3008      	adds	r0, #8
    6c60:	f7fa f8fd 	bl	e5e <memcpy>
			       ctrldata.channel_map_req.chm[0],
			       &conn->llcp.channel_map.chm[0],
			       sizeof(pdu_ctrl_tx->payload.
				      llctrl.ctrldata.channel_map_req.chm));
			pdu_ctrl_tx->payload.llctrl.ctrldata.channel_map_req.instant =
    6c64:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    6c68:	f8a8 300d 	strh.w	r3, [r8, #13]
    6c6c:	e14c      	b.n	6f08 <event_connection_prepare+0x9f0>
				conn->llcp.channel_map.instant;

			ctrl_tx_enqueue(conn, node_tx);
		}
	} else
	    if (((event_counter - conn->llcp.channel_map.instant) & 0xFFFF)
    6c6e:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    6c72:	1af3      	subs	r3, r6, r3
    6c74:	b29b      	uxth	r3, r3
    6c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6c7a:	f280 8206 	bge.w	708a <event_connection_prepare+0xb72>
			    <= 0x7FFF) {
		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    6c7e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6c82:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* copy to active channel map */
		memcpy(&conn->data_channel_map[0],
    6c86:	f104 0817 	add.w	r8, r4, #23
    6c8a:	2205      	movs	r2, #5
    6c8c:	f104 016d 	add.w	r1, r4, #109	; 0x6d
    6c90:	4640      	mov	r0, r8
    6c92:	f7fa f8e4 	bl	e5e <memcpy>
		       &conn->llcp.channel_map.chm[0],
		       sizeof(conn->data_channel_map));
		conn->data_channel_count =
			util_ones_count_get(&conn->data_channel_map[0],
    6c96:	2105      	movs	r1, #5
    6c98:	4640      	mov	r0, r8
    6c9a:	f7fc f869 	bl	2d70 <util_ones_count_get>

		/* copy to active channel map */
		memcpy(&conn->data_channel_map[0],
		       &conn->llcp.channel_map.chm[0],
		       sizeof(conn->data_channel_map));
		conn->data_channel_count =
    6c9e:	7720      	strb	r0, [r4, #28]
    6ca0:	e1f3      	b.n	708a <event_connection_prepare+0xb72>

static inline void event_enc_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6ca2:	f8df a120 	ldr.w	sl, [pc, #288]	; 6dc4 <event_connection_prepare+0x8ac>
    6ca6:	f50a 701a 	add.w	r0, sl, #616	; 0x268
    6caa:	f7fb ff24 	bl	2af6 <mem_acquire>
	if (node_tx) {
    6cae:	4680      	mov	r8, r0
    6cb0:	2800      	cmp	r0, #0
    6cb2:	f000 81ea 	beq.w	708a <event_connection_prepare+0xb72>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    6cb6:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
	if (node_tx) {
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    6cba:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6cbe:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* master sends encrypted enc start rsp in control priority */
		if (conn->role.master.role == 0) {
    6cc2:	f019 0901 	ands.w	r9, r9, #1
    6cc6:	d146      	bne.n	6d56 <event_connection_prepare+0x83e>
			/* calc the Session Key */
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
    6cc8:	f104 0ab9 	add.w	sl, r4, #185	; 0xb9
    6ccc:	4653      	mov	r3, sl
    6cce:	464a      	mov	r2, r9
    6cd0:	f104 0187 	add.w	r1, r4, #135	; 0x87
    6cd4:	f104 0077 	add.w	r0, r4, #119	; 0x77
    6cd8:	f7fc f958 	bl	2f8c <ecb_encrypt>
				    &conn->llcp.encryption.skd[0],
				    0, &conn->ccm_rx.key[0]);

			/* copy the Session Key */
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
    6cdc:	4651      	mov	r1, sl
    6cde:	2210      	movs	r2, #16
    6ce0:	f104 00da 	add.w	r0, r4, #218	; 0xda
    6ce4:	f7fa f8bb 	bl	e5e <memcpy>
			       sizeof(conn->ccm_tx.key));

			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    6ce8:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
    6cec:	2208      	movs	r2, #8
    6cee:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    6cf2:	f7fa f8b4 	bl	e5e <memcpy>
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    6cf6:	f894 30d1 	ldrb.w	r3, [r4, #209]	; 0xd1
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    6cfa:	f884 90c9 	strb.w	r9, [r4, #201]	; 0xc9
			conn->ccm_tx.counter = 0;

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
    6cfe:	f369 0300 	bfi	r3, r9, #0, #1
    6d02:	f884 30d1 	strb.w	r3, [r4, #209]	; 0xd1
			conn->ccm_tx.direction = 1;
    6d06:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    6d0a:	f884 90ca 	strb.w	r9, [r4, #202]	; 0xca

			/* set direction: slave to master = 0,
			 * master to slave = 1
			 */
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;
    6d0e:	f043 0301 	orr.w	r3, r3, #1
    6d12:	f884 30f2 	strb.w	r3, [r4, #242]	; 0xf2

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
    6d16:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    6d1a:	f884 90cb 	strb.w	r9, [r4, #203]	; 0xcb
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    6d1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
			/* copy the IV */
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
			       sizeof(conn->ccm_tx.iv));

			/* initialise counter */
			conn->ccm_rx.counter = 0;
    6d22:	f884 90cc 	strb.w	r9, [r4, #204]	; 0xcc
    6d26:	f884 90cd 	strb.w	r9, [r4, #205]	; 0xcd
    6d2a:	f884 90ce 	strb.w	r9, [r4, #206]	; 0xce
    6d2e:	f884 90cf 	strb.w	r9, [r4, #207]	; 0xcf
    6d32:	f884 90d0 	strb.w	r9, [r4, #208]	; 0xd0
			conn->ccm_tx.counter = 0;
    6d36:	f8a4 90ea 	strh.w	r9, [r4, #234]	; 0xea
    6d3a:	f8a4 90ec 	strh.w	r9, [r4, #236]	; 0xec
    6d3e:	f8a4 90ee 	strh.w	r9, [r4, #238]	; 0xee
    6d42:	f8a4 90f0 	strh.w	r9, [r4, #240]	; 0xf0
			conn->ccm_rx.direction = 0;
			conn->ccm_tx.direction = 1;

			/* enable receive and transmit encryption */
			conn->enc_rx = 1;
			conn->enc_tx = 1;
    6d46:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8

			/* send enc start resp */
			start_enc_rsp_send(conn, pdu_ctrl_tx);
    6d4a:	f108 0104 	add.w	r1, r8, #4
    6d4e:	4620      	mov	r0, r4
    6d50:	f7fd fd56 	bl	4800 <start_enc_rsp_send>
    6d54:	e0d8      	b.n	6f08 <event_connection_prepare+0x9f0>
		}
		/* slave send reject ind or start enc req at control priority */
		else if (!conn->pause_tx || conn->refresh) {
    6d56:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    6d5a:	f003 0348 	and.w	r3, r3, #72	; 0x48
    6d5e:	2b08      	cmp	r3, #8
    6d60:	f000 80bd 	beq.w	6ede <event_connection_prepare+0x9c6>
			/* ll ctrl packet */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6d64:	7903      	ldrb	r3, [r0, #4]
    6d66:	f043 0303 	orr.w	r3, r3, #3
    6d6a:	7103      	strb	r3, [r0, #4]

			/* place the reject ind packet as next in tx queue */
			if (conn->llcp.encryption.error_code) {
    6d6c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    6d70:	b353      	cbz	r3, 6dc8 <event_connection_prepare+0x8b0>
				pdu_ctrl_tx->len =
    6d72:	2302      	movs	r3, #2
    6d74:	7143      	strb	r3, [r0, #5]
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
    6d76:	230d      	movs	r3, #13
    6d78:	71c3      	strb	r3, [r0, #7]
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
					conn->llcp.encryption.error_code;
    6d7a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
				pdu_ctrl_tx->len =
				    offsetof(struct pdu_data_llctrl, ctrldata) +
				    sizeof(struct pdu_data_llctrl_reject_ind);
				pdu_ctrl_tx->payload.llctrl.opcode =
					PDU_DATA_LLCTRL_TYPE_REJECT_IND;
				pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind.error_code =
    6d7e:	7203      	strb	r3, [r0, #8]
					conn->llcp.encryption.error_code;

				conn->llcp.encryption.error_code = 0;
    6d80:	2300      	movs	r3, #0
    6d82:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    6d86:	e0bf      	b.n	6f08 <event_connection_prepare+0x9f0>
    6d88:	1afd498d 	.word	0x1afd498d
    6d8c:	00000007 	.word	0x00000007
    6d90:	02625a00 	.word	0x02625a00
    6d94:	01c9c380 	.word	0x01c9c380
    6d98:	00005c59 	.word	0x00005c59
    6d9c:	0000dd4e 	.word	0x0000dd4e
    6da0:	0000dd53 	.word	0x0000dd53
    6da4:	0000dd04 	.word	0x0000dd04
    6da8:	0000f217 	.word	0x0000f217
    6dac:	0000dcfd 	.word	0x0000dcfd
    6db0:	0000e588 	.word	0x0000e588
    6db4:	1afd498d 	.word	0x1afd498d
    6db8:	00007441 	.word	0x00007441
    6dbc:	00007ac9 	.word	0x00007ac9
    6dc0:	20000dac 	.word	0x20000dac
    6dc4:	20000b44 	.word	0x20000b44
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6dc8:	f50a 701a 	add.w	r0, sl, #616	; 0x268
    6dcc:	f7fb fe93 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    6dd0:	4681      	mov	r9, r0
    6dd2:	b968      	cbnz	r0, 6df0 <event_connection_prepare+0x8d8>
    6dd4:	4bcc      	ldr	r3, [pc, #816]	; (7108 <event_connection_prepare+0xbf0>)
    6dd6:	9301      	str	r3, [sp, #4]
    6dd8:	4bcc      	ldr	r3, [pc, #816]	; (710c <event_connection_prepare+0xbf4>)
    6dda:	9300      	str	r3, [sp, #0]
    6ddc:	49cc      	ldr	r1, [pc, #816]	; (7110 <event_connection_prepare+0xbf8>)
    6dde:	4bcd      	ldr	r3, [pc, #820]	; (7114 <event_connection_prepare+0xbfc>)
    6de0:	4acd      	ldr	r2, [pc, #820]	; (7118 <event_connection_prepare+0xc00>)
    6de2:	48ce      	ldr	r0, [pc, #824]	; (711c <event_connection_prepare+0xc04>)
    6de4:	f7fa f9e2 	bl	11ac <printk>
    6de8:	4649      	mov	r1, r9
    6dea:	4648      	mov	r0, r9
    6dec:	f005 fc30 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6df0:	f899 3004 	ldrb.w	r3, [r9, #4]
    6df4:	f043 0303 	orr.w	r3, r3, #3
    6df8:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    6dfc:	230d      	movs	r3, #13
    6dfe:	f889 3005 	strb.w	r3, [r9, #5]
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    6e02:	f04f 0a04 	mov.w	sl, #4
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    6e06:	f109 0308 	add.w	r3, r9, #8

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    6e0a:	f889 a007 	strb.w	sl, [r9, #7]
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 0xaa,
    6e0e:	2208      	movs	r2, #8
    6e10:	21aa      	movs	r1, #170	; 0xaa
    6e12:	4618      	mov	r0, r3
    6e14:	603b      	str	r3, [r7, #0]
    6e16:	f7fa f84f 	bl	eb8 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 0xbb,
    6e1a:	f109 0310 	add.w	r3, r9, #16
    6e1e:	4652      	mov	r2, sl
    6e20:	21bb      	movs	r1, #187	; 0xbb
    6e22:	4618      	mov	r0, r3
    6e24:	60bb      	str	r3, [r7, #8]
    6e26:	f7fa f847 	bl	eb8 <memset>
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    6e2a:	683b      	ldr	r3, [r7, #0]
    6e2c:	2208      	movs	r2, #8
    6e2e:	4619      	mov	r1, r3
    6e30:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    6e34:	f7fa f813 	bl	e5e <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
    6e38:	4652      	mov	r2, sl
    6e3a:	68b9      	ldr	r1, [r7, #8]
    6e3c:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
    6e40:	f7fa f80d 	bl	e5e <memcpy>
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    6e44:	4649      	mov	r1, r9
    6e46:	4620      	mov	r0, r4
				 */
				enc_rsp_send(conn);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    6e48:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
	memcpy(&conn->llcp.encryption.skd[8],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds[0], 8);
	memcpy(&conn->ccm_rx.iv[4],
	       &pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs[0], 4);

	ctrl_tx_enqueue(conn, node_tx);
    6e4c:	f7fd fc86 	bl	475c <ctrl_tx_enqueue>
				 */
				enc_rsp_send(conn);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

				/* calc the Session Key */
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
    6e50:	464b      	mov	r3, r9
    6e52:	2200      	movs	r2, #0
    6e54:	f104 0187 	add.w	r1, r4, #135	; 0x87
    6e58:	f104 0077 	add.w	r0, r4, #119	; 0x77
    6e5c:	f7fc f896 	bl	2f8c <ecb_encrypt>
					    &conn->llcp.encryption.skd[0], 0,
					    &conn->ccm_rx.key[0]);

				/* copy the Session Key */
				memcpy(&conn->ccm_tx.key[0],
    6e60:	2210      	movs	r2, #16
    6e62:	4649      	mov	r1, r9
    6e64:	f104 00da 	add.w	r0, r4, #218	; 0xda
    6e68:	f7f9 fff9 	bl	e5e <memcpy>
				       &conn->ccm_rx.key[0],
				       sizeof(conn->ccm_tx.key));

				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
    6e6c:	2208      	movs	r2, #8
    6e6e:	f104 01d2 	add.w	r1, r4, #210	; 0xd2
    6e72:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    6e76:	f7f9 fff2 	bl	e5e <memcpy>
				conn->ccm_tx.counter = 0;

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
    6e7a:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
    6e7e:	f042 0201 	orr.w	r2, r2, #1
    6e82:	f884 20d1 	strb.w	r2, [r4, #209]	; 0xd1
				conn->ccm_tx.direction = 0;
    6e86:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
				/* copy the IV */
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
				       sizeof(conn->ccm_tx.iv));

				/* initialise counter */
				conn->ccm_rx.counter = 0;
    6e8a:	2300      	movs	r3, #0
    6e8c:	f884 30c9 	strb.w	r3, [r4, #201]	; 0xc9
    6e90:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
    6e94:	f884 30cb 	strb.w	r3, [r4, #203]	; 0xcb
    6e98:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
    6e9c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
    6ea0:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
    6ea4:	f884 30cf 	strb.w	r3, [r4, #207]	; 0xcf
    6ea8:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
				conn->ccm_tx.counter = 0;
    6eac:	f8a4 30ea 	strh.w	r3, [r4, #234]	; 0xea
    6eb0:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
    6eb4:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    6eb8:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
				conn->ccm_tx.direction = 0;
    6ebc:	f363 0200 	bfi	r2, r3, #0, #1

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    6ec0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8

				/* set direction: slave to master = 0,
				 * master to slave = 1
				 */
				conn->ccm_rx.direction = 1;
				conn->ccm_tx.direction = 0;
    6ec4:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2

				/* enable receive encryption (transmit turned
				 * on when start enc resp from master is
				 * received)
				 */
				conn->enc_rx = 1;
    6ec8:	f043 0310 	orr.w	r3, r3, #16
    6ecc:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8

				/* prepare the start enc req */
				pdu_ctrl_tx->len =
    6ed0:	2301      	movs	r3, #1
    6ed2:	f888 3005 	strb.w	r3, [r8, #5]
					offsetof(struct pdu_data_llctrl,
						 ctrldata);
				pdu_ctrl_tx->payload.llctrl.opcode =
    6ed6:	2305      	movs	r3, #5
    6ed8:	f888 3007 	strb.w	r3, [r8, #7]
    6edc:	e014      	b.n	6f08 <event_connection_prepare+0x9f0>
			}
		} else {

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			/* enable transmit encryption */
			_radio.conn_curr->enc_tx = 1;
    6ede:	f8da 0224 	ldr.w	r0, [sl, #548]	; 0x224
    6ee2:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    6ee6:	f043 0320 	orr.w	r3, r3, #32
    6eea:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8

			start_enc_rsp_send(_radio.conn_curr, 0);
    6eee:	2100      	movs	r1, #0
    6ef0:	f7fd fc86 	bl	4800 <start_enc_rsp_send>

			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    6ef4:	f8da 2224 	ldr.w	r2, [sl, #548]	; 0x224
    6ef8:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8
			_radio.conn_curr->pause_tx = 0;
    6efc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6f00:	f36f 03c3 	bfc	r3, #3, #1
    6f04:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
			LL_ASSERT(0);
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		}

		ctrl_tx_enqueue(conn, node_tx);
    6f08:	4641      	mov	r1, r8
    6f0a:	4620      	mov	r0, r4
    6f0c:	f7fd fc26 	bl	475c <ctrl_tx_enqueue>
    6f10:	e0bb      	b.n	708a <event_connection_prepare+0xb72>

static inline void event_fex_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f12:	4883      	ldr	r0, [pc, #524]	; (7120 <event_connection_prepare+0xc08>)
    6f14:	f7fb fdef 	bl	2af6 <mem_acquire>
	if (node_tx) {
    6f18:	4680      	mov	r8, r0
    6f1a:	2800      	cmp	r0, #0
    6f1c:	f000 80b5 	beq.w	708a <event_connection_prepare+0xb72>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    6f20:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6f24:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* use initial feature bitmap */
		conn->llcp_features = RADIO_BLE_FEATURES;
    6f28:	233f      	movs	r3, #63	; 0x3f
    6f2a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f2e:	7903      	ldrb	r3, [r0, #4]
    6f30:	f043 0303 	orr.w	r3, r3, #3
    6f34:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6f36:	2309      	movs	r3, #9
    6f38:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    6f3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    6f3e:	f013 0f01 	tst.w	r3, #1
    6f42:	bf0c      	ite	eq
    6f44:	2308      	moveq	r3, #8
    6f46:	230e      	movne	r3, #14
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    6f48:	2208      	movs	r2, #8

		/* place the feature exchange req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_feature_req);
		pdu_ctrl_tx->payload.llctrl.opcode =
    6f4a:	71c3      	strb	r3, [r0, #7]
			(conn->role.master.role == 0) ?
			PDU_DATA_LLCTRL_TYPE_FEATURE_REQ :
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
    6f4c:	2100      	movs	r1, #0
    6f4e:	4410      	add	r0, r2
    6f50:	f7f9 ffb2 	bl	eb8 <memset>
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));

		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
			conn->llcp_features;
    6f54:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
			PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ;
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
		       0x00,
		       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features));

		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
    6f58:	f888 3008 	strb.w	r3, [r8, #8]
			conn->llcp_features;

		ctrl_tx_enqueue(conn, node_tx);
    6f5c:	4641      	mov	r1, r8
    6f5e:	e080      	b.n	7062 <event_connection_prepare+0xb4a>
}

static inline void event_vex_prep(struct connection *conn)
{

	if (conn->llcp_version.tx == 0) {
    6f60:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    6f64:	07da      	lsls	r2, r3, #31
    6f66:	d421      	bmi.n	6fac <event_connection_prepare+0xa94>
		struct radio_pdu_node_tx *node_tx;

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    6f68:	486d      	ldr	r0, [pc, #436]	; (7120 <event_connection_prepare+0xc08>)
    6f6a:	f7fb fdc4 	bl	2af6 <mem_acquire>
		if (node_tx) {
    6f6e:	4601      	mov	r1, r0
    6f70:	2800      	cmp	r0, #0
    6f72:	f000 808a 	beq.w	708a <event_connection_prepare+0xb72>
			struct pdu_data *pdu_ctrl_tx =
				(struct pdu_data *)node_tx->pdu_data;

			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    6f76:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6f7a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

			/* set version ind tx-ed flag */
			conn->llcp_version.tx = 1;
    6f7e:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
    6f82:	f043 0301 	orr.w	r3, r3, #1
    6f86:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a

			/* place the version ind packet as next in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    6f8a:	7903      	ldrb	r3, [r0, #4]
    6f8c:	f043 0303 	orr.w	r3, r3, #3
    6f90:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    6f92:	2306      	movs	r3, #6
    6f94:	7143      	strb	r3, [r0, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_version_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    6f96:	230c      	movs	r3, #12
    6f98:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_VERSION_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    6f9a:	2308      	movs	r3, #8
    6f9c:	7203      	strb	r3, [r0, #8]
				RADIO_BLE_VERSION_NUMBER;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    6f9e:	f04f 33ff 	mov.w	r3, #4294967295
    6fa2:	7243      	strb	r3, [r0, #9]
    6fa4:	7283      	strb	r3, [r0, #10]
				RADIO_BLE_COMPANY_ID;
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    6fa6:	72c3      	strb	r3, [r0, #11]
    6fa8:	7303      	strb	r3, [r0, #12]
    6faa:	e05a      	b.n	7062 <event_connection_prepare+0xb4a>
			/* Start Procedure Timeout (@todo this shall not
			 * replace terminate procedure)
			 */
			conn->procedure_expire = conn->procedure_reload;
		}
	} else if (conn->llcp_version.rx != 0) {
    6fac:	f003 0302 	and.w	r3, r3, #2
    6fb0:	f003 08ff 	and.w	r8, r3, #255	; 0xff
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d037      	beq.n	7028 <event_connection_prepare+0xb10>
		struct radio_pdu_node_rx *radio_pdu_node_rx;
		struct pdu_data *pdu_ctrl_rx;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    6fb8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    6fbc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* Prepare the rx packet structure */
		radio_pdu_node_rx = packet_rx_reserve_get(2);
    6fc0:	2002      	movs	r0, #2
    6fc2:	f7fd fb5f 	bl	4684 <packet_rx_reserve_get>
		LL_ASSERT(radio_pdu_node_rx);
    6fc6:	4680      	mov	r8, r0
    6fc8:	b968      	cbnz	r0, 6fe6 <event_connection_prepare+0xace>
    6fca:	4b4f      	ldr	r3, [pc, #316]	; (7108 <event_connection_prepare+0xbf0>)
    6fcc:	9301      	str	r3, [sp, #4]
    6fce:	4b4f      	ldr	r3, [pc, #316]	; (710c <event_connection_prepare+0xbf4>)
    6fd0:	9300      	str	r3, [sp, #0]
    6fd2:	494f      	ldr	r1, [pc, #316]	; (7110 <event_connection_prepare+0xbf8>)
    6fd4:	4b53      	ldr	r3, [pc, #332]	; (7124 <event_connection_prepare+0xc0c>)
    6fd6:	4a50      	ldr	r2, [pc, #320]	; (7118 <event_connection_prepare+0xc00>)
    6fd8:	4853      	ldr	r0, [pc, #332]	; (7128 <event_connection_prepare+0xc10>)
    6fda:	f7fa f8e7 	bl	11ac <printk>
    6fde:	4641      	mov	r1, r8
    6fe0:	4640      	mov	r0, r8
    6fe2:	f005 fb35 	bl	c650 <_SysFatalErrorHandler>

		radio_pdu_node_rx->hdr.handle = conn->handle;
    6fe6:	8c23      	ldrh	r3, [r4, #32]
    6fe8:	f8a8 3006 	strh.w	r3, [r8, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    6fec:	2301      	movs	r3, #1
    6fee:	f888 3004 	strb.w	r3, [r8, #4]

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    6ff2:	f898 3008 	ldrb.w	r3, [r8, #8]
    6ff6:	f043 0303 	orr.w	r3, r3, #3
    6ffa:	f888 3008 	strb.w	r3, [r8, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    6ffe:	2306      	movs	r3, #6
    7000:	f888 3009 	strb.w	r3, [r8, #9]
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
    7004:	230c      	movs	r3, #12
    7006:	f888 300b 	strb.w	r3, [r8, #11]
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
			conn->llcp_version.version_number;
    700a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
			sizeof(struct pdu_data_llctrl_version_ind);
		pdu_ctrl_rx->payload.llctrl.opcode =
			PDU_DATA_LLCTRL_TYPE_VERSION_IND;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
    700e:	f888 300c 	strb.w	r3, [r8, #12]
			conn->llcp_version.version_number;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
    7012:	f8b4 309c 	ldrh.w	r3, [r4, #156]	; 0x9c
    7016:	f8a8 300d 	strh.w	r3, [r8, #13]
			conn->llcp_version.company_id;
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    701a:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
    701e:	f8a8 300f 	strh.w	r3, [r8, #15]
			conn->llcp_version.sub_version_number;

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    7022:	f7fe fccb 	bl	59bc <packet_rx_enqueue>
    7026:	e030      	b.n	708a <event_connection_prepare+0xb72>
	} else {
		/* tx-ed but no rx, and new request placed */
		LL_ASSERT(0);
    7028:	4b37      	ldr	r3, [pc, #220]	; (7108 <event_connection_prepare+0xbf0>)
    702a:	9301      	str	r3, [sp, #4]
    702c:	4b37      	ldr	r3, [pc, #220]	; (710c <event_connection_prepare+0xbf4>)
    702e:	9300      	str	r3, [sp, #0]
    7030:	4937      	ldr	r1, [pc, #220]	; (7110 <event_connection_prepare+0xbf8>)
    7032:	4b3c      	ldr	r3, [pc, #240]	; (7124 <event_connection_prepare+0xc0c>)
    7034:	4a38      	ldr	r2, [pc, #224]	; (7118 <event_connection_prepare+0xc00>)
    7036:	483d      	ldr	r0, [pc, #244]	; (712c <event_connection_prepare+0xc14>)
    7038:	f7fa f8b8 	bl	11ac <printk>
    703c:	4641      	mov	r1, r8
    703e:	e021      	b.n	7084 <event_connection_prepare+0xb6c>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
static inline void event_ping_prep(struct connection *conn)
{
	struct radio_pdu_node_tx *node_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7040:	4837      	ldr	r0, [pc, #220]	; (7120 <event_connection_prepare+0xc08>)
    7042:	f7fb fd58 	bl	2af6 <mem_acquire>
	if (node_tx) {
    7046:	4601      	mov	r1, r0
    7048:	b1f8      	cbz	r0, 708a <event_connection_prepare+0xb72>
		struct pdu_data *pdu_ctrl_tx =
			(struct pdu_data *)node_tx->pdu_data;

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;
    704a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    704e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

		/* place the ping req packet as next in tx queue */
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7052:	7903      	ldrb	r3, [r0, #4]
    7054:	f043 0303 	orr.w	r3, r3, #3
    7058:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    705a:	2301      	movs	r3, #1
    705c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
    705e:	2312      	movs	r3, #18
    7060:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_PING_REQ;

		ctrl_tx_enqueue(conn, node_tx);
    7062:	4620      	mov	r0, r4
    7064:	f7fd fb7a 	bl	475c <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure)
		 */
		conn->procedure_expire = conn->procedure_reload;
    7068:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    706a:	8723      	strh	r3, [r4, #56]	; 0x38
    706c:	e00d      	b.n	708a <event_connection_prepare+0xb72>
			event_ping_prep(conn);
			break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		default:
			LL_ASSERT(0);
    706e:	4b26      	ldr	r3, [pc, #152]	; (7108 <event_connection_prepare+0xbf0>)
    7070:	9301      	str	r3, [sp, #4]
    7072:	4b26      	ldr	r3, [pc, #152]	; (710c <event_connection_prepare+0xbf4>)
    7074:	9300      	str	r3, [sp, #0]
    7076:	4926      	ldr	r1, [pc, #152]	; (7110 <event_connection_prepare+0xbf8>)
    7078:	4b2d      	ldr	r3, [pc, #180]	; (7130 <event_connection_prepare+0xc18>)
    707a:	4a27      	ldr	r2, [pc, #156]	; (7118 <event_connection_prepare+0xc00>)
    707c:	482b      	ldr	r0, [pc, #172]	; (712c <event_connection_prepare+0xc14>)
    707e:	f7fa f895 	bl	11ac <printk>
    7082:	2100      	movs	r1, #0
    7084:	4608      	mov	r0, r1
    7086:	f005 fae3 	bl	c650 <_SysFatalErrorHandler>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    708a:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
    708e:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    7092:	429a      	cmp	r2, r3
    7094:	d01d      	beq.n	70d2 <event_connection_prepare+0xbba>
		struct radio_pdu_node_tx *node_tx;

		/* Stop previous event, to avoid Radio DMA corrupting the rx
		 * queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    7096:	2200      	movs	r2, #0
    7098:	4611      	mov	r1, r2
    709a:	4610      	mov	r0, r2
    709c:	2305      	movs	r3, #5
    709e:	f7fe fe11 	bl	5cc4 <event_stop>

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    70a2:	481f      	ldr	r0, [pc, #124]	; (7120 <event_connection_prepare+0xc08>)
    70a4:	f7fb fd27 	bl	2af6 <mem_acquire>
		if (node_tx) {
    70a8:	4601      	mov	r1, r0
    70aa:	b190      	cbz	r0, 70d2 <event_connection_prepare+0xbba>
			struct pdu_data *pdu_ctrl_tx =
			    (struct pdu_data *)node_tx->pdu_data;

			/* Terminate Procedure acked */
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    70ac:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    70b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

			/* place the terminate ind packet in tx queue */
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    70b4:	7903      	ldrb	r3, [r0, #4]
    70b6:	f043 0303 	orr.w	r3, r3, #3
    70ba:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
    70bc:	2302      	movs	r3, #2
    70be:	7143      	strb	r3, [r0, #5]
				offsetof(struct pdu_data_llctrl, ctrldata) +
				sizeof(struct pdu_data_llctrl_terminate_ind);
			pdu_ctrl_tx->payload.llctrl.opcode =
    70c0:	71c3      	strb	r3, [r0, #7]
				PDU_DATA_LLCTRL_TYPE_TERMINATE_IND;
			pdu_ctrl_tx->payload.llctrl.ctrldata.terminate_ind.
				error_code = conn->llcp_terminate.reason_own;
    70c2:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    70c6:	7203      	strb	r3, [r0, #8]

			ctrl_tx_enqueue(conn, node_tx);
    70c8:	4620      	mov	r0, r4
    70ca:	f7fd fb47 	bl	475c <ctrl_tx_enqueue>

			/* Terminate Procedure timeout is started, will
			 * replace any other timeout running
			 */
			conn->procedure_expire = conn->procedure_reload;
    70ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    70d0:	8723      	strh	r3, [r4, #56]	; 0x38
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* check if procedure is requested */
	if (conn->llcp_length.ack != conn->llcp_length.req) {
    70d2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
    70d6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    70da:	429a      	cmp	r2, r3
    70dc:	f000 8172 	beq.w	73c4 <event_connection_prepare+0xeac>
		/* Stop previous event, to avoid Radio DMA corrupting the
		 * rx queue
		 */
		event_stop(0, 0, 0, (void *)STATE_ABORT);
    70e0:	2200      	movs	r2, #0
    70e2:	2305      	movs	r3, #5
    70e4:	4611      	mov	r1, r2
    70e6:	4610      	mov	r0, r2
    70e8:	f7fe fdec 	bl	5cc4 <event_stop>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
static inline void event_len_prep(struct connection *conn)
{
	switch (conn->llcp_length.state) {
    70ec:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    70f0:	f003 0303 	and.w	r3, r3, #3
    70f4:	2b03      	cmp	r3, #3
    70f6:	f200 8157 	bhi.w	73a8 <event_connection_prepare+0xe90>
    70fa:	e8df f013 	tbh	[pc, r3, lsl #1]
    70fe:	001b      	.short	0x001b
    7100:	01630163 	.word	0x01630163
    7104:	0066      	.short	0x0066
    7106:	bf00      	nop
    7108:	0000dd4e 	.word	0x0000dd4e
    710c:	0000dd53 	.word	0x0000dd53
    7110:	0000dd04 	.word	0x0000dd04
    7114:	0000f2f1 	.word	0x0000f2f1
    7118:	0000dcfd 	.word	0x0000dcfd
    711c:	0000e3b4 	.word	0x0000e3b4
    7120:	20000dac 	.word	0x20000dac
    7124:	0000f047 	.word	0x0000f047
    7128:	0000e629 	.word	0x0000e629
    712c:	0000e191 	.word	0x0000e191
    7130:	0000f33a 	.word	0x0000f33a
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		uint16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    7134:	f7fd fa8e 	bl	4654 <packet_rx_acquired_count_get>
    7138:	4680      	mov	r8, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    713a:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
    713e:	f7fb fd0e 	bl	2b5e <mem_free_count_get>
		struct pdu_data_llctrl_length_req_rsp *lr;
		struct radio_pdu_node_tx *node_tx;
		struct pdu_data *pdu_ctrl_tx;
		uint16_t free_count_rx;

		free_count_rx = packet_rx_acquired_count_get() +
    7142:	4440      	add	r0, r8
    7144:	fa1f f880 	uxth.w	r8, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    7148:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    714c:	d90d      	bls.n	716a <event_connection_prepare+0xc52>
    714e:	4bac      	ldr	r3, [pc, #688]	; (7400 <event_connection_prepare+0xee8>)
    7150:	9301      	str	r3, [sp, #4]
    7152:	4bac      	ldr	r3, [pc, #688]	; (7404 <event_connection_prepare+0xeec>)
    7154:	9300      	str	r3, [sp, #0]
    7156:	49ac      	ldr	r1, [pc, #688]	; (7408 <event_connection_prepare+0xef0>)
    7158:	4bac      	ldr	r3, [pc, #688]	; (740c <event_connection_prepare+0xef4>)
    715a:	4aad      	ldr	r2, [pc, #692]	; (7410 <event_connection_prepare+0xef8>)
    715c:	48ad      	ldr	r0, [pc, #692]	; (7414 <event_connection_prepare+0xefc>)
    715e:	f7fa f825 	bl	11ac <printk>
    7162:	2100      	movs	r1, #0
    7164:	4608      	mov	r0, r1
    7166:	f005 fa73 	bl	c650 <_SysFatalErrorHandler>

		if (_radio.packet_rx_data_count != free_count_rx) {
    716a:	f895 3246 	ldrb.w	r3, [r5, #582]	; 0x246
    716e:	4543      	cmp	r3, r8
    7170:	f040 8128 	bne.w	73c4 <event_connection_prepare+0xeac>
			break;
		}

		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    7174:	48a8      	ldr	r0, [pc, #672]	; (7418 <event_connection_prepare+0xf00>)
    7176:	f7fb fcbe 	bl	2af6 <mem_acquire>
		if (!node_tx) {
    717a:	4601      	mov	r1, r0
    717c:	2800      	cmp	r0, #0
    717e:	f000 8121 	beq.w	73c4 <event_connection_prepare+0xeac>
			break;
		}

		/* wait for resp before completing the procedure */
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
    7182:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    7186:	2201      	movs	r2, #1
    7188:	f362 0301 	bfi	r3, r2, #0, #2
    718c:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2

		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    7190:	f8b4 30b6 	ldrh.w	r3, [r4, #182]	; 0xb6
    7194:	85a3      	strh	r3, [r4, #44]	; 0x2c

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    7196:	7903      	ldrb	r3, [r0, #4]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    7198:	72c2      	strb	r2, [r0, #11]
		/* set the default tx octets to requested value */
		conn->default_tx_octets = conn->llcp_length.tx_octets;

		/* place the length req packet as next in tx queue */
		pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    719a:	f043 0303 	orr.w	r3, r3, #3
    719e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    71a0:	2309      	movs	r3, #9
    71a2:	7143      	strb	r3, [r0, #5]
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_tx->payload.llctrl.opcode =
    71a4:	2314      	movs	r3, #20
    71a6:	71c3      	strb	r3, [r0, #7]
			PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_tx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    71a8:	231b      	movs	r3, #27
    71aa:	7203      	strb	r3, [r0, #8]
    71ac:	2300      	movs	r3, #0
    71ae:	7243      	strb	r3, [r0, #9]
		lr->max_rx_time = ((RADIO_LL_LENGTH_OCTETS_RX_MAX + 14) << 3);
    71b0:	2348      	movs	r3, #72	; 0x48
    71b2:	7283      	strb	r3, [r0, #10]
		lr->max_tx_octets = conn->default_tx_octets;
    71b4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    71b6:	8183      	strh	r3, [r0, #12]
		lr->max_tx_time = ((conn->default_tx_octets + 14) << 3);
    71b8:	330e      	adds	r3, #14
    71ba:	00db      	lsls	r3, r3, #3
    71bc:	81c3      	strh	r3, [r0, #14]

		ctrl_tx_enqueue(conn, node_tx);
    71be:	4620      	mov	r0, r4
    71c0:	f7fd facc 	bl	475c <ctrl_tx_enqueue>

		/* Start Procedure Timeout (@todo this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
    71c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    71c6:	8723      	strh	r3, [r4, #56]	; 0x38
    71c8:	e0fc      	b.n	73c4 <event_connection_prepare+0xeac>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    71ca:	f7fd fa43 	bl	4654 <packet_rx_acquired_count_get>
    71ce:	4680      	mov	r8, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
    71d0:	f8d5 023c 	ldr.w	r0, [r5, #572]	; 0x23c
    71d4:	f7fb fcc3 	bl	2b5e <mem_free_count_get>
		/* Ensure the rx pool is not in use.
		 * This is important to be able to re-size the pool
		 * ensuring there is no chance that an operation on
		 * the pool is pre-empted causing memory corruption.
		 */
		free_count_rx = packet_rx_acquired_count_get() +
    71d8:	4440      	add	r0, r8
    71da:	fa1f f880 	uxth.w	r8, r0
			mem_free_count_get(_radio.pkt_rx_data_free);
		LL_ASSERT(free_count_rx <= 0xFF);
    71de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    71e2:	d90d      	bls.n	7200 <event_connection_prepare+0xce8>
    71e4:	4b86      	ldr	r3, [pc, #536]	; (7400 <event_connection_prepare+0xee8>)
    71e6:	9301      	str	r3, [sp, #4]
    71e8:	4b86      	ldr	r3, [pc, #536]	; (7404 <event_connection_prepare+0xeec>)
    71ea:	9300      	str	r3, [sp, #0]
    71ec:	4986      	ldr	r1, [pc, #536]	; (7408 <event_connection_prepare+0xef0>)
    71ee:	4b87      	ldr	r3, [pc, #540]	; (740c <event_connection_prepare+0xef4>)
    71f0:	4a87      	ldr	r2, [pc, #540]	; (7410 <event_connection_prepare+0xef8>)
    71f2:	4888      	ldr	r0, [pc, #544]	; (7414 <event_connection_prepare+0xefc>)
    71f4:	f7f9 ffda 	bl	11ac <printk>
    71f8:	2100      	movs	r1, #0
    71fa:	4608      	mov	r0, r1
    71fc:	f005 fa28 	bl	c650 <_SysFatalErrorHandler>

		if (_radio.packet_rx_data_count != free_count_rx) {
    7200:	f895 3246 	ldrb.w	r3, [r5, #582]	; 0x246
    7204:	4543      	cmp	r3, r8
    7206:	d00d      	beq.n	7224 <event_connection_prepare+0xd0c>
			/** TODO another role instance has obtained
			 * memory from rx pool.
			 */
			LL_ASSERT(0);
    7208:	4b7d      	ldr	r3, [pc, #500]	; (7400 <event_connection_prepare+0xee8>)
    720a:	9301      	str	r3, [sp, #4]
    720c:	4b7d      	ldr	r3, [pc, #500]	; (7404 <event_connection_prepare+0xeec>)
    720e:	9300      	str	r3, [sp, #0]
    7210:	497d      	ldr	r1, [pc, #500]	; (7408 <event_connection_prepare+0xef0>)
    7212:	4b7e      	ldr	r3, [pc, #504]	; (740c <event_connection_prepare+0xef4>)
    7214:	4a7e      	ldr	r2, [pc, #504]	; (7410 <event_connection_prepare+0xef8>)
    7216:	4881      	ldr	r0, [pc, #516]	; (741c <event_connection_prepare+0xf04>)
    7218:	f7f9 ffc8 	bl	11ac <printk>
    721c:	2100      	movs	r1, #0
    721e:	4608      	mov	r0, r1
    7220:	f005 fa16 	bl	c650 <_SysFatalErrorHandler>
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
    7224:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
    7228:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    722c:	f8d5 3224 	ldr.w	r3, [r5, #548]	; 0x224
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    7230:	f8d5 021c 	ldr.w	r0, [r5, #540]	; 0x21c
		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    7234:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;
    7238:	2100      	movs	r1, #0

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    723a:	f361 02c3 	bfi	r2, r1, #3, #1
			LL_ASSERT(0);
		}

		/* Procedure complete */
		conn->llcp_length.ack = conn->llcp_length.req;
		conn->procedure_expire = 0;
    723e:	8721      	strh	r1, [r4, #56]	; 0x38

		/* resume data packet tx */
		_radio.conn_curr->pause_tx = 0;
    7240:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

		/* Use the new rx octets in the connection */
		conn->max_rx_octets = conn->llcp_length.rx_octets;
    7244:	f8b4 30b4 	ldrh.w	r3, [r4, #180]	; 0xb4
    7248:	8623      	strh	r3, [r4, #48]	; 0x30
		 * rule that the rx buffers are allocated in application
		 * context.
		 * Design mem_* such that mem_init could interrupt mem_acquire,
		 * when the pool is full?
		 */
		free_count_conn = mem_free_count_get(_radio.conn_free);
    724a:	f7fb fc88 	bl	2b5e <mem_free_count_get>
		if (_radio.advertiser.conn) {
    724e:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
    7252:	b10b      	cbz	r3, 7258 <event_connection_prepare+0xd40>
			free_count_conn++;
    7254:	3001      	adds	r0, #1
    7256:	b280      	uxth	r0, r0
		}
		if (_radio.observer.conn) {
    7258:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
    725c:	b10b      	cbz	r3, 7262 <event_connection_prepare+0xd4a>
			free_count_conn++;
    725e:	3001      	adds	r0, #1
    7260:	b280      	uxth	r0, r0
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    7262:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    7266:	f895 3220 	ldrb.w	r3, [r5, #544]	; 0x220
			free_count_conn++;
		}
		if (_radio.observer.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    726a:	f108 080e 	add.w	r8, r8, #14
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    726e:	3001      	adds	r0, #1
			free_count_conn++;
		}
		if (_radio.observer.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    7270:	f028 0803 	bic.w	r8, r8, #3
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    7274:	4298      	cmp	r0, r3
			free_count_conn++;
		}
		if (_radio.observer.conn) {
			free_count_conn++;
		}
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
    7276:	fa1f f888 	uxth.w	r8, r8
					     conn->max_rx_octets);
		/* Resize to lower or higher size if this is the only active
		 * connection, or resize to only higher sizes as there may be
		 * other connections using the current size.
		 */
		if (((free_count_conn + 1) == _radio.connection_count) ||
    727a:	d004      	beq.n	7286 <event_connection_prepare+0xd6e>
    727c:	4b68      	ldr	r3, [pc, #416]	; (7420 <event_connection_prepare+0xf08>)
    727e:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
    7282:	4543      	cmp	r3, r8
    7284:	d264      	bcs.n	7350 <event_connection_prepare+0xe38>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    7286:	f8df 9198 	ldr.w	r9, [pc, #408]	; 7420 <event_connection_prepare+0xf08>
				node_rx = _radio.packet_rx[
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    728a:	f8df a174 	ldr.w	sl, [pc, #372]	; 7400 <event_connection_prepare+0xee8>
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    728e:	f895 324e 	ldrb.w	r3, [r5, #590]	; 0x24e
				_radio.packet_rx_last) {
    7292:	f895 124d 	ldrb.w	r1, [r5, #589]	; 0x24d
		if (((free_count_conn + 1) == _radio.connection_count) ||
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
			/* as rx mem is to be re-sized, release acquired
			 * memq link.
			 */
			while (_radio.packet_rx_acquire !=
    7296:	4a62      	ldr	r2, [pc, #392]	; (7420 <event_connection_prepare+0xf08>)
    7298:	428b      	cmp	r3, r1
    729a:	d02a      	beq.n	72f2 <event_connection_prepare+0xdda>
				_radio.packet_rx_last) {

				struct radio_pdu_node_rx *node_rx;

				if (_radio.packet_rx_acquire == 0) {
    729c:	b90b      	cbnz	r3, 72a2 <event_connection_prepare+0xd8a>
					_radio.packet_rx_acquire =
    729e:	f899 324c 	ldrb.w	r3, [r9, #588]	; 0x24c
					_radio.packet_rx_acquire -= 1;
				}

				node_rx = _radio.packet_rx[
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    72a2:	4960      	ldr	r1, [pc, #384]	; (7424 <event_connection_prepare+0xf0c>)

				if (_radio.packet_rx_acquire == 0) {
					_radio.packet_rx_acquire =
						_radio.packet_rx_count - 1;
				} else {
					_radio.packet_rx_acquire -= 1;
    72a4:	3b01      	subs	r3, #1
    72a6:	f889 324e 	strb.w	r3, [r9, #590]	; 0x24e
				}

				node_rx = _radio.packet_rx[
    72aa:	f895 224e 	ldrb.w	r2, [r5, #590]	; 0x24e
    72ae:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
						_radio.packet_rx_acquire];
				mem_release(node_rx->hdr.onion.link,
    72b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    72b6:	6818      	ldr	r0, [r3, #0]
    72b8:	f7fb fc39 	bl	2b2e <mem_release>
					&_radio.link_rx_free);

				LL_ASSERT(_radio.link_rx_data_quota <
    72bc:	f895 324c 	ldrb.w	r3, [r5, #588]	; 0x24c
    72c0:	f895 2260 	ldrb.w	r2, [r5, #608]	; 0x260
    72c4:	3b01      	subs	r3, #1
    72c6:	429a      	cmp	r2, r3
    72c8:	db0d      	blt.n	72e6 <event_connection_prepare+0xdce>
    72ca:	4b4e      	ldr	r3, [pc, #312]	; (7404 <event_connection_prepare+0xeec>)
    72cc:	9300      	str	r3, [sp, #0]
    72ce:	494e      	ldr	r1, [pc, #312]	; (7408 <event_connection_prepare+0xef0>)
    72d0:	f8cd a004 	str.w	sl, [sp, #4]
    72d4:	4b4d      	ldr	r3, [pc, #308]	; (740c <event_connection_prepare+0xef4>)
    72d6:	4a4e      	ldr	r2, [pc, #312]	; (7410 <event_connection_prepare+0xef8>)
    72d8:	4853      	ldr	r0, [pc, #332]	; (7428 <event_connection_prepare+0xf10>)
    72da:	f7f9 ff67 	bl	11ac <printk>
    72de:	2100      	movs	r1, #0
    72e0:	4608      	mov	r0, r1
    72e2:	f005 f9b5 	bl	c650 <_SysFatalErrorHandler>
					  (_radio.packet_rx_count - 1));
				_radio.link_rx_data_quota++;
    72e6:	f895 3260 	ldrb.w	r3, [r5, #608]	; 0x260
    72ea:	3301      	adds	r3, #1
    72ec:	f885 3260 	strb.w	r3, [r5, #608]	; 0x260
    72f0:	e7cd      	b.n	728e <event_connection_prepare+0xd76>
				 * later down in code.
				 */
			}

			/* calculate the new rx node size and new count */
			if (conn->max_rx_octets < (RADIO_ACPDU_SIZE_MAX + 1)) {
    72f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    72f4:	2b28      	cmp	r3, #40	; 0x28
				_radio.packet_rx_data_size =
    72f6:	bf9a      	itte	ls
    72f8:	2334      	movls	r3, #52	; 0x34
    72fa:	f8a2 3244 	strhls.w	r3, [r2, #580]	; 0x244
				    MROUND(offsetof(struct radio_pdu_node_rx,
						    pdu_data) +
					   (RADIO_ACPDU_SIZE_MAX + 1));
			} else {
				_radio.packet_rx_data_size =
    72fe:	f8a2 8244 	strhhi.w	r8, [r2, #580]	; 0x244
					packet_rx_data_size;
			}
			_radio.packet_rx_data_count =
    7302:	f8b5 3242 	ldrh.w	r3, [r5, #578]	; 0x242
    7306:	f8b5 8244 	ldrh.w	r8, [r5, #580]	; 0x244
    730a:	fbb3 f8f8 	udiv	r8, r3, r8
    730e:	fa5f f888 	uxtb.w	r8, r8
    7312:	f885 8246 	strb.w	r8, [r5, #582]	; 0x246
				_radio.packet_rx_data_pool_size /
				_radio.packet_rx_data_size;
			LL_ASSERT(_radio.packet_rx_data_count);
    7316:	f1b8 0f00 	cmp.w	r8, #0
    731a:	d10d      	bne.n	7338 <event_connection_prepare+0xe20>
    731c:	4b38      	ldr	r3, [pc, #224]	; (7400 <event_connection_prepare+0xee8>)
    731e:	9301      	str	r3, [sp, #4]
    7320:	4b38      	ldr	r3, [pc, #224]	; (7404 <event_connection_prepare+0xeec>)
    7322:	9300      	str	r3, [sp, #0]
    7324:	4938      	ldr	r1, [pc, #224]	; (7408 <event_connection_prepare+0xef0>)
    7326:	4b39      	ldr	r3, [pc, #228]	; (740c <event_connection_prepare+0xef4>)
    7328:	4a39      	ldr	r2, [pc, #228]	; (7410 <event_connection_prepare+0xef8>)
    732a:	4840      	ldr	r0, [pc, #256]	; (742c <event_connection_prepare+0xf14>)
    732c:	f7f9 ff3e 	bl	11ac <printk>
    7330:	4641      	mov	r1, r8
    7332:	4640      	mov	r0, r8
    7334:	f005 f98c 	bl	c650 <_SysFatalErrorHandler>

			/* re-size (re-init) the free rx pool */
			mem_init(_radio.pkt_rx_data_pool,
    7338:	f8d5 0238 	ldr.w	r0, [r5, #568]	; 0x238
    733c:	4b3c      	ldr	r3, [pc, #240]	; (7430 <event_connection_prepare+0xf18>)
    733e:	f895 2246 	ldrb.w	r2, [r5, #582]	; 0x246
    7342:	f8b5 1244 	ldrh.w	r1, [r5, #580]	; 0x244
    7346:	f7fb fbab 	bl	2aa0 <mem_init>
				 &_radio.pkt_rx_data_free);

			/* allocate the rx queue include one extra for
			 * generating event in following lines.
			 */
			packet_rx_allocate(4);
    734a:	2004      	movs	r0, #4
    734c:	f7fd faf0 	bl	4930 <packet_rx_allocate>
		}

		/* Prepare the rx packet structure */
		node_rx = packet_rx_reserve_get(2);
    7350:	2002      	movs	r0, #2
    7352:	f7fd f997 	bl	4684 <packet_rx_reserve_get>
		LL_ASSERT(node_rx);
    7356:	4605      	mov	r5, r0
    7358:	b968      	cbnz	r0, 7376 <event_connection_prepare+0xe5e>
    735a:	4b29      	ldr	r3, [pc, #164]	; (7400 <event_connection_prepare+0xee8>)
    735c:	9301      	str	r3, [sp, #4]
    735e:	4b29      	ldr	r3, [pc, #164]	; (7404 <event_connection_prepare+0xeec>)
    7360:	9300      	str	r3, [sp, #0]
    7362:	4929      	ldr	r1, [pc, #164]	; (7408 <event_connection_prepare+0xef0>)
    7364:	4b29      	ldr	r3, [pc, #164]	; (740c <event_connection_prepare+0xef4>)
    7366:	4a2a      	ldr	r2, [pc, #168]	; (7410 <event_connection_prepare+0xef8>)
    7368:	4832      	ldr	r0, [pc, #200]	; (7434 <event_connection_prepare+0xf1c>)
    736a:	f7f9 ff1f 	bl	11ac <printk>
    736e:	4629      	mov	r1, r5
    7370:	4628      	mov	r0, r5
    7372:	f005 f96d 	bl	c650 <_SysFatalErrorHandler>
		node_rx->hdr.handle = conn->handle;
    7376:	8c23      	ldrh	r3, [r4, #32]
    7378:	80eb      	strh	r3, [r5, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    737a:	2301      	movs	r3, #1
    737c:	712b      	strb	r3, [r5, #4]

		/* prepare version ind structure */
		pdu_ctrl_rx = (struct pdu_data *) node_rx->pdu_data;
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    737e:	7a2b      	ldrb	r3, [r5, #8]
    7380:	f043 0303 	orr.w	r3, r3, #3
    7384:	722b      	strb	r3, [r5, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
    7386:	2309      	movs	r3, #9
    7388:	726b      	strb	r3, [r5, #9]
					    ctrldata) +
			sizeof(struct pdu_data_llctrl_length_req_rsp);
		pdu_ctrl_rx->payload.llctrl.opcode =
    738a:	2315      	movs	r3, #21
    738c:	72eb      	strb	r3, [r5, #11]
			PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		lr = (struct pdu_data_llctrl_length_req_rsp *)
			&pdu_ctrl_rx->payload.llctrl.ctrldata.length_req;
		lr->max_rx_octets = conn->max_rx_octets;
    738e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    7390:	81ab      	strh	r3, [r5, #12]
		lr->max_rx_time = ((conn->max_rx_octets + 14) << 3);
    7392:	330e      	adds	r3, #14
    7394:	00db      	lsls	r3, r3, #3
    7396:	81eb      	strh	r3, [r5, #14]
		lr->max_tx_octets = conn->max_tx_octets;
    7398:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    739a:	822b      	strh	r3, [r5, #16]
		lr->max_tx_time = ((conn->max_tx_octets + 14) << 3);
    739c:	330e      	adds	r3, #14
    739e:	00db      	lsls	r3, r3, #3
    73a0:	826b      	strh	r3, [r5, #18]

		/* enqueue version ind structure into rx queue */
		packet_rx_enqueue();
    73a2:	f7fe fb0b 	bl	59bc <packet_rx_enqueue>
    73a6:	e00d      	b.n	73c4 <event_connection_prepare+0xeac>
	case LLCP_LENGTH_STATE_RSP_WAIT:
		/* no nothing */
		break;

	default:
		LL_ASSERT(0);
    73a8:	4b15      	ldr	r3, [pc, #84]	; (7400 <event_connection_prepare+0xee8>)
    73aa:	9301      	str	r3, [sp, #4]
    73ac:	4b15      	ldr	r3, [pc, #84]	; (7404 <event_connection_prepare+0xeec>)
    73ae:	9300      	str	r3, [sp, #0]
    73b0:	4915      	ldr	r1, [pc, #84]	; (7408 <event_connection_prepare+0xef0>)
    73b2:	4b16      	ldr	r3, [pc, #88]	; (740c <event_connection_prepare+0xef4>)
    73b4:	4a16      	ldr	r2, [pc, #88]	; (7410 <event_connection_prepare+0xef8>)
    73b6:	4819      	ldr	r0, [pc, #100]	; (741c <event_connection_prepare+0xf04>)
    73b8:	f7f9 fef8 	bl	11ac <printk>
    73bc:	2100      	movs	r1, #0
    73be:	4608      	mov	r0, r1
    73c0:	f005 f946 	bl	c650 <_SysFatalErrorHandler>
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    73c4:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    73c8:	f894 3020 	ldrb.w	r3, [r4, #32]
    73cc:	481a      	ldr	r0, [pc, #104]	; (7438 <event_connection_prepare+0xf20>)
    73ce:	68a2      	ldr	r2, [r4, #8]
    73d0:	9403      	str	r4, [sp, #12]
    73d2:	f011 0f01 	tst.w	r1, #1
    73d6:	f103 0307 	add.w	r3, r3, #7
    73da:	4918      	ldr	r1, [pc, #96]	; (743c <event_connection_prepare+0xf24>)
    73dc:	b2db      	uxtb	r3, r3
    73de:	bf08      	it	eq
    73e0:	4601      	moveq	r1, r0
    73e2:	e88d 000c 	stmia.w	sp, {r2, r3}
    73e6:	9102      	str	r1, [sp, #8]
    73e8:	1d23      	adds	r3, r4, #4
    73ea:	4622      	mov	r2, r4
    73ec:	6879      	ldr	r1, [r7, #4]
    73ee:	4658      	mov	r0, fp
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    73f0:	3601      	adds	r6, #1
		event_len_prep(conn);
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	/* Setup XTAL startup and radio active events */
	event_common_prepare(ticks_at_expire, remainder,
    73f2:	f7fe fd29 	bl	5e48 <event_common_prepare>
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
			     (conn->role.slave.role != 0) ? event_slave : event_master,
			     conn);

	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
    73f6:	8466      	strh	r6, [r4, #34]	; 0x22
}
    73f8:	3714      	adds	r7, #20
    73fa:	46bd      	mov	sp, r7
    73fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7400:	0000dd4e 	.word	0x0000dd4e
    7404:	0000dd53 	.word	0x0000dd53
    7408:	0000dd04 	.word	0x0000dd04
    740c:	0000f29a 	.word	0x0000f29a
    7410:	0000dcfd 	.word	0x0000dcfd
    7414:	0000e744 	.word	0x0000e744
    7418:	20000dac 	.word	0x20000dac
    741c:	0000e191 	.word	0x0000e191
    7420:	20000b44 	.word	0x20000b44
    7424:	20000d98 	.word	0x20000d98
    7428:	0000e77b 	.word	0x0000e77b
    742c:	0000e7d5 	.word	0x0000e7d5
    7430:	20000d80 	.word	0x20000d80
    7434:	0000e812 	.word	0x0000e812
    7438:	000077d5 	.word	0x000077d5
    743c:	00007939 	.word	0x00007939

00007440 <event_master_prepare>:
	DEBUG_RADIO_START_S(0);
}

static void event_master_prepare(uint32_t ticks_at_expire, uint32_t remainder,
				 uint16_t lazy, void *context)
{
    7440:	b480      	push	{r7}
    7442:	af00      	add	r7, sp, #0
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);

	DEBUG_RADIO_PREPARE_M(0);
}
    7444:	46bd      	mov	sp, r7
    7446:	bc80      	pop	{r7}
static void event_master_prepare(uint32_t ticks_at_expire, uint32_t remainder,
				 uint16_t lazy, void *context)
{
	DEBUG_RADIO_PREPARE_M(1);

	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
    7448:	f7ff b866 	b.w	6518 <event_connection_prepare>

0000744c <adv_obs_conn_configure.constprop.18>:
	 */

	return access_addr;
}

static void adv_obs_conn_configure(uint8_t phy)
    744c:	b580      	push	{r7, lr}
    744e:	af00      	add	r7, sp, #0
{
	radio_reset();
    7450:	f7fb fe08 	bl	3064 <radio_reset>
	radio_phy_set(phy);
    7454:	2000      	movs	r0, #0
    7456:	f7fb fe15 	bl	3084 <radio_phy_set>
	radio_tx_power_set(0);
    745a:	2000      	movs	r0, #0
    745c:	f7fb fe20 	bl	30a0 <radio_tx_power_set>
	radio_tmr_tifs_set(150);
    7460:	2096      	movs	r0, #150	; 0x96
    7462:	f7fb ff8b 	bl	337c <radio_tmr_tifs_set>
	radio_isr_set(isr);
    7466:	4803      	ldr	r0, [pc, #12]	; (7474 <adv_obs_conn_configure.constprop.18+0x28>)
}
    7468:	46bd      	mov	sp, r7
    746a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
{
	radio_reset();
	radio_phy_set(phy);
	radio_tx_power_set(0);
	radio_tmr_tifs_set(150);
	radio_isr_set(isr);
    746e:	f7fb bde1 	b.w	3034 <radio_isr_set>
    7472:	bf00      	nop
    7474:	00007af1 	.word	0x00007af1

00007478 <adv_obs_configure.constprop.17>:
}

static void adv_obs_configure(uint8_t phy)
    7478:	b590      	push	{r4, r7, lr}
    747a:	b083      	sub	sp, #12
    747c:	af00      	add	r7, sp, #0
{
	uint32_t aa = 0x8e89bed6;
    747e:	f107 0408 	add.w	r4, r7, #8
    7482:	4b0a      	ldr	r3, [pc, #40]	; (74ac <adv_obs_configure.constprop.17+0x34>)
    7484:	f844 3d04 	str.w	r3, [r4, #-4]!

	adv_obs_conn_configure(phy);
    7488:	f7ff ffe0 	bl	744c <adv_obs_conn_configure.constprop.18>
	radio_aa_set((uint8_t *)&aa);
    748c:	4620      	mov	r0, r4
    748e:	f7fb fe1f 	bl	30d0 <radio_aa_set>
	radio_pkt_configure(phy, 6, 37);
    7492:	2225      	movs	r2, #37	; 0x25
    7494:	2106      	movs	r1, #6
    7496:	2000      	movs	r0, #0
    7498:	f7fb fe34 	bl	3104 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    749c:	4904      	ldr	r1, [pc, #16]	; (74b0 <adv_obs_configure.constprop.17+0x38>)
    749e:	f240 605b 	movw	r0, #1627	; 0x65b
    74a2:	f7fb feab 	bl	31fc <radio_crc_configure>
			    0x555555);
}
    74a6:	370c      	adds	r7, #12
    74a8:	46bd      	mov	sp, r7
    74aa:	bd90      	pop	{r4, r7, pc}
    74ac:	8e89bed6 	.word	0x8e89bed6
    74b0:	00555555 	.word	0x00555555

000074b4 <event_obs>:
	DEBUG_RADIO_PREPARE_O(0);
}

static void event_obs(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    74b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_O(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    74b6:	4c66      	ldr	r4, [pc, #408]	; (7650 <event_obs+0x19c>)
	DEBUG_RADIO_PREPARE_O(0);
}

static void event_obs(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    74b8:	b08b      	sub	sp, #44	; 0x2c
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_O(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    74ba:	7ba3      	ldrb	r3, [r4, #14]
	DEBUG_RADIO_PREPARE_O(0);
}

static void event_obs(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    74bc:	af0a      	add	r7, sp, #40	; 0x28
    74be:	4606      	mov	r6, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_O(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    74c0:	b16b      	cbz	r3, 74de <event_obs+0x2a>
    74c2:	4b64      	ldr	r3, [pc, #400]	; (7654 <event_obs+0x1a0>)
    74c4:	9301      	str	r3, [sp, #4]
    74c6:	4b64      	ldr	r3, [pc, #400]	; (7658 <event_obs+0x1a4>)
    74c8:	9300      	str	r3, [sp, #0]
    74ca:	4964      	ldr	r1, [pc, #400]	; (765c <event_obs+0x1a8>)
    74cc:	4b64      	ldr	r3, [pc, #400]	; (7660 <event_obs+0x1ac>)
    74ce:	4a65      	ldr	r2, [pc, #404]	; (7664 <event_obs+0x1b0>)
    74d0:	4865      	ldr	r0, [pc, #404]	; (7668 <event_obs+0x1b4>)
    74d2:	f7f9 fe6b 	bl	11ac <printk>
    74d6:	2100      	movs	r1, #0
    74d8:	4608      	mov	r0, r1
    74da:	f005 f8b9 	bl	c650 <_SysFatalErrorHandler>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_OBS);
    74de:	7b23      	ldrb	r3, [r4, #12]
    74e0:	2b06      	cmp	r3, #6
    74e2:	d00d      	beq.n	7500 <event_obs+0x4c>
    74e4:	4b5b      	ldr	r3, [pc, #364]	; (7654 <event_obs+0x1a0>)
    74e6:	9301      	str	r3, [sp, #4]
    74e8:	4b5b      	ldr	r3, [pc, #364]	; (7658 <event_obs+0x1a4>)
    74ea:	9300      	str	r3, [sp, #0]
    74ec:	495b      	ldr	r1, [pc, #364]	; (765c <event_obs+0x1a8>)
    74ee:	4b5c      	ldr	r3, [pc, #368]	; (7660 <event_obs+0x1ac>)
    74f0:	4a5c      	ldr	r2, [pc, #368]	; (7664 <event_obs+0x1b0>)
    74f2:	485e      	ldr	r0, [pc, #376]	; (766c <event_obs+0x1b8>)
    74f4:	f7f9 fe5a 	bl	11ac <printk>
    74f8:	2100      	movs	r1, #0
    74fa:	4608      	mov	r0, r1
    74fc:	f005 f8a8 	bl	c650 <_SysFatalErrorHandler>

	/** @todo check if XTAL is started, options 1: abort Radio Start,
	 * 2: wait for XTAL start
	 */
	_radio.role = ROLE_OBS;
    7500:	2302      	movs	r3, #2
    7502:	73a3      	strb	r3, [r4, #14]
	_radio.state = STATE_RX;
    7504:	2301      	movs	r3, #1
	_radio.ticker_id_prepare = 0;
    7506:	2500      	movs	r5, #0

	/** @todo check if XTAL is started, options 1: abort Radio Start,
	 * 2: wait for XTAL start
	 */
	_radio.role = ROLE_OBS;
	_radio.state = STATE_RX;
    7508:	73e3      	strb	r3, [r4, #15]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_OBS;
    750a:	2306      	movs	r3, #6
	/** @todo check if XTAL is started, options 1: abort Radio Start,
	 * 2: wait for XTAL start
	 */
	_radio.role = ROLE_OBS;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    750c:	7325      	strb	r5, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_OBS;
    750e:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
	_radio.observer.scan_state = 0;
    7510:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	 */
	_radio.role = ROLE_OBS;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event = RADIO_TICKER_ID_OBS;
	_radio.ticks_anchor = ticks_at_expire;
    7514:	6066      	str	r6, [r4, #4]
	_radio.observer.scan_state = 0;
    7516:	f365 0341 	bfi	r3, r5, #1, #1
    751a:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0

	adv_obs_configure(RADIO_PHY_ADV);
    751e:	f7ff ffab 	bl	7478 <adv_obs_configure.constprop.17>

	channel_set(37 + _radio.observer.scan_channel++);
    7522:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    7526:	f3c3 0081 	ubfx	r0, r3, #2, #2
    752a:	1c42      	adds	r2, r0, #1
    752c:	f362 0383 	bfi	r3, r2, #2, #2
    7530:	3025      	adds	r0, #37	; 0x25
    7532:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
    7536:	f7fd fef5 	bl	5324 <channel_set>
	if (_radio.observer.scan_channel == 3) {
    753a:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    753e:	f003 020c 	and.w	r2, r3, #12
    7542:	2a0c      	cmp	r2, #12
		_radio.observer.scan_channel = 0;
    7544:	bf02      	ittt	eq
    7546:	4a42      	ldreq	r2, [pc, #264]	; (7650 <event_obs+0x19c>)
    7548:	f365 0383 	bfieq	r3, r5, #2, #2
    754c:	f882 31c0 	strbeq.w	r3, [r2, #448]	; 0x1c0
	}

	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    7550:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
    7554:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
    7558:	4d3d      	ldr	r5, [pc, #244]	; (7650 <event_obs+0x19c>)
    755a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    755e:	3008      	adds	r0, #8
    7560:	f7fb fdf2 	bl	3148 <radio_pkt_rx_set>
	radio_switch_complete_and_tx();
    7564:	f7fb fe76 	bl	3254 <radio_switch_complete_and_tx>
	radio_rssi_measure();
    7568:	f7fb fe88 	bl	327c <radio_rssi_measure>

	/* Setup Radio Filter */
	if (_radio.observer.filter_policy) {
    756c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    7570:	f013 0f30 	tst.w	r3, #48	; 0x30
    7574:	d00e      	beq.n	7594 <event_obs+0xe0>
		radio_filter_configure(_radio.observer.filter_enable_bitmask,
    7576:	f895 01d4 	ldrb.w	r0, [r5, #468]	; 0x1d4
    757a:	f895 11d5 	ldrb.w	r1, [r5, #469]	; 0x1d5
    757e:	f505 72eb 	add.w	r2, r5, #470	; 0x1d6
    7582:	f7fb fea1 	bl	32c8 <radio_filter_configure>
				       _radio.observer.filter_addr_type_bitmask,
				       (uint8_t *)_radio.observer.filter_bdaddr);

		if (_radio.nirk) {
    7586:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    758a:	b118      	cbz	r0, 7594 <event_obs+0xe0>
			radio_ar_configure(_radio.nirk, _radio.irk);
    758c:	f105 0143 	add.w	r1, r5, #67	; 0x43
    7590:	f7fc f852 	bl	3638 <radio_ar_configure>
		}
	}

	radio_tmr_start(0,
    7594:	4d2e      	ldr	r5, [pc, #184]	; (7650 <event_obs+0x19c>)
    7596:	68a2      	ldr	r2, [r4, #8]
    7598:	f106 0109 	add.w	r1, r6, #9
    759c:	2000      	movs	r0, #0
    759e:	f7fb fef5 	bl	338c <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    75a2:	f7fb ffa5 	bl	34f0 <radio_tmr_end_capture>

#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US\
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.observer.hdr, RADIO_TICKER_ID_OBS,
    75a6:	4632      	mov	r2, r6
    75a8:	2106      	movs	r1, #6
    75aa:	f505 70d8 	add.w	r0, r5, #432	; 0x1b0
    75ae:	f7fe ff3b 	bl	6428 <preempt_calc>
    75b2:	4604      	mov	r4, r0
    75b4:	b138      	cbz	r0, 75c6 <event_obs+0x112>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    75b6:	2304      	movs	r3, #4
		}
#endif
	}

	DEBUG_RADIO_START_O(0);
}
    75b8:	3704      	adds	r7, #4
#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US\
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.observer.hdr, RADIO_TICKER_ID_OBS,
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    75ba:	73eb      	strb	r3, [r5, #15]
		}
#endif
	}

	DEBUG_RADIO_START_O(0);
}
    75bc:	46bd      	mov	sp, r7
    75be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.observer.hdr, RADIO_TICKER_ID_OBS,
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
		radio_disable();
    75c2:	f7fb bde1 	b.w	3188 <radio_disable>
	} else
#endif
	{
		/* start window close timeout */
		ticker_status =
    75c6:	f241 03c8 	movw	r3, #4296	; 0x10c8
    75ca:	9308      	str	r3, [sp, #32]
    75cc:	4b28      	ldr	r3, [pc, #160]	; (7670 <event_obs+0x1bc>)
    75ce:	9307      	str	r3, [sp, #28]
    75d0:	2204      	movs	r2, #4
    75d2:	4b28      	ldr	r3, [pc, #160]	; (7674 <event_obs+0x1c0>)
    75d4:	9206      	str	r2, [sp, #24]
    75d6:	9305      	str	r3, [sp, #20]
    75d8:	9004      	str	r0, [sp, #16]
    75da:	9003      	str	r0, [sp, #12]
    75dc:	9002      	str	r0, [sp, #8]
    75de:	9001      	str	r0, [sp, #4]
    75e0:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
    75e4:	3309      	adds	r3, #9
    75e6:	9300      	str	r3, [sp, #0]
    75e8:	4601      	mov	r1, r0
    75ea:	4633      	mov	r3, r6
    75ec:	f7fc fe74 	bl	42d8 <ticker_start>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_stop, (void *)STATE_STOP,
				     ticker_success_assert, (void *)__LINE__);

		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    75f0:	f030 0302 	bics.w	r3, r0, #2
    75f4:	d00d      	beq.n	7612 <event_obs+0x15e>
    75f6:	4b17      	ldr	r3, [pc, #92]	; (7654 <event_obs+0x1a0>)
    75f8:	9301      	str	r3, [sp, #4]
    75fa:	4b17      	ldr	r3, [pc, #92]	; (7658 <event_obs+0x1a4>)
    75fc:	9300      	str	r3, [sp, #0]
    75fe:	4917      	ldr	r1, [pc, #92]	; (765c <event_obs+0x1a8>)
    7600:	4b17      	ldr	r3, [pc, #92]	; (7660 <event_obs+0x1ac>)
    7602:	4a18      	ldr	r2, [pc, #96]	; (7664 <event_obs+0x1b0>)
    7604:	481c      	ldr	r0, [pc, #112]	; (7678 <event_obs+0x1c4>)
    7606:	f7f9 fdd1 	bl	11ac <printk>
    760a:	4621      	mov	r1, r4
    760c:	4620      	mov	r0, r4
    760e:	f005 f81f 	bl	c650 <_SysFatalErrorHandler>
		/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
		{
			uint32_t ticker_status;

			ticker_status =
    7612:	2300      	movs	r3, #0
    7614:	4619      	mov	r1, r3
    7616:	4618      	mov	r0, r3
    7618:	4a18      	ldr	r2, [pc, #96]	; (767c <event_obs+0x1c8>)
    761a:	f7fc ff6f 	bl	44fc <ticker_job_idle_get>
				ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
						    RADIO_TICKER_USER_ID_WORKER,
						    ticker_job_disable, 0);

			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    761e:	f030 0302 	bics.w	r3, r0, #2
    7622:	d011      	beq.n	7648 <event_obs+0x194>
    7624:	4b0b      	ldr	r3, [pc, #44]	; (7654 <event_obs+0x1a0>)
    7626:	9301      	str	r3, [sp, #4]
    7628:	4b0b      	ldr	r3, [pc, #44]	; (7658 <event_obs+0x1a4>)
    762a:	9300      	str	r3, [sp, #0]
    762c:	4a0d      	ldr	r2, [pc, #52]	; (7664 <event_obs+0x1b0>)
    762e:	4b0c      	ldr	r3, [pc, #48]	; (7660 <event_obs+0x1ac>)
    7630:	490a      	ldr	r1, [pc, #40]	; (765c <event_obs+0x1a8>)
    7632:	4811      	ldr	r0, [pc, #68]	; (7678 <event_obs+0x1c4>)
    7634:	f7f9 fdba 	bl	11ac <printk>
    7638:	2100      	movs	r1, #0
    763a:	4608      	mov	r0, r1
		}
#endif
	}

	DEBUG_RADIO_START_O(0);
}
    763c:	3704      	adds	r7, #4
    763e:	46bd      	mov	sp, r7
    7640:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			ticker_status =
				ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
						    RADIO_TICKER_USER_ID_WORKER,
						    ticker_job_disable, 0);

			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7644:	f005 b804 	b.w	c650 <_SysFatalErrorHandler>
		}
#endif
	}

	DEBUG_RADIO_START_O(0);
}
    7648:	3704      	adds	r7, #4
    764a:	46bd      	mov	sp, r7
    764c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    764e:	bf00      	nop
    7650:	20000b44 	.word	0x20000b44
    7654:	0000dd4e 	.word	0x0000dd4e
    7658:	0000dd53 	.word	0x0000dd53
    765c:	0000dd04 	.word	0x0000dd04
    7660:	0000ef17 	.word	0x0000ef17
    7664:	0000dcfd 	.word	0x0000dcfd
    7668:	0000e83b 	.word	0x0000e83b
    766c:	0000e875 	.word	0x0000e875
    7670:	00005c59 	.word	0x00005c59
    7674:	00005cc5 	.word	0x00005cc5
    7678:	0000e588 	.word	0x0000e588
    767c:	00005ca1 	.word	0x00005ca1

00007680 <event_adv>:
	channel_set(37 + channel);
}

static void event_adv(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    7680:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7682:	4c3e      	ldr	r4, [pc, #248]	; (777c <event_adv+0xfc>)
	channel_set(37 + channel);
}

static void event_adv(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    7684:	b083      	sub	sp, #12
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7686:	7ba3      	ldrb	r3, [r4, #14]
	channel_set(37 + channel);
}

static void event_adv(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *context)
{
    7688:	af02      	add	r7, sp, #8
    768a:	4606      	mov	r6, r0
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	DEBUG_RADIO_START_A(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    768c:	b16b      	cbz	r3, 76aa <event_adv+0x2a>
    768e:	4b3c      	ldr	r3, [pc, #240]	; (7780 <event_adv+0x100>)
    7690:	9301      	str	r3, [sp, #4]
    7692:	4b3c      	ldr	r3, [pc, #240]	; (7784 <event_adv+0x104>)
    7694:	9300      	str	r3, [sp, #0]
    7696:	493c      	ldr	r1, [pc, #240]	; (7788 <event_adv+0x108>)
    7698:	4b3c      	ldr	r3, [pc, #240]	; (778c <event_adv+0x10c>)
    769a:	4a3d      	ldr	r2, [pc, #244]	; (7790 <event_adv+0x110>)
    769c:	483d      	ldr	r0, [pc, #244]	; (7794 <event_adv+0x114>)
    769e:	f7f9 fd85 	bl	11ac <printk>
    76a2:	2100      	movs	r1, #0
    76a4:	4608      	mov	r0, r1
    76a6:	f004 ffd3 	bl	c650 <_SysFatalErrorHandler>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
    76aa:	7b23      	ldrb	r3, [r4, #12]
    76ac:	2b05      	cmp	r3, #5
    76ae:	d00d      	beq.n	76cc <event_adv+0x4c>
    76b0:	4b33      	ldr	r3, [pc, #204]	; (7780 <event_adv+0x100>)
    76b2:	9301      	str	r3, [sp, #4]
    76b4:	4b33      	ldr	r3, [pc, #204]	; (7784 <event_adv+0x104>)
    76b6:	9300      	str	r3, [sp, #0]
    76b8:	4933      	ldr	r1, [pc, #204]	; (7788 <event_adv+0x108>)
    76ba:	4b34      	ldr	r3, [pc, #208]	; (778c <event_adv+0x10c>)
    76bc:	4a34      	ldr	r2, [pc, #208]	; (7790 <event_adv+0x110>)
    76be:	4836      	ldr	r0, [pc, #216]	; (7798 <event_adv+0x118>)
    76c0:	f7f9 fd74 	bl	11ac <printk>
    76c4:	2100      	movs	r1, #0
    76c6:	4608      	mov	r0, r1
    76c8:	f004 ffc2 	bl	c650 <_SysFatalErrorHandler>
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    76cc:	2301      	movs	r3, #1
    76ce:	73a3      	strb	r3, [r4, #14]
	_radio.state = STATE_TX;
    76d0:	2302      	movs	r3, #2
    76d2:	73e3      	strb	r3, [r4, #15]
	_radio.ticker_id_prepare = 0;
    76d4:	2300      	movs	r3, #0
    76d6:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
    76d8:	2305      	movs	r3, #5
    76da:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
    76dc:	6066      	str	r6, [r4, #4]

	adv_obs_configure(RADIO_PHY_ADV);
    76de:	f7ff fecb 	bl	7478 <adv_obs_configure.constprop.17>

	_radio.advertiser.chl_map_current = _radio.advertiser.chl_map;
    76e2:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
	/** @todo check if XTAL is started,
	 * options 1: abort Radio Start,
	 * 2: wait for XTAL start.
	 */

	_radio.role = ROLE_ADV;
    76e6:	4d25      	ldr	r5, [pc, #148]	; (777c <event_adv+0xfc>)
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
	_radio.ticks_anchor = ticks_at_expire;

	adv_obs_configure(RADIO_PHY_ADV);

	_radio.advertiser.chl_map_current = _radio.advertiser.chl_map;
    76e8:	4613      	mov	r3, r2
    76ea:	f362 03c5 	bfi	r3, r2, #3, #3
    76ee:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
	adv_setup();
    76f2:	f7fd fe53 	bl	539c <adv_setup>

	/* Setup Radio Filter */
	if (_radio.advertiser.filter_policy) {
    76f6:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    76fa:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    76fe:	d007      	beq.n	7710 <event_adv+0x90>
		radio_filter_configure(_radio.advertiser.filter_enable_bitmask,
    7700:	f105 02d7 	add.w	r2, r5, #215	; 0xd7
    7704:	f895 10d6 	ldrb.w	r1, [r5, #214]	; 0xd6
    7708:	f895 00d5 	ldrb.w	r0, [r5, #213]	; 0xd5
    770c:	f7fb fddc 	bl	32c8 <radio_filter_configure>
				       _radio.advertiser.filter_addr_type_bitmask,
				       (uint8_t *)_radio.advertiser.filter_bdaddr);
	}

	radio_tmr_start(1,
    7710:	4d1a      	ldr	r5, [pc, #104]	; (777c <event_adv+0xfc>)
    7712:	68a2      	ldr	r2, [r4, #8]
    7714:	f106 0109 	add.w	r1, r6, #9
    7718:	2001      	movs	r0, #1
    771a:	f7fb fe37 	bl	338c <radio_tmr_start>
			ticks_at_expire +
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
			_radio.remainder_anchor);
	radio_tmr_end_capture();
    771e:	f7fb fee7 	bl	34f0 <radio_tmr_end_capture>

#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US \
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
    7722:	4632      	mov	r2, r6
    7724:	2105      	movs	r1, #5
    7726:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
    772a:	f7fe fe7d 	bl	6428 <preempt_calc>
    772e:	4604      	mov	r4, r0
    7730:	b138      	cbz	r0, 7742 <event_adv+0xc2>
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    7732:	2304      	movs	r3, #4
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	DEBUG_RADIO_START_A(0);
}
    7734:	3704      	adds	r7, #4
#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US \
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    7736:	73eb      	strb	r3, [r5, #15]
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	DEBUG_RADIO_START_A(0);
}
    7738:	46bd      	mov	sp, r7
    773a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
			 ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
		radio_disable();
    773e:	f7fb bd23 	b.w	3188 <radio_disable>
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	{
		uint32_t ticker_status;

		ticker_status =
    7742:	4603      	mov	r3, r0
    7744:	4a15      	ldr	r2, [pc, #84]	; (779c <event_adv+0x11c>)
    7746:	4601      	mov	r1, r0
    7748:	f7fc fed8 	bl	44fc <ticker_job_idle_get>
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, 0);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    774c:	f030 0302 	bics.w	r3, r0, #2
    7750:	d011      	beq.n	7776 <event_adv+0xf6>
    7752:	4b0b      	ldr	r3, [pc, #44]	; (7780 <event_adv+0x100>)
    7754:	9301      	str	r3, [sp, #4]
    7756:	4b0b      	ldr	r3, [pc, #44]	; (7784 <event_adv+0x104>)
    7758:	9300      	str	r3, [sp, #0]
    775a:	4a0d      	ldr	r2, [pc, #52]	; (7790 <event_adv+0x110>)
    775c:	4b0b      	ldr	r3, [pc, #44]	; (778c <event_adv+0x10c>)
    775e:	490a      	ldr	r1, [pc, #40]	; (7788 <event_adv+0x108>)
    7760:	480f      	ldr	r0, [pc, #60]	; (77a0 <event_adv+0x120>)
    7762:	f7f9 fd23 	bl	11ac <printk>
    7766:	4621      	mov	r1, r4
    7768:	4620      	mov	r0, r4
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	DEBUG_RADIO_START_A(0);
}
    776a:	3704      	adds	r7, #4
    776c:	46bd      	mov	sp, r7
    776e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

		ticker_status =
		    ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					RADIO_TICKER_USER_ID_WORKER,
					ticker_job_disable, 0);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7772:	f004 bf6d 	b.w	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	DEBUG_RADIO_START_A(0);
}
    7776:	3704      	adds	r7, #4
    7778:	46bd      	mov	sp, r7
    777a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    777c:	20000b44 	.word	0x20000b44
    7780:	0000dd4e 	.word	0x0000dd4e
    7784:	0000dd53 	.word	0x0000dd53
    7788:	0000dd04 	.word	0x0000dd04
    778c:	0000f0a0 	.word	0x0000f0a0
    7790:	0000dcfd 	.word	0x0000dcfd
    7794:	0000e83b 	.word	0x0000e83b
    7798:	0000e8b4 	.word	0x0000e8b4
    779c:	00005ca1 	.word	0x00005ca1
    77a0:	0000e588 	.word	0x0000e588

000077a4 <connection_configure>:
	/* store the next event counter value */
	conn->event_counter = event_counter + 1;
}

static void connection_configure(struct connection *conn)
{
    77a4:	b598      	push	{r3, r4, r7, lr}
    77a6:	4604      	mov	r4, r0
    77a8:	af00      	add	r7, sp, #0
	uint8_t phy;

	phy = RADIO_PHY_CONN;
	adv_obs_conn_configure(phy);
    77aa:	f7ff fe4f 	bl	744c <adv_obs_conn_configure.constprop.18>
	radio_aa_set(conn->access_addr);
    77ae:	f104 0010 	add.w	r0, r4, #16
    77b2:	f7fb fc8d 	bl	30d0 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    77b6:	7d63      	ldrb	r3, [r4, #21]
    77b8:	7da1      	ldrb	r1, [r4, #22]
    77ba:	021b      	lsls	r3, r3, #8
    77bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    77c0:	7d21      	ldrb	r1, [r4, #20]
    77c2:	f240 605b 	movw	r0, #1627	; 0x65b
    77c6:	4319      	orrs	r1, r3
			    (((uint32_t)conn->crc_init[2] << 16) |
			     ((uint32_t)conn->crc_init[1] << 8) |
			     ((uint32_t)conn->crc_init[0])));
}
    77c8:	46bd      	mov	sp, r7
    77ca:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
	uint8_t phy;

	phy = RADIO_PHY_CONN;
	adv_obs_conn_configure(phy);
	radio_aa_set(conn->access_addr);
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
    77ce:	f7fb bd15 	b.w	31fc <radio_crc_configure>
	...

000077d4 <event_master>:
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    77d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    77d8:	4d4d      	ldr	r5, [pc, #308]	; (7910 <event_master+0x13c>)
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    77da:	b084      	sub	sp, #16
    77dc:	461c      	mov	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    77de:	7bab      	ldrb	r3, [r5, #14]
	DEBUG_RADIO_PREPARE_M(0);
}

static void event_master(uint32_t ticks_at_expire, uint32_t remainder,
			 uint16_t lazy, void *context)
{
    77e0:	af02      	add	r7, sp, #8
    77e2:	4606      	mov	r6, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_M(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    77e4:	b16b      	cbz	r3, 7802 <event_master+0x2e>
    77e6:	4b4b      	ldr	r3, [pc, #300]	; (7914 <event_master+0x140>)
    77e8:	9301      	str	r3, [sp, #4]
    77ea:	4b4b      	ldr	r3, [pc, #300]	; (7918 <event_master+0x144>)
    77ec:	9300      	str	r3, [sp, #0]
    77ee:	494b      	ldr	r1, [pc, #300]	; (791c <event_master+0x148>)
    77f0:	4b4b      	ldr	r3, [pc, #300]	; (7920 <event_master+0x14c>)
    77f2:	4a4c      	ldr	r2, [pc, #304]	; (7924 <event_master+0x150>)
    77f4:	484c      	ldr	r0, [pc, #304]	; (7928 <event_master+0x154>)
    77f6:	f7f9 fcd9 	bl	11ac <printk>
    77fa:	2100      	movs	r1, #0
    77fc:	4608      	mov	r0, r1
    77fe:	f004 ff27 	bl	c650 <_SysFatalErrorHandler>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    7802:	8c23      	ldrh	r3, [r4, #32]
    7804:	7b2a      	ldrb	r2, [r5, #12]
    7806:	3307      	adds	r3, #7
    7808:	429a      	cmp	r2, r3
    780a:	d00d      	beq.n	7828 <event_master+0x54>
    780c:	4b41      	ldr	r3, [pc, #260]	; (7914 <event_master+0x140>)
    780e:	9301      	str	r3, [sp, #4]
    7810:	4b41      	ldr	r3, [pc, #260]	; (7918 <event_master+0x144>)
    7812:	9300      	str	r3, [sp, #0]
    7814:	4941      	ldr	r1, [pc, #260]	; (791c <event_master+0x148>)
    7816:	4b42      	ldr	r3, [pc, #264]	; (7920 <event_master+0x14c>)
    7818:	4a42      	ldr	r2, [pc, #264]	; (7924 <event_master+0x150>)
    781a:	4844      	ldr	r0, [pc, #272]	; (792c <event_master+0x158>)
    781c:	f7f9 fcc6 	bl	11ac <printk>
    7820:	2100      	movs	r1, #0
    7822:	4608      	mov	r0, r1
    7824:	f004 ff14 	bl	c650 <_SysFatalErrorHandler>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    7828:	f894 3020 	ldrb.w	r3, [r4, #32]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    782c:	f8c5 4224 	str.w	r4, [r5, #548]	; 0x224
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
    7830:	2200      	movs	r2, #0
	_radio.ticker_id_event =
    7832:	3307      	adds	r3, #7
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    7834:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
	_radio.crc_expire = 0;
    7838:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    783c:	f04f 0804 	mov.w	r8, #4
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    7840:	b2db      	uxtb	r3, r3

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
    7842:	f885 800e 	strb.w	r8, [r5, #14]
	_radio.state = STATE_TX;
	_radio.ticker_id_prepare = 0;
    7846:	732a      	strb	r2, [r5, #12]
	_radio.ticker_id_event =
    7848:	736b      	strb	r3, [r5, #13]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    784a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    784c:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
    784e:	8522      	strh	r2, [r4, #40]	; 0x28
	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_MASTER;
	_radio.state = STATE_TX;
    7850:	2002      	movs	r0, #2
    7852:	73e8      	strb	r0, [r5, #15]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    7854:	606e      	str	r6, [r5, #4]

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    7856:	f7fd fba7 	bl	4fa8 <packet_tx_enqueue>

	/* prepare transmit packet */
	prepare_pdu_data_tx(conn, &pdu_data_tx);
    785a:	4620      	mov	r0, r4
    785c:	eb07 0108 	add.w	r1, r7, r8
    7860:	f7fd fcb4 	bl	51cc <prepare_pdu_data_tx>

	pdu_data_tx->sn = conn->sn;
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
    786a:	781a      	ldrb	r2, [r3, #0]
    786c:	f361 02c3 	bfi	r2, r1, #3, #1
    7870:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
    7872:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    7876:	7819      	ldrb	r1, [r3, #0]
    7878:	f3c2 0240 	ubfx	r2, r2, #1, #1
    787c:	f362 0182 	bfi	r1, r2, #2, #1
    7880:	7019      	strb	r1, [r3, #0]

	connection_configure(conn);
    7882:	4620      	mov	r0, r4
    7884:	f7ff ff8e 	bl	77a4 <connection_configure>

	tx_packet_set(conn, pdu_data_tx);
    7888:	4620      	mov	r0, r4
    788a:	6879      	ldr	r1, [r7, #4]
    788c:	f7fd fd28 	bl	52e0 <tx_packet_set>
	radio_switch_complete_and_rx();
    7890:	f7fb fcd6 	bl	3240 <radio_switch_complete_and_rx>

	/* Setup Radio Channel */
	data_channel_use = channel_calc(&conn->data_channel_use,
    7894:	7f23      	ldrb	r3, [r4, #28]
    7896:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    7898:	7f61      	ldrb	r1, [r4, #29]
    789a:	9300      	str	r3, [sp, #0]
    789c:	f104 001e 	add.w	r0, r4, #30
    78a0:	f104 0317 	add.w	r3, r4, #23
    78a4:	f7fc fea0 	bl	45e8 <channel_calc>
					conn->data_channel_hop,
					conn->latency_event,
					&conn->data_channel_map[0],
					conn->data_channel_count);
	channel_set(data_channel_use);
    78a8:	f7fd fd3c 	bl	5324 <channel_set>
	     (conn->supervision_expire <= 6)) ||
	    ((conn->role.master.connect_expire != 0) &&
	     (conn->role.master.connect_expire <= 6)))
#endif
	{
		radio_tmr_start(1, ticks_at_expire +
    78ac:	68aa      	ldr	r2, [r5, #8]
    78ae:	f106 0109 	add.w	r1, r6, #9
    78b2:	2001      	movs	r0, #1
    78b4:	f7fb fd6a 	bl	338c <radio_tmr_start>
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
		radio_tmr_end_capture();
    78b8:	f7fb fe1a 	bl	34f0 <radio_tmr_end_capture>

#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US \
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    78bc:	f894 1020 	ldrb.w	r1, [r4, #32]
    78c0:	3107      	adds	r1, #7
    78c2:	4620      	mov	r0, r4
    78c4:	4632      	mov	r2, r6
    78c6:	b2c9      	uxtb	r1, r1
    78c8:	f7fe fdae 	bl	6428 <preempt_calc>
#endif

#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US \
			<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (0 !=
    78cc:	4604      	mov	r4, r0
    78ce:	b128      	cbz	r0, 78dc <event_master+0x108>
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
				      conn->handle), ticks_at_expire)) {
		_radio.state = STATE_STOP;
    78d0:	4b0f      	ldr	r3, [pc, #60]	; (7910 <event_master+0x13c>)
    78d2:	f883 800f 	strb.w	r8, [r3, #15]
		radio_disable();
    78d6:	f7fb fc57 	bl	3188 <radio_disable>
    78da:	e015      	b.n	7908 <event_master+0x134>
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	{
		uint32_t ticker_status;

		ticker_status =
    78dc:	4603      	mov	r3, r0
    78de:	4a14      	ldr	r2, [pc, #80]	; (7930 <event_master+0x15c>)
    78e0:	4601      	mov	r1, r0
    78e2:	f7fc fe0b 	bl	44fc <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, 0);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    78e6:	f030 0302 	bics.w	r3, r0, #2
    78ea:	d00d      	beq.n	7908 <event_master+0x134>
    78ec:	4b09      	ldr	r3, [pc, #36]	; (7914 <event_master+0x140>)
    78ee:	9301      	str	r3, [sp, #4]
    78f0:	4b09      	ldr	r3, [pc, #36]	; (7918 <event_master+0x144>)
    78f2:	9300      	str	r3, [sp, #0]
    78f4:	4909      	ldr	r1, [pc, #36]	; (791c <event_master+0x148>)
    78f6:	4b0a      	ldr	r3, [pc, #40]	; (7920 <event_master+0x14c>)
    78f8:	4a0a      	ldr	r2, [pc, #40]	; (7924 <event_master+0x150>)
    78fa:	480e      	ldr	r0, [pc, #56]	; (7934 <event_master+0x160>)
    78fc:	f7f9 fc56 	bl	11ac <printk>
    7900:	4621      	mov	r1, r4
    7902:	4620      	mov	r0, r4
    7904:	f004 fea4 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	DEBUG_RADIO_START_M(0);
}
    7908:	3708      	adds	r7, #8
    790a:	46bd      	mov	sp, r7
    790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7910:	20000b44 	.word	0x20000b44
    7914:	0000dd4e 	.word	0x0000dd4e
    7918:	0000dd53 	.word	0x0000dd53
    791c:	0000dd04 	.word	0x0000dd04
    7920:	0000f012 	.word	0x0000f012
    7924:	0000dcfd 	.word	0x0000dcfd
    7928:	0000e83b 	.word	0x0000e83b
    792c:	0000e8f3 	.word	0x0000e8f3
    7930:	00005ca1 	.word	0x00005ca1
    7934:	0000e588 	.word	0x0000e588

00007938 <event_slave>:
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(uint32_t ticks_at_expire, uint32_t remainder,
			uint16_t lazy, void *context)
{
    7938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    793c:	4d52      	ldr	r5, [pc, #328]	; (7a88 <event_slave+0x150>)
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(uint32_t ticks_at_expire, uint32_t remainder,
			uint16_t lazy, void *context)
{
    793e:	b082      	sub	sp, #8
    7940:	461c      	mov	r4, r3
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7942:	7bab      	ldrb	r3, [r5, #14]
	DEBUG_RADIO_PREPARE_S(0);
}

static void event_slave(uint32_t ticks_at_expire, uint32_t remainder,
			uint16_t lazy, void *context)
{
    7944:	af02      	add	r7, sp, #8
    7946:	4680      	mov	r8, r0
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);

	DEBUG_RADIO_START_S(1);

	LL_ASSERT(_radio.role == ROLE_NONE);
    7948:	b16b      	cbz	r3, 7966 <event_slave+0x2e>
    794a:	4b50      	ldr	r3, [pc, #320]	; (7a8c <event_slave+0x154>)
    794c:	9301      	str	r3, [sp, #4]
    794e:	4b50      	ldr	r3, [pc, #320]	; (7a90 <event_slave+0x158>)
    7950:	9300      	str	r3, [sp, #0]
    7952:	4950      	ldr	r1, [pc, #320]	; (7a94 <event_slave+0x15c>)
    7954:	4b50      	ldr	r3, [pc, #320]	; (7a98 <event_slave+0x160>)
    7956:	4a51      	ldr	r2, [pc, #324]	; (7a9c <event_slave+0x164>)
    7958:	4851      	ldr	r0, [pc, #324]	; (7aa0 <event_slave+0x168>)
    795a:	f7f9 fc27 	bl	11ac <printk>
    795e:	2100      	movs	r1, #0
    7960:	4608      	mov	r0, r1
    7962:	f004 fe75 	bl	c650 <_SysFatalErrorHandler>

	conn = (struct connection *)context;
	LL_ASSERT(_radio.ticker_id_prepare ==
    7966:	8c23      	ldrh	r3, [r4, #32]
    7968:	7b2a      	ldrb	r2, [r5, #12]
    796a:	3307      	adds	r3, #7
    796c:	429a      	cmp	r2, r3
    796e:	d00d      	beq.n	798c <event_slave+0x54>
    7970:	4b46      	ldr	r3, [pc, #280]	; (7a8c <event_slave+0x154>)
    7972:	9301      	str	r3, [sp, #4]
    7974:	4b46      	ldr	r3, [pc, #280]	; (7a90 <event_slave+0x158>)
    7976:	9300      	str	r3, [sp, #0]
    7978:	4946      	ldr	r1, [pc, #280]	; (7a94 <event_slave+0x15c>)
    797a:	4b47      	ldr	r3, [pc, #284]	; (7a98 <event_slave+0x160>)
    797c:	4a47      	ldr	r2, [pc, #284]	; (7a9c <event_slave+0x164>)
    797e:	4849      	ldr	r0, [pc, #292]	; (7aa4 <event_slave+0x16c>)
    7980:	f7f9 fc14 	bl	11ac <printk>
    7984:	2100      	movs	r1, #0
    7986:	4608      	mov	r0, r1
    7988:	f004 fe62 	bl	c650 <_SysFatalErrorHandler>
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
    798c:	2303      	movs	r3, #3
    798e:	73ab      	strb	r3, [r5, #14]
	_radio.state = STATE_RX;
    7990:	2301      	movs	r3, #1
    7992:	73eb      	strb	r3, [r5, #15]
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    7994:	f894 3020 	ldrb.w	r3, [r4, #32]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;
    7998:	f8c5 4224 	str.w	r4, [r5, #548]	; 0x224
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    799c:	2600      	movs	r6, #0
	_radio.ticker_id_event =
    799e:	3307      	adds	r3, #7
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
	_radio.packet_counter = 0;
    79a0:	f885 6228 	strb.w	r6, [r5, #552]	; 0x228
	_radio.crc_expire = 0;
    79a4:	f885 6229 	strb.w	r6, [r5, #553]	; 0x229
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
    79a8:	b2db      	uxtb	r3, r3
	LL_ASSERT(_radio.ticker_id_prepare ==
		  (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle));

	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
    79aa:	732e      	strb	r6, [r5, #12]
	_radio.ticker_id_event =
    79ac:	736b      	strb	r3, [r5, #13]
	_radio.packet_counter = 0;
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
    79ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    79b0:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;

	connection_configure(conn);
    79b2:	4620      	mov	r0, r4
	_radio.crc_expire = 0;

	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;
    79b4:	8526      	strh	r6, [r4, #40]	; 0x28
	_radio.role = ROLE_SLAVE;
	_radio.state = STATE_RX;
	_radio.ticker_id_prepare = 0;
	_radio.ticker_id_event =
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
	_radio.ticks_anchor = ticks_at_expire;
    79b6:	f8c5 8004 	str.w	r8, [r5, #4]
	_radio.conn_curr = conn;

	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	connection_configure(conn);
    79ba:	f7ff fef3 	bl	77a4 <connection_configure>

	rx_packet_set(conn, (struct pdu_data *)
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    79be:	f895 224d 	ldrb.w	r2, [r5, #589]	; 0x24d
    79c2:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
    79c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	conn->latency_event = conn->latency_prepare;
	conn->latency_prepare = 0;

	connection_configure(conn);

	rx_packet_set(conn, (struct pdu_data *)
    79ca:	4620      	mov	r0, r4
    79cc:	3108      	adds	r1, #8
    79ce:	f7fd fa87 	bl	4ee0 <rx_packet_set>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);

	radio_switch_complete_and_tx();
    79d2:	f7fb fc3f 	bl	3254 <radio_switch_complete_and_tx>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI)
	radio_rssi_measure();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Setup Radio Channel */
	data_channel_use = channel_calc(&conn->data_channel_use,
    79d6:	7f23      	ldrb	r3, [r4, #28]
    79d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    79da:	7f61      	ldrb	r1, [r4, #29]
    79dc:	9300      	str	r3, [sp, #0]
    79de:	f104 001e 	add.w	r0, r4, #30
    79e2:	f104 0317 	add.w	r3, r4, #23
    79e6:	f7fc fdff 	bl	45e8 <channel_calc>
					conn->data_channel_hop,
					conn->latency_event,
					&conn->data_channel_map[0],
					conn->data_channel_count);
	channel_set(data_channel_use);
    79ea:	f7fd fc9b 	bl	5324 <channel_set>

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    79ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
    79f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
    79f2:	6526      	str	r6, [r4, #80]	; 0x50
					&conn->data_channel_map[0],
					conn->data_channel_count);
	channel_set(data_channel_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    79f4:	4413      	add	r3, r2
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
	    conn->role.slave.window_widening_max_us) {
    79f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
					&conn->data_channel_map[0],
					conn->data_channel_count);
	channel_set(data_channel_use);

	/* current window widening */
	conn->role.slave.window_widening_event_us +=
    79f8:	6563      	str	r3, [r4, #84]	; 0x54
		conn->role.slave.window_widening_prepare_us;
	conn->role.slave.window_widening_prepare_us = 0;
	if (conn->role.slave.window_widening_event_us >
    79fa:	4293      	cmp	r3, r2
	    conn->role.slave.window_widening_max_us) {
		conn->role.slave.window_widening_event_us =
    79fc:	bf88      	it	hi
    79fe:	6562      	strhi	r2, [r4, #84]	; 0x54
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    7a00:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7a02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    7a04:	2000      	movs	r0, #0
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    7a06:	4413      	add	r3, r2
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;

	remainder_us =
    7a08:	f108 0109 	add.w	r1, r8, #9
    7a0c:	68aa      	ldr	r2, [r5, #8]
		conn->role.slave.window_widening_event_us =
			conn->role.slave.window_widening_max_us;
	}

	/* current window size */
	conn->role.slave.window_size_event_us +=
    7a0e:	65e3      	str	r3, [r4, #92]	; 0x5c
		conn->role.slave.window_size_prepare_us;
	conn->role.slave.window_size_prepare_us = 0;
    7a10:	65a0      	str	r0, [r4, #88]	; 0x58

	remainder_us =
    7a12:	f7fb fcbb 	bl	338c <radio_tmr_start>
    7a16:	4605      	mov	r5, r0
		radio_tmr_start(0, ticks_at_expire +
				TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US),
				_radio.remainder_anchor);
	radio_tmr_aa_capture();
    7a18:	f7fb fd40 	bl	349c <radio_tmr_aa_capture>
	radio_tmr_hcto_configure(0 + remainder_us + RADIO_RX_READY_DELAY_US +
    7a1c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    7a20:	33f2      	adds	r3, #242	; 0xf2
    7a22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    7a26:	4428      	add	r0, r5
    7a28:	f7fb fd14 	bl	3454 <radio_tmr_hcto_configure>
				 (conn->role.slave.window_widening_event_us << 1) +
/* +/- 16 us of BLE jitter plus own implementation drift unit of 30.51 us. */
			       (RADIO_TICKER_JITTER_US << 2) +
			       RADIO_PREAMBLE_TO_ADDRESS_US +
			       conn->role.slave.window_size_event_us);
	radio_tmr_end_capture();
    7a2c:	f7fb fd60 	bl	34f0 <radio_tmr_end_capture>

#if (XTAL_ADVANCED && (RADIO_TICKER_PREEMPT_PART_US \
		<= RADIO_TICKER_PREEMPT_PART_MIN_US))
	/* check if preempt to start has changed */
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
    7a30:	f894 1020 	ldrb.w	r1, [r4, #32]
    7a34:	3107      	adds	r1, #7
    7a36:	4620      	mov	r0, r4
    7a38:	4642      	mov	r2, r8
    7a3a:	b2c9      	uxtb	r1, r1
    7a3c:	f7fe fcf4 	bl	6428 <preempt_calc>
    7a40:	4604      	mov	r4, r0
    7a42:	b128      	cbz	r0, 7a50 <event_slave+0x118>
				      conn->handle), ticks_at_expire) != 0) {
		_radio.state = STATE_STOP;
    7a44:	4b10      	ldr	r3, [pc, #64]	; (7a88 <event_slave+0x150>)
    7a46:	2204      	movs	r2, #4
    7a48:	73da      	strb	r2, [r3, #15]
		radio_disable();
    7a4a:	f7fb fb9d 	bl	3188 <radio_disable>
    7a4e:	e015      	b.n	7a7c <event_slave+0x144>
	/* Ticker Job Silence */
#if (RADIO_TICKER_USER_ID_WORKER_PRIO == RADIO_TICKER_USER_ID_JOB_PRIO)
	{
		uint32_t ticker_status;

		ticker_status =
    7a50:	4603      	mov	r3, r0
    7a52:	4a15      	ldr	r2, [pc, #84]	; (7aa8 <event_slave+0x170>)
    7a54:	4601      	mov	r1, r0
    7a56:	f7fc fd51 	bl	44fc <ticker_job_idle_get>
			ticker_job_idle_get(RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    ticker_job_disable, 0);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7a5a:	f030 0302 	bics.w	r3, r0, #2
    7a5e:	d00d      	beq.n	7a7c <event_slave+0x144>
    7a60:	4b0a      	ldr	r3, [pc, #40]	; (7a8c <event_slave+0x154>)
    7a62:	9301      	str	r3, [sp, #4]
    7a64:	4b0a      	ldr	r3, [pc, #40]	; (7a90 <event_slave+0x158>)
    7a66:	9300      	str	r3, [sp, #0]
    7a68:	490a      	ldr	r1, [pc, #40]	; (7a94 <event_slave+0x15c>)
    7a6a:	4b0b      	ldr	r3, [pc, #44]	; (7a98 <event_slave+0x160>)
    7a6c:	4a0b      	ldr	r2, [pc, #44]	; (7a9c <event_slave+0x164>)
    7a6e:	480f      	ldr	r0, [pc, #60]	; (7aac <event_slave+0x174>)
    7a70:	f7f9 fb9c 	bl	11ac <printk>
    7a74:	4621      	mov	r1, r4
    7a76:	4620      	mov	r0, r4
    7a78:	f004 fdea 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    7a7c:	2002      	movs	r0, #2

	DEBUG_RADIO_START_S(0);
}
    7a7e:	46bd      	mov	sp, r7
    7a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			  (ticker_status == TICKER_STATUS_BUSY));
	}
#endif

	/* Route the tx packet to respective connections */
	packet_tx_enqueue(2);
    7a84:	f7fd ba90 	b.w	4fa8 <packet_tx_enqueue>
    7a88:	20000b44 	.word	0x20000b44
    7a8c:	0000dd4e 	.word	0x0000dd4e
    7a90:	0000dd53 	.word	0x0000dd53
    7a94:	0000dd04 	.word	0x0000dd04
    7a98:	0000f0ca 	.word	0x0000f0ca
    7a9c:	0000dcfd 	.word	0x0000dcfd
    7aa0:	0000e83b 	.word	0x0000e83b
    7aa4:	0000e8f3 	.word	0x0000e8f3
    7aa8:	00005ca1 	.word	0x00005ca1
    7aac:	0000e588 	.word	0x0000e588

00007ab0 <mayfly_xtal_start>:
static void mayfly_xtal_start(void *params)
{
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    7ab0:	4b04      	ldr	r3, [pc, #16]	; (7ac4 <mayfly_xtal_start+0x14>)
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    7ab2:	b480      	push	{r7}
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
    7ab4:	6818      	ldr	r0, [r3, #0]
    7ab6:	6843      	ldr	r3, [r0, #4]
    7ab8:	681b      	ldr	r3, [r3, #0]
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_start(void *params)
{
    7aba:	af00      	add	r7, sp, #0
    7abc:	2100      	movs	r1, #0
	ARG_UNUSED(params);

	/* turn on 16MHz clock, non-blocking mode. */
	clock_control_on(_radio.hf_clock, NULL);
}
    7abe:	46bd      	mov	sp, r7
    7ac0:	bc80      	pop	{r7}
    7ac2:	4718      	bx	r3
    7ac4:	20000b44 	.word	0x20000b44

00007ac8 <event_slave_prepare>:
    7ac8:	b480      	push	{r7}
    7aca:	af00      	add	r7, sp, #0
    7acc:	46bd      	mov	sp, r7
    7ace:	bc80      	pop	{r7}
    7ad0:	f7fe bd22 	b.w	6518 <event_connection_prepare>

00007ad4 <mayfly_xtal_stop>:

static void mayfly_xtal_stop(void *params)
{
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    7ad4:	4b04      	ldr	r3, [pc, #16]	; (7ae8 <mayfly_xtal_stop+0x14>)
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    7ad6:	b480      	push	{r7}
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);
    7ad8:	6818      	ldr	r0, [r3, #0]
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->off(dev, sys);
    7ada:	6843      	ldr	r3, [r0, #4]
    7adc:	685b      	ldr	r3, [r3, #4]
				&s_mfy_xtal_start);
	LL_ASSERT(!retval);
}

static void mayfly_xtal_stop(void *params)
{
    7ade:	af00      	add	r7, sp, #0
    7ae0:	2100      	movs	r1, #0
	ARG_UNUSED(params);

	clock_control_off(_radio.hf_clock, NULL);

	DEBUG_RADIO_CLOSE(0);
}
    7ae2:	46bd      	mov	sp, r7
    7ae4:	bc80      	pop	{r7}
    7ae6:	4718      	bx	r3
    7ae8:	20000b44 	.word	0x20000b44
    7aec:	00000000 	.word	0x00000000

00007af0 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    7af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7af4:	b093      	sub	sp, #76	; 0x4c
    7af6:	af0a      	add	r7, sp, #40	; 0x28
	uint8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    7af8:	f7fb fb6c 	bl	31d4 <radio_is_done>
    7afc:	b2c6      	uxtb	r6, r0
	if (trx_done) {
    7afe:	b19e      	cbz	r6, 7b28 <isr+0x38>
		 * and generate the profiling event at the end of the ISR.
		 */
		radio_tmr_sample();
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		crc_ok = radio_crc_is_valid();
    7b00:	f7fb fb8a 	bl	3218 <radio_crc_is_valid>
    7b04:	b2c3      	uxtb	r3, r0
    7b06:	60bb      	str	r3, [r7, #8]
		devmatch_ok = radio_filter_has_match();
    7b08:	f7fb fc12 	bl	3330 <radio_filter_has_match>
    7b0c:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_ok = radio_ar_has_match();
    7b10:	f7fb fdd8 	bl	36c4 <radio_ar_has_match>
    7b14:	fa5f f880 	uxtb.w	r8, r0
		irkmatch_id = radio_ar_match_get();
    7b18:	f7fb fdb6 	bl	3688 <radio_ar_match_get>
    7b1c:	b2c3      	uxtb	r3, r0
    7b1e:	613b      	str	r3, [r7, #16]
		rssi_ready = radio_rssi_is_ready();
    7b20:	f7fb fbca 	bl	32b8 <radio_rssi_is_ready>
    7b24:	b2c5      	uxtb	r5, r0
    7b26:	e005      	b.n	7b34 <isr+0x44>
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		irkmatch_id = 0xFF;
    7b28:	23ff      	movs	r3, #255	; 0xff
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    7b2a:	4635      	mov	r5, r6
		irkmatch_id = 0xFF;
    7b2c:	613b      	str	r3, [r7, #16]
		devmatch_ok = radio_filter_has_match();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    7b2e:	46b0      	mov	r8, r6
    7b30:	46b1      	mov	r9, r6
    7b32:	60be      	str	r6, [r7, #8]
	radio_tmr_status_reset();
	radio_filter_status_reset();
	radio_ar_status_reset();
	radio_rssi_status_reset();

	switch (_radio.state) {
    7b34:	4c6e      	ldr	r4, [pc, #440]	; (7cf0 <isr+0x200>)
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
		irkmatch_id = 0xFF;
	}

	/* Clear radio status and events */
	radio_status_reset();
    7b36:	f7fb fb33 	bl	31a0 <radio_status_reset>
	radio_tmr_status_reset();
    7b3a:	f7fb fc0f 	bl	335c <radio_tmr_status_reset>
	radio_filter_status_reset();
    7b3e:	f7fb fbeb 	bl	3318 <radio_filter_status_reset>
	radio_ar_status_reset();
    7b42:	f7fb fda9 	bl	3698 <radio_ar_status_reset>
	radio_rssi_status_reset();
    7b46:	f7fb fbad 	bl	32a4 <radio_rssi_status_reset>

	switch (_radio.state) {
    7b4a:	7be3      	ldrb	r3, [r4, #15]
    7b4c:	2b05      	cmp	r3, #5
    7b4e:	f201 8753 	bhi.w	99f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19f8>
    7b52:	e8df f013 	tbh	[pc, r3, lsl #1]
    7b56:	0f98      	.short	0x0f98
    7b58:	00060085 	.word	0x00060085
    7b5c:	0d3c0d3c 	.word	0x0d3c0d3c
    7b60:	0d3c      	.short	0x0d3c
	packet_rx_allocate(0xFF);
}

static inline void isr_radio_state_tx(void)
{
	_radio.state = STATE_RX;
    7b62:	2301      	movs	r3, #1
    7b64:	73e3      	strb	r3, [r4, #15]

	radio_switch_complete_and_tx();
    7b66:	f7fb fb75 	bl	3254 <radio_switch_complete_and_tx>

	radio_tmr_hcto_configure(radio_tmr_end_get() +
    7b6a:	f7fb fcd5 	bl	3518 <radio_tmr_end_get>
    7b6e:	30cb      	adds	r0, #203	; 0xcb
    7b70:	f7fb fc70 	bl	3454 <radio_tmr_hcto_configure>
				 RADIO_RX_CHAIN_DELAY_US + RADIO_HCTO_US -
				 RADIO_TX_CHAIN_DELAY_US);

	switch (_radio.role) {
    7b74:	7ba3      	ldrb	r3, [r4, #14]
    7b76:	3b01      	subs	r3, #1
    7b78:	2b03      	cmp	r3, #3
    7b7a:	d86a      	bhi.n	7c52 <isr+0x162>
    7b7c:	e8df f003 	tbb	[pc, r3]
    7b80:	46462802 	.word	0x46462802
	case ROLE_ADV:
		radio_pkt_rx_set(radio_pkt_scratch_get());
    7b84:	f7fb fb56 	bl	3234 <radio_pkt_scratch_get>
    7b88:	f7fb fade 	bl	3148 <radio_pkt_rx_set>

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    7b8c:	f7fb fb1a 	bl	31c4 <radio_is_ready>
    7b90:	b168      	cbz	r0, 7bae <isr+0xbe>
    7b92:	4b58      	ldr	r3, [pc, #352]	; (7cf4 <isr+0x204>)
    7b94:	9301      	str	r3, [sp, #4]
    7b96:	4b58      	ldr	r3, [pc, #352]	; (7cf8 <isr+0x208>)
    7b98:	9300      	str	r3, [sp, #0]
    7b9a:	4958      	ldr	r1, [pc, #352]	; (7cfc <isr+0x20c>)
    7b9c:	4b58      	ldr	r3, [pc, #352]	; (7d00 <isr+0x210>)
    7b9e:	4a59      	ldr	r2, [pc, #356]	; (7d04 <isr+0x214>)
    7ba0:	4859      	ldr	r0, [pc, #356]	; (7d08 <isr+0x218>)
    7ba2:	f7f9 fb03 	bl	11ac <printk>
    7ba6:	2100      	movs	r1, #0
    7ba8:	4608      	mov	r0, r1
    7baa:	f004 fd51 	bl	c650 <_SysFatalErrorHandler>

		if (_radio.advertiser.filter_policy && _radio.nirk) {
    7bae:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    7bb2:	494f      	ldr	r1, [pc, #316]	; (7cf0 <isr+0x200>)
    7bb4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    7bb8:	f000 850f 	beq.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    7bbc:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    7bc0:	2800      	cmp	r0, #0
    7bc2:	f000 850a 	beq.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
			radio_ar_configure(_radio.nirk, _radio.irk);
    7bc6:	3143      	adds	r1, #67	; 0x43
    7bc8:	f7fb fd36 	bl	3638 <radio_ar_configure>
    7bcc:	f000 bd05 	b.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>

		radio_tmr_end_capture();
		break;

	case ROLE_OBS:
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    7bd0:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
    7bd4:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
    7bd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    7bdc:	3008      	adds	r0, #8
    7bde:	f7fb fab3 	bl	3148 <radio_pkt_rx_set>
				    pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    7be2:	f7fb faef 	bl	31c4 <radio_is_ready>
    7be6:	b168      	cbz	r0, 7c04 <isr+0x114>
    7be8:	4b42      	ldr	r3, [pc, #264]	; (7cf4 <isr+0x204>)
    7bea:	9301      	str	r3, [sp, #4]
    7bec:	4b42      	ldr	r3, [pc, #264]	; (7cf8 <isr+0x208>)
    7bee:	9300      	str	r3, [sp, #0]
    7bf0:	4942      	ldr	r1, [pc, #264]	; (7cfc <isr+0x20c>)
    7bf2:	4b43      	ldr	r3, [pc, #268]	; (7d00 <isr+0x210>)
    7bf4:	4a43      	ldr	r2, [pc, #268]	; (7d04 <isr+0x214>)
    7bf6:	4844      	ldr	r0, [pc, #272]	; (7d08 <isr+0x218>)
    7bf8:	f7f9 fad8 	bl	11ac <printk>
    7bfc:	2100      	movs	r1, #0
    7bfe:	4608      	mov	r0, r1
    7c00:	f004 fd26 	bl	c650 <_SysFatalErrorHandler>

		radio_rssi_measure();
    7c04:	f7fb fb3a 	bl	327c <radio_rssi_measure>
    7c08:	f001 bf3d 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>

		/* fall thru */

	case ROLE_SLAVE:
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    7c0c:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
    7c10:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		/* fall thru */

	case ROLE_SLAVE:
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    7c14:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    7c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7c1c:	3108      	adds	r1, #8
    7c1e:	f7fd f95f 	bl	4ee0 <rx_packet_set>
			      packet_rx[_radio.packet_rx_last]->pdu_data);

		/* assert if radio packet ptr is not set and radio started rx */
		LL_ASSERT(!radio_is_ready());
    7c22:	f7fb facf 	bl	31c4 <radio_is_ready>
    7c26:	b168      	cbz	r0, 7c44 <isr+0x154>
    7c28:	4b32      	ldr	r3, [pc, #200]	; (7cf4 <isr+0x204>)
    7c2a:	9301      	str	r3, [sp, #4]
    7c2c:	4b32      	ldr	r3, [pc, #200]	; (7cf8 <isr+0x208>)
    7c2e:	9300      	str	r3, [sp, #0]
    7c30:	4932      	ldr	r1, [pc, #200]	; (7cfc <isr+0x20c>)
    7c32:	4b33      	ldr	r3, [pc, #204]	; (7d00 <isr+0x210>)
    7c34:	4a33      	ldr	r2, [pc, #204]	; (7d04 <isr+0x214>)
    7c36:	4834      	ldr	r0, [pc, #208]	; (7d08 <isr+0x218>)
    7c38:	f7f9 fab8 	bl	11ac <printk>
    7c3c:	2100      	movs	r1, #0
    7c3e:	4608      	mov	r0, r1
    7c40:	f004 fd06 	bl	c650 <_SysFatalErrorHandler>

		radio_tmr_end_capture();
    7c44:	f7fb fc54 	bl	34f0 <radio_tmr_end_capture>
		/* TODO: use timebox for tx enqueue (instead of 1 packet
		 * that is routed, which may not be for the current connection)
		 * try to route as much tx packet in queue into corresponding
		 * connection's tx list.
		 */
		packet_tx_enqueue(1);
    7c48:	2001      	movs	r0, #1
    7c4a:	f7fd f9ad 	bl	4fa8 <packet_tx_enqueue>
    7c4e:	f001 bf1a 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    7c52:	4b28      	ldr	r3, [pc, #160]	; (7cf4 <isr+0x204>)
    7c54:	9301      	str	r3, [sp, #4]
    7c56:	4b28      	ldr	r3, [pc, #160]	; (7cf8 <isr+0x208>)
    7c58:	9300      	str	r3, [sp, #0]
    7c5a:	4b29      	ldr	r3, [pc, #164]	; (7d00 <isr+0x210>)
    7c5c:	f001 bed1 	b.w	9a02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a02>
				      uint8_t devmatch_ok, uint8_t irkmatch_ok,
				      uint8_t irkmatch_id, uint8_t rssi_ready)
{
	uint32_t err;

	if (!((trx_done) || ((SILENT_CONNECTION) &&
    7c60:	b92e      	cbnz	r6, 7c6e <isr+0x17e>
			     (_radio.role == ROLE_SLAVE)))) {
		_radio.state = STATE_CLOSE;
    7c62:	2303      	movs	r3, #3
    7c64:	73e3      	strb	r3, [r4, #15]
		radio_disable();
    7c66:	f7fb fa8f 	bl	3188 <radio_disable>
    7c6a:	f001 bf0c 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
		return;
	}

	switch (_radio.role) {
    7c6e:	7ba3      	ldrb	r3, [r4, #14]
    7c70:	3b01      	subs	r3, #1
    7c72:	2b03      	cmp	r3, #3
    7c74:	f201 84a5 	bhi.w	95c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c2>
    7c78:	e8df f013 	tbh	[pc, r3, lsl #1]
    7c7c:	02340004 	.word	0x02340004
    7c80:	05260526 	.word	0x05260526
	case ROLE_ADV:
		if (crc_ok) {
    7c84:	68bb      	ldr	r3, [r7, #8]
    7c86:	2b00      	cmp	r3, #0
    7c88:	d0eb      	beq.n	7c62 <isr+0x172>
				uint8_t irkmatch_id, uint8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    7c8a:	f7fb fad3 	bl	3234 <radio_pkt_scratch_get>

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    7c8e:	7803      	ldrb	r3, [r0, #0]
    7c90:	f003 030f 	and.w	r3, r3, #15
    7c94:	2b03      	cmp	r3, #3
				uint8_t irkmatch_id, uint8_t rssi_ready)
{
	struct pdu_adv *pdu_adv, *_pdu_adv;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
    7c96:	4606      	mov	r6, r0

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
    7c98:	d138      	bne.n	7d0c <isr+0x21c>
    7c9a:	7843      	ldrb	r3, [r0, #1]
    7c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7ca0:	2b0c      	cmp	r3, #12
    7ca2:	d1de      	bne.n	7c62 <isr+0x172>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    7ca4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
	     (devmatch_ok) || (irkmatch_ok)) &&
    7ca8:	065b      	lsls	r3, r3, #25
    7caa:	d505      	bpl.n	7cb8 <isr+0x1c8>

	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();

	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
	    (((_radio.advertiser.filter_policy & 0x01) == 0) ||
    7cac:	f1b9 0f00 	cmp.w	r9, #0
    7cb0:	d102      	bne.n	7cb8 <isr+0x1c8>
	     (devmatch_ok) || (irkmatch_ok)) &&
    7cb2:	f1b8 0f00 	cmp.w	r8, #0
    7cb6:	d0d4      	beq.n	7c62 <isr+0x172>
	    (1 /** @todo own addr match check */)) {
		_radio.state = STATE_CLOSE;
    7cb8:	2303      	movs	r3, #3
    7cba:	73e3      	strb	r3, [r4, #15]

		radio_switch_complete_and_disable();
    7cbc:	f7fb fad4 	bl	3268 <radio_switch_complete_and_disable>

		/* TODO use rssi_ready to generate proprietary scan_req event */
		ARG_UNUSED(rssi_ready);

		/* use the latest scan data, if any */
		if (_radio.advertiser.scan_data.first != _radio.
    7cc0:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    7cc4:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    7cc8:	429a      	cmp	r2, r3
    7cca:	d006      	beq.n	7cda <isr+0x1ea>
		    advertiser.scan_data.last) {
			uint8_t first;

			first = _radio.advertiser.scan_data.first + 1;
    7ccc:	3301      	adds	r3, #1
    7cce:	b2db      	uxtb	r3, r3
			if (first == DOUBLE_BUFFER_SIZE) {
				first = 0;
    7cd0:	2b02      	cmp	r3, #2
    7cd2:	bf08      	it	eq
    7cd4:	2300      	moveq	r3, #0
			}
			_radio.advertiser.scan_data.first = first;
    7cd6:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		}

		radio_pkt_tx_set(&_radio.advertiser.scan_data.
    7cda:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
    7cde:	2028      	movs	r0, #40	; 0x28
    7ce0:	fb00 4003 	mla	r0, r0, r3, r4
    7ce4:	f200 1059 	addw	r0, r0, #345	; 0x159
    7ce8:	f7fb fa36 	bl	3158 <radio_pkt_tx_set>
    7cec:	f001 becb 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
    7cf0:	20000b44 	.word	0x20000b44
    7cf4:	0000dd4e 	.word	0x0000dd4e
    7cf8:	0000dd53 	.word	0x0000dd53
    7cfc:	0000dd04 	.word	0x0000dd04
    7d00:	0000f056 	.word	0x0000f056
    7d04:	0000dcfd 	.word	0x0000dcfd
    7d08:	0000e943 	.word	0x0000e943
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_REQ) &&
    7d0c:	2b05      	cmp	r3, #5
    7d0e:	d1a8      	bne.n	7c62 <isr+0x172>
    7d10:	7843      	ldrb	r3, [r0, #1]
    7d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d16:	2b22      	cmp	r3, #34	; 0x22
    7d18:	d1a3      	bne.n	7c62 <isr+0x172>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_req)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7d1a:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
		    (devmatch_ok) || (irkmatch_ok)) &&
    7d1e:	09db      	lsrs	r3, r3, #7
    7d20:	d005      	beq.n	7d2e <isr+0x23e>
		     data[_radio.advertiser.scan_data.first][0]);

		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_REQ) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_req)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
    7d22:	f1b9 0f00 	cmp.w	r9, #0
    7d26:	d102      	bne.n	7d2e <isr+0x23e>
		    (devmatch_ok) || (irkmatch_ok)) &&
    7d28:	f1b8 0f00 	cmp.w	r8, #0
    7d2c:	d099      	beq.n	7c62 <isr+0x172>
		   (1 /** @todo own addr match check */) &&
    7d2e:	f894 228e 	ldrb.w	r2, [r4, #654]	; 0x28e
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7d32:	4bd1      	ldr	r3, [pc, #836]	; (8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>)
		return 0;
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_REQ) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_req)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   (1 /** @todo own addr match check */) &&
    7d34:	b12a      	cbz	r2, 7d42 <isr+0x252>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7d36:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c
    7d3a:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
    7d3e:	4293      	cmp	r3, r2
    7d40:	d18f      	bne.n	7c62 <isr+0x172>
    7d42:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		   (_radio.advertiser.conn)) {
    7d46:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_REQ) &&
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_req)) &&
		   (((_radio.advertiser.filter_policy & 0x02) == 0) ||
		    (devmatch_ok) || (irkmatch_ok)) &&
		   (1 /** @todo own addr match check */) &&
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
    7d4a:	2b00      	cmp	r3, #0
    7d4c:	d089      	beq.n	7c62 <isr+0x172>
		uint32_t ticks_slot_offset;
		uint32_t conn_interval_us;
		struct pdu_data *pdu_data;
		struct radio_le_conn_cmplt *radio_le_conn_cmplt;

		 radio_pdu_node_rx = packet_rx_reserve_get(3);
    7d4e:	2003      	movs	r0, #3
    7d50:	f7fc fc98 	bl	4684 <packet_rx_reserve_get>
		 if (radio_pdu_node_rx == 0) {
    7d54:	4682      	mov	sl, r0
    7d56:	2800      	cmp	r0, #0
    7d58:	d083      	beq.n	7c62 <isr+0x172>
			return 1;
		 }

		_radio.state = STATE_STOP;
    7d5a:	f04f 0904 	mov.w	r9, #4
    7d5e:	f888 900f 	strb.w	r9, [r8, #15]
		radio_disable();
    7d62:	f7fb fa11 	bl	3188 <radio_disable>

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
    7d66:	f8d8 51ac 	ldr.w	r5, [r8, #428]	; 0x1ac
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7d6a:	f8d8 1218 	ldr.w	r1, [r8, #536]	; 0x218
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    7d6e:	2300      	movs	r3, #0

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7d70:	f44f 7288 	mov.w	r2, #272	; 0x110
    7d74:	4628      	mov	r0, r5
		_radio.state = STATE_STOP;
		radio_disable();

		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;
    7d76:	f8c8 31ac 	str.w	r3, [r8, #428]	; 0x1ac

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7d7a:	f7fa fefd 	bl	2b78 <mem_index_get>
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
			 &pdu_adv->payload.connect_req.lldata.crc_init[0],
			 3);
		memcpy(&conn->access_addr[0],
    7d7e:	f105 0810 	add.w	r8, r5, #16
		/* acquire the slave context from advertiser */
		conn = _radio.advertiser.conn;
		_radio.advertiser.conn = NULL;

		/* Populate the slave context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    7d82:	8428      	strh	r0, [r5, #32]
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
    7d84:	2203      	movs	r2, #3
    7d86:	f106 0113 	add.w	r1, r6, #19
    7d8a:	f105 0014 	add.w	r0, r5, #20
    7d8e:	f7f9 f866 	bl	e5e <memcpy>
			 &pdu_adv->payload.connect_req.lldata.crc_init[0],
			 3);
		memcpy(&conn->access_addr[0],
			 &pdu_adv->payload.connect_req.lldata.access_addr[0],
			 4);
		memcpy(&conn->data_channel_map[0],
    7d92:	f105 0b17 	add.w	fp, r5, #23
		conn->handle = mem_index_get(conn, _radio.conn_pool,
			CONNECTION_T_SIZE);
		memcpy(&conn->crc_init[0],
			 &pdu_adv->payload.connect_req.lldata.crc_init[0],
			 3);
		memcpy(&conn->access_addr[0],
    7d96:	464a      	mov	r2, r9
    7d98:	f106 010f 	add.w	r1, r6, #15
    7d9c:	4640      	mov	r0, r8
    7d9e:	f7f9 f85e 	bl	e5e <memcpy>
			 &pdu_adv->payload.connect_req.lldata.access_addr[0],
			 4);
		memcpy(&conn->data_channel_map[0],
    7da2:	2205      	movs	r2, #5
    7da4:	f106 011f 	add.w	r1, r6, #31
    7da8:	4658      	mov	r0, fp
    7daa:	f7f9 f858 	bl	e5e <memcpy>
			 &pdu_adv->payload.connect_req.lldata.channel_map[0],
			 sizeof(conn->data_channel_map));
		conn->data_channel_count =
			util_ones_count_get(&conn->data_channel_map[0],
    7dae:	2105      	movs	r1, #5
    7db0:	4658      	mov	r0, fp
    7db2:	f7fa ffdd 	bl	2d70 <util_ones_count_get>
			 &pdu_adv->payload.connect_req.lldata.access_addr[0],
			 4);
		memcpy(&conn->data_channel_map[0],
			 &pdu_adv->payload.connect_req.lldata.channel_map[0],
			 sizeof(conn->data_channel_map));
		conn->data_channel_count =
    7db6:	7728      	strb	r0, [r5, #28]
			util_ones_count_get(&conn->data_channel_map[0],
					sizeof(conn->data_channel_map));
		conn->data_channel_hop =
		    pdu_adv->payload.connect_req.lldata.hop;
    7db8:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    7dbc:	f3c3 0304 	ubfx	r3, r3, #0, #5
			 &pdu_adv->payload.connect_req.lldata.channel_map[0],
			 sizeof(conn->data_channel_map));
		conn->data_channel_count =
			util_ones_count_get(&conn->data_channel_map[0],
					sizeof(conn->data_channel_map));
		conn->data_channel_hop =
    7dc0:	776b      	strb	r3, [r5, #29]
		    pdu_adv->payload.connect_req.lldata.hop;
		conn->conn_interval =
		    pdu_adv->payload.connect_req.lldata.interval;
    7dc2:	f8b6 3019 	ldrh.w	r3, [r6, #25]
		conn->data_channel_count =
			util_ones_count_get(&conn->data_channel_map[0],
					sizeof(conn->data_channel_map));
		conn->data_channel_hop =
		    pdu_adv->payload.connect_req.lldata.hop;
		conn->conn_interval =
    7dc6:	84ab      	strh	r3, [r5, #36]	; 0x24
		    pdu_adv->payload.connect_req.lldata.interval;
		conn_interval_us =
    7dc8:	f8b6 3019 	ldrh.w	r3, [r6, #25]
    7dcc:	f240 4be2 	movw	fp, #1250	; 0x4e2
    7dd0:	fb0b fb03 	mul.w	fp, fp, r3
		    pdu_adv->payload.connect_req.lldata.interval * 1250;
		conn->latency =
		    pdu_adv->payload.connect_req.lldata.latency;
    7dd4:	f8b6 301b 	ldrh.w	r3, [r6, #27]
		    pdu_adv->payload.connect_req.lldata.hop;
		conn->conn_interval =
		    pdu_adv->payload.connect_req.lldata.interval;
		conn_interval_us =
		    pdu_adv->payload.connect_req.lldata.interval * 1250;
		conn->latency =
    7dd8:	84eb      	strh	r3, [r5, #38]	; 0x26
		    pdu_adv->payload.connect_req.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
    7dda:	464a      	mov	r2, r9
    7ddc:	4641      	mov	r1, r8
    7dde:	f105 0060 	add.w	r0, r5, #96	; 0x60
    7de2:	f7f9 f83c 	bl	e5e <memcpy>
			 sizeof(conn->role.slave.force));
		conn->supervision_reload =
    7de6:	f8b6 201d 	ldrh.w	r2, [r6, #29]
    7dea:	f242 7310 	movw	r3, #10000	; 0x2710
    7dee:	4353      	muls	r3, r2

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
						      conn_interval_us);
		conn->appto_reload =
			(conn->apto_reload > (conn->latency + 2)) ?
    7df0:	8cea      	ldrh	r2, [r5, #38]	; 0x26
		    pdu_adv->payload.connect_req.lldata.interval * 1250;
		conn->latency =
		    pdu_adv->payload.connect_req.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
			 sizeof(conn->role.slave.force));
		conn->supervision_reload =
    7df2:	fbb3 f3fb 	udiv	r3, r3, fp
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
						      conn_interval_us);
		conn->appto_reload =
    7df6:	1c91      	adds	r1, r2, #2
		    pdu_adv->payload.connect_req.lldata.interval * 1250;
		conn->latency =
		    pdu_adv->payload.connect_req.lldata.latency;
		memcpy((void *)&conn->role.slave.force, &conn->access_addr[0],
			 sizeof(conn->role.slave.force));
		conn->supervision_reload =
    7df8:	866b      	strh	r3, [r5, #50]	; 0x32
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_req.lldata.timeout
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
    7dfa:	4ba0      	ldr	r3, [pc, #640]	; (807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>)
    7dfc:	fbb3 f3fb 	udiv	r3, r3, fp
    7e00:	86eb      	strh	r3, [r5, #54]	; 0x36
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    7e02:	4b9f      	ldr	r3, [pc, #636]	; (8080 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80>)
    7e04:	fbb3 f3fb 	udiv	r3, r3, fp
    7e08:	b29b      	uxth	r3, r3
						      conn_interval_us);
		conn->appto_reload =
    7e0a:	428b      	cmp	r3, r1
    7e0c:	bfc4      	itt	gt
    7e0e:	f5c2 427f 	rsbgt	r2, r2, #65280	; 0xff00
    7e12:	32fe      	addgt	r2, #254	; 0xfe
					   * 10 * 1000), conn_interval_us);
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
							   conn_interval_us);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    7e14:	87eb      	strh	r3, [r5, #62]	; 0x3e
						      conn_interval_us);
		conn->appto_reload =
    7e16:	bfc4      	itt	gt
    7e18:	189b      	addgt	r3, r3, r2
    7e1a:	b29b      	uxthgt	r3, r3
    7e1c:	876b      	strh	r3, [r5, #58]	; 0x3a
			(conn->apto_reload - (conn->latency + 2)) :
			conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    7e1e:	8c2b      	ldrh	r3, [r5, #32]
    7e20:	f8aa 3006 	strh.w	r3, [sl, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7e24:	2303      	movs	r3, #3

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    7e26:	f04f 0900 	mov.w	r9, #0
			conn->apto_reload;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    7e2a:	f88a 3004 	strb.w	r3, [sl, #4]
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7e2e:	4631      	mov	r1, r6
		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x01;
    7e30:	2301      	movs	r3, #1

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
			(struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    7e32:	f88a 900b 	strb.w	r9, [sl, #11]
		radio_le_conn_cmplt->role = 0x01;
    7e36:	f88a 300c 	strb.w	r3, [sl, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
    7e3a:	f811 3b03 	ldrb.w	r3, [r1], #3
    7e3e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    7e42:	f88a 300d 	strb.w	r3, [sl, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    7e46:	2206      	movs	r2, #6
    7e48:	f10a 000e 	add.w	r0, sl, #14
    7e4c:	f7f9 f807 	bl	e5e <memcpy>
		       &pdu_adv->payload.connect_req.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    7e50:	4631      	mov	r1, r6
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    7e52:	2206      	movs	r2, #6
		radio_le_conn_cmplt->role = 0x01;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv->payload.connect_req.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
    7e54:	f811 3b09 	ldrb.w	r3, [r1], #9
    7e58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    7e5c:	f88a 3014 	strb.w	r3, [sl, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    7e60:	f10a 0015 	add.w	r0, sl, #21
    7e64:	f7f8 fffb 	bl	e5e <memcpy>
		       &pdu_adv->payload.connect_req.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    7e68:	7c3b      	ldrb	r3, [r7, #16]
    7e6a:	f88a 301b 	strb.w	r3, [sl, #27]
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_req.lldata.interval;
    7e6e:	f8b6 3019 	ldrh.w	r3, [r6, #25]
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_req.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
    7e72:	f8aa 301c 	strh.w	r3, [sl, #28]
			pdu_adv->payload.connect_req.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_req.lldata.latency;
    7e76:	f8b6 301b 	ldrh.w	r3, [r6, #27]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
		       &pdu_adv->payload.connect_req.adv_addr[0], BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_req.lldata.interval;
		radio_le_conn_cmplt->latency =
    7e7a:	f8aa 301e 	strh.w	r3, [sl, #30]
			pdu_adv->payload.connect_req.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_req.lldata.timeout;
    7e7e:	f8b6 301d 	ldrh.w	r3, [r6, #29]
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval =
			pdu_adv->payload.connect_req.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_req.lldata.latency;
		radio_le_conn_cmplt->timeout =
    7e82:	f8aa 3020 	strh.w	r3, [sl, #32]
			pdu_adv->payload.connect_req.lldata.timeout;
		radio_le_conn_cmplt->mca =
			pdu_adv->payload.connect_req.lldata.sca;
    7e86:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    7e8a:	f3c3 1342 	ubfx	r3, r3, #5, #3
			pdu_adv->payload.connect_req.lldata.interval;
		radio_le_conn_cmplt->latency =
			pdu_adv->payload.connect_req.lldata.latency;
		radio_le_conn_cmplt->timeout =
			pdu_adv->payload.connect_req.lldata.timeout;
		radio_le_conn_cmplt->mca =
    7e8e:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
			pdu_adv->payload.connect_req.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    7e92:	8c28      	ldrh	r0, [r5, #32]
    7e94:	f7fd fec4 	bl	5c20 <rx_fc_lock>
		packet_rx_enqueue();
    7e98:	f7fd fd90 	bl	59bc <packet_rx_enqueue>

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_req.lldata.sca;
    7e9c:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
    7ea0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    7ea4:	4977      	ldr	r1, [pc, #476]	; (8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>)
		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
		packet_rx_enqueue();

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_req.lldata.sca;
    7ea6:	0952      	lsrs	r2, r2, #5
    7ea8:	f362 0343 	bfi	r3, r2, #1, #3
    7eac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		conn->role.slave.window_widening_periodic_us =
			(((gc_lookup_ppm[_radio.sca] +
    7eb0:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
    7eb4:	f831 8013 	ldrh.w	r8, [r1, r3, lsl #1]
    7eb8:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
    7ebc:	4a72      	ldr	r2, [pc, #456]	; (8088 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88>)
    7ebe:	4443      	add	r3, r8
    7ec0:	fb0b f303 	mul.w	r3, fp, r3
    7ec4:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    7ec8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    7ecc:	fbb3 f3f2 	udiv	r3, r3, r2
		conn->role.slave.window_widening_max_us =
    7ed0:	ea4f 025b 	mov.w	r2, fp, lsr #1
    7ed4:	3a96      	subs	r2, #150	; 0x96
		rx_fc_lock(conn->handle);
		packet_rx_enqueue();

		/* calculate the window widening */
		conn->role.slave.sca = pdu_adv->payload.connect_req.lldata.sca;
		conn->role.slave.window_widening_periodic_us =
    7ed6:	64ab      	str	r3, [r5, #72]	; 0x48
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
    7ed8:	64ea      	str	r2, [r5, #76]	; 0x4c
			(conn_interval_us >> 1) - 150;
		conn->role.slave.window_size_event_us =
    7eda:	7db1      	ldrb	r1, [r6, #22]
			pdu_adv->payload.connect_req.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;
    7edc:	f8c5 9058 	str.w	r9, [r5, #88]	; 0x58
			(((gc_lookup_ppm[_radio.sca] +
			   gc_lookup_ppm[conn->role.slave.sca]) *
			  conn_interval_us) + (1000000 - 1)) / 1000000;
		conn->role.slave.window_widening_max_us =
			(conn_interval_us >> 1) - 150;
		conn->role.slave.window_size_event_us =
    7ee0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    7ee4:	434a      	muls	r2, r1
    7ee6:	65ea      	str	r2, [r5, #92]	; 0x5c
			pdu_adv->payload.connect_req.lldata.win_size * 1250;
		conn->role.slave.window_size_prepare_us = 0;

		/* calculate slave slot */
		conn->hdr.ticks_slot =
    7ee8:	2228      	movs	r2, #40	; 0x28
    7eea:	60ea      	str	r2, [r5, #12]
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   RADIO_RX_READY_DELAY_US + 328 +
					   328 + 150);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    7eec:	f8d4 2290 	ldr.w	r2, [r4, #656]	; 0x290
    7ef0:	606a      	str	r2, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    7ef2:	2127      	movs	r1, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    7ef4:	428a      	cmp	r2, r1
    7ef6:	bf38      	it	cc
    7ef8:	460a      	movcc	r2, r1
			(conn->hdr.ticks_active_to_start <
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
    7efa:	ebc3 080b 	rsb	r8, r3, fp
			conn->role.slave.window_widening_periodic_us;

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7efe:	f240 23eb 	movw	r3, #747	; 0x2eb
		conn->hdr.ticks_slot =
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
					   RADIO_RX_READY_DELAY_US + 328 +
					   328 + 150);
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    7f02:	6029      	str	r1, [r5, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    7f04:	f8c5 9008 	str.w	r9, [r5, #8]
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    7f08:	4692      	mov	sl, r2
			conn->hdr.ticks_active_to_start;
		conn_interval_us -=
			conn->role.slave.window_widening_periodic_us;

		/* Stop Advertiser */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f0a:	9300      	str	r3, [sp, #0]
    7f0c:	2205      	movs	r2, #5
    7f0e:	4b5f      	ldr	r3, [pc, #380]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    7f10:	4649      	mov	r1, r9
    7f12:	4648      	mov	r0, r9
    7f14:	f7fc fa74 	bl	4400 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV,
		     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7f18:	f030 0302 	bics.w	r3, r0, #2
    7f1c:	d00d      	beq.n	7f3a <isr+0x44a>
    7f1e:	4b5c      	ldr	r3, [pc, #368]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    7f20:	9301      	str	r3, [sp, #4]
    7f22:	4b5c      	ldr	r3, [pc, #368]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    7f24:	9300      	str	r3, [sp, #0]
    7f26:	495c      	ldr	r1, [pc, #368]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    7f28:	4b5c      	ldr	r3, [pc, #368]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    7f2a:	4a5d      	ldr	r2, [pc, #372]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7f2c:	485d      	ldr	r0, [pc, #372]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7f2e:	f7f9 f93d 	bl	11ac <printk>
    7f32:	4649      	mov	r1, r9
    7f34:	4648      	mov	r0, r9
    7f36:	f004 fb8b 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));

		/* Stop Direct Adv Stopper */
		_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
    7f3a:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
    7f3e:	2228      	movs	r2, #40	; 0x28
    7f40:	fb02 4303 	mla	r3, r2, r3, r4
			[_radio.advertiser.adv_data.first][0];
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    7f44:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
    7f48:	f003 030f 	and.w	r3, r3, #15
    7f4c:	2b01      	cmp	r3, #1
    7f4e:	d11a      	bne.n	7f86 <isr+0x496>
			ticker_status =
    7f50:	f04f 0900 	mov.w	r9, #0
    7f54:	464b      	mov	r3, r9
    7f56:	f8cd 9000 	str.w	r9, [sp]
    7f5a:	2203      	movs	r2, #3
    7f5c:	4649      	mov	r1, r9
    7f5e:	4648      	mov	r0, r9
    7f60:	f7fc fa4e 	bl	4400 <ticker_stop>
					    RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_ADV_STOP,
					    0, /* @todo ticker_success_assert */
					    0  /* @todo (void *) __LINE__*/);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    7f64:	f030 0302 	bics.w	r3, r0, #2
    7f68:	d00d      	beq.n	7f86 <isr+0x496>
    7f6a:	4b49      	ldr	r3, [pc, #292]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    7f6c:	9301      	str	r3, [sp, #4]
    7f6e:	4b49      	ldr	r3, [pc, #292]	; (8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>)
    7f70:	9300      	str	r3, [sp, #0]
    7f72:	4949      	ldr	r1, [pc, #292]	; (8098 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98>)
    7f74:	4b49      	ldr	r3, [pc, #292]	; (809c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c>)
    7f76:	4a4a      	ldr	r2, [pc, #296]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7f78:	484a      	ldr	r0, [pc, #296]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7f7a:	f7f9 f917 	bl	11ac <printk>
    7f7e:	4649      	mov	r1, r9
    7f80:	4648      	mov	r0, r9
    7f82:	f004 fb65 	bl	c650 <_SysFatalErrorHandler>
				  (ticker_status == TICKER_STATUS_BUSY));
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f86:	f895 3020 	ldrb.w	r3, [r5, #32]
    7f8a:	3307      	adds	r3, #7
    7f8c:	b2db      	uxtb	r3, r3
    7f8e:	60fb      	str	r3, [r7, #12]
    7f90:	6863      	ldr	r3, [r4, #4]
		     + conn->handle, (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(radio_tmr_end_get() -
		      RADIO_TX_CHAIN_DELAY_US + (((uint64_t) pdu_adv->
			payload.connect_req.lldata.win_offset + 1) * 1250) -
		      RADIO_RX_READY_DELAY_US - (RADIO_TICKER_JITTER_US << 1)),
		     TICKER_US_TO_TICKS(conn_interval_us),
    7f92:	4c45      	ldr	r4, [pc, #276]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
				  (ticker_status == TICKER_STATUS_BUSY));
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7f94:	ebca 0303 	rsb	r3, sl, r3
    7f98:	60bb      	str	r3, [r7, #8]
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION
		     + conn->handle, (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(radio_tmr_end_get() -
    7f9a:	f7fb fabd 	bl	3518 <radio_tmr_end_get>
		      RADIO_TX_CHAIN_DELAY_US + (((uint64_t) pdu_adv->
			payload.connect_req.lldata.win_offset + 1) * 1250) -
		      RADIO_RX_READY_DELAY_US - (RADIO_TICKER_JITTER_US << 1)),
		     TICKER_US_TO_TICKS(conn_interval_us),
    7f9e:	fba8 2304 	umull	r2, r3, r8, r4
    7fa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION
		     + conn->handle, (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(radio_tmr_end_get() -
    7fa6:	6078      	str	r0, [r7, #4]
		      RADIO_TX_CHAIN_DELAY_US + (((uint64_t) pdu_adv->
			payload.connect_req.lldata.win_offset + 1) * 1250) -
		      RADIO_RX_READY_DELAY_US - (RADIO_TICKER_JITTER_US << 1)),
		     TICKER_US_TO_TICKS(conn_interval_us),
    7fa8:	a32f      	add	r3, pc, #188	; (adr r3, 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    7faa:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    7fb2:	f7f8 f933 	bl	21c <__aeabi_uldivmod>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
				  (ticker_status == TICKER_STATUS_BUSY));
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fb6:	f240 330b 	movw	r3, #779	; 0x30b
    7fba:	9308      	str	r3, [sp, #32]
    7fbc:	4b33      	ldr	r3, [pc, #204]	; (808c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c>)
    7fbe:	9307      	str	r3, [sp, #28]
    7fc0:	4b3a      	ldr	r3, [pc, #232]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    7fc2:	9506      	str	r5, [sp, #24]
    7fc4:	9305      	str	r3, [sp, #20]
    7fc6:	68eb      	ldr	r3, [r5, #12]
    7fc8:	4a39      	ldr	r2, [pc, #228]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    7fca:	449a      	add	sl, r3
    7fcc:	fa1f f38a 	uxth.w	r3, sl
		     + conn->handle, (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(radio_tmr_end_get() -
		      RADIO_TX_CHAIN_DELAY_US + (((uint64_t) pdu_adv->
			payload.connect_req.lldata.win_offset + 1) * 1250) -
		      RADIO_RX_READY_DELAY_US - (RADIO_TICKER_JITTER_US << 1)),
		     TICKER_US_TO_TICKS(conn_interval_us),
    7fd0:	4680      	mov	r8, r0
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
				  (ticker_status == TICKER_STATUS_BUSY));
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    7fd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
    7fd6:	9304      	str	r3, [sp, #16]
    7fd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    7fdc:	2307      	movs	r3, #7
    7fde:	2100      	movs	r1, #0
    7fe0:	4343      	muls	r3, r0
    7fe2:	fb02 3301 	mla	r3, r2, r1, r3
    7fe6:	fba0 0102 	umull	r0, r1, r0, r2
    7fea:	ebba 0a00 	subs.w	sl, sl, r0
    7fee:	4419      	add	r1, r3
    7ff0:	eb6b 0b01 	sbc.w	fp, fp, r1
    7ff4:	2500      	movs	r5, #0
    7ff6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7ffa:	2300      	movs	r3, #0
    7ffc:	4659      	mov	r1, fp
    7ffe:	4650      	mov	r0, sl
    8000:	9503      	str	r5, [sp, #12]
    8002:	f7f8 f90b 	bl	21c <__aeabi_uldivmod>
    8006:	f028 437f 	bic.w	r3, r8, #4278190080	; 0xff000000
    800a:	9002      	str	r0, [sp, #8]
    800c:	9301      	str	r3, [sp, #4]
		     RADIO_TICKER_USER_ID_WORKER,
		     RADIO_TICKER_ID_FIRST_CONNECTION
		     + conn->handle, (_radio.ticks_anchor - ticks_slot_offset),
		     TICKER_US_TO_TICKS(radio_tmr_end_get() -
    800e:	f8b6 2017 	ldrh.w	r2, [r6, #23]
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
				  (ticker_status == TICKER_STATUS_BUSY));
		}

		/* Start Slave */
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    8012:	b292      	uxth	r2, r2
    8014:	1c50      	adds	r0, r2, #1
    8016:	f04f 0300 	mov.w	r3, #0
    801a:	f240 46e2 	movw	r6, #1250	; 0x4e2
    801e:	f143 0100 	adc.w	r1, r3, #0
    8022:	fba0 2306 	umull	r2, r3, r0, r6
    8026:	fb06 3301 	mla	r3, r6, r1, r3
    802a:	6879      	ldr	r1, [r7, #4]
    802c:	f20f 0940 	addw	r9, pc, #64	; 0x40
    8030:	e9d9 8900 	ldrd	r8, r9, [r9]
    8034:	f101 3bff 	add.w	fp, r1, #4294967295
    8038:	eb12 020b 	adds.w	r2, r2, fp
    803c:	f143 0300 	adc.w	r3, r3, #0
    8040:	fba2 0104 	umull	r0, r1, r2, r4
    8044:	eb10 0008 	adds.w	r0, r0, r8
    8048:	fb04 1103 	mla	r1, r4, r3, r1
    804c:	eb41 0109 	adc.w	r1, r1, r9
    8050:	a305      	add	r3, pc, #20	; (adr r3, 8068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68>)
    8052:	e9d3 2300 	ldrd	r2, r3, [r3]
    8056:	f7f8 f8e1 	bl	21c <__aeabi_uldivmod>
    805a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    805e:	9000      	str	r0, [sp, #0]
    8060:	68bb      	ldr	r3, [r7, #8]
    8062:	68fa      	ldr	r2, [r7, #12]
    8064:	e026      	b.n	80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    8066:	bf00      	nop
    8068:	1afd498d 	.word	0x1afd498d
    806c:	00000007 	.word	0x00000007
    8070:	6b35dc00 	.word	0x6b35dc00
    8074:	ffffffd8 	.word	0xffffffd8
    8078:	20000b44 	.word	0x20000b44
    807c:	02625a00 	.word	0x02625a00
    8080:	01c9c380 	.word	0x01c9c380
    8084:	0000efa2 	.word	0x0000efa2
    8088:	000f4240 	.word	0x000f4240
    808c:	00005c59 	.word	0x00005c59
    8090:	0000dd4e 	.word	0x0000dd4e
    8094:	0000dd53 	.word	0x0000dd53
    8098:	0000dd04 	.word	0x0000dd04
    809c:	0000f0aa 	.word	0x0000f0aa
    80a0:	0000dcfd 	.word	0x0000dcfd
    80a4:	0000e588 	.word	0x0000e588
    80a8:	3b9aca00 	.word	0x3b9aca00
    80ac:	00007ac9 	.word	0x00007ac9
    80b0:	1afd498d 	.word	0x1afd498d
    80b4:	4629      	mov	r1, r5
    80b6:	4628      	mov	r0, r5
    80b8:	f7fc f90e 	bl	42d8 <ticker_start>
		     TICKER_US_TO_TICKS(conn_interval_us),
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
		     (ticks_slot_offset + conn->hdr.ticks_slot),
		     event_slave_prepare, conn, ticker_success_assert,
		     (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    80bc:	f030 0302 	bics.w	r3, r0, #2
    80c0:	f001 84e1 	beq.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
    80c4:	4b7a      	ldr	r3, [pc, #488]	; (82b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b0>)
    80c6:	9301      	str	r3, [sp, #4]
    80c8:	4b7a      	ldr	r3, [pc, #488]	; (82b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b4>)
    80ca:	9300      	str	r3, [sp, #0]
    80cc:	4b7a      	ldr	r3, [pc, #488]	; (82b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2b8>)
    80ce:	497b      	ldr	r1, [pc, #492]	; (82bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2bc>)
    80d0:	4a7b      	ldr	r2, [pc, #492]	; (82c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c0>)
    80d2:	487c      	ldr	r0, [pc, #496]	; (82c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c4>)
    80d4:	f7f9 f86a 	bl	11ac <printk>
    80d8:	4629      	mov	r1, r5
    80da:	4608      	mov	r0, r1
    80dc:	f004 fab8 	bl	c650 <_SysFatalErrorHandler>
    80e0:	f001 bcd1 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
			radio_disable();
		}
		break;

	case ROLE_OBS:
		if ((crc_ok) &&
    80e4:	68bb      	ldr	r3, [r7, #8]
    80e6:	2b00      	cmp	r3, #0
    80e8:	f001 8493 	beq.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		    (((_radio.observer.filter_policy & 0x01) == 0) ||
    80ec:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
			radio_disable();
		}
		break;

	case ROLE_OBS:
		if ((crc_ok) &&
    80f0:	06de      	lsls	r6, r3, #27
    80f2:	d506      	bpl.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
		    (((_radio.observer.filter_policy & 0x01) == 0) ||
    80f4:	f1b9 0f00 	cmp.w	r9, #0
    80f8:	d103      	bne.n	8102 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102>
		     (devmatch_ok) || (irkmatch_ok))) {
    80fa:	f1b8 0f00 	cmp.w	r8, #0
    80fe:	f001 8488 	beq.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
static inline uint32_t isr_rx_obs(uint8_t irkmatch_id, uint8_t rssi_ready)
{
	struct pdu_adv *pdu_adv_rx;
	struct radio_pdu_node_rx *radio_pdu_node_rx;

	radio_pdu_node_rx = packet_rx_reserve_get(3);
    8102:	2003      	movs	r0, #3
    8104:	f7fc fabe 	bl	4684 <packet_rx_reserve_get>

	if (radio_pdu_node_rx == 0) {
    8108:	4683      	mov	fp, r0
    810a:	2800      	cmp	r0, #0
    810c:	f001 8481 	beq.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		return 1;
	}

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
    8110:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    8114:	f894 124d 	ldrb.w	r1, [r4, #589]	; 0x24d
    8118:	4b6b      	ldr	r3, [pc, #428]	; (82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>)
    811a:	f852 8021 	ldr.w	r8, [r2, r1, lsl #2]

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
    811e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210

	if (radio_pdu_node_rx == 0) {
		return 1;
	}

	pdu_adv_rx = (struct pdu_adv *)
    8122:	f108 0908 	add.w	r9, r8, #8
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
    8126:	2a00      	cmp	r2, #0
    8128:	f000 81fd 	beq.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    812c:	f893 228e 	ldrb.w	r2, [r3, #654]	; 0x28e
    8130:	b132      	cbz	r2, 8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
				       (_radio.fc_req == _radio.fc_ack)) &&
    8132:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c

	pdu_adv_rx = (struct pdu_adv *)
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
    8136:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
    813a:	4293      	cmp	r3, r2
    813c:	f040 81f3 	bne.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
				       (_radio.fc_req == _radio.fc_ack)) &&
    8140:	f898 3008 	ldrb.w	r3, [r8, #8]
    8144:	0718      	lsls	r0, r3, #28
    8146:	d007      	beq.n	8158 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x158>
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.observer.filter_policy & 0x01) != 0) ||
	       ((_radio.observer.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.observer.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
    8148:	f898 3008 	ldrb.w	r3, [r8, #8]
    814c:	f003 020f 	and.w	r2, r3, #15
    8150:	2a01      	cmp	r2, #1
    8152:	f040 81e8 	bne.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    8156:	e02c      	b.n	81b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b2>

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
				       (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.observer.filter_policy & 0x01) != 0) ||
    8158:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
				       (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
    815c:	06d1      	lsls	r1, r2, #27
    815e:	d519      	bpl.n	8194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194>
		* is resolvable private address
		*/
	       (((_radio.observer.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40))))) &&
	    ((radio_tmr_end_get() + 502) <
    8160:	f7fb f9da 	bl	3518 <radio_tmr_end_get>
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.observer.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40))))) &&
    8164:	f500 73fb 	add.w	r3, r0, #502	; 0x1f6
    8168:	60fb      	str	r3, [r7, #12]
    816a:	4e58      	ldr	r6, [pc, #352]	; (82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>)
    816c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	    ((radio_tmr_end_get() + 502) <
	     TICKER_TICKS_TO_US(_radio.observer.hdr.ticks_slot))) {
    8170:	f8df a154 	ldr.w	sl, [pc, #340]	; 82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.observer.filter_policy & 0x02) != 0) &&
		(pdu_adv_rx->rx_addr != 0) &&
		((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40))))) &&
    8174:	fba3 0106 	umull	r0, r1, r3, r6
    8178:	2207      	movs	r2, #7
    817a:	fb02 1103 	mla	r1, r2, r3, r1
    817e:	a34a      	add	r3, pc, #296	; (adr r3, 82a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a8>)
    8180:	e9d3 2300 	ldrd	r2, r3, [r3]
    8184:	f7f8 f84a 	bl	21c <__aeabi_uldivmod>
    8188:	68fb      	ldr	r3, [r7, #12]
    818a:	60be      	str	r6, [r7, #8]
    818c:	4283      	cmp	r3, r0
    818e:	f080 81ca 	bcs.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    8192:	e02f      	b.n	81f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f4>

	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
				       (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.observer.filter_policy & 0x01) != 0) ||
    8194:	f3c2 1280 	ubfx	r2, r2, #6, #1
    8198:	f3c3 1380 	ubfx	r3, r3, #6, #1
    819c:	429a      	cmp	r2, r3
    819e:	d1d3      	bne.n	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
	       ((_radio.observer.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.observer.adv_addr[0],
    81a0:	2206      	movs	r2, #6
    81a2:	f108 010b 	add.w	r1, r8, #11
    81a6:	484a      	ldr	r0, [pc, #296]	; (82d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d0>)
    81a8:	f7f8 fe41 	bl	e2e <memcmp>
	/* Initiator */
	if ((_radio.observer.conn) && ((_radio.fc_ena == 0) ||
				       (_radio.fc_req == _radio.fc_ack)) &&
	    (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) &&
	      (((_radio.observer.filter_policy & 0x01) != 0) ||
	       ((_radio.observer.adv_addr_type == pdu_adv_rx->tx_addr) &&
    81ac:	2800      	cmp	r0, #0
    81ae:	d0d7      	beq.n	8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>
    81b0:	e7ca      	b.n	8148 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x148>
		(memcmp(&_radio.observer.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
    81b2:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
	      (((_radio.observer.filter_policy & 0x01) != 0) ||
	       ((_radio.observer.adv_addr_type == pdu_adv_rx->tx_addr) &&
		(memcmp(&_radio.observer.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    81b6:	09db      	lsrs	r3, r3, #7
    81b8:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    81bc:	d004      	beq.n	81c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c8>
			&pdu_adv_rx->payload.direct_ind.init_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.observer.filter_policy & 0x02) != 0) &&
    81be:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.observer.init_addr[0],
			&pdu_adv_rx->payload.direct_ind.init_addr[0],
			BDADDR_SIZE) == 0)) ||
    81c2:	069e      	lsls	r6, r3, #26
    81c4:	d409      	bmi.n	81da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1da>
    81c6:	e1ae      	b.n	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
		(memcmp(&_radio.observer.init_addr[0],
    81c8:	2206      	movs	r2, #6
    81ca:	f108 0111 	add.w	r1, r8, #17
    81ce:	4841      	ldr	r0, [pc, #260]	; (82d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d4>)
    81d0:	f7f8 fe2d 	bl	e2e <memcmp>
		(memcmp(&_radio.observer.adv_addr[0],
			&pdu_adv_rx->payload.adv_ind.addr[0],
			BDADDR_SIZE) == 0)))) ||
	     ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
	      (/* allow directed adv packets addressed to this device */
	       ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
    81d4:	2800      	cmp	r0, #0
    81d6:	d0c3      	beq.n	8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>
    81d8:	e7f1      	b.n	81be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1be>
			&pdu_adv_rx->payload.direct_ind.init_addr[0],
			BDADDR_SIZE) == 0)) ||
	       /* allow directed adv packets where initiator address
		* is resolvable private address
		*/
	       (((_radio.observer.filter_policy & 0x02) != 0) &&
    81da:	f898 3008 	ldrb.w	r3, [r8, #8]
    81de:	0618      	lsls	r0, r3, #24
    81e0:	f140 81a1 	bpl.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
		(pdu_adv_rx->rx_addr != 0) &&
    81e4:	f898 3016 	ldrb.w	r3, [r8, #22]
    81e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    81ec:	2b40      	cmp	r3, #64	; 0x40
    81ee:	f040 819a 	bne.w	8526 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x526>
    81f2:	e7b5      	b.n	8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>
		uint32_t ticker_status;
		uint32_t ticks_slot_offset;
		uint32_t conn_interval_us;
		uint32_t conn_space_us;

		_radio.state = STATE_STOP;
    81f4:	f04f 0904 	mov.w	r9, #4

		/* acquire the master context from observer */
		conn = _radio.observer.conn;
		_radio.observer.conn = NULL;
    81f8:	2300      	movs	r3, #0
		uint32_t conn_space_us;

		_radio.state = STATE_STOP;

		/* acquire the master context from observer */
		conn = _radio.observer.conn;
    81fa:	f8da 5210 	ldr.w	r5, [sl, #528]	; 0x210
		uint32_t ticker_status;
		uint32_t ticks_slot_offset;
		uint32_t conn_interval_us;
		uint32_t conn_space_us;

		_radio.state = STATE_STOP;
    81fe:	f88a 900f 	strb.w	r9, [sl, #15]

		/* acquire the master context from observer */
		conn = _radio.observer.conn;
		_radio.observer.conn = NULL;
    8202:	f8ca 3210 	str.w	r3, [sl, #528]	; 0x210

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    8206:	f7fb f815 	bl	3234 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_REQ;
    820a:	7803      	ldrb	r3, [r0, #0]
    820c:	2205      	movs	r2, #5
    820e:	f362 0303 	bfi	r3, r2, #0, #4
    8212:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
    8214:	f89a 31c0 	ldrb.w	r3, [sl, #448]	; 0x1c0
    8218:	7802      	ldrb	r2, [r0, #0]
    821a:	09db      	lsrs	r3, r3, #7
    821c:	f363 1286 	bfi	r2, r3, #6, #1
    8220:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8222:	f898 3008 	ldrb.w	r3, [r8, #8]
    8226:	b2d2      	uxtb	r2, r2
    8228:	f3c3 1380 	ubfx	r3, r3, #6, #1
    822c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_req);
    8230:	7843      	ldrb	r3, [r0, #1]

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_REQ;
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8232:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_req);
    8234:	2222      	movs	r2, #34	; 0x22
    8236:	f362 0305 	bfi	r3, r2, #0, #6
    823a:	7043      	strb	r3, [r0, #1]
		memcpy(&pdu_adv_tx->payload.connect_req.init_addr[0],
    823c:	1cc3      	adds	r3, r0, #3
		/* acquire the master context from observer */
		conn = _radio.observer.conn;
		_radio.observer.conn = NULL;

		/* Tx the connect request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    823e:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_REQ;
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_req);
		memcpy(&pdu_adv_tx->payload.connect_req.init_addr[0],
    8240:	2206      	movs	r2, #6
    8242:	f20a 11c7 	addw	r1, sl, #455	; 0x1c7
    8246:	4618      	mov	r0, r3
    8248:	607b      	str	r3, [r7, #4]
    824a:	f7f8 fe08 	bl	e5e <memcpy>
		       &_radio.observer.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_req.adv_addr[0],
    824e:	f106 0309 	add.w	r3, r6, #9
    8252:	4618      	mov	r0, r3
    8254:	f108 010b 	add.w	r1, r8, #11
    8258:	2206      	movs	r2, #6
    825a:	60fb      	str	r3, [r7, #12]
    825c:	f7f8 fdff 	bl	e5e <memcpy>
			 &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.connect_req.lldata.
    8260:	464a      	mov	r2, r9
    8262:	f105 0110 	add.w	r1, r5, #16
    8266:	f106 000f 	add.w	r0, r6, #15
    826a:	f7f8 fdf8 	bl	e5e <memcpy>
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_req.lldata.crc_init[0],
    826e:	2203      	movs	r2, #3
    8270:	f105 0114 	add.w	r1, r5, #20
    8274:	f106 0013 	add.w	r0, r6, #19
    8278:	f7f8 fdf1 	bl	e5e <memcpy>
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_req.lldata. win_size = 1;
    827c:	2301      	movs	r3, #1
    827e:	75b3      	strb	r3, [r6, #22]

		conn_interval_us =
    8280:	f8ba 3206 	ldrh.w	r3, [sl, #518]	; 0x206
			(uint32_t)_radio.observer.conn_interval * 1250;
		if (_radio.observer.win_offset_us == 0) {
    8284:	f8da 8214 	ldr.w	r8, [sl, #532]	; 0x214
		       access_addr[0], &conn->access_addr[0], 4);
		memcpy(&pdu_adv_tx->payload.connect_req.lldata.crc_init[0],
		       &conn->crc_init[0], 3);
		pdu_adv_tx->payload.connect_req.lldata. win_size = 1;

		conn_interval_us =
    8288:	f240 49e2 	movw	r9, #1250	; 0x4e2
    828c:	fb09 f903 	mul.w	r9, r9, r3
			(uint32_t)_radio.observer.conn_interval * 1250;
		if (_radio.observer.win_offset_us == 0) {
    8290:	f1b8 0f00 	cmp.w	r8, #0
    8294:	d121      	bne.n	82da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2da>
			conn_space_us = radio_tmr_end_get() -
    8296:	f7fb f93f 	bl	3518 <radio_tmr_end_get>
				RADIO_TX_CHAIN_DELAY_US + 502 + 1250 -
				RADIO_TX_READY_DELAY_US;
			pdu_adv_tx->payload.connect_req.lldata.win_offset = 0;
    829a:	f04f 0300 	mov.w	r3, #0
		pdu_adv_tx->payload.connect_req.lldata. win_size = 1;

		conn_interval_us =
			(uint32_t)_radio.observer.conn_interval * 1250;
		if (_radio.observer.win_offset_us == 0) {
			conn_space_us = radio_tmr_end_get() -
    829e:	f200 684b 	addw	r8, r0, #1611	; 0x64b
				RADIO_TX_CHAIN_DELAY_US + 502 + 1250 -
				RADIO_TX_READY_DELAY_US;
			pdu_adv_tx->payload.connect_req.lldata.win_offset = 0;
    82a2:	75f3      	strb	r3, [r6, #23]
    82a4:	7633      	strb	r3, [r6, #24]
    82a6:	e02c      	b.n	8302 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x302>
    82a8:	3b9aca00 	.word	0x3b9aca00
    82ac:	00000000 	.word	0x00000000
    82b0:	0000dd4e 	.word	0x0000dd4e
    82b4:	0000dd53 	.word	0x0000dd53
    82b8:	0000f0aa 	.word	0x0000f0aa
    82bc:	0000dd04 	.word	0x0000dd04
    82c0:	0000dcfd 	.word	0x0000dcfd
    82c4:	0000e588 	.word	0x0000e588
    82c8:	20000b44 	.word	0x20000b44
    82cc:	1afd498d 	.word	0x1afd498d
    82d0:	20000d05 	.word	0x20000d05
    82d4:	20000d0b 	.word	0x20000d0b
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
			       (conn_space_us < (radio_tmr_end_get() -
						 RADIO_TX_CHAIN_DELAY_US +
						 502 + 1250 -
						 RADIO_TX_READY_DELAY_US))) {
				conn_space_us += conn_interval_us;
    82d8:	44c8      	add	r8, r9
				RADIO_TX_CHAIN_DELAY_US + 502 + 1250 -
				RADIO_TX_READY_DELAY_US;
			pdu_adv_tx->payload.connect_req.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.observer. win_offset_us;
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    82da:	f1b8 0f00 	cmp.w	r8, #0
    82de:	dbfb      	blt.n	82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>
			       (conn_space_us < (radio_tmr_end_get() -
    82e0:	f7fb f91a 	bl	3518 <radio_tmr_end_get>
				RADIO_TX_CHAIN_DELAY_US + 502 + 1250 -
				RADIO_TX_READY_DELAY_US;
			pdu_adv_tx->payload.connect_req.lldata.win_offset = 0;
		} else {
			conn_space_us = _radio.observer. win_offset_us;
			while ((conn_space_us & ((uint32_t)1 << 31)) ||
    82e4:	f200 604b 	addw	r0, r0, #1611	; 0x64b
    82e8:	4580      	cmp	r8, r0
    82ea:	d3f5      	bcc.n	82d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2d8>
						 502 + 1250 -
						 RADIO_TX_READY_DELAY_US))) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_req.lldata. win_offset =
				(conn_space_us - radio_tmr_end_get() +
    82ec:	f7fb f914 	bl	3518 <radio_tmr_end_get>
						 RADIO_TX_CHAIN_DELAY_US +
						 502 + 1250 -
						 RADIO_TX_READY_DELAY_US))) {
				conn_space_us += conn_interval_us;
			}
			pdu_adv_tx->payload.connect_req.lldata. win_offset =
    82f0:	f2a8 634b 	subw	r3, r8, #1611	; 0x64b
    82f4:	1a18      	subs	r0, r3, r0
    82f6:	f240 43e2 	movw	r3, #1250	; 0x4e2
    82fa:	fbb0 f0f3 	udiv	r0, r0, r3
    82fe:	f8a6 0017 	strh.w	r0, [r6, #23]
				(conn_space_us - radio_tmr_end_get() +
				 RADIO_TX_CHAIN_DELAY_US - 502 - 1250 +
				 RADIO_TX_READY_DELAY_US) / 1250;
		}

		pdu_adv_tx->payload.connect_req.lldata.interval =
    8302:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
    8306:	f8a6 3019 	strh.w	r3, [r6, #25]
			_radio.observer.conn_interval;
		pdu_adv_tx->payload.connect_req.lldata.latency =
    830a:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
    830e:	f8a6 301b 	strh.w	r3, [r6, #27]
			_radio.observer.conn_latency;
		pdu_adv_tx->payload.connect_req.lldata.timeout =
    8312:	f8b4 320a 	ldrh.w	r3, [r4, #522]	; 0x20a
    8316:	f8a6 301d 	strh.w	r3, [r6, #29]
			_radio.observer.conn_timeout;
		memcpy(&pdu_adv_tx->payload.connect_req.lldata.channel_map[0],
    831a:	f105 0117 	add.w	r1, r5, #23
    831e:	2205      	movs	r2, #5
    8320:	f106 001f 	add.w	r0, r6, #31
    8324:	f7f8 fd9b 	bl	e5e <memcpy>
		       &conn->data_channel_map[0],
		       sizeof(pdu_adv_tx->payload.connect_req.lldata.channel_map));
		pdu_adv_tx->payload.connect_req.lldata.hop =
    8328:	7f6a      	ldrb	r2, [r5, #29]
    832a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    832e:	f362 0304 	bfi	r3, r2, #0, #5
    8332:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
			conn->data_channel_hop;
		pdu_adv_tx->payload.connect_req.lldata.sca = _radio.sca;
    8336:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    833a:	f362 1347 	bfi	r3, r2, #5, #3
    833e:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24

		radio_switch_complete_and_disable();
    8342:	f7fa ff91 	bl	3268 <radio_switch_complete_and_disable>

		radio_pkt_tx_set(pdu_adv_tx);
    8346:	4630      	mov	r0, r6
    8348:	f7fa ff06 	bl	3158 <radio_pkt_tx_set>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    834c:	f7fa ff3a 	bl	31c4 <radio_is_ready>
    8350:	b168      	cbz	r0, 836e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36e>
    8352:	4bc3      	ldr	r3, [pc, #780]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    8354:	9301      	str	r3, [sp, #4]
    8356:	4bc3      	ldr	r3, [pc, #780]	; (8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>)
    8358:	9300      	str	r3, [sp, #0]
    835a:	49c3      	ldr	r1, [pc, #780]	; (8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>)
    835c:	4bc3      	ldr	r3, [pc, #780]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
    835e:	4ac4      	ldr	r2, [pc, #784]	; (8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>)
    8360:	48c4      	ldr	r0, [pc, #784]	; (8674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x674>)
    8362:	f7f8 ff23 	bl	11ac <printk>
    8366:	2100      	movs	r1, #0
    8368:	4608      	mov	r0, r1
    836a:	f004 f971 	bl	c650 <_SysFatalErrorHandler>

		radio_tmr_end_capture();
    836e:	f7fb f8bf 	bl	34f0 <radio_tmr_end_capture>
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8372:	f44f 7288 	mov.w	r2, #272	; 0x110
    8376:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
    837a:	4628      	mov	r0, r5
    837c:	f7fa fbfc 	bl	2b78 <mem_index_get>

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    8380:	f04f 0a00 	mov.w	sl, #0
		conn->handle = mem_index_get(conn, _radio.conn_pool,
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    8384:	2303      	movs	r3, #3
		 * {cpu_sleep();}
		 * radio_status_reset();
		 */

		/* Populate the master context */
		conn->handle = mem_index_get(conn, _radio.conn_pool,
    8386:	8428      	strh	r0, [r5, #32]
					     CONNECTION_T_SIZE);

		/* Prepare the rx packet structure */
		radio_pdu_node_rx->hdr.handle = conn->handle;
    8388:	f8ab 0006 	strh.w	r0, [fp, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    838c:	f88b 3004 	strb.w	r3, [fp, #4]

		/* prepare connection complete structure */
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
    8390:	f88b a00b 	strb.w	sl, [fp, #11]
		radio_le_conn_cmplt->role = 0x00;
    8394:	f88b a00c 	strb.w	sl, [fp, #12]
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    8398:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    839a:	68f9      	ldr	r1, [r7, #12]
		pdu_data = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
		radio_le_conn_cmplt =
		    (struct radio_le_conn_cmplt *)&pdu_data->payload;
		radio_le_conn_cmplt->status = 0x00;
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
    839c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    83a0:	f88b 300d 	strb.w	r3, [fp, #13]
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
    83a4:	2206      	movs	r2, #6
    83a6:	f10b 000e 	add.w	r0, fp, #14
    83aa:	f7f8 fd58 	bl	e5e <memcpy>
		       &pdu_adv_tx->payload. connect_req.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    83ae:	7833      	ldrb	r3, [r6, #0]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    83b0:	6879      	ldr	r1, [r7, #4]
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload. connect_req.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    83b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    83b6:	2206      	movs	r2, #6
		radio_le_conn_cmplt->role = 0x00;
		radio_le_conn_cmplt->peer_addr_type = pdu_adv_tx->rx_addr;
		memcpy(&radio_le_conn_cmplt->peer_addr[0],
		       &pdu_adv_tx->payload. connect_req.adv_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
    83b8:	f88b 3014 	strb.w	r3, [fp, #20]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
    83bc:	f10b 0015 	add.w	r0, fp, #21
    83c0:	f7f8 fd4d 	bl	e5e <memcpy>
		       &pdu_adv_tx->payload. connect_req.init_addr[0],
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
    83c4:	7c3b      	ldrb	r3, [r7, #16]
    83c6:	f88b 301b 	strb.w	r3, [fp, #27]
		radio_le_conn_cmplt->interval = _radio.observer.conn_interval;
    83ca:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
    83ce:	f8ab 301c 	strh.w	r3, [fp, #28]
		radio_le_conn_cmplt->latency = _radio.observer. conn_latency;
    83d2:	f8b4 3208 	ldrh.w	r3, [r4, #520]	; 0x208
    83d6:	f8ab 301e 	strh.w	r3, [fp, #30]
		radio_le_conn_cmplt->timeout = _radio.observer.conn_timeout;
    83da:	f8b4 320a 	ldrh.w	r3, [r4, #522]	; 0x20a
    83de:	f8ab 3020 	strh.w	r3, [fp, #32]
		radio_le_conn_cmplt->mca =
			pdu_adv_tx->payload.connect_req.lldata.sca;
    83e2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
    83e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
		       BDADDR_SIZE);
		radio_le_conn_cmplt->peer_irk_index = irkmatch_id;
		radio_le_conn_cmplt->interval = _radio.observer.conn_interval;
		radio_le_conn_cmplt->latency = _radio.observer. conn_latency;
		radio_le_conn_cmplt->timeout = _radio.observer.conn_timeout;
		radio_le_conn_cmplt->mca =
    83ea:	f88b 3022 	strb.w	r3, [fp, #34]	; 0x22
			pdu_adv_tx->payload.connect_req.lldata.sca;

		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
    83ee:	8c28      	ldrh	r0, [r5, #32]
    83f0:	f7fd fc16 	bl	5c20 <rx_fc_lock>
		packet_rx_enqueue();
    83f4:	f7fd fae2 	bl	59bc <packet_rx_enqueue>

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.observer.ticks_conn_slot;
    83f8:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    83fc:	f8d4 6290 	ldr.w	r6, [r4, #656]	; 0x290
		/* enqueue connection complete structure into queue */
		rx_fc_lock(conn->handle);
		packet_rx_enqueue();

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.observer.ticks_conn_slot;
    8400:	60eb      	str	r3, [r5, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
    8402:	2327      	movs	r3, #39	; 0x27
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    8404:	429e      	cmp	r6, r3
		rx_fc_lock(conn->handle);
		packet_rx_enqueue();

		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.observer.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
    8406:	606e      	str	r6, [r5, #4]
		conn->hdr.ticks_xtal_to_start =
    8408:	602b      	str	r3, [r5, #0]
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
		ticks_slot_offset =
    840a:	bf38      	it	cc
    840c:	461e      	movcc	r6, r3
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Observer and start Master */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    840e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
		/* Calculate master slot */
		conn->hdr.ticks_slot = _radio.observer.ticks_conn_slot;
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
		conn->hdr.ticks_xtal_to_start =
			TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
		conn->hdr.ticks_preempt_to_start =
    8412:	f8c5 a008 	str.w	sl, [r5, #8]
			 conn->hdr.ticks_xtal_to_start) ?
			conn->hdr.ticks_xtal_to_start :
			conn->hdr.ticks_active_to_start;

		/* Stop Observer and start Master */
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8416:	2206      	movs	r2, #6
    8418:	9300      	str	r3, [sp, #0]
    841a:	4651      	mov	r1, sl
    841c:	4b96      	ldr	r3, [pc, #600]	; (8678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x678>)
    841e:	4650      	mov	r0, sl
    8420:	f7fb ffee 	bl	4400 <ticker_stop>
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_OBS,
					    ticker_success_assert,
					    (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8424:	f030 0302 	bics.w	r3, r0, #2
    8428:	d00d      	beq.n	8446 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x446>
    842a:	4b8d      	ldr	r3, [pc, #564]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    842c:	9301      	str	r3, [sp, #4]
    842e:	4b8d      	ldr	r3, [pc, #564]	; (8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>)
    8430:	9300      	str	r3, [sp, #0]
    8432:	498d      	ldr	r1, [pc, #564]	; (8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>)
    8434:	4b8d      	ldr	r3, [pc, #564]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
    8436:	4a8e      	ldr	r2, [pc, #568]	; (8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>)
    8438:	4890      	ldr	r0, [pc, #576]	; (867c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67c>)
    843a:	f7f8 feb7 	bl	11ac <printk>
    843e:	4651      	mov	r1, sl
    8440:	4650      	mov	r0, sl
    8442:	f004 f905 	bl	c650 <_SysFatalErrorHandler>
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    8446:	f04f 0a00 	mov.w	sl, #0
    844a:	4653      	mov	r3, sl
    844c:	f8cd a000 	str.w	sl, [sp]
    8450:	2204      	movs	r2, #4
    8452:	4651      	mov	r1, sl
    8454:	4650      	mov	r0, sl
    8456:	f7fb ffd3 	bl	4400 <ticker_stop>
				RADIO_TICKER_USER_ID_WORKER,
				RADIO_TICKER_ID_OBS_STOP,
				0,	/* @todo ticker_success_assert */
				0	/* @todo (void *) __LINE__ */);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    845a:	f030 0302 	bics.w	r3, r0, #2
    845e:	d00d      	beq.n	847c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47c>
    8460:	4b7f      	ldr	r3, [pc, #508]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    8462:	9301      	str	r3, [sp, #4]
    8464:	4b7f      	ldr	r3, [pc, #508]	; (8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>)
    8466:	9300      	str	r3, [sp, #0]
    8468:	497f      	ldr	r1, [pc, #508]	; (8668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x668>)
    846a:	4b80      	ldr	r3, [pc, #512]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
    846c:	4a80      	ldr	r2, [pc, #512]	; (8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>)
    846e:	4883      	ldr	r0, [pc, #524]	; (867c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67c>)
    8470:	f7f8 fe9c 	bl	11ac <printk>
    8474:	4651      	mov	r1, sl
    8476:	4650      	mov	r0, sl
    8478:	f004 f8ea 	bl	c650 <_SysFatalErrorHandler>
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    847c:	f8df a20c 	ldr.w	sl, [pc, #524]	; 868c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x68c>
    8480:	fba9 230a 	umull	r2, r3, r9, sl
    8484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    8488:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    848c:	a372      	add	r3, pc, #456	; (adr r3, 8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    848e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8492:	f7f7 fec3 	bl	21c <__aeabi_uldivmod>
				RADIO_TICKER_ID_OBS_STOP,
				0,	/* @todo ticker_success_assert */
				0	/* @todo (void *) __LINE__ */);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    8496:	6863      	ldr	r3, [r4, #4]
    8498:	f895 4020 	ldrb.w	r4, [r5, #32]
    849c:	9506      	str	r5, [sp, #24]
    849e:	1b9b      	subs	r3, r3, r6
    84a0:	60fb      	str	r3, [r7, #12]
    84a2:	f240 33d6 	movw	r3, #982	; 0x3d6
    84a6:	9308      	str	r3, [sp, #32]
    84a8:	4b73      	ldr	r3, [pc, #460]	; (8678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x678>)
    84aa:	9307      	str	r3, [sp, #28]
    84ac:	4b74      	ldr	r3, [pc, #464]	; (8680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x680>)
    84ae:	9305      	str	r3, [sp, #20]
    84b0:	68eb      	ldr	r3, [r5, #12]
    84b2:	68ba      	ldr	r2, [r7, #8]
    84b4:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
    84b8:	441e      	add	r6, r3
    84ba:	2307      	movs	r3, #7
    84bc:	4343      	muls	r3, r0
    84be:	fb02 3301 	mla	r3, r2, r1, r3
				     RADIO_TICKER_USER_ID_WORKER,
				     RADIO_TICKER_ID_FIRST_CONNECTION +
				     conn->handle,
				     (_radio.ticks_anchor - ticks_slot_offset),
				     TICKER_US_TO_TICKS(conn_space_us),
				     TICKER_US_TO_TICKS(conn_interval_us),
    84c2:	4681      	mov	r9, r0
				RADIO_TICKER_ID_OBS_STOP,
				0,	/* @todo ticker_success_assert */
				0	/* @todo (void *) __LINE__ */);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
		ticker_status =
    84c4:	fba0 0102 	umull	r0, r1, r0, r2
    84c8:	ebbb 0b00 	subs.w	fp, fp, r0
    84cc:	4419      	add	r1, r3
    84ce:	eb6c 0c01 	sbc.w	ip, ip, r1
    84d2:	2500      	movs	r5, #0
    84d4:	4661      	mov	r1, ip
    84d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    84da:	2300      	movs	r3, #0
    84dc:	b2b6      	uxth	r6, r6
    84de:	4658      	mov	r0, fp
    84e0:	9604      	str	r6, [sp, #16]
    84e2:	9503      	str	r5, [sp, #12]
    84e4:	f7f7 fe9a 	bl	21c <__aeabi_uldivmod>
    84e8:	a35b      	add	r3, pc, #364	; (adr r3, 8658 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x658>)
    84ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    84ee:	9002      	str	r0, [sp, #8]
    84f0:	fba8 010a 	umull	r0, r1, r8, sl
    84f4:	f8cd 9004 	str.w	r9, [sp, #4]
    84f8:	f7f7 fe90 	bl	21c <__aeabi_uldivmod>
    84fc:	3407      	adds	r4, #7
    84fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8502:	b2e4      	uxtb	r4, r4
    8504:	9000      	str	r0, [sp, #0]
    8506:	68fb      	ldr	r3, [r7, #12]
    8508:	4622      	mov	r2, r4
    850a:	4629      	mov	r1, r5
    850c:	4628      	mov	r0, r5
    850e:	f7fb fee3 	bl	42d8 <ticker_start>
				     TICKER_REMAINDER(conn_interval_us),
				     TICKER_NULL_LAZY,
				     (ticks_slot_offset + conn->hdr.ticks_slot),
				     event_master_prepare, conn,
				     ticker_success_assert, (void *)__LINE__);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    8512:	f030 0302 	bics.w	r3, r0, #2
    8516:	f001 82b6 	beq.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
    851a:	4b51      	ldr	r3, [pc, #324]	; (8660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x660>)
    851c:	9301      	str	r3, [sp, #4]
    851e:	4b51      	ldr	r3, [pc, #324]	; (8664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x664>)
    8520:	9300      	str	r3, [sp, #0]
    8522:	4b52      	ldr	r3, [pc, #328]	; (866c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66c>)
    8524:	e5d3      	b.n	80ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce>

		return 0;
	}

	/* Active scanner */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    8526:	f898 3008 	ldrb.w	r3, [r8, #8]
    852a:	f013 020f 	ands.w	r2, r3, #15
    852e:	d001      	beq.n	8534 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x534>
    8530:	2a06      	cmp	r2, #6
    8532:	d15d      	bne.n	85f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f0>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    8534:	f894 11c0 	ldrb.w	r1, [r4, #448]	; 0x1c0
    8538:	07c9      	lsls	r1, r1, #31
    853a:	d552      	bpl.n	85e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e2>
		 (_radio.observer.scan_type != 0) &&
    853c:	4951      	ldr	r1, [pc, #324]	; (8684 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x684>)
    853e:	f8d1 1210 	ldr.w	r1, [r1, #528]	; 0x210
    8542:	2900      	cmp	r1, #0
    8544:	d14d      	bne.n	85e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e2>
		 (_radio.observer.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;

		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			pdu_adv_rx->len] =
    8546:	f898 6009 	ldrb.w	r6, [r8, #9]
		 (_radio.observer.scan_type != 0) &&
		 (_radio.observer.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;

		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    854a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    854e:	3603      	adds	r6, #3
			pdu_adv_rx->len] =
    8550:	b125      	cbz	r5, 855c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55c>
			(rssi_ready) ? (radio_rssi_get() & 0x7F) : 0x7F;
    8552:	f7fa fe9f 	bl	3294 <radio_rssi_get>
		 (_radio.observer.conn == 0)) {
		struct pdu_adv *pdu_adv_tx;

		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			pdu_adv_rx->len] =
    8556:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    855a:	e000      	b.n	855e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55e>
    855c:	207f      	movs	r0, #127	; 0x7f
    855e:	f809 0006 	strb.w	r0, [r9, r6]
			(rssi_ready) ? (radio_rssi_get() & 0x7F) : 0x7F;

		/* save the adv packet */
		radio_pdu_node_rx->hdr.handle = 0xffff;
    8562:	f64f 73ff 	movw	r3, #65535	; 0xffff
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    8566:	2602      	movs	r6, #2
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			pdu_adv_rx->len] =
			(rssi_ready) ? (radio_rssi_get() & 0x7F) : 0x7F;

		/* save the adv packet */
		radio_pdu_node_rx->hdr.handle = 0xffff;
    8568:	f8ab 3006 	strh.w	r3, [fp, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    856c:	f88b 6004 	strb.w	r6, [fp, #4]
		packet_rx_enqueue();
    8570:	f7fd fa24 	bl	59bc <packet_rx_enqueue>

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    8574:	f7fa fe5e 	bl	3234 <radio_pkt_scratch_get>
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    8578:	7803      	ldrb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    857a:	4943      	ldr	r1, [pc, #268]	; (8688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x688>)
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
		packet_rx_enqueue();

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    857c:	2203      	movs	r2, #3
    857e:	f362 0303 	bfi	r3, r2, #0, #4
    8582:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
    8584:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    8588:	7802      	ldrb	r2, [r0, #0]
    858a:	09db      	lsrs	r3, r3, #7
    858c:	f363 1286 	bfi	r2, r3, #6, #1
    8590:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    8592:	f898 3008 	ldrb.w	r3, [r8, #8]
    8596:	b2d2      	uxtb	r2, r2
    8598:	f3c3 1380 	ubfx	r3, r3, #6, #1
    859c:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    85a0:	7843      	ldrb	r3, [r0, #1]

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
    85a2:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
    85a4:	220c      	movs	r2, #12
    85a6:	f362 0305 	bfi	r3, r2, #0, #6
    85aa:	7043      	strb	r3, [r0, #1]
		radio_pdu_node_rx->hdr.handle = 0xffff;
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
		packet_rx_enqueue();

		/* prepare the scan request packet */
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
    85ac:	4605      	mov	r5, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
		pdu_adv_tx->tx_addr = _radio.observer.init_addr_type;
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
		memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
    85ae:	2206      	movs	r2, #6
    85b0:	3003      	adds	r0, #3
    85b2:	f7f8 fc54 	bl	e5e <memcpy>
		       &_radio.observer.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
    85b6:	2206      	movs	r2, #6
    85b8:	f108 010b 	add.w	r1, r8, #11
    85bc:	f105 0009 	add.w	r0, r5, #9
    85c0:	f7f8 fc4d 	bl	e5e <memcpy>
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.observer.scan_state = 1;
    85c4:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
		_radio.state = STATE_TX;
    85c8:	73e6      	strb	r6, [r4, #15]
		       &_radio.observer.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.observer.scan_state = 1;
    85ca:	4333      	orrs	r3, r6
		_radio.state = STATE_TX;

		radio_pkt_tx_set(pdu_adv_tx);
    85cc:	4628      	mov	r0, r5
		       &_radio.observer.init_addr[0], BDADDR_SIZE);
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
		       &pdu_adv_rx->payload.adv_ind.addr[0], BDADDR_SIZE);

		/* switch scanner state to active */
		_radio.observer.scan_state = 1;
    85ce:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
		_radio.state = STATE_TX;

		radio_pkt_tx_set(pdu_adv_tx);
    85d2:	f7fa fdc1 	bl	3158 <radio_pkt_tx_set>
		radio_switch_complete_and_rx();
    85d6:	f7fa fe33 	bl	3240 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    85da:	f7fa ff89 	bl	34f0 <radio_tmr_end_capture>
    85de:	f001 ba52 	b.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    85e2:	b92a      	cbnz	r2, 85f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f0>
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RESP) &&
		   (_radio.observer.scan_state != 0))) &&
    85e4:	f898 3009 	ldrb.w	r3, [r8, #9]
    85e8:	069a      	lsls	r2, r3, #26
    85ea:	d151      	bne.n	8690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x690>
    85ec:	f001 ba11 	b.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		radio_tmr_end_capture();

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    85f0:	2a01      	cmp	r2, #1
    85f2:	d006      	beq.n	8602 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x602>
		     * is resolvable private address
		     */
		    (((_radio.observer.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    85f4:	f898 3008 	ldrb.w	r3, [r8, #8]
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.observer.filter_policy & 0x02) != 0) &&
		     (pdu_adv_rx->rx_addr != 0) &&
		     ((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40)))) ||
    85f8:	f003 020b 	and.w	r2, r3, #11
    85fc:	2a02      	cmp	r2, #2
    85fe:	d11f      	bne.n	8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>
    8600:	e7f0      	b.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
    8602:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0

		return 0;
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    8606:	09db      	lsrs	r3, r3, #7
    8608:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    860c:	d004      	beq.n	8618 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x618>
			     &pdu_adv_rx->payload.direct_ind.init_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.observer.filter_policy & 0x02) != 0) &&
    860e:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.observer.init_addr[0],
			     &pdu_adv_rx->payload.direct_ind.init_addr[0],
			     BDADDR_SIZE) == 0)) ||
    8612:	069e      	lsls	r6, r3, #26
    8614:	d409      	bmi.n	862a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x62a>
    8616:	e7ed      	b.n	85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
		     (memcmp(&_radio.observer.init_addr[0],
    8618:	2206      	movs	r2, #6
    861a:	f108 0111 	add.w	r1, r8, #17
    861e:	481a      	ldr	r0, [pc, #104]	; (8688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x688>)
    8620:	f7f8 fc05 	bl	e2e <memcmp>
	}
	/* Passive scanner or scan responses */
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
		   (/* allow directed adv packets addressed to this device */
		    ((_radio.observer.init_addr_type == pdu_adv_rx->rx_addr) &&
    8624:	2800      	cmp	r0, #0
    8626:	d0dd      	beq.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
    8628:	e7f1      	b.n	860e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60e>
			     &pdu_adv_rx->payload.direct_ind.init_addr[0],
			     BDADDR_SIZE) == 0)) ||
		    /* allow directed adv packets where initiator address
		     * is resolvable private address
		     */
		    (((_radio.observer.filter_policy & 0x02) != 0) &&
    862a:	f898 3008 	ldrb.w	r3, [r8, #8]
    862e:	0618      	lsls	r0, r3, #24
    8630:	d5e0      	bpl.n	85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
		     (pdu_adv_rx->rx_addr != 0) &&
    8632:	f898 3016 	ldrb.w	r3, [r8, #22]
    8636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    863a:	2b40      	cmp	r3, #64	; 0x40
    863c:	d1da      	bne.n	85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
    863e:	e7d1      	b.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
		     ((pdu_adv_rx->payload.direct_ind.init_addr[5] & 0xc0) == 0x40)))) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
    8640:	f003 030f 	and.w	r3, r3, #15
    8644:	2b04      	cmp	r3, #4
    8646:	f041 81e4 	bne.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RESP) &&
    864a:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    864e:	0799      	lsls	r1, r3, #30
    8650:	d4c8      	bmi.n	85e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5e4>
    8652:	f001 b9de 	b.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
    8656:	bf00      	nop
    8658:	1afd498d 	.word	0x1afd498d
    865c:	00000007 	.word	0x00000007
    8660:	0000dd4e 	.word	0x0000dd4e
    8664:	0000dd53 	.word	0x0000dd53
    8668:	0000dd04 	.word	0x0000dd04
    866c:	0000f200 	.word	0x0000f200
    8670:	0000dcfd 	.word	0x0000dcfd
    8674:	0000e943 	.word	0x0000e943
    8678:	00005c59 	.word	0x00005c59
    867c:	0000e588 	.word	0x0000e588
    8680:	00007441 	.word	0x00007441
    8684:	20000b44 	.word	0x20000b44
    8688:	20000d0b 	.word	0x20000d0b
    868c:	3b9aca00 	.word	0x3b9aca00
		   (_radio.observer.scan_state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.observer.conn)) {
    8690:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
    8694:	2a00      	cmp	r2, #0
    8696:	f041 81bc 	bne.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
    869a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    869e:	1cde      	adds	r6, r3, #3
			pdu_adv_rx->len] =
    86a0:	b125      	cbz	r5, 86ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ac>
			(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
    86a2:	f7fa fdf7 	bl	3294 <radio_rssi_get>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RESP) &&
		   (_radio.observer.scan_state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.observer.conn)) {
		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			pdu_adv_rx->len] =
    86a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    86aa:	e000      	b.n	86ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ae>
    86ac:	207f      	movs	r0, #127	; 0x7f
			(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

		/* save the scan response packet */
		radio_pdu_node_rx->hdr.handle = 0xffff;
    86ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RESP) &&
		   (_radio.observer.scan_state != 0))) &&
		 (pdu_adv_rx->len != 0) && (!_radio.observer.conn)) {
		/* save the RSSI value */
		((uint8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
			pdu_adv_rx->len] =
    86b2:	f809 0006 	strb.w	r0, [r9, r6]
			(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;

		/* save the scan response packet */
		radio_pdu_node_rx->hdr.handle = 0xffff;
    86b6:	f8ab 3006 	strh.w	r3, [fp, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    86ba:	2302      	movs	r3, #2
    86bc:	f88b 3004 	strb.w	r3, [fp, #4]
		packet_rx_enqueue();
    86c0:	f7fd f97c 	bl	59bc <packet_rx_enqueue>
    86c4:	f001 b9a5 	b.w	9a12 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a12>
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    86c8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    86cc:	f894 124d 	ldrb.w	r1, [r4, #589]	; 0x24d
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* Increment packet counter for this connection event */
	_radio.packet_counter++;
    86d0:	4b9e      	ldr	r3, [pc, #632]	; (894c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94c>)
    86d2:	3201      	adds	r2, #1
    86d4:	f884 2228 	strb.w	r2, [r4, #552]	; 0x228

	/* received data packet */
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
    86d8:	f8d4 2248 	ldr.w	r2, [r4, #584]	; 0x248
    86dc:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    86e0:	2201      	movs	r2, #1
    86e2:	7132      	strb	r2, [r6, #4]

	if (crc_ok) {
    86e4:	68ba      	ldr	r2, [r7, #8]
    86e6:	2a00      	cmp	r2, #0
    86e8:	f000 86ee 	beq.w	94c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c8>
	struct pdu_data *pdu_data_tx;
	uint8_t terminate = 0;
	uint8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    86ec:	2000      	movs	r0, #0

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    86ee:	f8d3 5224 	ldr.w	r5, [r3, #548]	; 0x224
	struct pdu_data *pdu_data_tx;
	uint8_t terminate = 0;
	uint8_t nack = 0;

	/* Reset CRC expiry counter */
	_radio.crc_expire = 0;
    86f2:	f883 0229 	strb.w	r0, [r3, #553]	; 0x229

	/* Ack for transmitted data */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
    86f6:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    86fa:	7a31      	ldrb	r1, [r6, #8]
    86fc:	f003 0201 	and.w	r2, r3, #1
    8700:	f3c1 0180 	ubfx	r1, r1, #2, #1
    8704:	4291      	cmp	r1, r2
    8706:	f000 8131 	beq.w	896c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96c>

		/* Increment serial number */
		_radio.conn_curr->sn++;
    870a:	f082 0201 	eor.w	r2, r2, #1
    870e:	f362 0300 	bfi	r3, r2, #0, #1
    8712:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

		if (_radio.conn_curr->empty == 0) {
    8716:	b2db      	uxtb	r3, r3
    8718:	061a      	lsls	r2, r3, #24
    871a:	f100 810c 	bmi.w	8936 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x936>
			struct radio_pdu_node_tx *node_tx;
			uint8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
    871e:	f8d5 80fc 	ldr.w	r8, [r5, #252]	; 0xfc
			pdu_data_tx = (struct pdu_data *)
    8722:	f895 210d 	ldrb.w	r2, [r5, #269]	; 0x10d
				(node_tx->pdu_data +
    8726:	f108 0004 	add.w	r0, r8, #4
		if (_radio.conn_curr->empty == 0) {
			struct radio_pdu_node_tx *node_tx;
			uint8_t pdu_data_tx_len, pdu_data_tx_ll_id;

			node_tx = _radio.conn_curr->pkt_tx_head;
			pdu_data_tx = (struct pdu_data *)
    872a:	eb00 0a02 	add.w	sl, r0, r2
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
    872e:	f89a 9001 	ldrb.w	r9, [sl, #1]
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;

			if (pdu_data_tx_len != 0) {
    8732:	f1b9 0f00 	cmp.w	r9, #0
    8736:	f000 80c4 	beq.w	88c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c2>
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    873a:	5c81      	ldrb	r1, [r0, r2]

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    873c:	069b      	lsls	r3, r3, #26
			pdu_data_tx = (struct pdu_data *)
				(node_tx->pdu_data +
				 _radio.conn_curr->packet_tx_head_offset);

			pdu_data_tx_len = pdu_data_tx->len;
			pdu_data_tx_ll_id = pdu_data_tx->ll_id;
    873e:	f001 0103 	and.w	r1, r1, #3

			if (pdu_data_tx_len != 0) {
				/* if encrypted increment tx counter */
				if (_radio.conn_curr->enc_tx) {
    8742:	d50a      	bpl.n	875a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75a>
					_radio.conn_curr->ccm_tx.counter++;
    8744:	f8d5 20ea 	ldr.w	r2, [r5, #234]	; 0xea
    8748:	f8d5 30ee 	ldr.w	r3, [r5, #238]	; 0xee
    874c:	3201      	adds	r2, #1
    874e:	f143 0300 	adc.w	r3, r3, #0
    8752:	f8c5 20ea 	str.w	r2, [r5, #234]	; 0xea
    8756:	f8c5 30ee 	str.w	r3, [r5, #238]	; 0xee
				}

				/* process ctrl packet on tx cmplt */
				if (pdu_data_tx_ll_id == PDU_DATA_LLID_CTRL) {
    875a:	2903      	cmp	r1, #3
    875c:	f040 80b3 	bne.w	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
static inline uint8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
					  struct radio_pdu_node_tx **node_tx)
{
	uint8_t terminate = 0;

	switch (pdu_data_tx->payload.llctrl.opcode) {
    8760:	f89a 3003 	ldrb.w	r3, [sl, #3]
    8764:	3b02      	subs	r3, #2
    8766:	2b12      	cmp	r3, #18
    8768:	f200 80ad 	bhi.w	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
    876c:	e8df f003 	tbb	[pc, r3]
    8770:	ab7e2a0a 	.word	0xab7e2a0a
    8774:	abababab 	.word	0xabababab
    8778:	85ab4d44 	.word	0x85ab4d44
    877c:	abababab 	.word	0xabababab
    8780:	abab      	.short	0xabab
    8782:	91          	.byte	0x91
    8783:	00          	.byte	0x00
	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		_radio.state = STATE_CLOSE;
    8784:	2303      	movs	r3, #3
    8786:	73e3      	strb	r3, [r4, #15]
		radio_disable();
    8788:	f7fa fcfe 	bl	3188 <radio_disable>

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());
    878c:	f7fa fd1a 	bl	31c4 <radio_is_ready>
    8790:	b168      	cbz	r0, 87ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ae>
    8792:	4b6f      	ldr	r3, [pc, #444]	; (8950 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x950>)
    8794:	9301      	str	r3, [sp, #4]
    8796:	4b6f      	ldr	r3, [pc, #444]	; (8954 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x954>)
    8798:	9300      	str	r3, [sp, #0]
    879a:	496f      	ldr	r1, [pc, #444]	; (8958 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x958>)
    879c:	4b6f      	ldr	r3, [pc, #444]	; (895c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x95c>)
    879e:	4a70      	ldr	r2, [pc, #448]	; (8960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x960>)
    87a0:	4870      	ldr	r0, [pc, #448]	; (8964 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x964>)
    87a2:	f7f8 fd03 	bl	11ac <printk>
    87a6:	2100      	movs	r1, #0
    87a8:	4608      	mov	r0, r1
    87aa:	f003 ff51 	bl	c650 <_SysFatalErrorHandler>

		terminate_ind_rx_enqueue(_radio.conn_curr,
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
    87ae:	f89a 1004 	ldrb.w	r1, [sl, #4]
		radio_disable();

		/* assert if radio packet ptr is not set and radio started tx */
		LL_ASSERT(!radio_is_ready());

		terminate_ind_rx_enqueue(_radio.conn_curr,
    87b2:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    87b6:	2913      	cmp	r1, #19
    87b8:	bf08      	it	eq
    87ba:	2116      	moveq	r1, #22
    87bc:	f7fd f9de 	bl	5b7c <terminate_ind_rx_enqueue>
		      error_code == 0x13) ?  0x16 :
		     pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
		     error_code);

		/* Ack received, hence terminate */
		terminate = 1;
    87c0:	2501      	movs	r5, #1
    87c2:	e081      	b.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    87c4:	2208      	movs	r2, #8
    87c6:	f10a 010e 	add.w	r1, sl, #14
    87ca:	f105 0087 	add.w	r0, r5, #135	; 0x87
    87ce:	f7f8 fb46 	bl	e5e <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    87d2:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    87d6:	2204      	movs	r2, #4
    87d8:	f10a 0116 	add.w	r1, sl, #22
    87dc:	30d2      	adds	r0, #210	; 0xd2
    87de:	f7f8 fb3e 	bl	e5e <memcpy>
		       &pdu_data_tx->payload.llctrl.ctrldata.enc_req.ivm[0],
		       4);

		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    87e2:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    87e6:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    87ea:	f042 0208 	orr.w	r2, r2, #8
    87ee:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    87f2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    87f4:	871a      	strh	r2, [r3, #56]	; 0x38
    87f6:	e066      	b.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
		 */
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		/* pause data packet tx */
		_radio.conn_curr->pause_tx = 1;
    87f8:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8

		/* key refresh */
		_radio.conn_curr->refresh = 1;
    87fc:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    8800:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design).
		 */
		_radio.conn_curr->procedure_expire =
    8804:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    8806:	872b      	strh	r3, [r5, #56]	; 0x38
    8808:	e05d      	b.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
			_radio.conn_curr->procedure_reload;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    880a:	f894 a00e 	ldrb.w	sl, [r4, #14]
    880e:	fa5f fa8a 	uxtb.w	sl, sl
    8812:	f1ba 0f04 	cmp.w	sl, #4
    8816:	d129      	bne.n	886c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86c>
				struct radio_pdu_node_tx *node_tx)
{
	struct pdu_data *pdu_ctrl_tx;

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8818:	f898 3004 	ldrb.w	r3, [r8, #4]
    881c:	f043 0303 	orr.w	r3, r3, #3
    8820:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    8824:	2317      	movs	r3, #23
    8826:	f888 3005 	strb.w	r3, [r8, #5]
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    882a:	2303      	movs	r3, #3
    882c:	f888 3007 	strb.w	r3, [r8, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
    8830:	f105 016d 	add.w	r1, r5, #109	; 0x6d
    8834:	2208      	movs	r2, #8
    8836:	3004      	adds	r0, #4
    8838:	f7f8 fb11 	bl	e5e <memcpy>
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
    883c:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
		+ sizeof(struct pdu_data_llctrl_enc_req);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    8840:	f888 3010 	strb.w	r3, [r8, #16]
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
		conn->llcp.encryption.ediv[1];
    8844:	f895 3076 	ldrb.w	r3, [r5, #118]	; 0x76
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
	       &conn->llcp.encryption.rand[0],
	       sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand));
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
		conn->llcp.encryption.ediv[0];
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    8848:	f888 3011 	strb.w	r3, [r8, #17]
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
    884c:	2208      	movs	r2, #8
    884e:	21cc      	movs	r1, #204	; 0xcc
    8850:	f108 0012 	add.w	r0, r8, #18
    8854:	f7f8 fb30 	bl	eb8 <memset>
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    8858:	f108 001a 	add.w	r0, r8, #26
    885c:	4652      	mov	r2, sl
    885e:	21dd      	movs	r1, #221	; 0xdd
		if (_radio.role == ROLE_MASTER) {
			/* reused tx-ed PDU and send enc req */
			enc_req_reused_send(_radio.conn_curr, *node_tx);

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
    8860:	f04f 0800 	mov.w	r8, #0
		conn->llcp.encryption.ediv[1];
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm[0], 0xcc,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm));
	/** @todo */
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm[0], 0xdd,
    8864:	f7f8 fb28 	bl	eb8 <memset>
}

static inline uint8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
					  struct radio_pdu_node_tx **node_tx)
{
	uint8_t terminate = 0;
    8868:	4645      	mov	r5, r8
    886a:	e02d      	b.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>

			/* dont release ctrl PDU memory */
			*node_tx = NULL;
		} else {
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    886c:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    8870:	f043 0308 	orr.w	r3, r3, #8
    8874:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
    8878:	e025      	b.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    887a:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
		_radio.conn_curr->pause_tx = 0;
    887e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8882:	f36f 03c3 	bfc	r3, #3, #1
    8886:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    888a:	2300      	movs	r3, #0
    888c:	872b      	strh	r3, [r5, #56]	; 0x38
}

static inline uint8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
					  struct radio_pdu_node_tx **node_tx)
{
	uint8_t terminate = 0;
    888e:	461d      	mov	r5, r3
    8890:	e01a      	b.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
		_radio.conn_curr->procedure_expire = 0;
		break;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if ((_radio.conn_curr->llcp_length.req !=
    8892:	f895 20b0 	ldrb.w	r2, [r5, #176]	; 0xb0
    8896:	f895 30b1 	ldrb.w	r3, [r5, #177]	; 0xb1
    889a:	429a      	cmp	r2, r3
    889c:	d013      	beq.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
		     _radio.conn_curr->llcp_length.ack) &&
    889e:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
    88a2:	f003 0203 	and.w	r2, r3, #3
    88a6:	2a01      	cmp	r2, #1
    88a8:	d10d      	bne.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
		    (_radio.conn_curr->llcp_length.state ==
		     LLCP_LENGTH_STATE_ACK_WAIT)){
			/* pause data packet tx */
			_radio.conn_curr->pause_tx = 1;
    88aa:	f895 20b8 	ldrb.w	r2, [r5, #184]	; 0xb8
    88ae:	f042 0208 	orr.w	r2, r2, #8
    88b2:	f885 20b8 	strb.w	r2, [r5, #184]	; 0xb8

			/* wait for response */
			_radio.conn_curr->llcp_length.state =
    88b6:	2202      	movs	r2, #2
    88b8:	f362 0301 	bfi	r3, r2, #0, #2
    88bc:	f885 30b2 	strb.w	r3, [r5, #178]	; 0xb2
    88c0:	e001      	b.n	88c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c6>
isr_rx_conn_pkt(struct radio_pdu_node_rx *radio_pdu_node_rx,
		struct radio_pdu_node_tx **tx_release, uint8_t *rx_enqueue)
{
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t terminate = 0;
    88c2:	464d      	mov	r5, r9
    88c4:	e000      	b.n	88c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c8>
}

static inline uint8_t isr_rx_conn_pkt_ack(struct pdu_data *pdu_data_tx,
					  struct radio_pdu_node_tx **node_tx)
{
	uint8_t terminate = 0;
    88c6:	2500      	movs	r5, #0
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    88c8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    88cc:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
    88d0:	4491      	add	r9, r2
			if (_radio.conn_curr->packet_tx_head_offset ==
    88d2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    88d6:	fa5f f989 	uxtb.w	r9, r9
			if (_radio.conn_curr->packet_tx_head_offset ==
    88da:	454a      	cmp	r2, r9
						isr_rx_conn_pkt_ack(pdu_data_tx,
								    &node_tx);
				}
			}

			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
    88dc:	f883 910d 	strb.w	r9, [r3, #269]	; 0x10d
			if (_radio.conn_curr->packet_tx_head_offset ==
    88e0:	d12e      	bne.n	8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>
{
	_radio.conn_curr->packet_tx_head_len = 0;
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    88e2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
    88e6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    88ea:	2000      	movs	r0, #0
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    88ec:	428a      	cmp	r2, r1
}

static inline struct radio_pdu_node_tx *
isr_rx_conn_pkt_release(struct radio_pdu_node_tx *node_tx)
{
	_radio.conn_curr->packet_tx_head_len = 0;
    88ee:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
	_radio.conn_curr->packet_tx_head_offset = 0;
    88f2:	f883 010d 	strb.w	r0, [r3, #269]	; 0x10d

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
    88f6:	d112      	bne.n	891e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x91e>
		if (node_tx) {
    88f8:	f1b8 0f00 	cmp.w	r8, #0
    88fc:	d020      	beq.n	8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
    88fe:	6811      	ldr	r1, [r2, #0]
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    8900:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	_radio.conn_curr->packet_tx_head_offset = 0;

	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
    8904:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
    8908:	4291      	cmp	r1, r2
	/* release */
	if (_radio.conn_curr->pkt_tx_head == _radio.conn_curr->pkt_tx_ctrl) {
		if (node_tx) {
			_radio.conn_curr->pkt_tx_ctrl =
			    _radio.conn_curr->pkt_tx_ctrl->next;
			_radio.conn_curr->pkt_tx_head =
    890a:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
				_radio.conn_curr->pkt_tx_ctrl;
			if (_radio.conn_curr->pkt_tx_ctrl ==
			    _radio.conn_curr->pkt_tx_data) {
				_radio.conn_curr->pkt_tx_ctrl = NULL;
    890e:	bf08      	it	eq
    8910:	f8c3 0100 	streq.w	r0, [r3, #256]	; 0x100
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
    8914:	4914      	ldr	r1, [pc, #80]	; (8968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x968>)
    8916:	4640      	mov	r0, r8
    8918:	f7fa f909 	bl	2b2e <mem_release>
    891c:	e010      	b.n	8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    891e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    8922:	f8c7 8010 	str.w	r8, [r7, #16]
			}

			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
		}
	} else {
		if (_radio.conn_curr->pkt_tx_head ==
    8926:	428a      	cmp	r2, r1
    8928:	6812      	ldr	r2, [r2, #0]
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
    892a:	bf08      	it	eq
    892c:	f8c3 2104 	streq.w	r2, [r3, #260]	; 0x104
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    8930:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    8934:	e006      	b.n	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
			if (_radio.conn_curr->packet_tx_head_offset ==
			    _radio.conn_curr->packet_tx_head_len) {
				*tx_release = isr_rx_conn_pkt_release(node_tx);
			}
		} else {
			_radio.conn_curr->empty = 0;
    8936:	f360 13c7 	bfi	r3, r0, #7, #1
    893a:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
    893e:	e015      	b.n	896c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96c>

static inline void isr_rx_conn(uint8_t crc_ok, uint8_t trx_done,
			       uint8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    8940:	2300      	movs	r3, #0
    8942:	613b      	str	r3, [r7, #16]
			_radio.conn_curr->empty = 0;
		}
	}

	/* local initiated disconnect procedure completed */
	if (terminate) {
    8944:	2d00      	cmp	r5, #0
    8946:	f040 80b4 	bne.w	8ab2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xab2>
    894a:	e011      	b.n	8970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x970>
    894c:	20000b44 	.word	0x20000b44
    8950:	0000dd4e 	.word	0x0000dd4e
    8954:	0000dd53 	.word	0x0000dd53
    8958:	0000dd04 	.word	0x0000dd04
    895c:	0000ef8d 	.word	0x0000ef8d
    8960:	0000dcfd 	.word	0x0000dcfd
    8964:	0000e943 	.word	0x0000e943
    8968:	20000dac 	.word	0x20000dac
		if (_radio.conn_curr->pkt_tx_head ==
		    _radio.conn_curr->pkt_tx_data) {
			_radio.conn_curr->pkt_tx_data =
				_radio.conn_curr->pkt_tx_data->next;
		}
		_radio.conn_curr->pkt_tx_head =
    896c:	2300      	movs	r3, #0
    896e:	613b      	str	r3, [r7, #16]

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8970:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8974:	7a32      	ldrb	r2, [r6, #8]
    8976:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    897a:	4dbf      	ldr	r5, [pc, #764]	; (8c78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc78>)
    897c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8980:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8984:	429a      	cmp	r2, r3
    8986:	f040 85b4 	bne.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    898a:	2003      	movs	r0, #3
    898c:	f7fb fe7a 	bl	4684 <packet_rx_reserve_get>

		return terminate;
	}

	/* process received data */
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
    8990:	2800      	cmp	r0, #0
    8992:	f000 85ae 	beq.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
    8996:	f895 328e 	ldrb.w	r3, [r5, #654]	; 0x28e
    899a:	b3a3      	cbz	r3, 8a06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa06>
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    899c:	f8d5 2258 	ldr.w	r2, [r5, #600]	; 0x258
    89a0:	f8d5 325c 	ldr.w	r3, [r5, #604]	; 0x25c
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
    89a4:	429a      	cmp	r2, r3
    89a6:	d105      	bne.n	89b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9b4>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    89a8:	f895 328c 	ldrb.w	r3, [r5, #652]	; 0x28c
	/* check so that we will NEVER use the rx buffer reserved for empty
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
    89ac:	f895 128d 	ldrb.w	r1, [r5, #653]	; 0x28d
    89b0:	4299      	cmp	r1, r3
    89b2:	d028      	beq.n	8a06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa06>
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    89b4:	f8d4 125c 	ldr.w	r1, [r4, #604]	; 0x25c
    89b8:	4baf      	ldr	r3, [pc, #700]	; (8c78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc78>)
	 * packet and internal control enqueue
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
    89ba:	428a      	cmp	r2, r1
    89bc:	f000 8599 	beq.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    89c0:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c
	 */
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
    89c4:	f893 128d 	ldrb.w	r1, [r3, #653]	; 0x28d
    89c8:	4291      	cmp	r1, r2
    89ca:	f000 8592 	beq.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    89ce:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c
	    (packet_rx_reserve_get(3) != 0) &&
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
    89d2:	b932      	cbnz	r2, 89e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e2>
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    89d4:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	    ((_radio.fc_ena == 0) ||
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
    89d8:	f8b3 228a 	ldrh.w	r2, [r3, #650]	; 0x28a
    89dc:	8c0b      	ldrh	r3, [r1, #32]
    89de:	429a      	cmp	r2, r3
    89e0:	d011      	beq.n	8a06 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa06>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    89e2:	f894 328c 	ldrb.w	r3, [r4, #652]	; 0x28c
    89e6:	4aa4      	ldr	r2, [pc, #656]	; (8c78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc78>)
	      (_radio.fc_req == _radio.fc_ack)) ||
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
    89e8:	2b00      	cmp	r3, #0
    89ea:	f000 8582 	beq.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    89ee:	f892 328c 	ldrb.w	r3, [r2, #652]	; 0x28c
		   _radio.conn_curr->handle)))))) {
    89f2:	f8d2 1224 	ldr.w	r1, [r2, #548]	; 0x224
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
    89f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
	      (_radio.fc_req != _radio.fc_ack) &&
		(((_radio.fc_req == 0) &&
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
    89fa:	f8b3 2284 	ldrh.w	r2, [r3, #644]	; 0x284
    89fe:	8c0b      	ldrh	r3, [r1, #32]
    8a00:	429a      	cmp	r2, r3
    8a02:	f040 8576 	bne.w	94f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f2>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		uint8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    8a06:	7a71      	ldrb	r1, [r6, #9]
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    8a08:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		uint8_t ccm_rx_increment = 0;

		if (pdu_data_rx->len != 0) {
    8a0c:	2900      	cmp	r1, #0
    8a0e:	f000 8531 	beq.w	9474 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1474>
			/* If required, wait for CCM to finish
			 */
			if (_radio.conn_curr->enc_rx) {
    8a12:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    8a16:	f003 0310 	and.w	r3, r3, #16
    8a1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    8a1e:	b193      	cbz	r3, 8a46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa46>
				uint32_t done;

				done = radio_ccm_is_done();
    8a20:	f7fa fde2 	bl	35e8 <radio_ccm_is_done>
				LL_ASSERT(done);
    8a24:	4605      	mov	r5, r0
    8a26:	b980      	cbnz	r0, 8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
    8a28:	4b94      	ldr	r3, [pc, #592]	; (8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>)
    8a2a:	9301      	str	r3, [sp, #4]
    8a2c:	4b94      	ldr	r3, [pc, #592]	; (8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>)
    8a2e:	9300      	str	r3, [sp, #0]
    8a30:	4a94      	ldr	r2, [pc, #592]	; (8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>)
    8a32:	4b95      	ldr	r3, [pc, #596]	; (8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>)
    8a34:	4995      	ldr	r1, [pc, #596]	; (8c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8c>)
    8a36:	4896      	ldr	r0, [pc, #600]	; (8c90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc90>)
    8a38:	f7f8 fbb8 	bl	11ac <printk>
    8a3c:	4629      	mov	r1, r5
    8a3e:	4628      	mov	r0, r5
    8a40:	f003 fe06 	bl	c650 <_SysFatalErrorHandler>
    8a44:	e001      	b.n	8a4a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4a>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		uint8_t ccm_rx_increment = 0;
    8a46:	60fa      	str	r2, [r7, #12]
    8a48:	e001      	b.n	8a4e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4e>
				uint32_t done;

				done = radio_ccm_is_done();
				LL_ASSERT(done);

				ccm_rx_increment = 1;
    8a4a:	2301      	movs	r3, #1
    8a4c:	60fb      	str	r3, [r7, #12]
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    8a4e:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8a52:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    8a56:	06dd      	lsls	r5, r3, #27
    8a58:	d406      	bmi.n	8a68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa68>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    8a5a:	f8d4 a224 	ldr.w	sl, [r4, #548]	; 0x224
				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
    8a5e:	f89a 30b8 	ldrb.w	r3, [sl, #184]	; 0xb8
    8a62:	0758      	lsls	r0, r3, #29
    8a64:	d41a      	bmi.n	8a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa9c>
    8a66:	e032      	b.n	8ace <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xace>
    8a68:	f7fa fdde 	bl	3628 <radio_ccm_mic_is_valid>

				ccm_rx_increment = 1;
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
    8a6c:	2800      	cmp	r0, #0
    8a6e:	d1f4      	bne.n	8a5a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa5a>
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
			     (pdu_data_rx->ll_id != PDU_DATA_LLID_CTRL))) {
				_radio.state = STATE_CLOSE;
    8a70:	2303      	movs	r3, #3
    8a72:	73e3      	strb	r3, [r4, #15]
				radio_disable();
    8a74:	f7fa fb88 	bl	3188 <radio_disable>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());
    8a78:	f7fa fba4 	bl	31c4 <radio_is_ready>
    8a7c:	b1a0      	cbz	r0, 8aa8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa8>
    8a7e:	4b7f      	ldr	r3, [pc, #508]	; (8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>)
    8a80:	9301      	str	r3, [sp, #4]
    8a82:	4b7f      	ldr	r3, [pc, #508]	; (8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>)
    8a84:	9300      	str	r3, [sp, #0]
    8a86:	4a7f      	ldr	r2, [pc, #508]	; (8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>)
    8a88:	4b7f      	ldr	r3, [pc, #508]	; (8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>)
    8a8a:	4980      	ldr	r1, [pc, #512]	; (8c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8c>)
    8a8c:	4881      	ldr	r0, [pc, #516]	; (8c94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc94>)
    8a8e:	f7f8 fb8d 	bl	11ac <printk>
    8a92:	2100      	movs	r1, #0
    8a94:	4608      	mov	r0, r1
    8a96:	f003 fddb 	bl	c650 <_SysFatalErrorHandler>
    8a9a:	e005      	b.n	8aa8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xaa8>
			}

			/* MIC Failure Check or data rx during pause */
			if (((_radio.conn_curr->enc_rx)	&&
			     !radio_ccm_mic_is_valid()) ||
			    ((_radio.conn_curr->pause_rx) &&
    8a9c:	7a33      	ldrb	r3, [r6, #8]
    8a9e:	f003 0303 	and.w	r3, r3, #3
    8aa2:	2b03      	cmp	r3, #3
    8aa4:	d1e4      	bne.n	8a70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa70>
    8aa6:	e012      	b.n	8ace <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xace>

				/* assert if radio packet ptr is not set and
				 * radio started tx */
				LL_ASSERT(!radio_is_ready());

				terminate_ind_rx_enqueue(_radio.conn_curr,
    8aa8:	213d      	movs	r1, #61	; 0x3d
    8aaa:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8aae:	f7fd f865 	bl	5b7c <terminate_ind_rx_enqueue>
							 0x3d);

				connection_release(_radio.conn_curr);
    8ab2:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8ab6:	f7fc facb 	bl	5050 <connection_release>
				_radio.conn_curr = NULL;
    8aba:	2300      	movs	r3, #0
    8abc:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    8ac0:	693b      	ldr	r3, [r7, #16]
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	f000 87df 	beq.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
    8ac8:	2500      	movs	r5, #0
    8aca:	f000 bd65 	b.w	9598 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1598>
				return 1; /* terminated */
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
			/* stop authenticated payload (pre) timeout */
			_radio.conn_curr->appto_expire = 0;
    8ace:	2500      	movs	r5, #0
    8ad0:	f8aa 503c 	strh.w	r5, [sl, #60]	; 0x3c
			_radio.conn_curr->apto_expire = 0;
    8ad4:	f8aa 5040 	strh.w	r5, [sl, #64]	; 0x40
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			switch (pdu_data_rx->ll_id) {
    8ad8:	7a33      	ldrb	r3, [r6, #8]
    8ada:	f013 0303 	ands.w	r3, r3, #3
    8ade:	f000 84ba 	beq.w	9456 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1456>
    8ae2:	2b02      	cmp	r3, #2
    8ae4:	f240 816a 	bls.w	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
{
	struct pdu_data *pdu_data_rx;
	uint8_t nack = 0;

	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
    8ae8:	f896 900b 	ldrb.w	r9, [r6, #11]
    8aec:	f1b9 0f15 	cmp.w	r9, #21
    8af0:	f200 848f 	bhi.w	9412 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1412>
    8af4:	e8df f019 	tbh	[pc, r9, lsl #1]
    8af8:	00860016 	.word	0x00860016
    8afc:	00da00bc 	.word	0x00da00bc
    8b00:	010a00f4 	.word	0x010a00f4
    8b04:	0372012a 	.word	0x0372012a
    8b08:	018d0164 	.word	0x018d0164
    8b0c:	01a00194 	.word	0x01a00194
    8b10:	022801bb 	.word	0x022801bb
    8b14:	02340164 	.word	0x02340164
    8b18:	02fb079b 	.word	0x02fb079b
    8b1c:	036e0352 	.word	0x036e0352
    8b20:	03a403a4 	.word	0x03a403a4
}

static uint32_t conn_update(struct connection *conn,
			    struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.instant -
    8b24:	f8b6 3015 	ldrh.w	r3, [r6, #21]
    8b28:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    8b2c:	1a9b      	subs	r3, r3, r2
    8b2e:	b29b      	uxth	r3, r3
    8b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    8b34:	f280 8778 	bge.w	9a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a28>
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
		return 1;
	}

	LL_ASSERT((conn->llcp_req == conn->llcp_ack) ||
    8b38:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
    8b3c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
    8b40:	429a      	cmp	r2, r3
    8b42:	d017      	beq.n	8b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb74>
    8b44:	f89a 306a 	ldrb.w	r3, [sl, #106]	; 0x6a
    8b48:	2b01      	cmp	r3, #1
    8b4a:	d105      	bne.n	8b58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb58>
    8b4c:	f89a 3095 	ldrb.w	r3, [sl, #149]	; 0x95
    8b50:	f003 0307 	and.w	r3, r3, #7
    8b54:	2b05      	cmp	r3, #5
    8b56:	d00d      	beq.n	8b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb74>
    8b58:	4b48      	ldr	r3, [pc, #288]	; (8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>)
    8b5a:	9301      	str	r3, [sp, #4]
    8b5c:	4b48      	ldr	r3, [pc, #288]	; (8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>)
    8b5e:	9300      	str	r3, [sp, #0]
    8b60:	494a      	ldr	r1, [pc, #296]	; (8c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8c>)
    8b62:	4b4d      	ldr	r3, [pc, #308]	; (8c98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc98>)
    8b64:	4a47      	ldr	r2, [pc, #284]	; (8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>)
    8b66:	484d      	ldr	r0, [pc, #308]	; (8c9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc9c>)
    8b68:	f7f8 fb20 	bl	11ac <printk>
    8b6c:	2100      	movs	r1, #0
    8b6e:	4608      	mov	r0, r1
    8b70:	f003 fd6e 	bl	c650 <_SysFatalErrorHandler>
		    LLCP_CONN_STATE_RSP_WAIT)));

	/* set mutex, if only not already set. As a master the mutex shall
	 * be set, but a slave we accept it as new 'set' of mutex.
	 */
	if (_radio.conn_upd == 0) {
    8b74:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    8b78:	b9a3      	cbnz	r3, 8ba4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba4>
		LL_ASSERT(conn->role.slave.role != 0);
    8b7a:	f89a 1044 	ldrb.w	r1, [sl, #68]	; 0x44
    8b7e:	f011 0501 	ands.w	r5, r1, #1
    8b82:	d10d      	bne.n	8ba0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xba0>
    8b84:	4b3d      	ldr	r3, [pc, #244]	; (8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>)
    8b86:	9301      	str	r3, [sp, #4]
    8b88:	4b3d      	ldr	r3, [pc, #244]	; (8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>)
    8b8a:	9300      	str	r3, [sp, #0]
    8b8c:	493f      	ldr	r1, [pc, #252]	; (8c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8c>)
    8b8e:	4b42      	ldr	r3, [pc, #264]	; (8c98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc98>)
    8b90:	4a3c      	ldr	r2, [pc, #240]	; (8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>)
    8b92:	4843      	ldr	r0, [pc, #268]	; (8ca0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca0>)
    8b94:	f7f8 fb0a 	bl	11ac <printk>
    8b98:	4629      	mov	r1, r5
    8b9a:	4628      	mov	r0, r5
    8b9c:	f003 fd58 	bl	c650 <_SysFatalErrorHandler>

		_radio.conn_upd = conn;
    8ba0:	f8c4 a294 	str.w	sl, [r4, #660]	; 0x294
	}

	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_size;
    8ba4:	7b33      	ldrb	r3, [r6, #12]
		LL_ASSERT(conn->role.slave.role != 0);

		_radio.conn_upd = conn;
	}

	conn->llcp.connection_update.win_size =
    8ba6:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_size;
	conn->llcp.connection_update.win_offset_us =
    8baa:	f8b6 200d 	ldrh.w	r2, [r6, #13]
    8bae:	f240 43e2 	movw	r3, #1250	; 0x4e2
    8bb2:	4353      	muls	r3, r2
    8bb4:	f8ca 308c 	str.w	r3, [sl, #140]	; 0x8c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.interval;
    8bb8:	f8b6 300f 	ldrh.w	r3, [r6, #15]
	conn->llcp.connection_update.win_size =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_size;
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_offset *
		1250;
	conn->llcp.connection_update.interval =
    8bbc:	f8aa 306c 	strh.w	r3, [sl, #108]	; 0x6c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.latency;
    8bc0:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	conn->llcp.connection_update.win_offset_us =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.win_offset *
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.interval;
	conn->llcp.connection_update.latency =
    8bc4:	f8aa 306e 	strh.w	r3, [sl, #110]	; 0x6e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.timeout;
    8bc8:	f8b6 3013 	ldrh.w	r3, [r6, #19]
		1250;
	conn->llcp.connection_update.interval =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.latency;
	conn->llcp.connection_update.timeout =
    8bcc:	f8aa 3070 	strh.w	r3, [sl, #112]	; 0x70
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.timeout;
	conn->llcp.connection_update.instant =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.instant;
    8bd0:	f8b6 3015 	ldrh.w	r3, [r6, #21]
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.interval;
	conn->llcp.connection_update.latency =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.latency;
	conn->llcp.connection_update.timeout =
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.timeout;
	conn->llcp.connection_update.instant =
    8bd4:	f8aa 3074 	strh.w	r3, [sl, #116]	; 0x74
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_req.instant;
	conn->llcp.connection_update.state = LLCP_CONN_STATE_INPROG;
    8bd8:	f89a 3095 	ldrb.w	r3, [sl, #149]	; 0x95
	conn->llcp.connection_update.is_internal = 0;
    8bdc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    8be0:	f36f 03c4 	bfc	r3, #3, #2
    8be4:	f88a 3095 	strb.w	r3, [sl, #149]	; 0x95

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    8be8:	2301      	movs	r3, #1
    8bea:	f88a 306a 	strb.w	r3, [sl, #106]	; 0x6a
	conn->llcp_ack--;
    8bee:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
    8bf2:	3b01      	subs	r3, #1
    8bf4:	f88a 3069 	strb.w	r3, [sl, #105]	; 0x69
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	switch (pdu_data_rx->payload.llctrl.opcode) {
	case PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_REQ:
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
			/* conn param req procedure, if any, is complete */
			_radio.conn_curr->procedure_expire = 0;
    8bf8:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8bfc:	2500      	movs	r5, #0
    8bfe:	871d      	strh	r5, [r3, #56]	; 0x38
    8c00:	f000 bc4c 	b.w	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
}

static uint32_t channel_map_update(struct connection *conn,
				   struct pdu_data *pdu_data_rx)
{
	if (((pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.instant -
    8c04:	f8b6 3011 	ldrh.w	r3, [r6, #17]
    8c08:	f8ba 2022 	ldrh.w	r2, [sl, #34]	; 0x22
    8c0c:	1a9b      	subs	r3, r3, r2
    8c0e:	b29b      	uxth	r3, r3
    8c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    8c14:	f280 8708 	bge.w	9a28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a28>
	      conn->event_counter) & 0xffff) > 0x7fff) {
		return 1;
	}

	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
    8c18:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
    8c1c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
    8c20:	429a      	cmp	r2, r3
    8c22:	d00d      	beq.n	8c40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc40>
    8c24:	4b15      	ldr	r3, [pc, #84]	; (8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>)
    8c26:	9301      	str	r3, [sp, #4]
    8c28:	4b15      	ldr	r3, [pc, #84]	; (8c80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc80>)
    8c2a:	9300      	str	r3, [sp, #0]
    8c2c:	4917      	ldr	r1, [pc, #92]	; (8c8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8c>)
    8c2e:	4b1d      	ldr	r3, [pc, #116]	; (8ca4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca4>)
    8c30:	4a14      	ldr	r2, [pc, #80]	; (8c84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc84>)
    8c32:	481d      	ldr	r0, [pc, #116]	; (8ca8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca8>)
    8c34:	f7f8 faba 	bl	11ac <printk>
    8c38:	2100      	movs	r1, #0
    8c3a:	4608      	mov	r0, r1
    8c3c:	f003 fd08 	bl	c650 <_SysFatalErrorHandler>

	memcpy(&conn->llcp.channel_map.chm[0],
    8c40:	2205      	movs	r2, #5
    8c42:	f106 010c 	add.w	r1, r6, #12
    8c46:	f10a 006d 	add.w	r0, sl, #109	; 0x6d
    8c4a:	f7f8 f908 	bl	e5e <memcpy>
	       &pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.chm[0],
	       sizeof(conn->llcp.channel_map.chm));
	conn->llcp.channel_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.instant;
    8c4e:	f8b6 3011 	ldrh.w	r3, [r6, #17]
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);

	memcpy(&conn->llcp.channel_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.chm[0],
	       sizeof(conn->llcp.channel_map.chm));
	conn->llcp.channel_map.instant =
    8c52:	f8aa 3072 	strh.w	r3, [sl, #114]	; 0x72
		pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.instant;
	conn->llcp.channel_map.initiate = 0;

	conn->llcp_type = LLCP_CHANNEL_MAP;
    8c56:	2302      	movs	r3, #2
    8c58:	f88a 306a 	strb.w	r3, [sl, #106]	; 0x6a
	conn->llcp_ack--;
    8c5c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
	memcpy(&conn->llcp.channel_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.chm[0],
	       sizeof(conn->llcp.channel_map.chm));
	conn->llcp.channel_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.instant;
	conn->llcp.channel_map.initiate = 0;
    8c60:	2500      	movs	r5, #0

	conn->llcp_type = LLCP_CHANNEL_MAP;
	conn->llcp_ack--;
    8c62:	3b01      	subs	r3, #1
	memcpy(&conn->llcp.channel_map.chm[0],
	       &pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.chm[0],
	       sizeof(conn->llcp.channel_map.chm));
	conn->llcp.channel_map.instant =
		pdu_data_rx->payload.llctrl.ctrldata.channel_map_req.instant;
	conn->llcp.channel_map.initiate = 0;
    8c64:	f88a 506c 	strb.w	r5, [sl, #108]	; 0x6c

	conn->llcp_type = LLCP_CHANNEL_MAP;
	conn->llcp_ack--;
    8c68:	f88a 3069 	strb.w	r3, [sl, #105]	; 0x69
    8c6c:	f000 bc16 	b.w	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
		break;

	case PDU_DATA_LLCTRL_TYPE_TERMINATE_IND:
		/* Ack and then terminate */
		_radio.conn_curr->llcp_terminate.reason_peer =
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
    8c70:	7b33      	ldrb	r3, [r6, #12]
    8c72:	f000 beda 	b.w	9a2a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2a>
    8c76:	bf00      	nop
    8c78:	20000b44 	.word	0x20000b44
    8c7c:	0000dd4e 	.word	0x0000dd4e
    8c80:	0000dd53 	.word	0x0000dd53
    8c84:	0000dcfd 	.word	0x0000dcfd
    8c88:	0000f261 	.word	0x0000f261
    8c8c:	0000dd04 	.word	0x0000dd04
    8c90:	0000e976 	.word	0x0000e976
    8c94:	0000e943 	.word	0x0000e943
    8c98:	0000f150 	.word	0x0000f150
    8c9c:	0000e99c 	.word	0x0000e99c
    8ca0:	0000ea3e 	.word	0x0000ea3e
    8ca4:	0000f24e 	.word	0x0000f24e
    8ca8:	0000ea7a 	.word	0x0000ea7a
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		/* things from master stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
    8cac:	2208      	movs	r2, #8
    8cae:	f106 0116 	add.w	r1, r6, #22
    8cb2:	f10a 0087 	add.w	r0, sl, #135	; 0x87
    8cb6:	f7f8 f8d2 	bl	e5e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.skdm[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
    8cba:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8cbe:	2204      	movs	r2, #4
    8cc0:	f106 011e 	add.w	r1, r6, #30
    8cc4:	30d2      	adds	r0, #210	; 0xd2
    8cc6:	f7f8 f8ca 	bl	e5e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_req.ivm[0], 4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    8cca:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8cce:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    8cd2:	f042 0204 	orr.w	r2, r2, #4
    8cd6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

		/* Start Procedure Timeout (this will not replace terminate
		 * procedure which always gets place before any packets
		 * going out, hence safe by design)
		 */
		_radio.conn_curr->procedure_expire =
    8cda:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    8cdc:	871a      	strh	r2, [r3, #56]	; 0x38
    8cde:	e06d      	b.n	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
		*rx_enqueue = 1;
		break;

	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		/* things sent by slave stored for session key calculation */
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
    8ce0:	2208      	movs	r2, #8
    8ce2:	f106 010c 	add.w	r1, r6, #12
    8ce6:	f10a 008f 	add.w	r0, sl, #143	; 0x8f
    8cea:	f7f8 f8b8 	bl	e5e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.skds[0],
		       8);
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
    8cee:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    8cf2:	2204      	movs	r2, #4
    8cf4:	f106 0114 	add.w	r1, r6, #20
    8cf8:	30d6      	adds	r0, #214	; 0xd6
    8cfa:	f7f8 f8b0 	bl	e5e <memcpy>
		       &pdu_data_rx->payload.llctrl.ctrldata.enc_rsp.ivs[0],
		       4);

		/* pause rx data packets */
		_radio.conn_curr->pause_rx = 1;
    8cfe:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    8d02:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8
    8d06:	f043 0304 	orr.w	r3, r3, #4
    8d0a:	e0ac      	b.n	8e66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe66>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_REQ:
		LL_ASSERT(_radio.conn_curr->llcp_req ==
    8d0c:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
    8d10:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
    8d14:	429a      	cmp	r2, r3
    8d16:	d00d      	beq.n	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    8d18:	4bcc      	ldr	r3, [pc, #816]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8d1a:	9301      	str	r3, [sp, #4]
    8d1c:	4bcc      	ldr	r3, [pc, #816]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8d1e:	9300      	str	r3, [sp, #0]
    8d20:	49cc      	ldr	r1, [pc, #816]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8d22:	4bcd      	ldr	r3, [pc, #820]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8d24:	4acd      	ldr	r2, [pc, #820]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8d26:	48ce      	ldr	r0, [pc, #824]	; (9060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1060>)
    8d28:	f7f8 fa40 	bl	11ac <printk>
    8d2c:	2100      	movs	r1, #0
    8d2e:	4608      	mov	r0, r1
    8d30:	f003 fc8e 	bl	c650 <_SysFatalErrorHandler>
			  _radio.conn_curr->llcp_ack);

		/* start enc rsp to be scheduled in master prepare */
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    8d34:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8d38:	2203      	movs	r2, #3
    8d3a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
		_radio.conn_curr->llcp_ack--;
    8d3e:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    8d42:	3a01      	subs	r2, #1
    8d44:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    8d48:	f000 be71 	b.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
		break;

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (_radio.role == ROLE_SLAVE) {
    8d4c:	7ba3      	ldrb	r3, [r4, #14]
    8d4e:	2b03      	cmp	r3, #3
    8d50:	d11e      	bne.n	8d90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd90>

#if !defined(CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC)
			LL_ASSERT(_radio.conn_curr->llcp_req ==
    8d52:	f89a 2068 	ldrb.w	r2, [sl, #104]	; 0x68
    8d56:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d00d      	beq.n	8d7a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd7a>
    8d5e:	4bbb      	ldr	r3, [pc, #748]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8d60:	9301      	str	r3, [sp, #4]
    8d62:	4bbb      	ldr	r3, [pc, #748]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8d64:	9300      	str	r3, [sp, #0]
    8d66:	49bb      	ldr	r1, [pc, #748]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8d68:	4bbb      	ldr	r3, [pc, #748]	; (9058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1058>)
    8d6a:	4abc      	ldr	r2, [pc, #752]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8d6c:	48bc      	ldr	r0, [pc, #752]	; (9060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1060>)
    8d6e:	f7f8 fa1d 	bl	11ac <printk>
    8d72:	2100      	movs	r1, #0
    8d74:	4608      	mov	r0, r1
    8d76:	f003 fc6b 	bl	c650 <_SysFatalErrorHandler>
				  _radio.conn_curr->llcp_ack);

			/* start enc rsp to be scheduled in slave  prepare */
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
    8d7a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    8d7e:	2203      	movs	r2, #3
    8d80:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
			_radio.conn_curr->llcp_ack--;
    8d84:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    8d88:	3a01      	subs	r2, #1
    8d8a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    8d8e:	e007      	b.n	8da0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda0>
			_radio.conn_curr->pause_tx = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_FAST_ENC */

		} else {
			/* resume data packet rx and tx */
			_radio.conn_curr->pause_rx = 0;
    8d90:	f89a 30b8 	ldrb.w	r3, [sl, #184]	; 0xb8
			_radio.conn_curr->pause_tx = 0;
    8d94:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8d98:	f36f 03c3 	bfc	r3, #3, #1
    8d9c:	f88a 30b8 	strb.w	r3, [sl, #184]	; 0xb8
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (_radio.conn_curr->refresh) {
    8da0:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    8da4:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8
    8da8:	0659      	lsls	r1, r3, #25
			_radio.conn_curr->refresh = 0;
    8daa:	bf41      	itttt	mi
    8dac:	f36f 1386 	bfcmi	r3, #6, #1
    8db0:	f882 30b8 	strbmi.w	r3, [r2, #184]	; 0xb8

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
    8db4:	2306      	movmi	r3, #6
    8db6:	7133      	strbmi	r3, [r6, #4]
		}
		*rx_enqueue = 1;

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    8db8:	2300      	movs	r3, #0
    8dba:	8713      	strh	r3, [r2, #56]	; 0x38
			_radio.conn_curr->refresh = 0;

			/* key refresh event */
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
		}
		*rx_enqueue = 1;
    8dbc:	2501      	movs	r5, #1
    8dbe:	e36d      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
		break;

	case PDU_DATA_LLCTRL_TYPE_FEATURE_REQ:
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &=
    8dc0:	f89a 2098 	ldrb.w	r2, [sl, #152]	; 0x98
    8dc4:	7b33      	ldrb	r3, [r6, #12]
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8dc6:	48a7      	ldr	r0, [pc, #668]	; (9064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1064>)
		break;

	case PDU_DATA_LLCTRL_TYPE_FEATURE_REQ:
	case PDU_DATA_LLCTRL_TYPE_SLAVE_FEATURE_REQ:
		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &=
    8dc8:	4013      	ands	r3, r2
    8dca:	f88a 3098 	strb.w	r3, [sl, #152]	; 0x98
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8dce:	f7f9 fe92 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    8dd2:	4605      	mov	r5, r0
    8dd4:	b968      	cbnz	r0, 8df2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdf2>
    8dd6:	4b9d      	ldr	r3, [pc, #628]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8dd8:	9301      	str	r3, [sp, #4]
    8dda:	4b9d      	ldr	r3, [pc, #628]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8ddc:	9300      	str	r3, [sp, #0]
    8dde:	499d      	ldr	r1, [pc, #628]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8de0:	4ba1      	ldr	r3, [pc, #644]	; (9068 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1068>)
    8de2:	4a9e      	ldr	r2, [pc, #632]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8de4:	48a1      	ldr	r0, [pc, #644]	; (906c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106c>)
    8de6:	f7f8 f9e1 	bl	11ac <printk>
    8dea:	4629      	mov	r1, r5
    8dec:	4628      	mov	r0, r5
    8dee:	f003 fc2f 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8df2:	792b      	ldrb	r3, [r5, #4]
    8df4:	f043 0303 	orr.w	r3, r3, #3
    8df8:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    8dfa:	2208      	movs	r2, #8
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    8dfc:	2309      	movs	r3, #9
    8dfe:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    8e00:	71eb      	strb	r3, [r5, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
    8e02:	2100      	movs	r1, #0
    8e04:	18a8      	adds	r0, r5, r2
    8e06:	f7f8 f857 	bl	eb8 <memset>
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0] =
		conn->llcp_features;
    8e0a:	f89a 3098 	ldrb.w	r3, [sl, #152]	; 0x98
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
		0x00,
		sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features));
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0] =
    8e0e:	722b      	strb	r3, [r5, #8]
    8e10:	e31c      	b.n	944c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144c>
		feature_rsp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_FEATURE_RSP:
		/* AND the feature set to get Feature USED */
		_radio.conn_curr->llcp_features &=
    8e12:	f89a 2098 	ldrb.w	r2, [sl, #152]	; 0x98
    8e16:	7b33      	ldrb	r3, [r6, #12]
    8e18:	4013      	ands	r3, r2
    8e1a:	f88a 3098 	strb.w	r3, [sl, #152]	; 0x98
    8e1e:	e09b      	b.n	8f58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf58>
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_REQ:
		pause_enc_rsp_send(_radio.conn_curr);
    8e20:	4650      	mov	r0, sl
    8e22:	f7fb fd29 	bl	4878 <pause_enc_rsp_send>

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    8e26:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    8e2a:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8

		/* key refresh */
		_radio.conn_curr->refresh = 1;

		/* disable receive encryption */
		_radio.conn_curr->enc_rx = 0;
    8e2e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
    8e32:	f36f 1304 	bfc	r3, #4, #1
    8e36:	e016      	b.n	8e66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe66>
		break;

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (_radio.role == ROLE_MASTER) {
    8e38:	7ba3      	ldrb	r3, [r4, #14]
    8e3a:	2b04      	cmp	r3, #4
    8e3c:	d10b      	bne.n	8e56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe56>
			/* reply with pause enc rsp */
			pause_enc_rsp_send(_radio.conn_curr);
    8e3e:	4650      	mov	r0, sl
    8e40:	f7fb fd1a 	bl	4878 <pause_enc_rsp_send>

			/* disable receive encryption */
			_radio.conn_curr->enc_rx = 0;
    8e44:	4b8a      	ldr	r3, [pc, #552]	; (9070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1070>)
    8e46:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
    8e4a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    8e4e:	f36f 1204 	bfc	r2, #4, #1
    8e52:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}

		/* pause data packet rx */
		_radio.conn_curr->pause_rx = 1;
    8e56:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
    8e5a:	f892 30b8 	ldrb.w	r3, [r2, #184]	; 0xb8

		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
    8e5e:	f043 0304 	orr.w	r3, r3, #4
    8e62:	f36f 1345 	bfc	r3, #5, #1
    8e66:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
    8e6a:	f000 bde0 	b.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
		break;

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
    8e6e:	7b33      	ldrb	r3, [r6, #12]
		/* disable transmit encryption */
		_radio.conn_curr->enc_tx = 0;
		break;

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
    8e70:	f88a 309b 	strb.w	r3, [sl, #155]	; 0x9b
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
    8e74:	f8b6 300d 	ldrh.w	r3, [r6, #13]
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    8e78:	f89a 509a 	ldrb.w	r5, [sl, #154]	; 0x9a

	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
    8e7c:	f8aa 309c 	strh.w	r3, [sl, #156]	; 0x9c
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
    8e80:	f8b6 300f 	ldrh.w	r3, [r6, #15]
		_radio.conn_curr->llcp_version.version_number =
			pdu_data_rx->payload.llctrl.ctrldata.
			version_ind.version_number;
		_radio.conn_curr->llcp_version. company_id =
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
		_radio.conn_curr->llcp_version.sub_version_number =
    8e84:	f8aa 309e 	strh.w	r3, [sl, #158]	; 0x9e
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
    8e88:	f005 0303 	and.w	r3, r5, #3
    8e8c:	2b01      	cmp	r3, #1
    8e8e:	f04f 0500 	mov.w	r5, #0
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    8e92:	bf04      	itt	eq
    8e94:	f8aa 5038 	strheq.w	r5, [sl, #56]	; 0x38
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;

		if ((_radio.conn_curr->llcp_version.tx != 0) &&
		    (_radio.conn_curr->llcp_version.rx == 0)) {
			/* enqueue the version ind */
			*rx_enqueue = 1;
    8e98:	461d      	moveq	r5, r3

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    8e9a:	f89a 309a 	ldrb.w	r3, [sl, #154]	; 0x9a
    8e9e:	f043 0302 	orr.w	r3, r3, #2

		if (_radio.conn_curr->llcp_version.tx == 0) {
    8ea2:	07da      	lsls	r2, r3, #31

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
		}

		_radio.conn_curr->llcp_version.rx = 1;
    8ea4:	f88a 309a 	strb.w	r3, [sl, #154]	; 0x9a

		if (_radio.conn_curr->llcp_version.tx == 0) {
    8ea8:	f100 82f8 	bmi.w	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
			_radio.conn_curr->llcp_version.tx = 1;
    8eac:	f043 0301 	orr.w	r3, r3, #1
    8eb0:	f88a 309a 	strb.w	r3, [sl, #154]	; 0x9a
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    8eb4:	486b      	ldr	r0, [pc, #428]	; (9064 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1064>)
    8eb6:	f7f9 fe1e 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    8eba:	4680      	mov	r8, r0
    8ebc:	b968      	cbnz	r0, 8eda <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeda>
    8ebe:	4b63      	ldr	r3, [pc, #396]	; (904c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104c>)
    8ec0:	9301      	str	r3, [sp, #4]
    8ec2:	4b63      	ldr	r3, [pc, #396]	; (9050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1050>)
    8ec4:	9300      	str	r3, [sp, #0]
    8ec6:	4963      	ldr	r1, [pc, #396]	; (9054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1054>)
    8ec8:	4b6a      	ldr	r3, [pc, #424]	; (9074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1074>)
    8eca:	4a64      	ldr	r2, [pc, #400]	; (905c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105c>)
    8ecc:	4867      	ldr	r0, [pc, #412]	; (906c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x106c>)
    8ece:	f7f8 f96d 	bl	11ac <printk>
    8ed2:	4641      	mov	r1, r8
    8ed4:	4640      	mov	r0, r8
    8ed6:	f003 fbbb 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    8eda:	f898 3004 	ldrb.w	r3, [r8, #4]
    8ede:	f043 0303 	orr.w	r3, r3, #3
    8ee2:	f888 3004 	strb.w	r3, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    8ee6:	2306      	movs	r3, #6
    8ee8:	f888 3005 	strb.w	r3, [r8, #5]
		sizeof(struct pdu_data_llctrl_version_ind);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    8eec:	230c      	movs	r3, #12
    8eee:	f888 3007 	strb.w	r3, [r8, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
    8ef2:	2308      	movs	r3, #8
    8ef4:	f888 3008 	strb.w	r3, [r8, #8]
		RADIO_BLE_VERSION_NUMBER;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
    8ef8:	f04f 33ff 	mov.w	r3, #4294967295
    8efc:	f888 3009 	strb.w	r3, [r8, #9]
    8f00:	f888 300a 	strb.w	r3, [r8, #10]
		RADIO_BLE_COMPANY_ID;
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
    8f04:	f888 300b 	strb.w	r3, [r8, #11]
    8f08:	f888 300c 	strb.w	r3, [r8, #12]
		RADIO_BLE_SUB_VERSION_NUMBER;

	ctrl_tx_enqueue(conn, node_tx);
    8f0c:	4641      	mov	r1, r8
    8f0e:	4650      	mov	r0, sl
    8f10:	f7fb fc24 	bl	475c <ctrl_tx_enqueue>

static struct pdu_data *empty_tx_enqueue(struct connection *conn)
{
	struct pdu_data *pdu_data_tx;

	conn->empty = 1;
    8f14:	f89a 30b8 	ldrb.w	r3, [sl, #184]	; 0xb8
    8f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8f1c:	f88a 30b8 	strb.w	r3, [sl, #184]	; 0xb8

	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
    8f20:	f7fa f982 	bl	3228 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    8f24:	7803      	ldrb	r3, [r0, #0]
    8f26:	2201      	movs	r2, #1
    8f28:	f362 0301 	bfi	r3, r2, #0, #2
    8f2c:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
    8f2e:	2300      	movs	r3, #0
    8f30:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
    8f32:	f8da 20fc 	ldr.w	r2, [sl, #252]	; 0xfc
    8f36:	7803      	ldrb	r3, [r0, #0]
    8f38:	b112      	cbz	r2, 8f40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf40>
		pdu_data_tx->md = 1;
    8f3a:	f043 0310 	orr.w	r3, r3, #16
    8f3e:	e001      	b.n	8f44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf44>
	} else {
		pdu_data_tx->md = 0;
    8f40:	f362 1304 	bfi	r3, r2, #4, #1
    8f44:	7003      	strb	r3, [r0, #0]
    8f46:	e2a9      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		/* resume data packet rx and tx */
		_radio.conn_curr->pause_rx = 0;
    8f48:	f89a 30b8 	ldrb.w	r3, [sl, #184]	; 0xb8
		_radio.conn_curr->pause_tx = 0;
    8f4c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8f50:	f36f 03c3 	bfc	r3, #3, #1
    8f54:	f88a 30b8 	strb.w	r3, [sl, #184]	; 0xb8

		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    8f58:	2300      	movs	r3, #0
    8f5a:	f8aa 3038 	strh.w	r3, [sl, #56]	; 0x38
    8f5e:	e72d      	b.n	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
		 */

		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
    8f60:	f89a 2069 	ldrb.w	r2, [sl, #105]	; 0x69
    8f64:	f89a 3068 	ldrb.w	r3, [sl, #104]	; 0x68
    8f68:	4293      	cmp	r3, r2
    8f6a:	d105      	bne.n	8f78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf78>
    8f6c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    8f70:	2b00      	cmp	r3, #0
    8f72:	f040 809c 	bne.w	90ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10ae>
    8f76:	e019      	b.n	8fac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfac>
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    8f78:	f89a 5044 	ldrb.w	r5, [sl, #68]	; 0x44
		     (_radio.conn_curr->role.slave.role != 0) &&
    8f7c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
		/* no ctrl procedures in progress or master req while slave
		 * waiting resp.
		 */
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
    8f80:	f015 0501 	ands.w	r5, r5, #1
    8f84:	f000 808a 	beq.w	909c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x109c>
		     (_radio.conn_curr->role.slave.role != 0) &&
    8f88:	459a      	cmp	sl, r3
    8f8a:	f040 812f 	bne.w	91ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ec>
		     (_radio.conn_curr == _radio.conn_upd) &&
    8f8e:	f89a 306a 	ldrb.w	r3, [sl, #106]	; 0x6a
    8f92:	2b01      	cmp	r3, #1
    8f94:	f040 812a 	bne.w	91ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ec>
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
    8f98:	f89a 3095 	ldrb.w	r3, [sl, #149]	; 0x95
    8f9c:	f003 0307 	and.w	r3, r3, #7
		if (((_radio.conn_curr->llcp_req == _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_upd == 0)) ||
		    ((_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) &&
		     (_radio.conn_curr->role.slave.role != 0) &&
		     (_radio.conn_curr == _radio.conn_upd) &&
		     (_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) &&
    8fa0:	1e59      	subs	r1, r3, #1
    8fa2:	2901      	cmp	r1, #1
    8fa4:	d902      	bls.n	8fac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfac>
		     ((_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_INITIATE) ||
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_REQ) ||
    8fa6:	2b05      	cmp	r3, #5
    8fa8:	f040 8120 	bne.w	91ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ec>
		      (_radio.conn_curr->llcp.connection_update.state ==
		       LLCP_CONN_STATE_RSP_WAIT)))) {
			/* set mutex */
			if (_radio.conn_upd == 0) {
    8fac:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    8fb0:	b913      	cbnz	r3, 8fb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfb8>
				_radio.conn_upd = _radio.conn_curr;
    8fb2:	4b2f      	ldr	r3, [pc, #188]	; (9070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1070>)
    8fb4:	f8c3 a294 	str.w	sl, [r3, #660]	; 0x294

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
    8fb8:	89b3      	ldrh	r3, [r6, #12]
			}

			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
    8fba:	f8aa 306c 	strh.w	r3, [sl, #108]	; 0x6c
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
    8fbe:	8a33      	ldrh	r3, [r6, #16]
			/* resp to be generated by app, for now save
			 * parameters
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
    8fc0:	f8aa 306e 	strh.w	r3, [sl, #110]	; 0x6e
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
    8fc4:	8a75      	ldrh	r5, [r6, #18]
			 */
			_radio.conn_curr->llcp.connection_update.interval =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
    8fc6:	f8aa 5070 	strh.w	r5, [sl, #112]	; 0x70
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
    8fca:	7d33      	ldrb	r3, [r6, #20]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.interval_min;
			_radio.conn_curr->llcp.connection_update.latency =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
    8fcc:	f88a 3072 	strb.w	r3, [sl, #114]	; 0x72
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
    8fd0:	f8b6 3015 	ldrh.w	r3, [r6, #21]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.latency;
			_radio.conn_curr->llcp.connection_update.timeout =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.timeout;
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
    8fd4:	f8aa 3074 	strh.w	r3, [sl, #116]	; 0x74
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
    8fd8:	f8b6 3017 	ldrh.w	r3, [r6, #23]
			_radio.conn_curr->llcp.connection_update.preferred_periodicity =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.preferred_periodicity;
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
    8fdc:	f8aa 3076 	strh.w	r3, [sl, #118]	; 0x76
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
    8fe0:	f8b6 3019 	ldrh.w	r3, [r6, #25]
			_radio.conn_curr->llcp.connection_update.instant =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
    8fe4:	f8aa 3078 	strh.w	r3, [sl, #120]	; 0x78
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
    8fe8:	f8b6 301b 	ldrh.w	r3, [r6, #27]
				reference_conn_event_count;
			_radio.conn_curr->llcp.connection_update.offset0 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
    8fec:	f8aa 307a 	strh.w	r3, [sl, #122]	; 0x7a
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
    8ff0:	f8b6 301d 	ldrh.w	r3, [r6, #29]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset0;
			_radio.conn_curr->llcp.connection_update.offset1 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
    8ff4:	f8aa 307c 	strh.w	r3, [sl, #124]	; 0x7c
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
    8ff8:	f8b6 301f 	ldrh.w	r3, [r6, #31]
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset1;
			_radio.conn_curr->llcp.connection_update.offset2 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
    8ffc:	f8aa 307e 	strh.w	r3, [sl, #126]	; 0x7e
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;
    9000:	f8b6 3021 	ldrh.w	r3, [r6, #33]	; 0x21
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset2;
			_radio.conn_curr->llcp.connection_update.offset3 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset3;
			_radio.conn_curr->llcp.connection_update.offset4 =
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset4;
			_radio.conn_curr->llcp.connection_update.offset5 =
    9004:	f8aa 3080 	strh.w	r3, [sl, #128]	; 0x80
				pdu_data_rx->payload.llctrl.ctrldata.conn_param_req.offset5;

			/* enqueue the conn param req, if parameters changed,
			 * else respond
			 */
			if ((_radio.conn_curr->llcp.connection_update.interval !=
    9008:	f8da 106c 	ldr.w	r1, [sl, #108]	; 0x6c
    900c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    9010:	4299      	cmp	r1, r3
    9012:	f102 32ff 	add.w	r2, r2, #4294967295
    9016:	f89a 3095 	ldrb.w	r3, [sl, #149]	; 0x95
    901a:	d10c      	bne.n	9036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1036>
			     _radio.conn_curr->conn_interval) ||
			    (_radio.conn_curr->llcp.connection_update.latency
			     != _radio.conn_curr->latency) ||
    901c:	f8ba 0024 	ldrh.w	r0, [sl, #36]	; 0x24
    9020:	f8ba 1032 	ldrh.w	r1, [sl, #50]	; 0x32
    9024:	4341      	muls	r1, r0
    9026:	207d      	movs	r0, #125	; 0x7d
    9028:	4341      	muls	r1, r0
    902a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    902e:	fb91 f1f0 	sdiv	r1, r1, r0
    9032:	428d      	cmp	r5, r1
    9034:	d020      	beq.n	9078 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1078>
			    (_radio.conn_curr->llcp.connection_update.timeout !=
			     (_radio.conn_curr->conn_interval *
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
    9036:	2104      	movs	r1, #4
    9038:	f361 0302 	bfi	r3, r1, #0, #3
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    903c:	f36f 03c4 	bfc	r3, #3, #2
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    9040:	2501      	movs	r5, #1
			      _radio.conn_curr->supervision_reload * 125 / 1000))) {
				*rx_enqueue = 1;

				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    9042:	f88a 3095 	strb.w	r3, [sl, #149]	; 0x95
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    9046:	f88a 506a 	strb.w	r5, [sl, #106]	; 0x6a
    904a:	e024      	b.n	9096 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1096>
    904c:	0000dd4e 	.word	0x0000dd4e
    9050:	0000dd53 	.word	0x0000dd53
    9054:	0000dd04 	.word	0x0000dd04
    9058:	0000f115 	.word	0x0000f115
    905c:	0000dcfd 	.word	0x0000dcfd
    9060:	0000eabc 	.word	0x0000eabc
    9064:	20000dac 	.word	0x20000dac
    9068:	0000f0d6 	.word	0x0000f0d6
    906c:	0000e3b4 	.word	0x0000e3b4
    9070:	20000b44 	.word	0x20000b44
    9074:	0000f171 	.word	0x0000f171
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
    9078:	2003      	movs	r0, #3
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    907a:	2500      	movs	r5, #0
				_radio.conn_curr->llcp.connection_update.state =
    907c:	f360 0302 	bfi	r3, r0, #0, #3
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    9080:	2101      	movs	r1, #1
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    9082:	f365 03c4 	bfi	r3, r5, #3, #2
					LLCP_CONN_STATE_APP_WAIT;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
				_radio.conn_curr->llcp_ack--;
			} else {
				_radio.conn_curr->llcp.connection_update.win_size = 1;
    9086:	f88a 1094 	strb.w	r1, [sl, #148]	; 0x94
				_radio.conn_curr->llcp.connection_update.win_offset_us = 0;
    908a:	f8ca 508c 	str.w	r5, [sl, #140]	; 0x8c
				_radio.conn_curr->llcp.connection_update.state =
					LLCP_CONN_STATE_RSP;
				_radio.conn_curr->llcp.connection_update.is_internal = 0;
    908e:	f88a 3095 	strb.w	r3, [sl, #149]	; 0x95

				_radio.conn_curr->llcp_type = LLCP_CONNECTION_UPDATE;
    9092:	f88a 106a 	strb.w	r1, [sl, #106]	; 0x6a
				_radio.conn_curr->llcp_ack--;
    9096:	f88a 2069 	strb.w	r2, [sl, #105]	; 0x69
    909a:	e1ff      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
		/* master in conn update procedure, master in any state we
		 * ignore this req
		 */
		else if ((_radio.conn_curr->llcp_req !=
			  _radio.conn_curr->llcp_ack) &&
			 (_radio.conn_curr->role.master.role == 0) &&
    909c:	459a      	cmp	sl, r3
    909e:	f040 80a5 	bne.w	91ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ec>
			 (_radio.conn_curr == _radio.conn_upd) &&
    90a2:	f89a 306a 	ldrb.w	r3, [sl, #106]	; 0x6a
    90a6:	2b01      	cmp	r3, #1
    90a8:	f040 80a0 	bne.w	91ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ec>
    90ac:	e1f6      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    90ae:	48a8      	ldr	r0, [pc, #672]	; (9350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1350>)
    90b0:	f7f9 fd21 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    90b4:	4605      	mov	r5, r0
    90b6:	b968      	cbnz	r0, 90d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10d4>
    90b8:	4ba6      	ldr	r3, [pc, #664]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    90ba:	9301      	str	r3, [sp, #4]
    90bc:	4ba6      	ldr	r3, [pc, #664]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    90be:	9300      	str	r3, [sp, #0]
    90c0:	49a6      	ldr	r1, [pc, #664]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    90c2:	4ba7      	ldr	r3, [pc, #668]	; (9360 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1360>)
    90c4:	4aa7      	ldr	r2, [pc, #668]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    90c6:	48a8      	ldr	r0, [pc, #672]	; (9368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1368>)
    90c8:	f7f8 f870 	bl	11ac <printk>
    90cc:	4629      	mov	r1, r5
    90ce:	4628      	mov	r0, r5
    90d0:	f003 fabe 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    90d4:	792b      	ldrb	r3, [r5, #4]
    90d6:	f043 0303 	orr.w	r3, r3, #3
    90da:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    90dc:	2303      	movs	r3, #3
    90de:	716b      	strb	r3, [r5, #5]
		sizeof(struct pdu_data_llctrl_reject_ind_ext);
	pdu_ctrl_tx->payload.llctrl.opcode =
    90e0:	2311      	movs	r3, #17
    90e2:	71eb      	strb	r3, [r5, #7]
		PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.reject_opcode =
    90e4:	230f      	movs	r3, #15
    90e6:	722b      	strb	r3, [r5, #8]
		reject_opcode;
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ind_ext.error_code =
    90e8:	2320      	movs	r3, #32
    90ea:	726b      	strb	r3, [r5, #9]
    90ec:	e1ae      	b.n	944c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144c>
	case PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP:
		/* @todo send conn_update req */
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND_EXT:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    90ee:	f89a 3068 	ldrb.w	r3, [sl, #104]	; 0x68
    90f2:	f89a 2069 	ldrb.w	r2, [sl, #105]	; 0x69
    90f6:	429a      	cmp	r2, r3
    90f8:	d041      	beq.n	917e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x117e>
static inline void
isr_rx_conn_pkt_ctrl_rej(struct radio_pdu_node_rx *radio_pdu_node_rx,
			 uint8_t *rx_enqueue)
{
	/* reset ctrl procedure */
	_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    90fa:	f88a 3069 	strb.w	r3, [sl, #105]	; 0x69

	switch (_radio.conn_curr->llcp_type) {
    90fe:	f89a 306a 	ldrb.w	r3, [sl, #106]	; 0x6a
    9102:	2b01      	cmp	r3, #1
    9104:	d135      	bne.n	9172 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1172>
	case LLCP_CONNECTION_UPDATE:
		LL_ASSERT(_radio.conn_upd == _radio.conn_curr);
    9106:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    910a:	459a      	cmp	sl, r3
    910c:	d00d      	beq.n	912a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112a>
    910e:	4b91      	ldr	r3, [pc, #580]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    9110:	9301      	str	r3, [sp, #4]
    9112:	4b91      	ldr	r3, [pc, #580]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    9114:	9300      	str	r3, [sp, #0]
    9116:	4991      	ldr	r1, [pc, #580]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    9118:	4b94      	ldr	r3, [pc, #592]	; (936c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136c>)
    911a:	4a92      	ldr	r2, [pc, #584]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    911c:	4894      	ldr	r0, [pc, #592]	; (9370 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1370>)
    911e:	f7f8 f845 	bl	11ac <printk>
    9122:	2100      	movs	r1, #0
    9124:	4608      	mov	r0, r1
    9126:	f003 fa93 	bl	c650 <_SysFatalErrorHandler>

		/* reset mutex */
		_radio.conn_upd = NULL;

		/* update to next ticks offsets */
		if (_radio.conn_curr->role.slave.role != 0) {
    912a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    912e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	switch (_radio.conn_curr->llcp_type) {
	case LLCP_CONNECTION_UPDATE:
		LL_ASSERT(_radio.conn_upd == _radio.conn_curr);

		/* reset mutex */
		_radio.conn_upd = NULL;
    9132:	2200      	movs	r2, #0
    9134:	f8c4 2294 	str.w	r2, [r4, #660]	; 0x294

		/* update to next ticks offsets */
		if (_radio.conn_curr->role.slave.role != 0) {
    9138:	07c8      	lsls	r0, r1, #31
			    _radio.conn_curr->llcp.connection_update.
			    ticks_to_offset_next;
		}

		/* conn param req procedure, if any, is complete */
		_radio.conn_curr->procedure_expire = 0;
    913a:	871a      	strh	r2, [r3, #56]	; 0x38

		/* enqueue the reject ind ext */
		if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    913c:	f893 2095 	ldrb.w	r2, [r3, #149]	; 0x95
		/* reset mutex */
		_radio.conn_upd = NULL;

		/* update to next ticks offsets */
		if (_radio.conn_curr->role.slave.role != 0) {
			_radio.conn_curr->role.slave.ticks_to_offset =
    9140:	bf44      	itt	mi
    9142:	f8d3 1088 	ldrmi.w	r1, [r3, #136]	; 0x88
    9146:	6659      	strmi	r1, [r3, #100]	; 0x64

		/* conn param req procedure, if any, is complete */
		_radio.conn_curr->procedure_expire = 0;

		/* enqueue the reject ind ext */
		if (!_radio.conn_curr->llcp.connection_update.is_internal) {
    9148:	f012 0218 	ands.w	r2, r2, #24
    914c:	f040 846f 	bne.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
			pdu_data_rx =
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
    9150:	72f2      	strb	r2, [r6, #11]
		if (!_radio.conn_curr->llcp.connection_update.is_internal) {
			struct radio_le_conn_update_cmplt
				*radio_le_conn_update_cmplt;
			struct pdu_data *pdu_data_rx;

			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    9152:	2105      	movs	r1, #5
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				_radio.conn_curr->conn_interval;
    9154:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
		if (!_radio.conn_curr->llcp.connection_update.is_internal) {
			struct radio_le_conn_update_cmplt
				*radio_le_conn_update_cmplt;
			struct pdu_data *pdu_data_rx;

			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    9156:	7131      	strb	r1, [r6, #4]
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				_radio.conn_curr->conn_interval;
			radio_le_conn_update_cmplt->latency =
    9158:	8cd9      	ldrh	r1, [r3, #38]	; 0x26
				_radio.conn_curr->latency;
			radio_le_conn_update_cmplt->timeout =
    915a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
				(struct pdu_data *)radio_pdu_node_rx->pdu_data;
			radio_le_conn_update_cmplt =
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
    915c:	81b2      	strh	r2, [r6, #12]
				_radio.conn_curr->conn_interval;
			radio_le_conn_update_cmplt->latency =
				_radio.conn_curr->latency;
			radio_le_conn_update_cmplt->timeout =
    915e:	4353      	muls	r3, r2
    9160:	227d      	movs	r2, #125	; 0x7d
    9162:	4353      	muls	r3, r2
				(struct radio_le_conn_update_cmplt *)
				&pdu_data_rx->payload;
			radio_le_conn_update_cmplt->status = 0x00;
			radio_le_conn_update_cmplt->interval =
				_radio.conn_curr->conn_interval;
			radio_le_conn_update_cmplt->latency =
    9164:	81f1      	strh	r1, [r6, #14]
				_radio.conn_curr->latency;
			radio_le_conn_update_cmplt->timeout =
    9166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    916a:	fb93 f3f2 	sdiv	r3, r3, r2
    916e:	8233      	strh	r3, [r6, #16]
    9170:	e624      	b.n	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
			*rx_enqueue = 1;
		}
		break;

	default:
		LL_ASSERT(0);
    9172:	4b78      	ldr	r3, [pc, #480]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    9174:	9301      	str	r3, [sp, #4]
    9176:	4b78      	ldr	r3, [pc, #480]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    9178:	9300      	str	r3, [sp, #0]
    917a:	4b7c      	ldr	r3, [pc, #496]	; (936c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136c>)
    917c:	e03b      	b.n	91f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11f6>

		} else {
			/* By spec. slave shall not generate a conn update
			 * complete on reject from master.
			 */
			LL_ASSERT(_radio.conn_curr->role.slave.role);
    917e:	f89a 5044 	ldrb.w	r5, [sl, #68]	; 0x44
    9182:	f015 0501 	ands.w	r5, r5, #1
    9186:	f040 8452 	bne.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
    918a:	4b72      	ldr	r3, [pc, #456]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    918c:	9301      	str	r3, [sp, #4]
    918e:	4b72      	ldr	r3, [pc, #456]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    9190:	9300      	str	r3, [sp, #0]
    9192:	4a74      	ldr	r2, [pc, #464]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    9194:	4b77      	ldr	r3, [pc, #476]	; (9374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1374>)
    9196:	4971      	ldr	r1, [pc, #452]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    9198:	4877      	ldr	r0, [pc, #476]	; (9378 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1378>)
    919a:	e164      	b.n	9466 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1466>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    919c:	486c      	ldr	r0, [pc, #432]	; (9350 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1350>)
    919e:	f7f9 fcaa 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    91a2:	4605      	mov	r5, r0
    91a4:	b968      	cbnz	r0, 91c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c2>
    91a6:	4b6b      	ldr	r3, [pc, #428]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    91a8:	9301      	str	r3, [sp, #4]
    91aa:	4b6b      	ldr	r3, [pc, #428]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    91ac:	9300      	str	r3, [sp, #0]
    91ae:	496b      	ldr	r1, [pc, #428]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    91b0:	4b72      	ldr	r3, [pc, #456]	; (937c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x137c>)
    91b2:	4a6c      	ldr	r2, [pc, #432]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    91b4:	486c      	ldr	r0, [pc, #432]	; (9368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1368>)
    91b6:	f7f7 fff9 	bl	11ac <printk>
    91ba:	4629      	mov	r1, r5
    91bc:	4628      	mov	r0, r5
    91be:	f003 fa47 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    91c2:	792b      	ldrb	r3, [r5, #4]
    91c4:	f043 0303 	orr.w	r3, r3, #3
    91c8:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
    91ca:	2301      	movs	r3, #1
    91cc:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
    91ce:	2313      	movs	r3, #19
    91d0:	71eb      	strb	r3, [r5, #7]
    91d2:	e13b      	b.n	944c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144c>
		ping_resp_send(_radio.conn_curr);
		break;

	case PDU_DATA_LLCTRL_TYPE_PING_RSP:
		/* Procedure complete */
		_radio.conn_curr->procedure_expire = 0;
    91d4:	f8aa 5038 	strh.w	r5, [sl, #56]	; 0x38
    91d8:	f000 bc29 	b.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
		break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		if (_radio.conn_curr->llcp_req != _radio.conn_curr->llcp_ack) {
    91dc:	f89a 3068 	ldrb.w	r3, [sl, #104]	; 0x68
    91e0:	f89a 2069 	ldrb.w	r2, [sl, #105]	; 0x69
    91e4:	429a      	cmp	r2, r3
    91e6:	d011      	beq.n	920c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x120c>
			/* reset ctrl procedure */
			_radio.conn_curr->llcp_ack = _radio.conn_curr->llcp_req;
    91e8:	f88a 3069 	strb.w	r3, [sl, #105]	; 0x69

			switch (_radio.conn_curr->llcp_type) {
			default:
				LL_ASSERT(0);
    91ec:	4b59      	ldr	r3, [pc, #356]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    91ee:	9301      	str	r3, [sp, #4]
    91f0:	4b59      	ldr	r3, [pc, #356]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    91f2:	9300      	str	r3, [sp, #0]
    91f4:	4b5f      	ldr	r3, [pc, #380]	; (9374 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1374>)
    91f6:	4a5b      	ldr	r2, [pc, #364]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    91f8:	4958      	ldr	r1, [pc, #352]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    91fa:	4861      	ldr	r0, [pc, #388]	; (9380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1380>)
    91fc:	f7f7 ffd6 	bl	11ac <printk>
    9200:	2100      	movs	r1, #0
    9202:	4608      	mov	r0, r1
    9204:	f003 fa24 	bl	c650 <_SysFatalErrorHandler>
    9208:	f000 bc11 	b.w	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
    920c:	f89a 30b1 	ldrb.w	r3, [sl, #177]	; 0xb1
    9210:	f89a 20b0 	ldrb.w	r2, [sl, #176]	; 0xb0
    9214:	4293      	cmp	r3, r2
    9216:	f04f 0300 	mov.w	r3, #0
    921a:	d00a      	beq.n	9232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1232>
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
			_radio.conn_curr->llcp_length.ack =
    921c:	f88a 20b1 	strb.w	r2, [sl, #177]	; 0xb1
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    9220:	f89a 20b8 	ldrb.w	r2, [sl, #184]	; 0xb8

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		} else if (_radio.conn_curr->llcp_length.req !=
			   _radio.conn_curr->llcp_length.ack) {
			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    9224:	f8aa 3038 	strh.w	r3, [sl, #56]	; 0x38
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;

			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    9228:	f363 02c3 	bfi	r2, r3, #3, #1
    922c:	f88a 20b8 	strb.w	r2, [sl, #184]	; 0xb8
    9230:	e5c4      	b.n	8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
		} else {
			struct pdu_data_llctrl *llctrl;

			llctrl = (struct pdu_data_llctrl *)
				&pdu_data_rx->payload.llctrl;
			switch (llctrl->ctrldata.unknown_rsp.type) {
    9232:	7b35      	ldrb	r5, [r6, #12]
				*rx_enqueue = 1;
				break;
			}

			/* Procedure complete */
			_radio.conn_curr->procedure_expire = 0;
    9234:	f8aa 3038 	strh.w	r3, [sl, #56]	; 0x38
				break;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

			default:
				/* enqueue the error and let HCI handle it */
				*rx_enqueue = 1;
    9238:	3d12      	subs	r5, #18
    923a:	bf18      	it	ne
    923c:	2501      	movne	r5, #1
    923e:	e12d      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and peer request; complete the peer procedure
	     * with response.
	     */
	    ((_radio.conn_curr->llcp_length.req ==
    9240:	f89a 20b0 	ldrb.w	r2, [sl, #176]	; 0xb0
	uint8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
	eff_tx_octets = _radio.conn_curr->max_tx_octets;

	if (/* Local idle, and peer request; complete the peer procedure
    9244:	f89a 30b1 	ldrb.w	r3, [sl, #177]	; 0xb1
{
	uint16_t eff_rx_octets;
	uint16_t eff_tx_octets;
	uint8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    9248:	f8ba 5030 	ldrh.w	r5, [sl, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
    924c:	f8ba 802e 	ldrh.w	r8, [sl, #46]	; 0x2e

	if (/* Local idle, and peer request; complete the peer procedure
    9250:	4293      	cmp	r3, r2
    9252:	d004      	beq.n	925e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x125e>
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
	     /* and Local request, and peer request; override with peer
	      * procedure, and complete the peer procedure with response.
	      */
	     (((LLCP_LENGTH_STATE_REQ == _radio.conn_curr->llcp_length.state) &&
    9254:	f89a 30b2 	ldrb.w	r3, [sl, #178]	; 0xb2
	      _radio.conn_curr->llcp_length.ack) &&
	     (PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	      pdu_data_rx->payload.llctrl.opcode)) ||
	    /* or Local has requested... */
	    ((_radio.conn_curr->llcp_length.req !=
	      _radio.conn_curr->llcp_length.ack) &&
    9258:	f013 0303 	ands.w	r3, r3, #3
    925c:	d102      	bne.n	9264 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1264>
	     /* and Local request, and peer request; override with peer
	      * procedure, and complete the peer procedure with response.
	      */
	     (((LLCP_LENGTH_STATE_REQ == _radio.conn_curr->llcp_length.state) &&
    925e:	f1b9 0f14 	cmp.w	r9, #20
    9262:	e003      	b.n	926c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x126c>
	       (PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
		pdu_data_rx->payload.llctrl.opcode)) ||
    9264:	2b02      	cmp	r3, #2
    9266:	d161      	bne.n	932c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132c>
	      /* and Local wait, and peer response; complete the
	       * local procedure.
	       */
	      ((LLCP_LENGTH_STATE_RSP_WAIT ==
		_radio.conn_curr->llcp_length.state) &&
    9268:	f1b9 0f15 	cmp.w	r9, #21
    926c:	d15e      	bne.n	932c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132c>
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		eff_tx_octets = min(lr->max_rx_octets,
    926e:	f8ba 802c 	ldrh.w	r8, [sl, #44]	; 0x2c
    9272:	89b3      	ldrh	r3, [r6, #12]
				    _radio.conn_curr->default_tx_octets);

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		eff_rx_octets = min(lr->max_tx_octets,
    9274:	f8b6 9010 	ldrh.w	r9, [r6, #16]
			&pdu_data_rx->payload.llctrl.ctrldata.length_req;

		/* use the minimal of our default_tx_octets and
		 * peer max_rx_octets
		 */
		eff_tx_octets = min(lr->max_rx_octets,
    9278:	4598      	cmp	r8, r3
    927a:	bf28      	it	cs
    927c:	4698      	movcs	r8, r3
				    _radio.conn_curr->default_tx_octets);

		/* use the minimal of our max supported and
		 * peer max_tx_octets
		 */
		eff_rx_octets = min(lr->max_tx_octets,
    927e:	f1b9 0f1b 	cmp.w	r9, #27
    9282:	bf28      	it	cs
    9284:	f04f 091b 	movcs.w	r9, #27
				    RADIO_LL_LENGTH_OCTETS_RX_MAX);

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
    9288:	454d      	cmp	r5, r9
    928a:	d033      	beq.n	92f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12f4>
			uint16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    928c:	f7fb f9e2 	bl	4654 <packet_rx_acquired_count_get>
    9290:	4605      	mov	r5, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
    9292:	f8d4 023c 	ldr.w	r0, [r4, #572]	; 0x23c
    9296:	f7f9 fc62 	bl	2b5e <mem_free_count_get>

		/* check if change in rx octets */
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
			uint16_t free_count_rx;

			free_count_rx = packet_rx_acquired_count_get()
    929a:	4428      	add	r0, r5
    929c:	b285      	uxth	r5, r0
				+ mem_free_count_get(_radio.pkt_rx_data_free);
			LL_ASSERT(free_count_rx <= 0xFF);
    929e:	2dff      	cmp	r5, #255	; 0xff
    92a0:	d90d      	bls.n	92be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12be>
    92a2:	4b2c      	ldr	r3, [pc, #176]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    92a4:	9301      	str	r3, [sp, #4]
    92a6:	4b2c      	ldr	r3, [pc, #176]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    92a8:	9300      	str	r3, [sp, #0]
    92aa:	492c      	ldr	r1, [pc, #176]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    92ac:	4b35      	ldr	r3, [pc, #212]	; (9384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1384>)
    92ae:	4a2d      	ldr	r2, [pc, #180]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    92b0:	4835      	ldr	r0, [pc, #212]	; (9388 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1388>)
    92b2:	f7f7 ff7b 	bl	11ac <printk>
    92b6:	2100      	movs	r1, #0
    92b8:	4608      	mov	r0, r1
    92ba:	f003 f9c9 	bl	c650 <_SysFatalErrorHandler>

			if (_radio.packet_rx_data_count == free_count_rx) {
    92be:	f894 3246 	ldrb.w	r3, [r4, #582]	; 0x246
    92c2:	4932      	ldr	r1, [pc, #200]	; (938c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138c>)
    92c4:	42ab      	cmp	r3, r5
    92c6:	d163      	bne.n	9390 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1390>

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    92c8:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    92cc:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
			LL_ASSERT(free_count_rx <= 0xFF);

			if (_radio.packet_rx_data_count == free_count_rx) {

				/* accept the effective tx */
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
    92d0:	f8a3 802e 	strh.w	r8, [r3, #46]	; 0x2e
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
    92d4:	3a01      	subs	r2, #1
    92d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    92da:	f893 20b2 	ldrb.w	r2, [r3, #178]	; 0xb2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;

				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
    92de:	f8a3 90b4 	strh.w	r9, [r3, #180]	; 0xb4
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    92e2:	f042 0203 	orr.w	r2, r2, #3
				/* trigger or retain the ctrl procedure so as
				 * to resize the rx buffers.
				 */
				_radio.conn_curr->llcp_length.rx_octets =
					eff_rx_octets;
				_radio.conn_curr->llcp_length.tx_octets =
    92e6:	f8a3 80b6 	strh.w	r8, [r3, #182]	; 0xb6
					eff_tx_octets;
				_radio.conn_curr->llcp_length.ack =
					(_radio.conn_curr->llcp_length.req - 1);
				_radio.conn_curr->llcp_length.state =
    92ea:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
					LLCP_LENGTH_STATE_RESIZE;

				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
    92ee:	2303      	movs	r3, #3
    92f0:	73cb      	strb	r3, [r1, #15]
    92f2:	e02a      	b.n	934a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x134a>
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    92f4:	f89a 30b8 	ldrb.w	r3, [sl, #184]	; 0xb8

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
    92f8:	f8aa 802e 	strh.w	r8, [sl, #46]	; 0x2e
			} else {
				nack = 1;
			}
		} else {
			/* resume data packet tx */
			_radio.conn_curr->pause_tx = 0;
    92fc:	f36f 03c3 	bfc	r3, #3, #1
    9300:	f88a 30b8 	strb.w	r3, [sl, #184]	; 0xb8
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    9304:	f109 030e 	add.w	r3, r9, #14
    9308:	00db      	lsls	r3, r3, #3
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    930a:	f04f 0b00 	mov.w	fp, #0

			/* accept the effective tx */
			_radio.conn_curr->max_tx_octets = eff_tx_octets;

			/* Procedure complete */
			_radio.conn_curr->llcp_length.ack =
    930e:	f88a 20b1 	strb.w	r2, [sl, #177]	; 0xb1
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;
    9312:	f8aa b038 	strh.w	fp, [sl, #56]	; 0x38

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
    9316:	81f3      	strh	r3, [r6, #14]
			lr->max_tx_octets = eff_tx_octets;
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    9318:	f108 030e 	add.w	r3, r8, #14
    931c:	00db      	lsls	r3, r3, #3
			_radio.conn_curr->llcp_length.ack =
				_radio.conn_curr->llcp_length.req;
			_radio.conn_curr->procedure_expire = 0;

			/* prepare event params */
			lr->max_rx_octets = eff_rx_octets;
    931e:	f8a6 900c 	strh.w	r9, [r6, #12]
			lr->max_rx_time = ((eff_rx_octets + 14) << 3);
			lr->max_tx_octets = eff_tx_octets;
    9322:	f8a6 8010 	strh.w	r8, [r6, #16]
			lr->max_tx_time = ((eff_tx_octets + 14) << 3);
    9326:	8273      	strh	r3, [r6, #18]

			/* Enqueue data length change event (with no change in
			 * rx length happened), safe to enqueue rx.
			 */
			*rx_enqueue = 1;
    9328:	2501      	movs	r5, #1
    932a:	e034      	b.n	9396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1396>
		}
	} else {
		LL_ASSERT(0);
    932c:	4b09      	ldr	r3, [pc, #36]	; (9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>)
    932e:	9301      	str	r3, [sp, #4]
    9330:	4b09      	ldr	r3, [pc, #36]	; (9358 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1358>)
    9332:	9300      	str	r3, [sp, #0]
    9334:	4a0b      	ldr	r2, [pc, #44]	; (9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>)
    9336:	4b13      	ldr	r3, [pc, #76]	; (9384 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1384>)
    9338:	4908      	ldr	r1, [pc, #32]	; (935c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135c>)
    933a:	4811      	ldr	r0, [pc, #68]	; (9380 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1380>)
    933c:	f7f7 ff36 	bl	11ac <printk>
    9340:	2100      	movs	r1, #0
    9342:	4608      	mov	r0, r1
    9344:	f003 f984 	bl	c650 <_SysFatalErrorHandler>
{
	uint16_t eff_rx_octets;
	uint16_t eff_tx_octets;
	uint8_t nack = 0;

	eff_rx_octets = _radio.conn_curr->max_rx_octets;
    9348:	46a9      	mov	r9, r5
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	uint8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t rx_enqueue = 0;
    934a:	2500      	movs	r5, #0
static inline uint8_t isr_rx_conn_pkt_ctrl_dle(struct pdu_data *pdu_data_rx,
		uint8_t *rx_enqueue)
{
	uint16_t eff_rx_octets;
	uint16_t eff_tx_octets;
	uint8_t nack = 0;
    934c:	46ab      	mov	fp, r5
    934e:	e022      	b.n	9396 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1396>
    9350:	20000dac 	.word	0x20000dac
    9354:	0000dd4e 	.word	0x0000dd4e
    9358:	0000dd53 	.word	0x0000dd53
    935c:	0000dd04 	.word	0x0000dd04
    9360:	0000f18d 	.word	0x0000f18d
    9364:	0000dcfd 	.word	0x0000dcfd
    9368:	0000e3b4 	.word	0x0000e3b4
    936c:	0000efb2 	.word	0x0000efb2
    9370:	0000eb16 	.word	0x0000eb16
    9374:	0000f115 	.word	0x0000f115
    9378:	0000eb5b 	.word	0x0000eb5b
    937c:	0000ef21 	.word	0x0000ef21
    9380:	0000e191 	.word	0x0000e191
    9384:	0000f281 	.word	0x0000f281
    9388:	0000e744 	.word	0x0000e744
    938c:	20000b44 	.word	0x20000b44
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	uint8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t rx_enqueue = 0;
    9390:	2500      	movs	r5, #0
				/* close the current connection event, so as
				 * to perform rx octet change.
				 */
				_radio.state = STATE_CLOSE;
			} else {
				nack = 1;
    9392:	f04f 0b01 	mov.w	fp, #1
		}
	} else {
		LL_ASSERT(0);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
    9396:	7af3      	ldrb	r3, [r6, #11]
    9398:	2b14      	cmp	r3, #20
    939a:	d17c      	bne.n	9496 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1496>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
    939c:	f1bb 0f00 	cmp.w	fp, #0
    93a0:	f040 80a8 	bne.w	94f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f4>
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    93a4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
			     uint16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    93a8:	48ad      	ldr	r0, [pc, #692]	; (9660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1660>)
		LL_ASSERT(0);
	}

	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
		length_resp_send(_radio.conn_curr, eff_rx_octets,
    93aa:	607b      	str	r3, [r7, #4]
			     uint16_t eff_tx_octets)
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    93ac:	f7f9 fba3 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    93b0:	4682      	mov	sl, r0
    93b2:	b968      	cbnz	r0, 93d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d0>
    93b4:	4bab      	ldr	r3, [pc, #684]	; (9664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1664>)
    93b6:	9301      	str	r3, [sp, #4]
    93b8:	4bab      	ldr	r3, [pc, #684]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    93ba:	9300      	str	r3, [sp, #0]
    93bc:	49ab      	ldr	r1, [pc, #684]	; (966c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166c>)
    93be:	4bac      	ldr	r3, [pc, #688]	; (9670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1670>)
    93c0:	4aac      	ldr	r2, [pc, #688]	; (9674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1674>)
    93c2:	48ad      	ldr	r0, [pc, #692]	; (9678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1678>)
    93c4:	f7f7 fef2 	bl	11ac <printk>
    93c8:	4659      	mov	r1, fp
    93ca:	4658      	mov	r0, fp
    93cc:	f003 f940 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93d0:	f89a 3004 	ldrb.w	r3, [sl, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
    93d4:	f8aa 9008 	strh.w	r9, [sl, #8]

	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    93d8:	f043 0303 	orr.w	r3, r3, #3
    93dc:	f88a 3004 	strb.w	r3, [sl, #4]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
    93e0:	f8aa 800c 	strh.w	r8, [sl, #12]
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    93e4:	2309      	movs	r3, #9
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    93e6:	f109 090e 	add.w	r9, r9, #14
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    93ea:	f108 080e 	add.w	r8, r8, #14
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
    93ee:	f88a 3005 	strb.w	r3, [sl, #5]
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    93f2:	ea4f 09c9 	mov.w	r9, r9, lsl #3

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    93f6:	2315      	movs	r3, #21
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    93f8:	ea4f 08c8 	mov.w	r8, r8, lsl #3

	pdu_ctrl_tx = (struct pdu_data *) node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
		sizeof(struct pdu_data_llctrl_length_req_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode =
    93fc:	f88a 3007 	strb.w	r3, [sl, #7]
		PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
		eff_rx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
    9400:	f8aa 900a 	strh.w	r9, [sl, #10]
		((eff_rx_octets + 14) << 3);
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
		eff_tx_octets;
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
    9404:	f8aa 800e 	strh.w	r8, [sl, #14]
		((eff_tx_octets + 14) << 3);

	ctrl_tx_enqueue(conn, node_tx);
    9408:	4651      	mov	r1, sl
    940a:	6878      	ldr	r0, [r7, #4]
    940c:	f7fb f9a6 	bl	475c <ctrl_tx_enqueue>
    9410:	e044      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
{
	struct radio_pdu_node_tx *node_tx;
	struct pdu_data *pdu_ctrl_tx;

	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
    9412:	4893      	ldr	r0, [pc, #588]	; (9660 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1660>)
    9414:	f7f9 fb6f 	bl	2af6 <mem_acquire>
	LL_ASSERT(node_tx);
    9418:	4605      	mov	r5, r0
    941a:	b968      	cbnz	r0, 9438 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1438>
    941c:	4b91      	ldr	r3, [pc, #580]	; (9664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1664>)
    941e:	9301      	str	r3, [sp, #4]
    9420:	4b91      	ldr	r3, [pc, #580]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    9422:	9300      	str	r3, [sp, #0]
    9424:	4991      	ldr	r1, [pc, #580]	; (966c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166c>)
    9426:	4b95      	ldr	r3, [pc, #596]	; (967c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x167c>)
    9428:	4a92      	ldr	r2, [pc, #584]	; (9674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1674>)
    942a:	4893      	ldr	r0, [pc, #588]	; (9678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1678>)
    942c:	f7f7 febe 	bl	11ac <printk>
    9430:	4629      	mov	r1, r5
    9432:	4628      	mov	r0, r5
    9434:	f003 f90c 	bl	c650 <_SysFatalErrorHandler>

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    9438:	792b      	ldrb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
    943a:	f885 9008 	strb.w	r9, [r5, #8]
	/* acquire tx mem */
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
	LL_ASSERT(node_tx);

	pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    943e:	f043 0303 	orr.w	r3, r3, #3
    9442:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
    9444:	2302      	movs	r3, #2
    9446:	716b      	strb	r3, [r5, #5]
		+ sizeof(struct pdu_data_llctrl_unknown_rsp);
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
    9448:	2307      	movs	r3, #7
    944a:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;

	ctrl_tx_enqueue(conn, node_tx);
    944c:	4629      	mov	r1, r5
    944e:	4650      	mov	r0, sl
    9450:	f7fb f984 	bl	475c <ctrl_tx_enqueue>
    9454:	e2eb      	b.n	9a2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a2e>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
							    rx_enqueue);
				break;
			case PDU_DATA_LLID_RESV:
			default:
				LL_ASSERT(0);
    9456:	4b83      	ldr	r3, [pc, #524]	; (9664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1664>)
    9458:	9301      	str	r3, [sp, #4]
    945a:	4b83      	ldr	r3, [pc, #524]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    945c:	9300      	str	r3, [sp, #0]
    945e:	4a85      	ldr	r2, [pc, #532]	; (9674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1674>)
    9460:	4b87      	ldr	r3, [pc, #540]	; (9680 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1680>)
    9462:	4982      	ldr	r1, [pc, #520]	; (966c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x166c>)
    9464:	4887      	ldr	r0, [pc, #540]	; (9684 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1684>)
    9466:	f7f7 fea1 	bl	11ac <printk>
    946a:	4629      	mov	r1, r5
    946c:	4628      	mov	r0, r5
    946e:	f003 f8ef 	bl	c650 <_SysFatalErrorHandler>
    9472:	e013      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
				break;
			}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		} else if ((_radio.conn_curr->enc_rx) ||
    9474:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    9478:	f012 0214 	ands.w	r2, r2, #20
    947c:	f000 82d9 	beq.w	9a32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a32>
			   (_radio.conn_curr->pause_rx)) {
			/* start authenticated payload (pre) timeout */
			if (_radio.conn_curr->apto_expire == 0) {
    9480:	f8b3 5040 	ldrh.w	r5, [r3, #64]	; 0x40
    9484:	2d00      	cmp	r5, #0
    9486:	f040 82d6 	bne.w	9a36 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a36>
				_radio.conn_curr->appto_expire =
    948a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
    948c:	879a      	strh	r2, [r3, #60]	; 0x3c
					_radio.conn_curr->appto_reload;
				_radio.conn_curr->apto_expire =
    948e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    9490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    9494:	e2d0      	b.n	9a38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a38>
			}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		}

		if (!nack) {
    9496:	f1bb 0f00 	cmp.w	fp, #0
    949a:	d12b      	bne.n	94f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f4>
			_radio.conn_curr->nesn++;
    949c:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    94a0:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    94a4:	f082 0202 	eor.w	r2, r2, #2
    94a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			if (ccm_rx_increment) {
    94ac:	68fa      	ldr	r2, [r7, #12]
    94ae:	b30a      	cbz	r2, 94f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f4>
				_radio.conn_curr->ccm_rx.counter++;
    94b0:	f8d3 00c9 	ldr.w	r0, [r3, #201]	; 0xc9
    94b4:	f8d3 10cd 	ldr.w	r1, [r3, #205]	; 0xcd
    94b8:	3001      	adds	r0, #1
    94ba:	f141 0100 	adc.w	r1, r1, #0
    94be:	f8c3 00c9 	str.w	r0, [r3, #201]	; 0xc9
    94c2:	f8c3 10cd 	str.w	r1, [r3, #205]	; 0xcd
    94c6:	e015      	b.n	94f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f4>
		if (terminate) {
			goto isr_rx_conn_exit;
		}
	} else {
		/* Start CRC error countdown, if not already started */
		if (_radio.crc_expire == 0) {
    94c8:	f893 2229 	ldrb.w	r2, [r3, #553]	; 0x229
    94cc:	b912      	cbnz	r2, 94d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14d4>
			_radio.crc_expire = 2;
    94ce:	2202      	movs	r2, #2
    94d0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
    94d4:	f894 8229 	ldrb.w	r8, [r4, #553]	; 0x229
    94d8:	f108 38ff 	add.w	r8, r8, #4294967295
    94dc:	fa5f f888 	uxtb.w	r8, r8
    94e0:	f884 8229 	strb.w	r8, [r4, #553]	; 0x229
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	uint8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t rx_enqueue = 0;
    94e4:	2500      	movs	r5, #0
			_radio.crc_expire = 2;
		}

		/* Check crc error countdown expiry */
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
    94e6:	fab8 f888 	clz	r8, r8
    94ea:	ea4f 1858 	mov.w	r8, r8, lsr #5

static inline void isr_rx_conn(uint8_t crc_ok, uint8_t trx_done,
			       uint8_t rssi_ready)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
    94ee:	613d      	str	r5, [r7, #16]
    94f0:	e002      	b.n	94f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f8>
	uint8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t rx_enqueue = 0;
    94f2:	2500      	movs	r5, #0
	uint8_t crc_close = 0;
    94f4:	f04f 0800 	mov.w	r8, #0
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    94f8:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    94fc:	f107 011c 	add.w	r1, r7, #28
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    9500:	f890 90b8 	ldrb.w	r9, [r0, #184]	; 0xb8
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
    9504:	f7fb fe62 	bl	51cc <prepare_pdu_data_tx>
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9508:	7be3      	ldrb	r3, [r4, #15]
    950a:	2b03      	cmp	r3, #3
		_radio.crc_expire--;
		crc_close = (_radio.crc_expire == 0);
	}

	/* prepare transmit packet */
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
    950c:	ea4f 19d9 	mov.w	r9, r9, lsr #7
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9510:	d014      	beq.n	953c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153c>
    9512:	f1b8 0f00 	cmp.w	r8, #0
    9516:	d110      	bne.n	953a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153a>
    9518:	68bb      	ldr	r3, [r7, #8]
    951a:	b12b      	cbz	r3, 9528 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1528>
			((crc_ok) && (pdu_data_rx->md == 0) &&
    951c:	7a33      	ldrb	r3, [r6, #8]
    951e:	06d9      	lsls	r1, r3, #27
    9520:	d402      	bmi.n	9528 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1528>
			 (pdu_data_tx->len == 0)) ||
    9522:	69fb      	ldr	r3, [r7, #28]
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
    9524:	785b      	ldrb	r3, [r3, #1]
    9526:	b143      	cbz	r3, 953a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153a>
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
    9528:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
    952c:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9530:	2b00      	cmp	r3, #0
    9532:	bf14      	ite	ne
    9534:	2303      	movne	r3, #3
    9536:	2302      	moveq	r3, #2
    9538:	e000      	b.n	953c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x153c>
    953a:	2303      	movs	r3, #3
    953c:	4a52      	ldr	r2, [pc, #328]	; (9688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1688>)
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    953e:	2b03      	cmp	r3, #3
		}
	}

	/* Decide on event continuation and hence Radio Shorts to use */
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
    9540:	73d3      	strb	r3, [r2, #15]
			((crc_ok) && (pdu_data_rx->md == 0) &&
			 (pdu_data_tx->len == 0)) ||
			(_radio.conn_curr->llcp_terminate.reason_peer != 0)) ?
			STATE_CLOSE : STATE_TX;

	if (_radio.state == STATE_CLOSE) {
    9542:	d110      	bne.n	9566 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1566>
		/* Event close for master */
		if (_radio.role == ROLE_MASTER) {
    9544:	7b93      	ldrb	r3, [r2, #14]
    9546:	2b04      	cmp	r3, #4
    9548:	d10a      	bne.n	9560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1560>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
    954a:	f8d2 3224 	ldr.w	r3, [r2, #548]	; 0x224
    954e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
    9552:	f369 12c7 	bfi	r2, r9, #7, #1
    9556:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			radio_disable();
    955a:	f7f9 fe15 	bl	3188 <radio_disable>
    955e:	e019      	b.n	9594 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1594>

			goto isr_rx_conn_exit;
		}
		/* Event close for slave */
		else {
			radio_switch_complete_and_disable();
    9560:	f7f9 fe82 	bl	3268 <radio_switch_complete_and_disable>
    9564:	e003      	b.n	956e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x156e>
		}
	} else {	/* if (_radio.state == STATE_TX) */

		radio_switch_complete_and_rx();
    9566:	f7f9 fe6b 	bl	3240 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
    956a:	f7f9 ffc1 	bl	34f0 <radio_tmr_end_capture>
	}

	/* fill sn and nesn */
	pdu_data_tx->sn = _radio.conn_curr->sn;
    956e:	69f9      	ldr	r1, [r7, #28]
    9570:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    9574:	780b      	ldrb	r3, [r1, #0]
    9576:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
    957a:	f362 03c3 	bfi	r3, r2, #3, #1
    957e:	700b      	strb	r3, [r1, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
    9580:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    9584:	780a      	ldrb	r2, [r1, #0]
    9586:	f3c3 0340 	ubfx	r3, r3, #1, #1
    958a:	f363 0282 	bfi	r2, r3, #2, #1
    958e:	700a      	strb	r2, [r1, #0]

	/* setup the radio tx packet buffer */
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
    9590:	f7fb fea6 	bl	52e0 <tx_packet_set>
	radio_tmr_sample();

#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	/* release tx node and generate event for num complete */
	if (tx_release) {
    9594:	693b      	ldr	r3, [r7, #16]
    9596:	b12b      	cbz	r3, 95a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15a4>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
    9598:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    959c:	6939      	ldr	r1, [r7, #16]
    959e:	8c18      	ldrh	r0, [r3, #32]
    95a0:	f7fb fcc0 	bl	4f24 <pdu_node_tx_release>
	}

	/* enqueue any rx packet/event towards application */
	if (rx_enqueue) {
    95a4:	2d00      	cmp	r5, #0
    95a6:	f000 826e 	beq.w	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
		/* set data flow control lock on currently rx-ed connection */
		rx_fc_lock(_radio.conn_curr->handle);
    95aa:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    95ae:	8c18      	ldrh	r0, [r3, #32]
    95b0:	f7fc fb36 	bl	5c20 <rx_fc_lock>

		/* set the connection handle and enqueue */
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    95b4:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    95b8:	8c1b      	ldrh	r3, [r3, #32]
    95ba:	80f3      	strh	r3, [r6, #6]
		packet_rx_enqueue();
    95bc:	f7fc f9fe 	bl	59bc <packet_rx_enqueue>
    95c0:	e261      	b.n	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    95c2:	4b28      	ldr	r3, [pc, #160]	; (9664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1664>)
    95c4:	9301      	str	r3, [sp, #4]
    95c6:	4b28      	ldr	r3, [pc, #160]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    95c8:	9300      	str	r3, [sp, #0]
    95ca:	4b30      	ldr	r3, [pc, #192]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    95cc:	e219      	b.n	9a02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a02>

static inline void isr_radio_state_close(void)
{
	uint32_t dont_close = 0;

	switch (_radio.role) {
    95ce:	7ba2      	ldrb	r2, [r4, #14]
    95d0:	3a01      	subs	r2, #1
    95d2:	2a03      	cmp	r2, #3
    95d4:	f200 8201 	bhi.w	99da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19da>
    95d8:	e8df f002 	tbb	[pc, r2]
    95dc:	98985e02 	.word	0x98985e02

static inline uint32_t isr_close_adv(void)
{
	uint32_t dont_close = 0;

	if ((_radio.state == STATE_CLOSE) &&
    95e0:	2b03      	cmp	r3, #3
    95e2:	d10d      	bne.n	9600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1600>
    95e4:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    95e8:	f013 0f38 	tst.w	r3, #56	; 0x38
    95ec:	d008      	beq.n	9600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1600>
	    (_radio.advertiser.chl_map_current != 0)) {
		dont_close = 1;

		adv_setup();
    95ee:	f7fb fed5 	bl	539c <adv_setup>

		_radio.state = STATE_TX;
    95f2:	4b25      	ldr	r3, [pc, #148]	; (9688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1688>)
    95f4:	2202      	movs	r2, #2
    95f6:	73da      	strb	r2, [r3, #15]

		radio_tx_enable();
    95f8:	f7f9 fdbe 	bl	3178 <radio_tx_enable>
    95fc:	f7fe bfed 	b.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>

		radio_tmr_end_capture();
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();
    9600:	f7f9 fe7e 	bl	3300 <radio_filter_disable>

		pdu_adv =
			(struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    9604:	7be2      	ldrb	r2, [r4, #15]
    9606:	4b20      	ldr	r3, [pc, #128]	; (9688 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1688>)
    9608:	2a03      	cmp	r2, #3
    960a:	f040 8217 	bne.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
	} else {
		struct pdu_adv *pdu_adv;

		radio_filter_disable();

		pdu_adv =
    960e:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
    9612:	2128      	movs	r1, #40	; 0x28
    9614:	fb01 3302 	mla	r3, r1, r2, r3
			(struct pdu_adv *)
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
		if ((_radio.state == STATE_CLOSE) &&
    9618:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
    961c:	f003 030f 	and.w	r3, r3, #15
    9620:	2b01      	cmp	r3, #1
    9622:	f000 820b 	beq.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
			uint8_t random_delay;

			/** @todo use random 0-10 */
			random_delay = 10;

			ticker_status =
    9626:	f640 1311 	movw	r3, #2321	; 0x911
    962a:	2500      	movs	r5, #0
    962c:	9306      	str	r3, [sp, #24]
    962e:	4b18      	ldr	r3, [pc, #96]	; (9690 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1690>)
    9630:	9305      	str	r3, [sp, #20]
    9632:	9504      	str	r5, [sp, #16]
    9634:	f240 1347 	movw	r3, #327	; 0x147
    9638:	9503      	str	r5, [sp, #12]
    963a:	9502      	str	r5, [sp, #8]
    963c:	9501      	str	r5, [sp, #4]
    963e:	9500      	str	r5, [sp, #0]
    9640:	2205      	movs	r2, #5
    9642:	4629      	mov	r1, r5
    9644:	4628      	mov	r0, r5
    9646:	f7fa fe93 	bl	4370 <ticker_update>
					      RADIO_TICKER_ID_ADV,
					      TICKER_US_TO_TICKS(random_delay * 1000),
					      0, 0, 0, 0, 0,
					      ticker_success_assert,
					      (void *)__LINE__);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    964a:	f030 0302 	bics.w	r3, r0, #2
    964e:	f000 81f5 	beq.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
    9652:	4b04      	ldr	r3, [pc, #16]	; (9664 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1664>)
    9654:	9301      	str	r3, [sp, #4]
    9656:	4b04      	ldr	r3, [pc, #16]	; (9668 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1668>)
    9658:	9300      	str	r3, [sp, #0]
    965a:	4b0e      	ldr	r3, [pc, #56]	; (9694 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1694>)
    965c:	e1b6      	b.n	99cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19cc>
    965e:	bf00      	nop
    9660:	20000dac 	.word	0x20000dac
    9664:	0000dd4e 	.word	0x0000dd4e
    9668:	0000dd53 	.word	0x0000dd53
    966c:	0000dd04 	.word	0x0000dd04
    9670:	0000f2d3 	.word	0x0000f2d3
    9674:	0000dcfd 	.word	0x0000dcfd
    9678:	0000e3b4 	.word	0x0000e3b4
    967c:	0000f082 	.word	0x0000f082
    9680:	0000f261 	.word	0x0000f261
    9684:	0000e191 	.word	0x0000e191
    9688:	20000b44 	.word	0x20000b44
    968c:	0000f362 	.word	0x0000f362
    9690:	00005c59 	.word	0x00005c59
    9694:	0000ef30 	.word	0x0000ef30

static inline uint32_t isr_close_obs(void)
{
	uint32_t dont_close = 0;

	if (_radio.state == STATE_CLOSE) {
    9698:	2b03      	cmp	r3, #3
    969a:	d11f      	bne.n	96dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16dc>
		dont_close = 1;

		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
    969c:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
    96a0:	f894 224d 	ldrb.w	r2, [r4, #589]	; 0x24d
    96a4:	4dae      	ldr	r5, [pc, #696]	; (9960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1960>)
    96a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    96aa:	3008      	adds	r0, #8
    96ac:	f7f9 fd4c 	bl	3148 <radio_pkt_rx_set>
		radio_switch_complete_and_tx();
    96b0:	f7f9 fdd0 	bl	3254 <radio_switch_complete_and_tx>
		radio_rssi_measure();
    96b4:	f7f9 fde2 	bl	327c <radio_rssi_measure>

		if (_radio.observer.filter_policy && _radio.nirk) {
    96b8:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    96bc:	f013 0f30 	tst.w	r3, #48	; 0x30
    96c0:	d006      	beq.n	96d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16d0>
    96c2:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    96c6:	b118      	cbz	r0, 96d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16d0>
			radio_ar_configure(_radio.nirk, _radio.irk);
    96c8:	f105 0143 	add.w	r1, r5, #67	; 0x43
    96cc:	f7f9 ffb4 	bl	3638 <radio_ar_configure>
		}

		_radio.state = STATE_RX;
    96d0:	2301      	movs	r3, #1
    96d2:	73e3      	strb	r3, [r4, #15]

		radio_rx_enable();
    96d4:	f7f9 fd48 	bl	3168 <radio_rx_enable>
    96d8:	f7fe bf7f 	b.w	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>

		radio_tmr_end_capture();
	} else {
		uint32_t ticker_status;

		radio_filter_disable();
    96dc:	f7f9 fe10 	bl	3300 <radio_filter_disable>

		if (_radio.state == STATE_ABORT) {
    96e0:	7be3      	ldrb	r3, [r4, #15]
    96e2:	2b05      	cmp	r3, #5
    96e4:	f040 81aa 	bne.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
			ticker_status =
    96e8:	2500      	movs	r5, #0
    96ea:	462b      	mov	r3, r5
    96ec:	9500      	str	r5, [sp, #0]
    96ee:	2204      	movs	r2, #4
    96f0:	4629      	mov	r1, r5
    96f2:	4628      	mov	r0, r5
    96f4:	f7fa fe84 	bl	4400 <ticker_stop>
					    RADIO_TICKER_INSTANCE_ID_RADIO,
					    RADIO_TICKER_USER_ID_WORKER,
					    RADIO_TICKER_ID_OBS_STOP,
					    0 /** @todo ticker_success_assert */,
					    0 /** @todo (void *) __LINE__ */);
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    96f8:	f030 0302 	bics.w	r3, r0, #2
    96fc:	f000 819e 	beq.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
    9700:	4b98      	ldr	r3, [pc, #608]	; (9964 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1964>)
    9702:	9301      	str	r3, [sp, #4]
    9704:	4b98      	ldr	r3, [pc, #608]	; (9968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1968>)
    9706:	9300      	str	r3, [sp, #0]
    9708:	4b98      	ldr	r3, [pc, #608]	; (996c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x196c>)
    970a:	e15f      	b.n	99cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19cc>
	uint16_t elapsed_event;
	uint16_t lazy;
	uint8_t force;

	/* Local initiated terminate happened */
	if (_radio.conn_curr == 0) {
    970c:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    9710:	4d93      	ldr	r5, [pc, #588]	; (9960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1960>)
    9712:	2800      	cmp	r0, #0
    9714:	f000 8192 	beq.w	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    9718:	7bab      	ldrb	r3, [r5, #14]
    971a:	2b03      	cmp	r3, #3
    971c:	d10c      	bne.n	9738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1738>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    971e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
	if (_radio.conn_curr == 0) {
		return;
	}

	/* Remote Initiated terminate happened in this event for Slave */
	if ((_radio.role == ROLE_SLAVE) &&
    9722:	b149      	cbz	r1, 9738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1738>
	    (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    9724:	f7fc fa2a 	bl	5b7c <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    9728:	f8d5 0224 	ldr.w	r0, [r5, #548]	; 0x224
    972c:	f7fb fc90 	bl	5050 <connection_release>
		_radio.conn_curr = NULL;
    9730:	2300      	movs	r3, #0
    9732:	f8c5 3224 	str.w	r3, [r5, #548]	; 0x224
    9736:	e181      	b.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
    9738:	f8b0 902a 	ldrh.w	r9, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    973c:	f8df 8220 	ldr.w	r8, [pc, #544]	; 9960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1960>
    9740:	f894 6228 	ldrb.w	r6, [r4, #552]	; 0x228
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    9744:	f898 300e 	ldrb.w	r3, [r8, #14]
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
	latency_event = _radio.conn_curr->latency_event;
	elapsed_event = latency_event + 1;
    9748:	f109 0501 	add.w	r5, r9, #1
    974c:	b2ad      	uxth	r5, r5

	/* calculate drift if anchor point sync-ed */
	if ((_radio.packet_counter != 0) && ((!SILENT_CONNECTION) ||
    974e:	2e00      	cmp	r6, #0
    9750:	d046      	beq.n	97e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e0>
					     (_radio.packet_counter != 0xFF))) {
		if (_radio.role == ROLE_SLAVE) {
    9752:	2b03      	cmp	r3, #3
    9754:	d13a      	bne.n	97cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17cc>
			uint32_t start_to_address_actual_us;
			uint32_t start_to_address_expected_us;
			uint32_t window_widening_event_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    9756:	f7f9 febf 	bl	34d8 <radio_tmr_aa_get>
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
    975a:	f8d8 6224 	ldr.w	r6, [r8, #548]	; 0x224
    975e:	f8df a220 	ldr.w	sl, [pc, #544]	; 9980 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1980>
			uint32_t start_to_address_actual_us;
			uint32_t start_to_address_expected_us;
			uint32_t window_widening_event_us;

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
    9762:	4683      	mov	fp, r0
			window_widening_event_us =
    9764:	6d70      	ldr	r0, [r6, #84]	; 0x54
				_radio.conn_curr->role.slave.window_widening_event_us;
			start_to_address_expected_us =
    9766:	f100 0348 	add.w	r3, r0, #72	; 0x48
				(RADIO_TICKER_JITTER_US << 1) +
				RADIO_PREAMBLE_TO_ADDRESS_US +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    976a:	459b      	cmp	fp, r3

			/* calculate the drift in ticks */
			start_to_address_actual_us = radio_tmr_aa_get();
			window_widening_event_us =
				_radio.conn_curr->role.slave.window_widening_event_us;
			start_to_address_expected_us =
    976c:	613b      	str	r3, [r7, #16]
				(RADIO_TICKER_JITTER_US << 1) +
				RADIO_PREAMBLE_TO_ADDRESS_US +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    976e:	a37a      	add	r3, pc, #488	; (adr r3, 9958 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1958>)
    9770:	e9d3 2300 	ldrd	r2, r3, [r3]
				_radio.conn_curr->role.slave.window_widening_event_us;
			start_to_address_expected_us =
				(RADIO_TICKER_JITTER_US << 1) +
				RADIO_PREAMBLE_TO_ADDRESS_US +
				window_widening_event_us;
			if (start_to_address_actual_us <=
    9774:	d812      	bhi.n	979c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x179c>
			    start_to_address_expected_us) {
				ticks_drift_plus =
    9776:	fba0 010a 	umull	r0, r1, r0, sl
    977a:	f7f6 fd4f 	bl	21c <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((uint64_t)(start_to_address_expected_us -
    977e:	693b      	ldr	r3, [r7, #16]
				(RADIO_TICKER_JITTER_US << 1) +
				RADIO_PREAMBLE_TO_ADDRESS_US +
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
    9780:	fa1f f880 	uxth.w	r8, r0
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((uint64_t)(start_to_address_expected_us -
    9784:	ebcb 0003 	rsb	r0, fp, r3
				window_widening_event_us;
			if (start_to_address_actual_us <=
			    start_to_address_expected_us) {
				ticks_drift_plus =
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
    9788:	fba0 010a 	umull	r0, r1, r0, sl
    978c:	a372      	add	r3, pc, #456	; (adr r3, 9958 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1958>)
    978e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9792:	f7f6 fd43 	bl	21c <__aeabi_uldivmod>
    9796:	fa1f fa80 	uxth.w	sl, r0
    979a:	e007      	b.n	97ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17ac>
					TICKER_US_TO_TICKS((uint64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    979c:	fbab 010a 	umull	r0, r1, fp, sl
    97a0:	f7f6 fd3c 	bl	21c <__aeabi_uldivmod>
					TICKER_US_TO_TICKS(start_to_address_actual_us);
				ticks_drift_minus =
    97a4:	f04f 0a02 	mov.w	sl, #2
					TICKER_US_TO_TICKS(window_widening_event_us);
				ticks_drift_minus =
					TICKER_US_TO_TICKS((uint64_t)(start_to_address_expected_us -
								      start_to_address_actual_us));
			} else {
				ticks_drift_plus =
    97a8:	fa1f f880 	uxth.w	r8, r0
							   RADIO_PREAMBLE_TO_ADDRESS_US);
			}


			/* Reset window widening, as anchor point sync-ed */
			_radio.conn_curr->role.slave.window_widening_event_us = 0;
    97ac:	2300      	movs	r3, #0
    97ae:	6573      	str	r3, [r6, #84]	; 0x54
			_radio.conn_curr->role.slave.window_size_event_us = 0;
    97b0:	65f3      	str	r3, [r6, #92]	; 0x5c

			/* apply latency if no more data */
			_radio.conn_curr->latency_event = _radio.conn_curr->latency;
    97b2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    97b4:	8573      	strh	r3, [r6, #42]	; 0x2a
			if (_radio.conn_curr->pkt_tx_head) {
    97b6:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
    97ba:	b163      	cbz	r3, 97d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17d6>
				struct pdu_data *pdu_data_tx;

				pdu_data_tx = (struct pdu_data *)
					_radio.conn_curr->pkt_tx_head->pdu_data;
				if (pdu_data_tx->len ||
    97bc:	795b      	ldrb	r3, [r3, #5]
    97be:	b913      	cbnz	r3, 97c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17c6>
    97c0:	f896 310d 	ldrb.w	r3, [r6, #269]	; 0x10d
    97c4:	b13b      	cbz	r3, 97d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17d6>
				    _radio.conn_curr->packet_tx_head_offset) {
					_radio.conn_curr->latency_event = 0;
    97c6:	2300      	movs	r3, #0
    97c8:	8573      	strh	r3, [r6, #42]	; 0x2a
    97ca:	e004      	b.n	97d6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17d6>
				}
			}
		} else {
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
    97cc:	f04f 0a00 	mov.w	sl, #0
    97d0:	f880 a045 	strb.w	sl, [r0, #69]	; 0x45
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    97d4:	46d0      	mov	r8, sl
			/* Reset connection failed to establish procedure */
			_radio.conn_curr->role.master.connect_expire = 0;
		}

		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
    97d6:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    97da:	2200      	movs	r2, #0
    97dc:	869a      	strh	r2, [r3, #52]	; 0x34
    97de:	e025      	b.n	982c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x182c>
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    97e0:	2b04      	cmp	r3, #4
    97e2:	d10b      	bne.n	97fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17fc>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
    97e4:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
		/* Reset supervision counter */
		_radio.conn_curr->supervision_expire = 0;
	}

	/* Remote Initiated terminate happened in previous event for Master */
	else if ((_radio.role == ROLE_MASTER) &&
    97e8:	b141      	cbz	r1, 97fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17fc>
		 (_radio.conn_curr->llcp_terminate.reason_peer != 0)) {
		terminate_ind_rx_enqueue(_radio.conn_curr,
    97ea:	f7fc f9c7 	bl	5b7c <terminate_ind_rx_enqueue>
					 _radio.conn_curr->llcp_terminate.reason_peer);

		connection_release(_radio.conn_curr);
    97ee:	f8d8 0224 	ldr.w	r0, [r8, #548]	; 0x224
    97f2:	f7fb fc2d 	bl	5050 <connection_release>
		_radio.conn_curr = NULL;
    97f6:	f8c8 6224 	str.w	r6, [r8, #548]	; 0x224
    97fa:	e11f      	b.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    97fc:	7ba3      	ldrb	r3, [r4, #14]
    97fe:	4e58      	ldr	r6, [pc, #352]	; (9960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1960>)
    9800:	2b04      	cmp	r3, #4
    9802:	d10a      	bne.n	981a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x181a>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
    9804:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45

		return;
	}

	/* If master, check connection failed to establish */
	else if ((_radio.role == ROLE_MASTER) &&
    9808:	b13b      	cbz	r3, 981a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x181a>
		 (_radio.conn_curr->role.master.connect_expire != 0)) {
		if (_radio.conn_curr->role.master.connect_expire >
    980a:	429d      	cmp	r5, r3
    980c:	d203      	bcs.n	9816 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1816>
		    elapsed_event) {
			_radio.conn_curr->role.master.connect_expire -= elapsed_event;
    980e:	1b5b      	subs	r3, r3, r5
    9810:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    9814:	e007      	b.n	9826 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1826>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    9816:	213e      	movs	r1, #62	; 0x3e
    9818:	e027      	b.n	986a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x186a>
	/* if anchor point not sync-ed, start supervision timeout, and break
	 * latency if any.
	 */
	else {
		/* Start supervision timeout, if not started already */
		if (_radio.conn_curr->supervision_expire == 0) {
    981a:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    981c:	b91b      	cbnz	r3, 9826 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1826>
			_radio.conn_curr->supervision_expire =
    981e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9820:	8682      	strh	r2, [r0, #52]	; 0x34

		return;
	}

	ticks_drift_plus = 0;
	ticks_drift_minus = 0;
    9822:	469a      	mov	sl, r3
    9824:	e001      	b.n	982a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x182a>
    9826:	f04f 0a00 	mov.w	sl, #0
		_radio.conn_curr = NULL;

		return;
	}

	ticks_drift_plus = 0;
    982a:	46d0      	mov	r8, sl
		}
	}

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
    982c:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    9830:	4e4b      	ldr	r6, [pc, #300]	; (9960 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1960>)
    9832:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    9834:	b31b      	cbz	r3, 987e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x187e>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    9836:	429d      	cmp	r5, r3
    9838:	d216      	bcs.n	9868 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1868>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    983a:	1b5b      	subs	r3, r3, r5
    983c:	b29b      	uxth	r3, r3

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    983e:	2200      	movs	r2, #0

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    9840:	2b06      	cmp	r3, #6

	/* check supervision timeout */
	force = 0;
	if (_radio.conn_curr->supervision_expire != 0) {
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
			_radio.conn_curr->supervision_expire -= elapsed_event;
    9842:	8683      	strh	r3, [r0, #52]	; 0x34

			/* break latency */
			_radio.conn_curr->latency_event = 0;
    9844:	8542      	strh	r2, [r0, #42]	; 0x2a

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
    9846:	d91c      	bls.n	9882 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1882>
				force = 1;
			}
			/* use randomness to force slave role when anchor
			 * points are being missed.
			 */
			else if (_radio.role == ROLE_SLAVE) {
    9848:	7bb3      	ldrb	r3, [r6, #14]
    984a:	2b03      	cmp	r3, #3
    984c:	d117      	bne.n	987e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x187e>
				if (latency_event != 0) {
    984e:	f1b9 0f00 	cmp.w	r9, #0
    9852:	d116      	bne.n	9882 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1882>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;
    9854:	6e02      	ldr	r2, [r0, #96]	; 0x60

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    9856:	0853      	lsrs	r3, r2, #1
					if (force) {
    9858:	07d2      	lsls	r2, r2, #31
    985a:	d401      	bmi.n	9860 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1860>
					force = 1;
				} else {
					force = _radio.conn_curr->role.slave.force & 0x01;

					/* rotate force bits */
					_radio.conn_curr->role.slave.force >>= 1;
    985c:	6603      	str	r3, [r0, #96]	; 0x60
    985e:	e00e      	b.n	987e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x187e>
					if (force) {
						_radio.conn_curr->role.slave.force |=
    9860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9864:	6603      	str	r3, [r0, #96]	; 0x60
    9866:	e00c      	b.n	9882 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1882>
							((uint32_t)1 << 31);
					}
				}
			}
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    9868:	2108      	movs	r1, #8
    986a:	f7fc f987 	bl	5b7c <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    986e:	f8d6 0224 	ldr.w	r0, [r6, #548]	; 0x224
    9872:	f7fb fbed 	bl	5050 <connection_release>
			_radio.conn_curr = NULL;
    9876:	2300      	movs	r3, #0
    9878:	f8c6 3224 	str.w	r3, [r6, #548]	; 0x224
    987c:	e0de      	b.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
				_radio.conn_curr->supervision_reload;
		}
	}

	/* check supervision timeout */
	force = 0;
    987e:	2600      	movs	r6, #0
    9880:	e000      	b.n	9884 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1884>

			/* Force both master and slave when close to
			 * supervision timeout.
			 */
			if (_radio.conn_curr->supervision_expire <= 6) {
				force = 1;
    9882:	2601      	movs	r6, #1
			return;
		}
	}

	/* check procedure timeout */
	if (_radio.conn_curr->procedure_expire != 0) {
    9884:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    9886:	b17b      	cbz	r3, 98a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a8>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    9888:	429d      	cmp	r5, r3
    988a:	d202      	bcs.n	9892 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1892>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    988c:	1b5b      	subs	r3, r3, r5
    988e:	8703      	strh	r3, [r0, #56]	; 0x38
    9890:	e00a      	b.n	98a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a8>
		} else {
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    9892:	2122      	movs	r1, #34	; 0x22
    9894:	f7fc f972 	bl	5b7c <terminate_ind_rx_enqueue>

			connection_release(_radio.conn_curr);
    9898:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
    989c:	f7fb fbd8 	bl	5050 <connection_release>
			_radio.conn_curr = NULL;
    98a0:	2300      	movs	r3, #0
    98a2:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
    98a6:	e0c9      	b.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
		}
	}

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	/* check apto */
	if (_radio.conn_curr->apto_expire != 0) {
    98a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    98ac:	b32b      	cbz	r3, 98fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18fa>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    98ae:	429d      	cmp	r5, r3
    98b0:	d203      	bcs.n	98ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18ba>
			_radio.conn_curr->apto_expire -= elapsed_event;
    98b2:	1b5b      	subs	r3, r3, r5
    98b4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    98b8:	e01f      	b.n	98fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18fa>
		} else {
			struct radio_pdu_node_rx *radio_pdu_node_rx;

			_radio.conn_curr->apto_expire = 0;
    98ba:	2300      	movs	r3, #0
    98bc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

			/* Prepare the rx packet structure */
			radio_pdu_node_rx = packet_rx_reserve_get(2);
    98c0:	2002      	movs	r0, #2
    98c2:	f7fa fedf 	bl	4684 <packet_rx_reserve_get>
			LL_ASSERT(radio_pdu_node_rx);
    98c6:	4683      	mov	fp, r0
    98c8:	b968      	cbnz	r0, 98e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18e6>
    98ca:	4b26      	ldr	r3, [pc, #152]	; (9964 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1964>)
    98cc:	9301      	str	r3, [sp, #4]
    98ce:	4b26      	ldr	r3, [pc, #152]	; (9968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1968>)
    98d0:	9300      	str	r3, [sp, #0]
    98d2:	4927      	ldr	r1, [pc, #156]	; (9970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1970>)
    98d4:	4b27      	ldr	r3, [pc, #156]	; (9974 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1974>)
    98d6:	4a28      	ldr	r2, [pc, #160]	; (9978 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1978>)
    98d8:	4828      	ldr	r0, [pc, #160]	; (997c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x197c>)
    98da:	f7f7 fc67 	bl	11ac <printk>
    98de:	4659      	mov	r1, fp
    98e0:	4658      	mov	r0, fp
    98e2:	f002 feb5 	bl	c650 <_SysFatalErrorHandler>

			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    98e6:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    98ea:	8c1b      	ldrh	r3, [r3, #32]
    98ec:	f8ab 3006 	strh.w	r3, [fp, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    98f0:	2307      	movs	r3, #7
    98f2:	f88b 3004 	strb.w	r3, [fp, #4]

			/* enqueue apto event into rx queue */
			packet_rx_enqueue();
    98f6:	f7fc f861 	bl	59bc <packet_rx_enqueue>
		}
	}

	/* check appto */
	if (_radio.conn_curr->appto_expire != 0) {
    98fa:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
    98fe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    9900:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
    9904:	b192      	cbz	r2, 992c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192c>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    9906:	4295      	cmp	r5, r2
    9908:	d202      	bcs.n	9910 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1910>
			_radio.conn_curr->appto_expire -= elapsed_event;
    990a:	1b55      	subs	r5, r2, r5
    990c:	879d      	strh	r5, [r3, #60]	; 0x3c
    990e:	e00d      	b.n	992c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192c>
		} else {
			_radio.conn_curr->appto_expire = 0;
    9910:	2200      	movs	r2, #0
    9912:	879a      	strh	r2, [r3, #60]	; 0x3c

			if ((_radio.conn_curr->procedure_expire == 0) &&
    9914:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    9916:	b94a      	cbnz	r2, 992c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x192c>
    9918:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    991c:	428a      	cmp	r2, r1
    991e:	d109      	bne.n	9934 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1934>
			    (_radio.conn_curr->llcp_req ==
			     _radio.conn_curr->llcp_ack)) {
				_radio.conn_curr->llcp_type = LLCP_PING;
    9920:	2206      	movs	r2, #6
    9922:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				_radio.conn_curr->llcp_ack--;
    9926:	1e4a      	subs	r2, r1, #1
    9928:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		}
	}
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	/* break latency based on ctrl procedure pending */
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    992c:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
    9930:	428a      	cmp	r2, r1
    9932:	d006      	beq.n	9942 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1942>
    9934:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
    9938:	3a01      	subs	r2, #1
    993a:	2a01      	cmp	r2, #1
	    ((_radio.conn_curr->llcp_type == LLCP_CONNECTION_UPDATE) ||
	     (_radio.conn_curr->llcp_type == LLCP_CHANNEL_MAP))) {
		_radio.conn_curr->latency_event = 0;
    993c:	bf9c      	itt	ls
    993e:	2200      	movls	r2, #0
    9940:	855a      	strhls	r2, [r3, #42]	; 0x2a
	}

	/* check if latency needs update */
	lazy = 0;
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    9942:	b916      	cbnz	r6, 994a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x194a>
    9944:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    9946:	454a      	cmp	r2, r9
    9948:	d01c      	beq.n	9984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1984>
		lazy = _radio.conn_curr->latency_event + 1;
    994a:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
    994c:	3101      	adds	r1, #1
    994e:	b289      	uxth	r1, r1
    9950:	e019      	b.n	9986 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1986>
    9952:	bf00      	nop
    9954:	f3af 8000 	nop.w
    9958:	1afd498d 	.word	0x1afd498d
    995c:	00000007 	.word	0x00000007
    9960:	20000b44 	.word	0x20000b44
    9964:	0000dd4e 	.word	0x0000dd4e
    9968:	0000dd53 	.word	0x0000dd53
    996c:	0000f240 	.word	0x0000f240
    9970:	0000dd04 	.word	0x0000dd04
    9974:	0000f0e7 	.word	0x0000f0e7
    9978:	0000dcfd 	.word	0x0000dcfd
    997c:	0000e629 	.word	0x0000e629
    9980:	3b9aca00 	.word	0x3b9aca00
	     (_radio.conn_curr->llcp_type == LLCP_CHANNEL_MAP))) {
		_radio.conn_curr->latency_event = 0;
	}

	/* check if latency needs update */
	lazy = 0;
    9984:	4631      	mov	r1, r6
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
		lazy = _radio.conn_curr->latency_event + 1;
	}

	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    9986:	f1b8 0f00 	cmp.w	r8, #0
    998a:	d105      	bne.n	9998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1998>
    998c:	f1ba 0f00 	cmp.w	sl, #0
    9990:	d102      	bne.n	9998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1998>
    9992:	b909      	cbnz	r1, 9998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1998>
	    (lazy != 0) || (force != 0)) {
    9994:	2e00      	cmp	r6, #0
    9996:	d051      	beq.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
		uint32_t ticker_status;

		ticker_status =
    9998:	f893 2020 	ldrb.w	r2, [r3, #32]
    999c:	9103      	str	r1, [sp, #12]
    999e:	2500      	movs	r5, #0
    99a0:	3207      	adds	r2, #7
    99a2:	4643      	mov	r3, r8
    99a4:	9506      	str	r5, [sp, #24]
    99a6:	9505      	str	r5, [sp, #20]
    99a8:	9604      	str	r6, [sp, #16]
    99aa:	9502      	str	r5, [sp, #8]
    99ac:	9501      	str	r5, [sp, #4]
    99ae:	f8cd a000 	str.w	sl, [sp]
    99b2:	b2d2      	uxtb	r2, r2
    99b4:	4629      	mov	r1, r5
    99b6:	4628      	mov	r0, r5
    99b8:	f7fa fcda 	bl	4370 <ticker_update>
				      _radio.conn_curr->handle,
				      ticks_drift_plus, ticks_drift_minus, 0, 0,
				      lazy, force,
				      0 /** @todo ticker_success_assert */,
				      0 /** @todo (void *) __LINE__ */);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    99bc:	f030 0302 	bics.w	r3, r0, #2
    99c0:	d03c      	beq.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
    99c2:	4b33      	ldr	r3, [pc, #204]	; (9a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a90>)
    99c4:	9301      	str	r3, [sp, #4]
    99c6:	4b33      	ldr	r3, [pc, #204]	; (9a94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a94>)
    99c8:	9300      	str	r3, [sp, #0]
    99ca:	4b33      	ldr	r3, [pc, #204]	; (9a98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a98>)
    99cc:	4933      	ldr	r1, [pc, #204]	; (9a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a9c>)
    99ce:	4a34      	ldr	r2, [pc, #208]	; (9aa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa0>)
    99d0:	4834      	ldr	r0, [pc, #208]	; (9aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa4>)
    99d2:	f7f7 fbeb 	bl	11ac <printk>
    99d6:	4629      	mov	r1, r5
    99d8:	e00a      	b.n	99f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19f0>
		isr_close_conn();
		break;

	case ROLE_NONE:
	default:
		LL_ASSERT(0);
    99da:	4b2d      	ldr	r3, [pc, #180]	; (9a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a90>)
    99dc:	9301      	str	r3, [sp, #4]
    99de:	4b2d      	ldr	r3, [pc, #180]	; (9a94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a94>)
    99e0:	9300      	str	r3, [sp, #0]
    99e2:	492e      	ldr	r1, [pc, #184]	; (9a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a9c>)
    99e4:	4b30      	ldr	r3, [pc, #192]	; (9aa8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa8>)
    99e6:	4a2e      	ldr	r2, [pc, #184]	; (9aa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa0>)
    99e8:	4830      	ldr	r0, [pc, #192]	; (9aac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aac>)
    99ea:	f7f7 fbdf 	bl	11ac <printk>
    99ee:	2100      	movs	r1, #0
    99f0:	4608      	mov	r0, r1
    99f2:	f002 fe2d 	bl	c650 <_SysFatalErrorHandler>
    99f6:	e021      	b.n	9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
		 * using Radio Disable task.
		 */
		break;

	default:
		LL_ASSERT(0);
    99f8:	4b25      	ldr	r3, [pc, #148]	; (9a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a90>)
    99fa:	9301      	str	r3, [sp, #4]
    99fc:	4b25      	ldr	r3, [pc, #148]	; (9a94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a94>)
    99fe:	9300      	str	r3, [sp, #0]
    9a00:	4b2b      	ldr	r3, [pc, #172]	; (9ab0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab0>)
    9a02:	4926      	ldr	r1, [pc, #152]	; (9a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a9c>)
    9a04:	4a26      	ldr	r2, [pc, #152]	; (9aa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa0>)
    9a06:	4829      	ldr	r0, [pc, #164]	; (9aac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aac>)
    9a08:	f7f7 fbd0 	bl	11ac <printk>
    9a0c:	2100      	movs	r1, #0
    9a0e:	f7fe bb64 	b.w	80da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xda>
			err = isr_rx_obs(irkmatch_id, rssi_ready);
		} else {
			err = 1;
		}
		if (err) {
			_radio.state = STATE_CLOSE;
    9a12:	2303      	movs	r3, #3
    9a14:	73e3      	strb	r3, [r4, #15]
			radio_disable();
    9a16:	f7f9 fbb7 	bl	3188 <radio_disable>
			/* switch scanner state to idle */
			_radio.observer.scan_state = 0;
    9a1a:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    9a1e:	f36f 0341 	bfc	r3, #1, #1
    9a22:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
    9a26:	e02e      	b.n	9a86 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a86>
		}
		break;

	case PDU_DATA_LLCTRL_TYPE_CHANNEL_MAP_REQ:
		if (channel_map_update(_radio.conn_curr, pdu_data_rx)) {
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
    9a28:	2328      	movs	r3, #40	; 0x28
    9a2a:	f88a 30a3 	strb.w	r3, [sl, #163]	; 0xa3
	struct radio_pdu_node_rx *radio_pdu_node_rx;
	struct radio_pdu_node_tx *tx_release = NULL;
	uint8_t is_empty_pdu_tx_retry;
	struct pdu_data *pdu_data_rx;
	struct pdu_data *pdu_data_tx;
	uint8_t rx_enqueue = 0;
    9a2e:	2500      	movs	r5, #0
    9a30:	e534      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>
    9a32:	4615      	mov	r5, r2
    9a34:	e000      	b.n	9a38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a38>
    9a36:	460d      	mov	r5, r1
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
		   _radio.conn_curr->handle)) ||
		 ((_radio.fc_req != 0) &&
		  (_radio.fc_handle[_radio.fc_req - 1] ==
		   _radio.conn_curr->handle)))))) {
		uint8_t ccm_rx_increment = 0;
    9a38:	60fd      	str	r5, [r7, #12]
    9a3a:	e52f      	b.n	949c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x149c>

	if (dont_close) {
		return;
	}

	_radio.role = ROLE_NONE;
    9a3c:	2500      	movs	r5, #0
    9a3e:	73a5      	strb	r5, [r4, #14]
	_radio.state = STATE_NONE;
    9a40:	73e5      	strb	r5, [r4, #15]
	_radio.ticker_id_event = 0;
    9a42:	7365      	strb	r5, [r4, #13]

	radio_tmr_stop();
    9a44:	f7f9 fcfc 	bl	3440 <radio_tmr_stop>
	ARG_UNUSED(ticks_at_expire);
	ARG_UNUSED(remainder);
	ARG_UNUSED(lazy);
	ARG_UNUSED(context);

	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
    9a48:	4b1a      	ldr	r3, [pc, #104]	; (9ab4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab4>)
    9a4a:	462a      	mov	r2, r5
    9a4c:	4629      	mov	r1, r5
    9a4e:	4628      	mov	r0, r5
    9a50:	f7f9 f8f2 	bl	2c38 <mayfly_enqueue>
				RADIO_TICKER_USER_ID_WORKER, 0,
				&s_mfy_radio_inactive);
	LL_ASSERT(!retval);
    9a54:	b168      	cbz	r0, 9a72 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a72>
    9a56:	4b0e      	ldr	r3, [pc, #56]	; (9a90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a90>)
    9a58:	9301      	str	r3, [sp, #4]
    9a5a:	4b0e      	ldr	r3, [pc, #56]	; (9a94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a94>)
    9a5c:	9300      	str	r3, [sp, #0]
    9a5e:	490f      	ldr	r1, [pc, #60]	; (9a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a9c>)
    9a60:	4b15      	ldr	r3, [pc, #84]	; (9ab8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab8>)
    9a62:	4a0f      	ldr	r2, [pc, #60]	; (9aa0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa0>)
    9a64:	4815      	ldr	r0, [pc, #84]	; (9abc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1abc>)
    9a66:	f7f7 fba1 	bl	11ac <printk>
    9a6a:	4629      	mov	r1, r5
    9a6c:	4628      	mov	r0, r5
    9a6e:	f002 fdef 	bl	c650 <_SysFatalErrorHandler>

	radio_tmr_stop();

	event_inactive(0, 0, 0, 0);

	clock_control_off(_radio.hf_clock, NULL);
    9a72:	6820      	ldr	r0, [r4, #0]
    9a74:	6843      	ldr	r3, [r0, #4]
    9a76:	2100      	movs	r1, #0
    9a78:	685b      	ldr	r3, [r3, #4]
    9a7a:	4798      	blx	r3

	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    9a7c:	2201      	movs	r2, #1
    9a7e:	4611      	mov	r1, r2
    9a80:	2000      	movs	r0, #0
    9a82:	f001 fc37 	bl	b2f4 <mayfly_enable>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    9a86:	3724      	adds	r7, #36	; 0x24
    9a88:	46bd      	mov	sp, r7
    9a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a8e:	bf00      	nop
    9a90:	0000dd4e 	.word	0x0000dd4e
    9a94:	0000dd53 	.word	0x0000dd53
    9a98:	0000f0e7 	.word	0x0000f0e7
    9a9c:	0000dd04 	.word	0x0000dd04
    9aa0:	0000dcfd 	.word	0x0000dcfd
    9aa4:	0000e588 	.word	0x0000e588
    9aa8:	0000f319 	.word	0x0000f319
    9aac:	0000e191 	.word	0x0000e191
    9ab0:	0000f032 	.word	0x0000f032
    9ab4:	20000260 	.word	0x20000260
    9ab8:	0000ef3e 	.word	0x0000ef3e
    9abc:	0000e471 	.word	0x0000e471

00009ac0 <radio_init>:
uint32_t radio_init(void *hf_clock, uint8_t sca, uint8_t connection_count_max,
		    uint8_t rx_count_max, uint8_t tx_count_max,
		    uint16_t packet_data_octets_max,
		    uint16_t packet_tx_data_size, uint8_t *mem_radio,
		    uint16_t mem_size)
{
    9ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ac4:	af00      	add	r7, sp, #0
	uint32_t retcode;
	uint8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    9ac6:	4d3c      	ldr	r5, [pc, #240]	; (9bb8 <radio_init+0xf8>)
uint32_t radio_init(void *hf_clock, uint8_t sca, uint8_t connection_count_max,
		    uint8_t rx_count_max, uint8_t tx_count_max,
		    uint16_t packet_data_octets_max,
		    uint16_t packet_tx_data_size, uint8_t *mem_radio,
		    uint16_t mem_size)
{
    9ac8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    9aca:	f897 e020 	ldrb.w	lr, [r7, #32]
    9ace:	8e3e      	ldrh	r6, [r7, #48]	; 0x30

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;

	/* initialise SCA */
	_radio.sca = sca;
    9ad0:	f885 1230 	strb.w	r1, [r5, #560]	; 0x230
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9ad4:	f44f 7188 	mov.w	r1, #272	; 0x110
uint32_t radio_init(void *hf_clock, uint8_t sca, uint8_t connection_count_max,
		    uint8_t rx_count_max, uint8_t tx_count_max,
		    uint16_t packet_data_octets_max,
		    uint16_t packet_tx_data_size, uint8_t *mem_radio,
		    uint16_t mem_size)
{
    9ad8:	f8b7 c024 	ldrh.w	ip, [r7, #36]	; 0x24
	uint32_t retcode;
	uint8_t *mem_radio_end;

	/* intialise hf_clock device to use in prepare */
	_radio.hf_clock = hf_clock;
    9adc:	6028      	str	r0, [r5, #0]
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
    9ade:	fb01 4102 	mla	r1, r1, r2, r4
	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
	_radio.conn_pool = mem_radio;
    9ae2:	f8c5 4218 	str.w	r4, [r5, #536]	; 0x218

	/* initialise SCA */
	_radio.sca = sca;

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;
    9ae6:	19a0      	adds	r0, r4, r6
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    9ae8:	f103 0903 	add.w	r9, r3, #3
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    9aec:	f10e 0401 	add.w	r4, lr, #1
	_radio.packet_rx_count = (rx_count_max + 1);
    9af0:	3304      	adds	r3, #4
	_radio.packet_tx_count = (tx_count_max + 1);
    9af2:	f10e 0e02 	add.w	lr, lr, #2
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    9af6:	fa5f f883 	uxtb.w	r8, r3
	_radio.packet_tx_count = (tx_count_max + 1);
    9afa:	fa5f fe8e 	uxtb.w	lr, lr
    9afe:	f885 e280 	strb.w	lr, [r5, #640]	; 0x280
	_radio.link_rx_data_quota = rx_count_max;

	/* initialise rx queue memory */
	_radio.packet_rx = (void *)mem_radio;
    9b02:	f8c5 1248 	str.w	r1, [r5, #584]	; 0x248
	mem_radio +=
    9b06:	eb01 0388 	add.w	r3, r1, r8, lsl #2
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9b0a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((RADIO_ACPDU_SIZE_MAX + 1) <
    9b0e:	f10c 0103 	add.w	r1, ip, #3
    9b12:	2929      	cmp	r1, #41	; 0x29
	/* initialise rx and tx queue counts */

	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
    9b14:	fa5f f989 	uxtb.w	r9, r9
	_radio.packet_rx = (void *)mem_radio;
	mem_radio +=
	    (sizeof(struct radio_pdu_node_rx *)*_radio.packet_rx_count);

	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
    9b18:	f8c5 3278 	str.w	r3, [r5, #632]	; 0x278
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9b1c:	4473      	add	r3, lr
    9b1e:	4629      	mov	r1, r5
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
	_radio.packet_tx_count = (tx_count_max + 1);
	_radio.link_rx_data_quota = rx_count_max;
    9b20:	f885 9260 	strb.w	r9, [r5, #608]	; 0x260
	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
    9b24:	f8a5 c240 	strh.w	ip, [r5, #576]	; 0x240

	/* initialised radio mem end variable */
	mem_radio_end = mem_radio + mem_size;

	/* initialise connection context memory */
	_radio.connection_count = connection_count_max;
    9b28:	f885 2220 	strb.w	r2, [r5, #544]	; 0x220
	/* initialise tx queue memory */
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
    9b2c:	f8c5 327c 	str.w	r3, [r5, #636]	; 0x27c
	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((RADIO_ACPDU_SIZE_MAX + 1) <
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
    9b30:	bf88      	it	hi
    9b32:	f10c 0c0e 	addhi.w	ip, ip, #14
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
	_radio.packet_rx_count = (rx_count_max + 1);
    9b36:	f885 824c 	strb.w	r8, [r5, #588]	; 0x24c
		_radio.packet_rx_data_pool_size =
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    9b3a:	bf99      	ittee	ls
    9b3c:	eb09 0549 	addls.w	r5, r9, r9, lsl #1
    9b40:	eb09 0985 	addls.w	r9, r9, r5, lsl #2
	/* initialise rx memory size and count */
	_radio.packet_data_octets_max = packet_data_octets_max;
	if ((RADIO_ACPDU_SIZE_MAX + 1) <
	    (offsetof(struct pdu_data, payload) +
			_radio.packet_data_octets_max)) {
		_radio.packet_rx_data_pool_size =
    9b44:	f02c 0c03 	bichi.w	ip, ip, #3
    9b48:	fb1c f909 	smulbbhi	r9, ip, r9
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			    offsetof(struct pdu_data, payload) +
			    _radio.packet_data_octets_max) * rx_count_max);
	} else {
		_radio.packet_rx_data_pool_size =
    9b4c:	bf98      	it	ls
    9b4e:	ea4f 0989 	movls.w	r9, r9, lsl #2
    9b52:	f8a1 9242 	strh.w	r9, [r1, #578]	; 0x242
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (RADIO_ACPDU_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9b56:	f8b1 5242 	ldrh.w	r5, [r1, #578]	; 0x242
	_radio.pkt_tx = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);

	/* initialise tx release queue memory */
	_radio.pkt_release = (void *)mem_radio;
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
    9b5a:	4473      	add	r3, lr
	} else {
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (RADIO_ACPDU_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9b5c:	f04f 0e34 	mov.w	lr, #52	; 0x34
    9b60:	f8a1 e244 	strh.w	lr, [r1, #580]	; 0x244
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    9b64:	4442      	add	r2, r8
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (RADIO_ACPDU_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9b66:	fbb5 fefe 	udiv	lr, r5, lr
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;
    9b6a:	441d      	add	r5, r3

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
    9b6c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
	mem_radio += _radio.packet_rx_data_pool_size;

	/* initialise rx link pool memory */
	_radio.link_rx_pool = mem_radio;
    9b70:	f8c1 5250 	str.w	r5, [r1, #592]	; 0x250
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    9b74:	8d3d      	ldrh	r5, [r7, #40]	; 0x28
	_radio.link_rx_pool = mem_radio;
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
    9b76:	f8c1 2264 	str.w	r2, [r1, #612]	; 0x264
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    9b7a:	350a      	adds	r5, #10
    9b7c:	f025 0503 	bic.w	r5, r5, #3
	/* additional for pdu to NACK or receive empty PDU,
	 * 1 scan resp and 1* ctrl event.
	 */
	rx_count_max += 3;
	 /* additional pdu to send enc_req ctrl pdu */
	tx_count_max += 1;
    9b80:	b2e4      	uxtb	r4, r4
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
					    _radio.connection_count));

	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
    9b82:	3248      	adds	r2, #72	; 0x48

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    9b84:	b2ad      	uxth	r5, r5
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);

	/* initialise rx data pool memory */
	_radio.pkt_rx_data_pool = mem_radio;
    9b86:	f8c1 3238 	str.w	r3, [r1, #568]	; 0x238
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
    9b8a:	fb04 2305 	mla	r3, r4, r5, r2
	if (retcode) {
    9b8e:	1a1c      	subs	r4, r3, r0
		_radio.packet_rx_data_pool_size =
			(MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
			  (RADIO_ACPDU_SIZE_MAX + 1)) * rx_count_max);
	}
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9b90:	f881 e246 	strb.w	lr, [r1, #582]	; 0x246
	/* initialise tx ctrl pool memory */
	_radio.pkt_tx_ctrl_pool = mem_radio;
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;

	/* initialise tx data memory size and count */
	_radio.packet_tx_data_size =
    9b94:	f8a1 5274 	strh.w	r5, [r1, #628]	; 0x274
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
		       offsetof(struct pdu_data, payload) +
		       packet_tx_data_size);

	/* initialise tx data pool memory */
	_radio.pkt_tx_data_pool = mem_radio;
    9b98:	f8c1 226c 	str.w	r2, [r1, #620]	; 0x26c

	/* check for sufficient memory allocation for stack
	 * configuration.
	 */
	retcode = (mem_radio - mem_radio_end);
	if (retcode) {
    9b9c:	d002      	beq.n	9ba4 <radio_init+0xe4>
		return (retcode + mem_size);
    9b9e:	1930      	adds	r0, r6, r4
    9ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	 * This is a simple flow control to rx data only on one selected
	 * connection handle.
	 * TODO: replace this feature with host-to-controller flowcontrol
	 * implementation/design.
	 */
	_radio.fc_ena = 1;
    9ba4:	4b04      	ldr	r3, [pc, #16]	; (9bb8 <radio_init+0xf8>)
    9ba6:	2201      	movs	r2, #1
    9ba8:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e

	/* memory allocations */
	common_init();
    9bac:	f7fa ff0a 	bl	49c4 <common_init>

	return retcode;
    9bb0:	4620      	mov	r0, r4
}
    9bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9bb6:	bf00      	nop
    9bb8:	20000b44 	.word	0x20000b44

00009bbc <ctrl_reset>:

void ctrl_reset(void)
{
    9bbc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9bbe:	2103      	movs	r1, #3

	return retcode;
}

void ctrl_reset(void)
{
    9bc0:	af00      	add	r7, sp, #0
	uint16_t conn_handle;

	/* disable advertiser events */
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
    9bc2:	2005      	movs	r0, #5
    9bc4:	f7fa ffee 	bl	4ba4 <role_disable>

	/* disable oberver events */
	role_disable(RADIO_TICKER_ID_OBS, RADIO_TICKER_ID_OBS_STOP);
    9bc8:	2104      	movs	r1, #4
    9bca:	2006      	movs	r0, #6
    9bcc:	f7fa ffea 	bl	4ba4 <role_disable>

	/* disable connection events */
	for (conn_handle = 0; conn_handle < _radio.connection_count;
    9bd0:	4d1b      	ldr	r5, [pc, #108]	; (9c40 <ctrl_reset+0x84>)
    9bd2:	2400      	movs	r4, #0
    9bd4:	f895 1220 	ldrb.w	r1, [r5, #544]	; 0x220
    9bd8:	4b19      	ldr	r3, [pc, #100]	; (9c40 <ctrl_reset+0x84>)
    9bda:	b2a2      	uxth	r2, r4
    9bdc:	4291      	cmp	r1, r2
    9bde:	f104 0401 	add.w	r4, r4, #1
    9be2:	d905      	bls.n	9bf0 <ctrl_reset+0x34>
	     conn_handle++) {
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
    9be4:	1da0      	adds	r0, r4, #6
    9be6:	21ff      	movs	r1, #255	; 0xff
    9be8:	b2c0      	uxtb	r0, r0
    9bea:	f7fa ffdb 	bl	4ba4 <role_disable>
    9bee:	e7f1      	b.n	9bd4 <ctrl_reset+0x18>
	/* reset controller context members */
	_radio.filter_enable_bitmask = 0;
	_radio.nirk = 0;
	_radio.advertiser.conn = NULL;
	_radio.observer.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9bf0:	2034      	movs	r0, #52	; 0x34
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
    9bf2:	f8b3 1242 	ldrh.w	r1, [r3, #578]	; 0x242
    9bf6:	fbb1 f1f0 	udiv	r1, r1, r0
    9bfa:	f883 1246 	strb.w	r1, [r3, #582]	; 0x246
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9bfe:	f893 124c 	ldrb.w	r1, [r3, #588]	; 0x24c
	/* reset controller context members */
	_radio.filter_enable_bitmask = 0;
	_radio.nirk = 0;
	_radio.advertiser.conn = NULL;
	_radio.observer.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
    9c02:	f8a3 0244 	strh.w	r0, [r3, #580]	; 0x244
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.filter_enable_bitmask = 0;
    9c06:	2200      	movs	r2, #0
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9c08:	3901      	subs	r1, #1
	_radio.advertiser.conn = NULL;
	_radio.observer.conn = NULL;
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
    9c0a:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.filter_enable_bitmask = 0;
    9c0e:	741a      	strb	r2, [r3, #16]
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
	_radio.packet_tx_first = 0;
    9c10:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
			     TICKER_NULL);
	}

	/* reset controller context members */
	_radio.filter_enable_bitmask = 0;
	_radio.nirk = 0;
    9c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	_radio.advertiser.conn = NULL;
    9c18:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	_radio.observer.conn = NULL;
    9c1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
				       _radio.packet_rx_data_size);
	_radio.packet_rx_last = 0;
	_radio.packet_rx_acquire = 0;
    9c20:	f883 224e 	strb.w	r2, [r3, #590]	; 0x24e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
    9c24:	f883 1260 	strb.w	r1, [r3, #608]	; 0x260
	_radio.packet_tx_first = 0;
	_radio.packet_tx_last = 0;
    9c28:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
	_radio.packet_release_first = 0;
    9c2c:	f883 2283 	strb.w	r2, [r3, #643]	; 0x283
	_radio.packet_release_last = 0;
    9c30:	f883 2284 	strb.w	r2, [r3, #644]	; 0x284

	/* memory allocations */
	common_init();
}
    9c34:	46bd      	mov	sp, r7
    9c36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	_radio.packet_tx_last = 0;
	_radio.packet_release_first = 0;
	_radio.packet_release_last = 0;

	/* memory allocations */
	common_init();
    9c3a:	f7fa bec3 	b.w	49c4 <common_init>
    9c3e:	bf00      	nop
    9c40:	20000b44 	.word	0x20000b44

00009c44 <radio_adv_data_get>:
{
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
    9c44:	b580      	push	{r7, lr}
	return &_radio.advertiser.adv_data;
}
    9c46:	4801      	ldr	r0, [pc, #4]	; (9c4c <radio_adv_data_get+0x8>)
{
	_radio.ticks_active_to_start = ticks_active_to_start;
}

struct radio_adv_data *radio_adv_data_get(void)
{
    9c48:	af00      	add	r7, sp, #0
	return &_radio.advertiser.adv_data;
}
    9c4a:	bd80      	pop	{r7, pc}
    9c4c:	20000c4b 	.word	0x20000c4b

00009c50 <radio_scan_data_get>:

struct radio_adv_data *radio_scan_data_get(void)
{
    9c50:	b580      	push	{r7, lr}
	return &_radio.advertiser.scan_data;
}
    9c52:	4801      	ldr	r0, [pc, #4]	; (9c58 <radio_scan_data_get+0x8>)
{
	return &_radio.advertiser.adv_data;
}

struct radio_adv_data *radio_scan_data_get(void)
{
    9c54:	af00      	add	r7, sp, #0
	return &_radio.advertiser.scan_data;
}
    9c56:	bd80      	pop	{r7, pc}
    9c58:	20000c9d 	.word	0x20000c9d

00009c5c <radio_filter_clear>:

void radio_filter_clear(void)
{
    9c5c:	b580      	push	{r7, lr}
	_radio.filter_enable_bitmask = 0;
    9c5e:	4b03      	ldr	r3, [pc, #12]	; (9c6c <radio_filter_clear+0x10>)
    9c60:	2200      	movs	r2, #0
    9c62:	741a      	strb	r2, [r3, #16]
	_radio.filter_addr_type_bitmask = 0;
    9c64:	745a      	strb	r2, [r3, #17]
{
	return &_radio.advertiser.scan_data;
}

void radio_filter_clear(void)
{
    9c66:	af00      	add	r7, sp, #0
	_radio.filter_enable_bitmask = 0;
	_radio.filter_addr_type_bitmask = 0;
    9c68:	bd80      	pop	{r7, pc}
    9c6a:	bf00      	nop
    9c6c:	20000b44 	.word	0x20000b44

00009c70 <radio_filter_add>:
}

uint32_t radio_filter_add(uint8_t addr_type, uint8_t *addr)
{
    9c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (_radio.filter_enable_bitmask != 0xFF) {
    9c72:	4b11      	ldr	r3, [pc, #68]	; (9cb8 <radio_filter_add+0x48>)
    9c74:	7c1a      	ldrb	r2, [r3, #16]
    9c76:	2aff      	cmp	r2, #255	; 0xff
	_radio.filter_enable_bitmask = 0;
	_radio.filter_addr_type_bitmask = 0;
}

uint32_t radio_filter_add(uint8_t addr_type, uint8_t *addr)
{
    9c78:	af00      	add	r7, sp, #0
	if (_radio.filter_enable_bitmask != 0xFF) {
    9c7a:	d01a      	beq.n	9cb2 <radio_filter_add+0x42>
    9c7c:	2600      	movs	r6, #0
		uint8_t index;

		for (index = 0;
		     (_radio.filter_enable_bitmask & (1 << index));
    9c7e:	b2f5      	uxtb	r5, r6
uint32_t radio_filter_add(uint8_t addr_type, uint8_t *addr)
{
	if (_radio.filter_enable_bitmask != 0xFF) {
		uint8_t index;

		for (index = 0;
    9c80:	fa42 f405 	asr.w	r4, r2, r5
    9c84:	f014 0401 	ands.w	r4, r4, #1
    9c88:	f106 0601 	add.w	r6, r6, #1
    9c8c:	d1f7      	bne.n	9c7e <radio_filter_add+0xe>
		     (_radio.filter_enable_bitmask & (1 << index));
		     index++) {
		}
		_radio.filter_enable_bitmask |= (1 << index);
    9c8e:	2601      	movs	r6, #1
    9c90:	40ae      	lsls	r6, r5
    9c92:	4332      	orrs	r2, r6
    9c94:	741a      	strb	r2, [r3, #16]
		_radio.filter_addr_type_bitmask |=
    9c96:	f000 0001 	and.w	r0, r0, #1
    9c9a:	7c5a      	ldrb	r2, [r3, #17]
    9c9c:	40a8      	lsls	r0, r5
    9c9e:	4310      	orrs	r0, r2
			((addr_type & 0x01) << index);
		memcpy(&_radio.filter_bdaddr[index][0], addr, BDADDR_SIZE);
    9ca0:	2206      	movs	r2, #6
		for (index = 0;
		     (_radio.filter_enable_bitmask & (1 << index));
		     index++) {
		}
		_radio.filter_enable_bitmask |= (1 << index);
		_radio.filter_addr_type_bitmask |=
    9ca2:	7458      	strb	r0, [r3, #17]
			((addr_type & 0x01) << index);
		memcpy(&_radio.filter_bdaddr[index][0], addr, BDADDR_SIZE);
    9ca4:	fb02 3005 	mla	r0, r2, r5, r3
    9ca8:	3012      	adds	r0, #18
    9caa:	f7f7 f8d8 	bl	e5e <memcpy>

		return 0;
    9cae:	4620      	mov	r0, r4
    9cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	return 1;
    9cb2:	2001      	movs	r0, #1
}
    9cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cb6:	bf00      	nop
    9cb8:	20000b44 	.word	0x20000b44

00009cbc <radio_filter_remove>:

uint32_t radio_filter_remove(uint8_t addr_type, uint8_t *addr)
{
    9cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t index;

	if (!_radio.filter_enable_bitmask) {
    9cc0:	4d19      	ldr	r5, [pc, #100]	; (9d28 <radio_filter_remove+0x6c>)
    9cc2:	7c2b      	ldrb	r3, [r5, #16]

	return 1;
}

uint32_t radio_filter_remove(uint8_t addr_type, uint8_t *addr)
{
    9cc4:	af00      	add	r7, sp, #0
    9cc6:	4681      	mov	r9, r0
    9cc8:	468a      	mov	sl, r1
	uint8_t index;

	if (!_radio.filter_enable_bitmask) {
    9cca:	b16b      	cbz	r3, 9ce8 <radio_filter_remove+0x2c>
    9ccc:	2408      	movs	r4, #8
		return 1;
	}

	index = 8;
	while (index--) {
		if ((_radio.filter_enable_bitmask & BIT(index)) &&
    9cce:	46a8      	mov	r8, r5
		    (((_radio.filter_addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(_radio.filter_bdaddr[index], addr, BDADDR_SIZE)) {
    9cd0:	f04f 0b06 	mov.w	fp, #6
    9cd4:	e004      	b.n	9ce0 <radio_filter_remove+0x24>
		return 1;
	}

	index = 8;
	while (index--) {
		if ((_radio.filter_enable_bitmask & BIT(index)) &&
    9cd6:	7c2b      	ldrb	r3, [r5, #16]
    9cd8:	4e13      	ldr	r6, [pc, #76]	; (9d28 <radio_filter_remove+0x6c>)
    9cda:	40e3      	lsrs	r3, r4
    9cdc:	07da      	lsls	r2, r3, #31
    9cde:	d406      	bmi.n	9cee <radio_filter_remove+0x32>
	if (!_radio.filter_enable_bitmask) {
		return 1;
	}

	index = 8;
	while (index--) {
    9ce0:	3c01      	subs	r4, #1
    9ce2:	b2e4      	uxtb	r4, r4
    9ce4:	2cff      	cmp	r4, #255	; 0xff
    9ce6:	d1f6      	bne.n	9cd6 <radio_filter_remove+0x1a>
uint32_t radio_filter_remove(uint8_t addr_type, uint8_t *addr)
{
	uint8_t index;

	if (!_radio.filter_enable_bitmask) {
		return 1;
    9ce8:	2001      	movs	r0, #1
    9cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	index = 8;
	while (index--) {
		if ((_radio.filter_enable_bitmask & BIT(index)) &&
    9cee:	f898 3011 	ldrb.w	r3, [r8, #17]
    9cf2:	4123      	asrs	r3, r4
    9cf4:	ea83 0309 	eor.w	r3, r3, r9
    9cf8:	07db      	lsls	r3, r3, #31
    9cfa:	d4f1      	bmi.n	9ce0 <radio_filter_remove+0x24>
		    (((_radio.filter_addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
		    !memcmp(_radio.filter_bdaddr[index], addr, BDADDR_SIZE)) {
    9cfc:	fb0b 8004 	mla	r0, fp, r4, r8
    9d00:	2206      	movs	r2, #6
    9d02:	4651      	mov	r1, sl
    9d04:	3012      	adds	r0, #18
    9d06:	f7f7 f892 	bl	e2e <memcmp>

	index = 8;
	while (index--) {
		if ((_radio.filter_enable_bitmask & BIT(index)) &&
		    (((_radio.filter_addr_type_bitmask >> index) & 0x01) ==
		     (addr_type & 0x01)) &&
    9d0a:	2800      	cmp	r0, #0
    9d0c:	d1e8      	bne.n	9ce0 <radio_filter_remove+0x24>
		    !memcmp(_radio.filter_bdaddr[index], addr, BDADDR_SIZE)) {
			_radio.filter_enable_bitmask &= ~BIT(index);
    9d0e:	2301      	movs	r3, #1
    9d10:	fa03 f404 	lsl.w	r4, r3, r4
    9d14:	43e4      	mvns	r4, r4
    9d16:	7c33      	ldrb	r3, [r6, #16]
    9d18:	b2e4      	uxtb	r4, r4
    9d1a:	4023      	ands	r3, r4
    9d1c:	7433      	strb	r3, [r6, #16]
			_radio.filter_addr_type_bitmask &= ~BIT(index);
    9d1e:	7c73      	ldrb	r3, [r6, #17]
    9d20:	401c      	ands	r4, r3
    9d22:	7474      	strb	r4, [r6, #17]

			return 0;
    9d24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d28:	20000b44 	.word	0x20000b44
    9d2c:	00000000 	.word	0x00000000

00009d30 <radio_adv_enable>:
	return 0;
}

uint32_t radio_adv_enable(uint16_t interval, uint8_t chl_map,
			  uint8_t filter_policy)
{
    9d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct connection *conn;
	uint32_t volatile ticker_status;
	uint32_t ticks_slot_offset;
	struct pdu_adv *pdu_adv;

	pdu_adv = (struct pdu_adv *)
    9d34:	f8df a268 	ldr.w	sl, [pc, #616]	; 9fa0 <radio_adv_enable+0x270>
	return 0;
}

uint32_t radio_adv_enable(uint16_t interval, uint8_t chl_map,
			  uint8_t filter_policy)
{
    9d38:	b08f      	sub	sp, #60	; 0x3c
	struct connection *conn;
	uint32_t volatile ticker_status;
	uint32_t ticks_slot_offset;
	struct pdu_adv *pdu_adv;

	pdu_adv = (struct pdu_adv *)
    9d3a:	f89a 3158 	ldrb.w	r3, [sl, #344]	; 0x158
    9d3e:	2628      	movs	r6, #40	; 0x28
    9d40:	fb06 a603 	mla	r6, r6, r3, sl
    9d44:	f506 7680 	add.w	r6, r6, #256	; 0x100
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9d48:	79f3      	ldrb	r3, [r6, #7]
	return 0;
}

uint32_t radio_adv_enable(uint16_t interval, uint8_t chl_map,
			  uint8_t filter_policy)
{
    9d4a:	af0a      	add	r7, sp, #40	; 0x28
	struct pdu_adv *pdu_adv;

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9d4c:	f003 030f 	and.w	r3, r3, #15
    9d50:	2b01      	cmp	r3, #1
	return 0;
}

uint32_t radio_adv_enable(uint16_t interval, uint8_t chl_map,
			  uint8_t filter_policy)
{
    9d52:	4683      	mov	fp, r0
    9d54:	6079      	str	r1, [r7, #4]
    9d56:	4691      	mov	r9, r2
    9d58:	46d0      	mov	r8, sl
	struct pdu_adv *pdu_adv;

	pdu_adv = (struct pdu_adv *)
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];

	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    9d5a:	d873      	bhi.n	9e44 <radio_adv_enable+0x114>
	    (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND)) {
		void *link;

		if (_radio.advertiser.conn) {
    9d5c:	f8da 51ac 	ldr.w	r5, [sl, #428]	; 0x1ac
    9d60:	2d00      	cmp	r5, #0
    9d62:	f040 8113 	bne.w	9f8c <radio_adv_enable+0x25c>
			return 1;
		}

		link = mem_acquire(&_radio.link_rx_free);
    9d66:	f50a 7015 	add.w	r0, sl, #596	; 0x254
    9d6a:	f7f8 fec4 	bl	2af6 <mem_acquire>
		if (!link) {
    9d6e:	6038      	str	r0, [r7, #0]
    9d70:	2800      	cmp	r0, #0
    9d72:	f000 810b 	beq.w	9f8c <radio_adv_enable+0x25c>
			return 1;
		}

		conn = mem_acquire(&_radio.conn_free);
    9d76:	f50a 7007 	add.w	r0, sl, #540	; 0x21c
    9d7a:	f7f8 febc 	bl	2af6 <mem_acquire>
		if (!conn) {
    9d7e:	683b      	ldr	r3, [r7, #0]
    9d80:	4604      	mov	r4, r0
    9d82:	b918      	cbnz	r0, 9d8c <radio_adv_enable+0x5c>
			mem_release(link, &_radio.link_rx_free);
    9d84:	f50a 7115 	add.w	r1, sl, #596	; 0x254
    9d88:	4618      	mov	r0, r3
    9d8a:	e0fd      	b.n	9f88 <radio_adv_enable+0x258>

			return 1;
		}

		conn->handle = 0xFFFF;
    9d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    9d90:	8402      	strh	r2, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEATURES;
    9d92:	223f      	movs	r2, #63	; 0x3f
    9d94:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
		conn->data_channel_use = 0;
    9d98:	7785      	strb	r5, [r0, #30]
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
    9d9a:	f8ba 2232 	ldrh.w	r2, [sl, #562]	; 0x232
    9d9e:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
		conn->llcp_terminate.req = 0;
		conn->llcp_terminate.ack = 0;
		conn->llcp_terminate.reason_peer = 0;
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    9da0:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9da4:	221b      	movs	r2, #27
#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
		conn->llcp_length.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->sn = 0;
    9da6:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
		conn->latency_prepare = 0;
		conn->latency_event = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->default_tx_octets = _radio.default_tx_octets;
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9daa:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    9dac:	8602      	strh	r2, [r0, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->role.slave.role = 1;
    9dae:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		}

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEATURES;
		conn->data_channel_use = 0;
		conn->event_counter = 0;
    9db2:	8445      	strh	r5, [r0, #34]	; 0x22
#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
		conn->llcp_length.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->sn = 0;
    9db4:	f365 0300 	bfi	r3, r5, #0, #1
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
    9db8:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_length.req = 0;
		conn->llcp_length.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->sn = 0;
		conn->nesn = 0;
    9dbc:	f365 0341 	bfi	r3, r5, #1, #1
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
    9dc0:	f365 1204 	bfi	r2, r5, #4, #1
		conn->llcp_length.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->sn = 0;
		conn->nesn = 0;
		conn->pause_rx = 0;
    9dc4:	f365 0382 	bfi	r3, r5, #2, #1
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
    9dc8:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->sn = 0;
		conn->nesn = 0;
		conn->pause_rx = 0;
		conn->pause_tx = 0;
    9dcc:	f365 03c3 	bfi	r3, r5, #3, #1
		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
		conn->role.slave.window_widening_event_us = 0;
		conn->role.slave.ticks_to_offset = 0;
		conn->supervision_expire = 6;
    9dd0:	2206      	movs	r2, #6
    9dd2:	8682      	strh	r2, [r0, #52]	; 0x34

		conn->sn = 0;
		conn->nesn = 0;
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
    9dd4:	f365 1304 	bfi	r3, r5, #4, #1
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
    9dd8:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a

		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEATURES;
		conn->data_channel_use = 0;
		conn->event_counter = 0;
		conn->latency_prepare = 0;
    9ddc:	8505      	strh	r5, [r0, #40]	; 0x28
		conn->sn = 0;
		conn->nesn = 0;
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
		conn->enc_tx = 0;
    9dde:	f365 1345 	bfi	r3, r5, #5, #1
		conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
    9de2:	f365 0200 	bfi	r2, r5, #0, #1
		conn->nesn = 0;
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
		conn->enc_tx = 0;
		conn->refresh = 0;
    9de6:	f365 1386 	bfi	r3, r5, #6, #1
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
		conn->llcp_ack = 0;
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
    9dea:	f365 0241 	bfi	r2, r5, #1, #1
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
		conn->enc_tx = 0;
		conn->refresh = 0;
		conn->empty = 0;
    9dee:	f365 13c7 	bfi	r3, r5, #7, #1
		conn->handle = 0xFFFF;
		conn->llcp_features = RADIO_BLE_FEATURES;
		conn->data_channel_use = 0;
		conn->event_counter = 0;
		conn->latency_prepare = 0;
		conn->latency_event = 0;
    9df2:	8545      	strh	r5, [r0, #42]	; 0x2a
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

		conn->role.slave.role = 1;
		conn->role.slave.latency_cancel = 0;
		conn->role.slave.window_widening_prepare_us = 0;
    9df4:	6505      	str	r5, [r0, #80]	; 0x50
		conn->role.slave.window_widening_event_us = 0;
    9df6:	6545      	str	r5, [r0, #84]	; 0x54
		conn->role.slave.ticks_to_offset = 0;
    9df8:	6645      	str	r5, [r0, #100]	; 0x64
		conn->supervision_expire = 6;
		conn->procedure_expire = 0;
    9dfa:	8705      	strh	r5, [r0, #56]	; 0x38

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
		conn->apto_expire = 0;
    9dfc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
		conn->appto_expire = 0;
    9e00:	8785      	strh	r5, [r0, #60]	; 0x3c
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

		conn->llcp_req = 0;
    9e02:	f880 5068 	strb.w	r5, [r0, #104]	; 0x68
		conn->llcp_ack = 0;
    9e06:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
		conn->llcp_version.tx = 0;
		conn->llcp_version.rx = 0;
    9e0a:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
		conn->llcp_terminate.req = 0;
    9e0e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
		conn->llcp_terminate.ack = 0;
    9e12:	f880 50a1 	strb.w	r5, [r0, #161]	; 0xa1
		conn->llcp_terminate.reason_peer = 0;
    9e16:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
		conn->llcp_length.req = 0;
    9e1a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
		conn->llcp_length.ack = 0;
    9e1e:	f880 50b1 	strb.w	r5, [r0, #177]	; 0xb1
		conn->pause_rx = 0;
		conn->pause_tx = 0;
		conn->enc_rx = 0;
		conn->enc_tx = 0;
		conn->refresh = 0;
		conn->empty = 0;
    9e22:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
		conn->pkt_tx_head = NULL;
    9e26:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
		conn->pkt_tx_ctrl = NULL;
    9e2a:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
		conn->pkt_tx_data = NULL;
    9e2e:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
		conn->pkt_tx_last = NULL;
    9e32:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
		conn->packet_tx_head_len = 0;
    9e36:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
		conn->packet_tx_head_offset = 0;
    9e3a:	f880 510d 	strb.w	r5, [r0, #269]	; 0x10d
		conn->rssi_latest = 0x7F;
		conn->rssi_reported = 0x7F;
		conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

		_radio.advertiser.conn = conn;
    9e3e:	f8c8 01ac 	str.w	r0, [r8, #428]	; 0x1ac
    9e42:	e000      	b.n	9e46 <radio_adv_enable+0x116>
	} else {
		conn = NULL;
    9e44:	2400      	movs	r4, #0
	}

	_radio.advertiser.chl_map = chl_map;
    9e46:	f898 30d4 	ldrb.w	r3, [r8, #212]	; 0xd4
    9e4a:	687a      	ldr	r2, [r7, #4]
    9e4c:	4d54      	ldr	r5, [pc, #336]	; (9fa0 <radio_adv_enable+0x270>)
    9e4e:	f362 0302 	bfi	r3, r2, #0, #3
	_radio.advertiser.filter_policy = filter_policy;
    9e52:	f369 1387 	bfi	r3, r9, #6, #2
    9e56:	f888 30d4 	strb.w	r3, [r8, #212]	; 0xd4
	if (filter_policy) {
    9e5a:	f1b9 0f00 	cmp.w	r9, #0
    9e5e:	d00c      	beq.n	9e7a <radio_adv_enable+0x14a>
		_radio.advertiser.filter_addr_type_bitmask =
    9e60:	7c6b      	ldrb	r3, [r5, #17]
    9e62:	f885 30d6 	strb.w	r3, [r5, #214]	; 0xd6
			_radio.filter_addr_type_bitmask;
		memcpy(&_radio.advertiser.filter_bdaddr[0][0],
    9e66:	2230      	movs	r2, #48	; 0x30
    9e68:	f105 0112 	add.w	r1, r5, #18
    9e6c:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
    9e70:	f7f6 fff5 	bl	e5e <memcpy>
		       &_radio.filter_bdaddr[0][0],
		       sizeof(_radio.advertiser.filter_bdaddr));
		_radio.advertiser.filter_enable_bitmask =
    9e74:	7c2b      	ldrb	r3, [r5, #16]
    9e76:	f885 30d5 	strb.w	r3, [r5, #213]	; 0xd5
			_radio.filter_enable_bitmask;
	}

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    9e7a:	f8d8 3290 	ldr.w	r3, [r8, #656]	; 0x290
		       sizeof(_radio.advertiser.filter_bdaddr));
		_radio.advertiser.filter_enable_bitmask =
			_radio.filter_enable_bitmask;
	}

	_radio.advertiser.hdr.ticks_active_to_start =
    9e7e:	f8c8 30c8 	str.w	r3, [r8, #200]	; 0xc8
	_radio.advertiser.hdr.ticks_slot =
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
		/* Max. chain is ADV_IND + SCAN_REQ + SCAN_RESP */
		((376 + 150 + 176 + 150 + 376) * 3));

	ticks_slot_offset =
    9e82:	2b27      	cmp	r3, #39	; 0x27
    9e84:	bf38      	it	cc
    9e86:	2327      	movcc	r3, #39	; 0x27
    9e88:	469a      	mov	sl, r3
		(_radio.advertiser.hdr.ticks_active_to_start <
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9e8a:	79f3      	ldrb	r3, [r6, #7]
		_radio.advertiser.filter_enable_bitmask =
			_radio.filter_enable_bitmask;
	}

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    9e8c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 9fa0 <radio_adv_enable+0x270>
    9e90:	4e44      	ldr	r6, [pc, #272]	; (9fa4 <radio_adv_enable+0x274>)
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9e92:	2227      	movs	r2, #39	; 0x27
		(_radio.advertiser.hdr.ticks_active_to_start <
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9e94:	f003 030f 	and.w	r3, r3, #15
			_radio.filter_enable_bitmask;
	}

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
    9e98:	f8c8 20c4 	str.w	r2, [r8, #196]	; 0xc4
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9e9c:	2500      	movs	r5, #0
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.advertiser.hdr.ticks_slot =
    9e9e:	2282      	movs	r2, #130	; 0x82
		(_radio.advertiser.hdr.ticks_active_to_start <
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9ea0:	2b01      	cmp	r3, #1

	_radio.advertiser.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.advertiser.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.advertiser.hdr.ticks_preempt_to_start =
    9ea2:	f8c8 50cc 	str.w	r5, [r8, #204]	; 0xcc
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.advertiser.hdr.ticks_slot =
    9ea6:	f8c8 20d0 	str.w	r2, [r8, #208]	; 0xd0
    9eaa:	f107 080c 	add.w	r8, r7, #12
		(_radio.advertiser.hdr.ticks_active_to_start <
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    9eae:	d13b      	bne.n	9f28 <radio_adv_enable+0x1f8>
		uint32_t ticks_now = ticker_ticks_now_get();
    9eb0:	f7fa fb74 	bl	459c <ticker_ticks_now_get>
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
				     RADIO_TICKER_USER_ID_APP,
				     RADIO_TICKER_ID_ADV, ticks_now, 0,
				     (ticks_slot_offset +
				      _radio.advertiser.hdr.ticks_slot),
    9eb4:	f8d9 30d0 	ldr.w	r3, [r9, #208]	; 0xd0

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
		uint32_t ticks_now = ticker_ticks_now_get();

		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9eb8:	4a3b      	ldr	r2, [pc, #236]	; (9fa8 <radio_adv_enable+0x278>)
    9eba:	9205      	str	r2, [sp, #20]
    9ebc:	4453      	add	r3, sl
    9ebe:	b29a      	uxth	r2, r3
    9ec0:	9204      	str	r2, [sp, #16]
    9ec2:	9301      	str	r3, [sp, #4]
		 _radio.advertiser.hdr.ticks_xtal_to_start) ?
		_radio.advertiser.hdr.ticks_xtal_to_start :
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
		uint32_t ticks_now = ticker_ticks_now_get();
    9ec4:	4683      	mov	fp, r0

		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9ec6:	4603      	mov	r3, r0
    9ec8:	f8cd 8020 	str.w	r8, [sp, #32]
    9ecc:	9607      	str	r6, [sp, #28]
    9ece:	9506      	str	r5, [sp, #24]
    9ed0:	9503      	str	r5, [sp, #12]
    9ed2:	9502      	str	r5, [sp, #8]
    9ed4:	9500      	str	r5, [sp, #0]
    9ed6:	2205      	movs	r2, #5
    9ed8:	2103      	movs	r1, #3
    9eda:	4628      	mov	r0, r5
    9edc:	f7fa f9fc 	bl	42d8 <ticker_start>
		_radio.advertiser.hdr.ticks_active_to_start;

	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
		uint32_t ticks_now = ticker_ticks_now_get();

		ticker_status =
    9ee0:	60f8      	str	r0, [r7, #12]
				      _radio.advertiser.hdr.ticks_slot),
				     radio_event_adv_prepare, 0,
				     ticker_if_done, (void *)&ticker_status);

		/** @todo design to avoid this wait */
		while (ticker_status == TICKER_STATUS_BUSY) {
    9ee2:	68fb      	ldr	r3, [r7, #12]
    9ee4:	2b02      	cmp	r3, #2
    9ee6:	d102      	bne.n	9eee <radio_adv_enable+0x1be>
			cpu_sleep();
    9ee8:	f7fa fb64 	bl	45b4 <cpu_sleep>
    9eec:	e7f9      	b.n	9ee2 <radio_adv_enable+0x1b2>
		}

		if (ticker_status != TICKER_STATUS_SUCCESS) {
    9eee:	68f8      	ldr	r0, [r7, #12]
    9ef0:	b148      	cbz	r0, 9f06 <radio_adv_enable+0x1d6>
		return 0;
	}

failure_cleanup:

	if (conn) {
    9ef2:	2c00      	cmp	r4, #0
    9ef4:	d04a      	beq.n	9f8c <radio_adv_enable+0x25c>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
    9ef6:	492d      	ldr	r1, [pc, #180]	; (9fac <radio_adv_enable+0x27c>)
    9ef8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    9efc:	f7f8 fe17 	bl	2b2e <mem_release>
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
    9f00:	492b      	ldr	r1, [pc, #172]	; (9fb0 <radio_adv_enable+0x280>)
    9f02:	4620      	mov	r0, r4
    9f04:	e040      	b.n	9f88 <radio_adv_enable+0x258>
		if (ticker_status != TICKER_STATUS_SUCCESS) {
			goto failure_cleanup;
		}

		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f06:	4b2b      	ldr	r3, [pc, #172]	; (9fb4 <radio_adv_enable+0x284>)
    9f08:	9305      	str	r3, [sp, #20]
    9f0a:	2203      	movs	r2, #3
    9f0c:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
    9f10:	9300      	str	r3, [sp, #0]
    9f12:	f8cd 8020 	str.w	r8, [sp, #32]
    9f16:	9607      	str	r6, [sp, #28]
    9f18:	9006      	str	r0, [sp, #24]
    9f1a:	9004      	str	r0, [sp, #16]
    9f1c:	9003      	str	r0, [sp, #12]
    9f1e:	9002      	str	r0, [sp, #8]
    9f20:	9001      	str	r0, [sp, #4]
    9f22:	465b      	mov	r3, fp
    9f24:	4611      	mov	r1, r2
    9f26:	e022      	b.n	9f6e <radio_adv_enable+0x23e>
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, 0, ticker_if_done,
				     (void *)&ticker_status);
	} else {
		ticker_status =
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    9f28:	f7fa fb38 	bl	459c <ticker_ticks_now_get>
    9f2c:	4b1e      	ldr	r3, [pc, #120]	; (9fa8 <radio_adv_enable+0x278>)
    9f2e:	f8cd 8020 	str.w	r8, [sp, #32]
    9f32:	9607      	str	r6, [sp, #28]
    9f34:	9506      	str	r5, [sp, #24]
    9f36:	9305      	str	r3, [sp, #20]
    9f38:	f8d9 30d0 	ldr.w	r3, [r9, #208]	; 0xd0
    9f3c:	6078      	str	r0, [r7, #4]
    9f3e:	4453      	add	r3, sl
    9f40:	481d      	ldr	r0, [pc, #116]	; (9fb8 <radio_adv_enable+0x288>)
    9f42:	9503      	str	r5, [sp, #12]
    9f44:	fa1f f28b 	uxth.w	r2, fp
    9f48:	b29b      	uxth	r3, r3
    9f4a:	fba2 0100 	umull	r0, r1, r2, r0
    9f4e:	9304      	str	r3, [sp, #16]
    9f50:	2391      	movs	r3, #145	; 0x91
    9f52:	fb03 1102 	mla	r1, r3, r2, r1
    9f56:	a310      	add	r3, pc, #64	; (adr r3, 9f98 <radio_adv_enable+0x268>)
    9f58:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f5c:	9502      	str	r5, [sp, #8]
    9f5e:	f7f6 f95d 	bl	21c <__aeabi_uldivmod>
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	9001      	str	r0, [sp, #4]
    9f66:	9500      	str	r5, [sp, #0]
    9f68:	2205      	movs	r2, #5
    9f6a:	2103      	movs	r1, #3
    9f6c:	4628      	mov	r0, r5
    9f6e:	f7fa f9b3 	bl	42d8 <ticker_start>
				     TICKER_NULL_PERIOD, TICKER_NULL_REMAINDER,
				     TICKER_NULL_LAZY, TICKER_NULL_SLOT,
				     event_adv_stop, 0, ticker_if_done,
				     (void *)&ticker_status);
	} else {
		ticker_status =
    9f72:	60f8      	str	r0, [r7, #12]
				     radio_event_adv_prepare, 0, ticker_if_done,
				     (void *)&ticker_status);
	}

	/** @todo design to avoid this wait */
	while (ticker_status == TICKER_STATUS_BUSY) {
    9f74:	68fb      	ldr	r3, [r7, #12]
    9f76:	2b02      	cmp	r3, #2
    9f78:	d102      	bne.n	9f80 <radio_adv_enable+0x250>
		cpu_sleep();
    9f7a:	f7fa fb1b 	bl	45b4 <cpu_sleep>
    9f7e:	e7f9      	b.n	9f74 <radio_adv_enable+0x244>
	}

	if (ticker_status == TICKER_STATUS_SUCCESS) {
    9f80:	68f8      	ldr	r0, [r7, #12]
    9f82:	2800      	cmp	r0, #0
    9f84:	d1b5      	bne.n	9ef2 <radio_adv_enable+0x1c2>
    9f86:	e002      	b.n	9f8e <radio_adv_enable+0x25e>
failure_cleanup:

	if (conn) {
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
			    onion.link, &_radio.link_rx_free);
		mem_release(conn, &_radio.conn_free);
    9f88:	f7f8 fdd1 	bl	2b2e <mem_release>
	}

	return 1;
    9f8c:	2001      	movs	r0, #1
}
    9f8e:	3714      	adds	r7, #20
    9f90:	46bd      	mov	sp, r7
    9f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f96:	bf00      	nop
    9f98:	1afd498d 	.word	0x1afd498d
    9f9c:	00000007 	.word	0x00000007
    9fa0:	20000b44 	.word	0x20000b44
    9fa4:	000045c1 	.word	0x000045c1
    9fa8:	00006091 	.word	0x00006091
    9fac:	20000d98 	.word	0x20000d98
    9fb0:	20000d60 	.word	0x20000d60
    9fb4:	00005a6d 	.word	0x00005a6d
    9fb8:	84e72a00 	.word	0x84e72a00
    9fbc:	f3af 8000 	nop.w

00009fc0 <radio_adv_disable>:

uint32_t radio_adv_disable(void)
{
    9fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
    9fc2:	2103      	movs	r1, #3

	return 1;
}

uint32_t radio_adv_disable(void)
{
    9fc4:	af00      	add	r7, sp, #0
	uint32_t status;

	status = role_disable(RADIO_TICKER_ID_ADV,
    9fc6:	2005      	movs	r0, #5
    9fc8:	f7fa fdec 	bl	4ba4 <role_disable>
			      RADIO_TICKER_ID_ADV_STOP);
	if (!status) {
    9fcc:	4605      	mov	r5, r0
    9fce:	b980      	cbnz	r0, 9ff2 <radio_adv_disable+0x32>
		struct connection *conn;

		conn = _radio.advertiser.conn;
    9fd0:	4c09      	ldr	r4, [pc, #36]	; (9ff8 <radio_adv_disable+0x38>)
    9fd2:	f8d4 61ac 	ldr.w	r6, [r4, #428]	; 0x1ac
		if (conn) {
    9fd6:	b166      	cbz	r6, 9ff2 <radio_adv_disable+0x32>
			_radio.advertiser.conn = NULL;
    9fd8:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac

			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
    9fdc:	f504 7115 	add.w	r1, r4, #596	; 0x254
    9fe0:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    9fe4:	f7f8 fda3 	bl	2b2e <mem_release>
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    9fe8:	f504 7107 	add.w	r1, r4, #540	; 0x21c
    9fec:	4630      	mov	r0, r6
    9fee:	f7f8 fd9e 	bl	2b2e <mem_release>
		}
	}

	return status;
}
    9ff2:	4628      	mov	r0, r5
    9ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ff6:	bf00      	nop
    9ff8:	20000b44 	.word	0x20000b44
    9ffc:	00000000 	.word	0x00000000

0000a000 <radio_scan_enable>:

uint32_t radio_scan_enable(uint8_t scan_type, uint8_t init_addr_type,
			   uint8_t *init_addr, uint16_t interval,
			   uint16_t window, uint8_t filter_policy)
{
    a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_anchor;
	uint32_t us_offset;
	uint32_t ticks_interval;
	uint32_t ticks_slot_offset;

	_radio.observer.scan_type = scan_type;
    a004:	4c64      	ldr	r4, [pc, #400]	; (a198 <radio_scan_enable+0x198>)
	_radio.observer.init_addr_type = init_addr_type;
	memcpy(&_radio.observer.init_addr[0], init_addr, BDADDR_SIZE);
	_radio.observer.ticks_window =
    a006:	f8df 81a4 	ldr.w	r8, [pc, #420]	; a1ac <radio_scan_enable+0x1ac>
}

uint32_t radio_scan_enable(uint8_t scan_type, uint8_t init_addr_type,
			   uint8_t *init_addr, uint16_t interval,
			   uint16_t window, uint8_t filter_policy)
{
    a00a:	b091      	sub	sp, #68	; 0x44
    a00c:	461e      	mov	r6, r3
	uint32_t ticks_anchor;
	uint32_t us_offset;
	uint32_t ticks_interval;
	uint32_t ticks_slot_offset;

	_radio.observer.scan_type = scan_type;
    a00e:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
}

uint32_t radio_scan_enable(uint8_t scan_type, uint8_t init_addr_type,
			   uint8_t *init_addr, uint16_t interval,
			   uint16_t window, uint8_t filter_policy)
{
    a012:	af0a      	add	r7, sp, #40	; 0x28
    a014:	4696      	mov	lr, r2
	uint32_t ticks_anchor;
	uint32_t us_offset;
	uint32_t ticks_interval;
	uint32_t ticks_slot_offset;

	_radio.observer.scan_type = scan_type;
    a016:	f360 0300 	bfi	r3, r0, #0, #1
	_radio.observer.init_addr_type = init_addr_type;
    a01a:	f361 13c7 	bfi	r3, r1, #7, #1
	memcpy(&_radio.observer.init_addr[0], init_addr, BDADDR_SIZE);
    a01e:	2206      	movs	r2, #6
    a020:	4671      	mov	r1, lr
    a022:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
}

uint32_t radio_scan_enable(uint8_t scan_type, uint8_t init_addr_type,
			   uint8_t *init_addr, uint16_t interval,
			   uint16_t window, uint8_t filter_policy)
{
    a026:	f897 5044 	ldrb.w	r5, [r7, #68]	; 0x44
	uint32_t us_offset;
	uint32_t ticks_interval;
	uint32_t ticks_slot_offset;

	_radio.observer.scan_type = scan_type;
	_radio.observer.init_addr_type = init_addr_type;
    a02a:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	memcpy(&_radio.observer.init_addr[0], init_addr, BDADDR_SIZE);
    a02e:	f7f6 ff16 	bl	e5e <memcpy>
	_radio.observer.ticks_window =
    a032:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
    a036:	2391      	movs	r3, #145	; 0x91
    a038:	fba2 0108 	umull	r0, r1, r2, r8
    a03c:	fb03 1102 	mla	r1, r3, r2, r1
    a040:	a353      	add	r3, pc, #332	; (adr r3, a190 <radio_scan_enable+0x190>)
    a042:	e9d3 2300 	ldrd	r2, r3, [r3]
    a046:	f7f6 f8e9 	bl	21c <__aeabi_uldivmod>
		TICKER_US_TO_TICKS((uint64_t) window * 625);
	_radio.observer.filter_policy = filter_policy;
    a04a:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	uint32_t ticks_slot_offset;

	_radio.observer.scan_type = scan_type;
	_radio.observer.init_addr_type = init_addr_type;
	memcpy(&_radio.observer.init_addr[0], init_addr, BDADDR_SIZE);
	_radio.observer.ticks_window =
    a04e:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		TICKER_US_TO_TICKS((uint64_t) window * 625);
	_radio.observer.filter_policy = filter_policy;
    a052:	f365 1305 	bfi	r3, r5, #4, #2
    a056:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	if (filter_policy) {
    a05a:	b165      	cbz	r5, a076 <radio_scan_enable+0x76>
		_radio.observer.filter_addr_type_bitmask =
    a05c:	7c63      	ldrb	r3, [r4, #17]
    a05e:	f884 31d5 	strb.w	r3, [r4, #469]	; 0x1d5
			_radio.filter_addr_type_bitmask;
		memcpy(&_radio.observer.filter_bdaddr[0][0],
    a062:	2230      	movs	r2, #48	; 0x30
    a064:	f104 0112 	add.w	r1, r4, #18
    a068:	f504 70eb 	add.w	r0, r4, #470	; 0x1d6
    a06c:	f7f6 fef7 	bl	e5e <memcpy>
		       &_radio.filter_bdaddr[0][0],
		       sizeof(_radio.observer.filter_bdaddr));
		_radio.observer.filter_enable_bitmask =
    a070:	7c23      	ldrb	r3, [r4, #16]
    a072:	f884 31d4 	strb.w	r3, [r4, #468]	; 0x1d4
			_radio.filter_enable_bitmask;
	}

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.observer.hdr.ticks_xtal_to_start =
    a076:	2327      	movs	r3, #39	; 0x27
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a078:	b2b2      	uxth	r2, r6
			_radio.filter_enable_bitmask;
	}

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.observer.hdr.ticks_xtal_to_start =
    a07a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;
    a07e:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
    a082:	607b      	str	r3, [r7, #4]

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a084:	fba2 8908 	umull	r8, r9, r2, r8
    a088:	2391      	movs	r3, #145	; 0x91
    a08a:	fb03 9902 	mla	r9, r3, r2, r9
		_radio.observer.filter_enable_bitmask =
			_radio.filter_enable_bitmask;
	}

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    a08e:	f8d4 5290 	ldr.w	r5, [r4, #656]	; 0x290
		       sizeof(_radio.observer.filter_bdaddr));
		_radio.observer.filter_enable_bitmask =
			_radio.filter_enable_bitmask;
	}

	_radio.observer.hdr.ticks_active_to_start =
    a092:	f8c4 51b4 	str.w	r5, [r4, #436]	; 0x1b4
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a096:	a33e      	add	r3, pc, #248	; (adr r3, a190 <radio_scan_enable+0x190>)
    a098:	e9d3 2300 	ldrd	r2, r3, [r3]

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.observer.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
    a09c:	f04f 0b00 	mov.w	fp, #0
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a0a0:	4640      	mov	r0, r8
    a0a2:	4649      	mov	r1, r9

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
	_radio.observer.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
    a0a4:	f8c4 b1b8 	str.w	fp, [r4, #440]	; 0x1b8
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a0a8:	f7f6 f8b8 	bl	21c <__aeabi_uldivmod>
		_radio.observer.filter_enable_bitmask =
			_radio.filter_enable_bitmask;
	}

	_radio.observer.hdr.ticks_active_to_start =
		_radio.ticks_active_to_start;
    a0ac:	f8df a0e8 	ldr.w	sl, [pc, #232]	; a198 <radio_scan_enable+0x198>
	_radio.observer.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;
    a0b0:	687a      	ldr	r2, [r7, #4]

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a0b2:	6039      	str	r1, [r7, #0]
	if (_radio.observer.hdr.ticks_slot >
	    (ticks_interval -
    a0b4:	f1a0 0327 	sub.w	r3, r0, #39	; 0x27
		_radio.ticks_active_to_start;
	_radio.observer.hdr.ticks_xtal_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;
    a0b8:	429a      	cmp	r2, r3
    a0ba:	bf94      	ite	ls
    a0bc:	f8ca 21bc 	strls.w	r2, [sl, #444]	; 0x1bc
    a0c0:	f8ca 31bc 	strhi.w	r3, [sl, #444]	; 0x1bc
		_radio.observer.hdr.ticks_slot =
			(ticks_interval -
			 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US));
	}

	ticks_slot_offset =
    a0c4:	2d27      	cmp	r5, #39	; 0x27
		TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US);
	_radio.observer.hdr.ticks_preempt_to_start =
		TICKER_US_TO_TICKS(RADIO_TICKER_PREEMPT_PART_MIN_US);
	_radio.observer.hdr.ticks_slot = _radio.observer.ticks_window;

	ticks_interval = TICKER_US_TO_TICKS((uint64_t) interval * 625);
    a0c6:	4606      	mov	r6, r0
		_radio.observer.hdr.ticks_slot =
			(ticks_interval -
			 TICKER_US_TO_TICKS(RADIO_TICKER_XTAL_OFFSET_US));
	}

	ticks_slot_offset =
    a0c8:	bf38      	it	cc
    a0ca:	2527      	movcc	r5, #39	; 0x27
		(_radio.observer.hdr.ticks_active_to_start <
		 _radio.observer.hdr.ticks_xtal_to_start) ?
		_radio.observer.hdr.ticks_xtal_to_start :
		_radio.observer.hdr.ticks_active_to_start;

	ticks_anchor = ticker_ticks_now_get();
    a0cc:	f7fa fa66 	bl	459c <ticker_ticks_now_get>

	if ((_radio.observer.conn) || !SCHED_ADVANCED) {
    a0d0:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
		(_radio.observer.hdr.ticks_active_to_start <
		 _radio.observer.hdr.ticks_xtal_to_start) ?
		_radio.observer.hdr.ticks_xtal_to_start :
		_radio.observer.hdr.ticks_active_to_start;

	ticks_anchor = ticker_ticks_now_get();
    a0d4:	6138      	str	r0, [r7, #16]

	if ((_radio.observer.conn) || !SCHED_ADVANCED) {
    a0d6:	b113      	cbz	r3, a0de <radio_scan_enable+0xde>
		us_offset = 0;
    a0d8:	f8c7 b014 	str.w	fp, [r7, #20]
    a0dc:	e009      	b.n	a0f2 <radio_scan_enable+0xf2>
	}
#if SCHED_ADVANCED
	else {
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
    a0de:	f8da 11bc 	ldr.w	r1, [sl, #444]	; 0x1bc
    a0e2:	f107 0314 	add.w	r3, r7, #20
    a0e6:	f107 0210 	add.w	r2, r7, #16
    a0ea:	4429      	add	r1, r5
    a0ec:	2003      	movs	r0, #3
    a0ee:	f7fb fb5b 	bl	57a8 <sched_after_mstr_free_slot_get>
					       &ticks_anchor, &us_offset);
	}
#endif

	ticker_status =
		ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
    a0f2:	6978      	ldr	r0, [r7, #20]
    a0f4:	4929      	ldr	r1, [pc, #164]	; (a19c <radio_scan_enable+0x19c>)
    a0f6:	a326      	add	r3, pc, #152	; (adr r3, a190 <radio_scan_enable+0x190>)
    a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a0fc:	fba0 0101 	umull	r0, r1, r0, r1
    a100:	f7f6 f88c 	bl	21c <__aeabi_uldivmod>
    a104:	693b      	ldr	r3, [r7, #16]
    a106:	683a      	ldr	r2, [r7, #0]
    a108:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a10c:	eb00 0b03 	add.w	fp, r0, r3
    a110:	f107 030c 	add.w	r3, r7, #12
    a114:	9308      	str	r3, [sp, #32]
    a116:	4b22      	ldr	r3, [pc, #136]	; (a1a0 <radio_scan_enable+0x1a0>)
    a118:	9307      	str	r3, [sp, #28]
    a11a:	4b22      	ldr	r3, [pc, #136]	; (a1a4 <radio_scan_enable+0x1a4>)
    a11c:	9305      	str	r3, [sp, #20]
    a11e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    a122:	4821      	ldr	r0, [pc, #132]	; (a1a8 <radio_scan_enable+0x1a8>)
    a124:	441d      	add	r5, r3
    a126:	2307      	movs	r3, #7
    a128:	4373      	muls	r3, r6
    a12a:	fb00 3302 	mla	r3, r0, r2, r3
    a12e:	fba6 0100 	umull	r0, r1, r6, r0
    a132:	ebb8 0000 	subs.w	r0, r8, r0
    a136:	4419      	add	r1, r3
    a138:	f04f 0a00 	mov.w	sl, #0
    a13c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a140:	f04f 0300 	mov.w	r3, #0
    a144:	eb69 0101 	sbc.w	r1, r9, r1
    a148:	b2ad      	uxth	r5, r5
    a14a:	f8cd a018 	str.w	sl, [sp, #24]
    a14e:	9504      	str	r5, [sp, #16]
    a150:	f8cd a00c 	str.w	sl, [sp, #12]
    a154:	f7f6 f862 	bl	21c <__aeabi_uldivmod>
    a158:	9601      	str	r6, [sp, #4]
    a15a:	9002      	str	r0, [sp, #8]
    a15c:	f8cd a000 	str.w	sl, [sp]
    a160:	465b      	mov	r3, fp
    a162:	2206      	movs	r2, #6
    a164:	2103      	movs	r1, #3
    a166:	4650      	mov	r0, sl
    a168:	f7fa f8b6 	bl	42d8 <ticker_start>
						_radio.observer.hdr.ticks_slot),
					       &ticks_anchor, &us_offset);
	}
#endif

	ticker_status =
    a16c:	60f8      	str	r0, [r7, #12]
			      _radio.observer.hdr.ticks_slot),
			     event_obs_prepare, 0, ticker_if_done,
			     (void *)&ticker_status);

	/** @todo design to avoid this wait */
	while (ticker_status == TICKER_STATUS_BUSY) {
    a16e:	68fb      	ldr	r3, [r7, #12]
    a170:	2b02      	cmp	r3, #2
    a172:	d102      	bne.n	a17a <radio_scan_enable+0x17a>
		cpu_sleep();
    a174:	f7fa fa1e 	bl	45b4 <cpu_sleep>
    a178:	e7f9      	b.n	a16e <radio_scan_enable+0x16e>
	}

	return ((ticker_status == TICKER_STATUS_SUCCESS) ? 0 : 1);
    a17a:	68f8      	ldr	r0, [r7, #12]
}
    a17c:	3000      	adds	r0, #0
    a17e:	bf18      	it	ne
    a180:	2001      	movne	r0, #1
    a182:	371c      	adds	r7, #28
    a184:	46bd      	mov	sp, r7
    a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a18a:	bf00      	nop
    a18c:	f3af 8000 	nop.w
    a190:	1afd498d 	.word	0x1afd498d
    a194:	00000007 	.word	0x00000007
    a198:	20000b44 	.word	0x20000b44
    a19c:	3b9aca00 	.word	0x3b9aca00
    a1a0:	000045c1 	.word	0x000045c1
    a1a4:	00006469 	.word	0x00006469
    a1a8:	1afd498d 	.word	0x1afd498d
    a1ac:	84e72a00 	.word	0x84e72a00

0000a1b0 <radio_scan_disable>:

uint32_t radio_scan_disable(void)
{
    a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;

	status = role_disable(RADIO_TICKER_ID_OBS,
    a1b2:	2104      	movs	r1, #4

	return ((ticker_status == TICKER_STATUS_SUCCESS) ? 0 : 1);
}

uint32_t radio_scan_disable(void)
{
    a1b4:	af00      	add	r7, sp, #0
	uint32_t status;

	status = role_disable(RADIO_TICKER_ID_OBS,
    a1b6:	2006      	movs	r0, #6
    a1b8:	f7fa fcf4 	bl	4ba4 <role_disable>
			      RADIO_TICKER_ID_OBS_STOP);
	if (!status) {
    a1bc:	4605      	mov	r5, r0
    a1be:	b980      	cbnz	r0, a1e2 <radio_scan_disable+0x32>
		struct connection *conn;

		conn = _radio.observer.conn;
    a1c0:	4c09      	ldr	r4, [pc, #36]	; (a1e8 <radio_scan_disable+0x38>)
    a1c2:	f8d4 6210 	ldr.w	r6, [r4, #528]	; 0x210
		if (conn) {
    a1c6:	b166      	cbz	r6, a1e2 <radio_scan_disable+0x32>
			_radio.observer.conn = NULL;
    a1c8:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210

			mem_release(conn->llcp_terminate.
    a1cc:	f504 7115 	add.w	r1, r4, #596	; 0x254
    a1d0:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    a1d4:	f7f8 fcab 	bl	2b2e <mem_release>
				    radio_pdu_node_rx.hdr.onion.link,
				    &_radio.link_rx_free);
			mem_release(conn, &_radio.conn_free);
    a1d8:	f504 7107 	add.w	r1, r4, #540	; 0x21c
    a1dc:	4630      	mov	r0, r6
    a1de:	f7f8 fca6 	bl	2b2e <mem_release>
		}
	}

	return status;
}
    a1e2:	4628      	mov	r0, r5
    a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1e6:	bf00      	nop
    a1e8:	20000b44 	.word	0x20000b44

0000a1ec <radio_connect_enable>:

uint32_t radio_connect_enable(uint8_t adv_addr_type, uint8_t *adv_addr,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    a1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	void *link;
	struct connection *conn;
	uint32_t access_addr;
	uint32_t conn_interval_us;

	if (_radio.observer.conn) {
    a1f0:	f8df 823c 	ldr.w	r8, [pc, #572]	; a430 <radio_connect_enable+0x244>
}

uint32_t radio_connect_enable(uint8_t adv_addr_type, uint8_t *adv_addr,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    a1f4:	b085      	sub	sp, #20
	void *link;
	struct connection *conn;
	uint32_t access_addr;
	uint32_t conn_interval_us;

	if (_radio.observer.conn) {
    a1f6:	f8d8 6210 	ldr.w	r6, [r8, #528]	; 0x210
}

uint32_t radio_connect_enable(uint8_t adv_addr_type, uint8_t *adv_addr,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    a1fa:	af00      	add	r7, sp, #0
    a1fc:	4683      	mov	fp, r0
    a1fe:	468a      	mov	sl, r1
    a200:	4691      	mov	r9, r2
    a202:	607b      	str	r3, [r7, #4]
    a204:	4645      	mov	r5, r8
	void *link;
	struct connection *conn;
	uint32_t access_addr;
	uint32_t conn_interval_us;

	if (_radio.observer.conn) {
    a206:	b986      	cbnz	r6, a22a <radio_connect_enable+0x3e>
		return 1;
	}

	link = mem_acquire(&_radio.link_rx_free);
    a208:	f508 7015 	add.w	r0, r8, #596	; 0x254
    a20c:	f7f8 fc73 	bl	2af6 <mem_acquire>
	if (!link) {
    a210:	4604      	mov	r4, r0
    a212:	b150      	cbz	r0, a22a <radio_connect_enable+0x3e>
		return 1;
	}

	conn = mem_acquire(&_radio.conn_free);
    a214:	f508 7007 	add.w	r0, r8, #540	; 0x21c
    a218:	f7f8 fc6d 	bl	2af6 <mem_acquire>
    a21c:	60b8      	str	r0, [r7, #8]
	if (!conn) {
    a21e:	b930      	cbnz	r0, a22e <radio_connect_enable+0x42>
		mem_release(link, &_radio.link_rx_free);
    a220:	f508 7115 	add.w	r1, r8, #596	; 0x254
    a224:	4620      	mov	r0, r4
    a226:	f7f8 fc82 	bl	2b2e <mem_release>

		return 1;
    a22a:	2001      	movs	r0, #1
    a22c:	e0f6      	b.n	a41c <radio_connect_enable+0x230>
	}

	radio_scan_disable();
    a22e:	f7ff ffbf 	bl	a1b0 <radio_scan_disable>

	_radio.observer.adv_addr_type = adv_addr_type;
    a232:	f898 31c0 	ldrb.w	r3, [r8, #448]	; 0x1c0
	memcpy(&_radio.observer.adv_addr[0], adv_addr, BDADDR_SIZE);
    a236:	2206      	movs	r2, #6
		return 1;
	}

	radio_scan_disable();

	_radio.observer.adv_addr_type = adv_addr_type;
    a238:	f36b 1386 	bfi	r3, fp, #6, #1
	memcpy(&_radio.observer.adv_addr[0], adv_addr, BDADDR_SIZE);
    a23c:	4651      	mov	r1, sl
    a23e:	f208 10c1 	addw	r0, r8, #449	; 0x1c1
		return 1;
	}

	radio_scan_disable();

	_radio.observer.adv_addr_type = adv_addr_type;
    a242:	f888 31c0 	strb.w	r3, [r8, #448]	; 0x1c0
	memcpy(&_radio.observer.adv_addr[0], adv_addr, BDADDR_SIZE);
    a246:	f7f6 fe0a 	bl	e5e <memcpy>
	_radio.observer.conn_interval = interval;
	_radio.observer.conn_latency = latency;
    a24a:	88bb      	ldrh	r3, [r7, #4]
    a24c:	f8a8 3208 	strh.w	r3, [r8, #520]	; 0x208
	_radio.observer.conn_timeout = timeout;
    a250:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    a252:	f8a8 320a 	strh.w	r3, [r8, #522]	; 0x20a
	_radio.observer.ticks_conn_slot =
    a256:	2328      	movs	r3, #40	; 0x28
    a258:	f8c8 320c 	str.w	r3, [r8, #524]	; 0x20c
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
				   RADIO_TX_READY_DELAY_US + 328 + 328 + 150);

	conn->handle = 0xFFFF;
    a25c:	68bb      	ldr	r3, [r7, #8]

	radio_scan_disable();

	_radio.observer.adv_addr_type = adv_addr_type;
	memcpy(&_radio.observer.adv_addr[0], adv_addr, BDADDR_SIZE);
	_radio.observer.conn_interval = interval;
    a25e:	f8a8 9206 	strh.w	r9, [r8, #518]	; 0x206
	_radio.observer.conn_timeout = timeout;
	_radio.observer.ticks_conn_slot =
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
				   RADIO_TX_READY_DELAY_US + 328 + 328 + 150);

	conn->handle = 0xFFFF;
    a262:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a266:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEATURES;
    a268:	223f      	movs	r2, #63	; 0x3f
    a26a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	uint8_t bit_idx;
	uint8_t transitions;
	uint8_t consecutive_cnt;
	uint8_t consecutive_bit;

	rand_get(sizeof(uint32_t), (uint8_t *)&access_addr);
    a26e:	f107 010c 	add.w	r1, r7, #12
    a272:	2004      	movs	r0, #4
    a274:	f7f8 fe2a 	bl	2ecc <rand_get>

	bit_idx = 31;
	transitions = 0;
	consecutive_cnt = 1;
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    a278:	68fb      	ldr	r3, [r7, #12]

	rand_get(sizeof(uint32_t), (uint8_t *)&access_addr);

	bit_idx = 31;
	transitions = 0;
	consecutive_cnt = 1;
    a27a:	2001      	movs	r0, #1
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
    a27c:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
	uint8_t consecutive_bit;

	rand_get(sizeof(uint32_t), (uint8_t *)&access_addr);

	bit_idx = 31;
	transitions = 0;
    a280:	4631      	mov	r1, r6
	uint8_t consecutive_cnt;
	uint8_t consecutive_bit;

	rand_get(sizeof(uint32_t), (uint8_t *)&access_addr);

	bit_idx = 31;
    a282:	221f      	movs	r2, #31
    a284:	4680      	mov	r8, r0
	transitions = 0;
	consecutive_cnt = 1;
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
	while (bit_idx--) {
    a286:	3a01      	subs	r2, #1
    a288:	b2d2      	uxtb	r2, r2
    a28a:	2aff      	cmp	r2, #255	; 0xff
    a28c:	d038      	beq.n	a300 <radio_connect_enable+0x114>
		uint8_t bit;

		bit = (access_addr >> bit_idx) & 0x01;
    a28e:	fa23 fc02 	lsr.w	ip, r3, r2
    a292:	f00c 0c01 	and.w	ip, ip, #1
		if (bit == consecutive_bit) {
    a296:	45f4      	cmp	ip, lr
    a298:	d104      	bne.n	a2a4 <radio_connect_enable+0xb8>
			consecutive_cnt++;
    a29a:	3001      	adds	r0, #1
    a29c:	b2c0      	uxtb	r0, r0

		/* It shall have no more than six consecutive zeros or ones. */
		/* It shall have a minimum of two transitions in the most
		 * significant six bits.
		 */
		if ((consecutive_cnt > 6)
    a29e:	2806      	cmp	r0, #6
    a2a0:	d807      	bhi.n	a2b2 <radio_connect_enable+0xc6>
    a2a2:	e002      	b.n	a2aa <radio_connect_enable+0xbe>
		if (bit == consecutive_bit) {
			consecutive_cnt++;
		} else {
			consecutive_cnt = 1;
			consecutive_bit = bit;
			transitions++;
    a2a4:	3101      	adds	r1, #1
    a2a6:	b2c9      	uxtb	r1, r1

		bit = (access_addr >> bit_idx) & 0x01;
		if (bit == consecutive_bit) {
			consecutive_cnt++;
		} else {
			consecutive_cnt = 1;
    a2a8:	2001      	movs	r0, #1
		/* It shall have no more than six consecutive zeros or ones. */
		/* It shall have a minimum of two transitions in the most
		 * significant six bits.
		 */
		if ((consecutive_cnt > 6)
		    || ((bit_idx < 28) && (transitions < 2))) {
    a2aa:	2a1b      	cmp	r2, #27
    a2ac:	d812      	bhi.n	a2d4 <radio_connect_enable+0xe8>
    a2ae:	2901      	cmp	r1, #1
    a2b0:	d810      	bhi.n	a2d4 <radio_connect_enable+0xe8>
			if (consecutive_bit) {
				consecutive_bit = 0;
				access_addr &= ~(1 << bit_idx);
    a2b2:	fa08 f002 	lsl.w	r0, r8, r2
		/* It shall have a minimum of two transitions in the most
		 * significant six bits.
		 */
		if ((consecutive_cnt > 6)
		    || ((bit_idx < 28) && (transitions < 2))) {
			if (consecutive_bit) {
    a2b6:	f1bc 0f00 	cmp.w	ip, #0
    a2ba:	d004      	beq.n	a2c6 <radio_connect_enable+0xda>
				consecutive_bit = 0;
				access_addr &= ~(1 << bit_idx);
    a2bc:	ea23 0300 	bic.w	r3, r3, r0
		 * significant six bits.
		 */
		if ((consecutive_cnt > 6)
		    || ((bit_idx < 28) && (transitions < 2))) {
			if (consecutive_bit) {
				consecutive_bit = 0;
    a2c0:	f04f 0c00 	mov.w	ip, #0
    a2c4:	e002      	b.n	a2cc <radio_connect_enable+0xe0>
				access_addr &= ~(1 << bit_idx);
			} else {
				consecutive_bit = 1;
				access_addr |= (1 << bit_idx);
    a2c6:	4303      	orrs	r3, r0
		    || ((bit_idx < 28) && (transitions < 2))) {
			if (consecutive_bit) {
				consecutive_bit = 0;
				access_addr &= ~(1 << bit_idx);
			} else {
				consecutive_bit = 1;
    a2c8:	f04f 0c01 	mov.w	ip, #1
				access_addr |= (1 << bit_idx);
			}

			consecutive_cnt = 1;
			transitions++;
    a2cc:	3101      	adds	r1, #1
    a2ce:	2601      	movs	r6, #1
    a2d0:	b2c9      	uxtb	r1, r1
			} else {
				consecutive_bit = 1;
				access_addr |= (1 << bit_idx);
			}

			consecutive_cnt = 1;
    a2d2:	4630      	mov	r0, r6
			transitions++;
		}

		/* It shall have no more than 24 transitions */
		if (transitions > 24) {
    a2d4:	2918      	cmp	r1, #24
    a2d6:	d911      	bls.n	a2fc <radio_connect_enable+0x110>
    a2d8:	b106      	cbz	r6, a2dc <radio_connect_enable+0xf0>
    a2da:	60fb      	str	r3, [r7, #12]
    a2dc:	2301      	movs	r3, #1
    a2de:	68f9      	ldr	r1, [r7, #12]
    a2e0:	441a      	add	r2, r3
			if (consecutive_bit) {
    a2e2:	f1bc 0f00 	cmp.w	ip, #0
    a2e6:	d005      	beq.n	a2f4 <radio_connect_enable+0x108>
				access_addr &= ~((1 << (bit_idx + 1)) - 1);
    a2e8:	fa03 f202 	lsl.w	r2, r3, r2
    a2ec:	4252      	negs	r2, r2
    a2ee:	ea01 0302 	and.w	r3, r1, r2
    a2f2:	e006      	b.n	a302 <radio_connect_enable+0x116>
			} else {
				access_addr |= ((1 << (bit_idx + 1)) - 1);
    a2f4:	4093      	lsls	r3, r2
    a2f6:	3b01      	subs	r3, #1
    a2f8:	430b      	orrs	r3, r1
    a2fa:	e002      	b.n	a302 <radio_connect_enable+0x116>
			consecutive_cnt = 1;
			transitions++;
		}

		/* It shall have no more than 24 transitions */
		if (transitions > 24) {
    a2fc:	46e6      	mov	lr, ip
    a2fe:	e7c2      	b.n	a286 <radio_connect_enable+0x9a>
    a300:	b106      	cbz	r6, a304 <radio_connect_enable+0x118>
    a302:	60fb      	str	r3, [r7, #12]
				   RADIO_TX_READY_DELAY_US + 328 + 328 + 150);

	conn->handle = 0xFFFF;
	conn->llcp_features = RADIO_BLE_FEATURES;
	access_addr = access_addr_get();
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
    a304:	f107 0610 	add.w	r6, r7, #16
    a308:	2204      	movs	r2, #4
    a30a:	f856 0d08 	ldr.w	r0, [r6, #-8]!
    a30e:	f107 010c 	add.w	r1, r7, #12
    a312:	3010      	adds	r0, #16
    a314:	f7f6 fda3 	bl	e5e <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
    a318:	68b8      	ldr	r0, [r7, #8]
    a31a:	4631      	mov	r1, r6
    a31c:	2203      	movs	r2, #3
    a31e:	3014      	adds	r0, #20
    a320:	f7f6 fd9d 	bl	e5e <memcpy>
	memcpy(&conn->data_channel_map[0], &_radio.data_channel_map[0],
    a324:	68b8      	ldr	r0, [r7, #8]
    a326:	493f      	ldr	r1, [pc, #252]	; (a424 <radio_connect_enable+0x238>)
    a328:	2205      	movs	r2, #5
    a32a:	3017      	adds	r0, #23
    a32c:	f7f6 fd97 	bl	e5e <memcpy>
	       sizeof(conn->data_channel_map));
	conn->data_channel_count = _radio.data_channel_count;
    a330:	68bb      	ldr	r3, [r7, #8]
    a332:	f895 222f 	ldrb.w	r2, [r5, #559]	; 0x22f
    a336:	771a      	strb	r2, [r3, #28]
	conn->data_channel_hop = 6;
	conn->data_channel_use = 0;
    a338:	2000      	movs	r0, #0
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
	memcpy(&conn->crc_init[0], &conn, 3);
	memcpy(&conn->data_channel_map[0], &_radio.data_channel_map[0],
	       sizeof(conn->data_channel_map));
	conn->data_channel_count = _radio.data_channel_count;
	conn->data_channel_hop = 6;
    a33a:	2206      	movs	r2, #6
    a33c:	775a      	strb	r2, [r3, #29]
	conn->data_channel_use = 0;
    a33e:	7798      	strb	r0, [r3, #30]
	conn->latency_prepare = 0;
	conn->latency_event = 0;
	conn->latency = _radio.observer.conn_latency;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	conn->default_tx_octets = _radio.default_tx_octets;
    a340:	f8b5 e232 	ldrh.w	lr, [r5, #562]	; 0x232
	       sizeof(conn->data_channel_map));
	conn->data_channel_count = _radio.data_channel_count;
	conn->data_channel_hop = 6;
	conn->data_channel_use = 0;
	conn->event_counter = 0;
	conn->conn_interval = _radio.observer.conn_interval;
    a344:	f8b5 1206 	ldrh.w	r1, [r5, #518]	; 0x206
	conn->latency_prepare = 0;
	conn->latency_event = 0;
	conn->latency = _radio.observer.conn_latency;
    a348:	f8b5 6208 	ldrh.w	r6, [r5, #520]	; 0x208

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	conn->default_tx_octets = _radio.default_tx_octets;
    a34c:	f8a3 e02c 	strh.w	lr, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a350:	f04f 0e1b 	mov.w	lr, #27
    a354:	f8a3 e02e 	strh.w	lr, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    a358:	f8a3 e030 	strh.w	lr, [r3, #48]	; 0x30
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	conn->role.master.role = 0;
    a35c:	f893 e044 	ldrb.w	lr, [r3, #68]	; 0x44
	conn->role.master.connect_expire = 6;
    a360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	conn->default_tx_octets = _radio.default_tx_octets;
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	conn->role.master.role = 0;
    a364:	f360 0e00 	bfi	lr, r0, #0, #1
    a368:	f883 e044 	strb.w	lr, [r3, #68]	; 0x44
	conn->role.master.connect_expire = 6;
	conn_interval_us =
		(uint32_t)_radio.observer.conn_interval * 1250;
	conn->supervision_reload =
    a36c:	f8b5 e20a 	ldrh.w	lr, [r5, #522]	; 0x20a
	       sizeof(conn->data_channel_map));
	conn->data_channel_count = _radio.data_channel_count;
	conn->data_channel_hop = 6;
	conn->data_channel_use = 0;
	conn->event_counter = 0;
	conn->conn_interval = _radio.observer.conn_interval;
    a370:	8499      	strh	r1, [r3, #36]	; 0x24
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	conn->role.master.role = 0;
	conn->role.master.connect_expire = 6;
	conn_interval_us =
    a372:	f240 42e2 	movw	r2, #1250	; 0x4e2
    a376:	434a      	muls	r2, r1
		(uint32_t)_radio.observer.conn_interval * 1250;
	conn->supervision_reload =
    a378:	f242 7110 	movw	r1, #10000	; 0x2710
    a37c:	fb01 f10e 	mul.w	r1, r1, lr
    a380:	fbb1 f1f2 	udiv	r1, r1, r2
    a384:	8659      	strh	r1, [r3, #50]	; 0x32
		RADIO_CONN_EVENTS((_radio.observer.conn_timeout * 10 * 1000),
				  conn_interval_us);
	conn->supervision_expire = 0;
	conn->procedure_reload =
    a386:	4928      	ldr	r1, [pc, #160]	; (a428 <radio_connect_enable+0x23c>)
    a388:	fbb1 f1f2 	udiv	r1, r1, r2
    a38c:	86d9      	strh	r1, [r3, #54]	; 0x36
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
	conn->procedure_expire = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	conn->apto_reload =
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
    a38e:	4927      	ldr	r1, [pc, #156]	; (a42c <radio_connect_enable+0x240>)
    a390:	fbb1 f2f2 	udiv	r2, r1, r2
	conn->apto_expire = 0;
	conn->appto_reload = (conn->apto_reload > (conn->latency + 2)) ?
    a394:	1cb1      	adds	r1, r6, #2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
	conn->procedure_expire = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	conn->apto_reload =
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
    a396:	b292      	uxth	r2, r2
	conn->apto_expire = 0;
	conn->appto_reload = (conn->apto_reload > (conn->latency + 2)) ?
    a398:	428a      	cmp	r2, r1
    a39a:	bfc4      	itt	gt
    a39c:	f5c6 417f 	rsbgt	r1, r6, #65280	; 0xff00
    a3a0:	31fe      	addgt	r1, #254	; 0xfe
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
	conn->procedure_expire = 0;

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	conn->apto_reload =
    a3a2:	87da      	strh	r2, [r3, #62]	; 0x3e
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
	conn->apto_expire = 0;
	conn->appto_reload = (conn->apto_reload > (conn->latency + 2)) ?
    a3a4:	bfc4      	itt	gt
    a3a6:	1852      	addgt	r2, r2, r1
    a3a8:	b292      	uxthgt	r2, r2
    a3aa:	875a      	strh	r2, [r3, #58]	; 0x3a
	conn->appto_expire = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	conn->llcp_req = 0;
	conn->llcp_ack = 0;
	conn->llcp_version.tx = 0;
    a3ac:	f893 209a 	ldrb.w	r2, [r3, #154]	; 0x9a
	memcpy(&conn->data_channel_map[0], &_radio.data_channel_map[0],
	       sizeof(conn->data_channel_map));
	conn->data_channel_count = _radio.data_channel_count;
	conn->data_channel_hop = 6;
	conn->data_channel_use = 0;
	conn->event_counter = 0;
    a3b0:	8458      	strh	r0, [r3, #34]	; 0x22
	conn->conn_interval = _radio.observer.conn_interval;
	conn->latency_prepare = 0;
    a3b2:	8518      	strh	r0, [r3, #40]	; 0x28
	conn->latency_event = 0;
    a3b4:	8558      	strh	r0, [r3, #42]	; 0x2a
	conn_interval_us =
		(uint32_t)_radio.observer.conn_interval * 1250;
	conn->supervision_reload =
		RADIO_CONN_EVENTS((_radio.observer.conn_timeout * 10 * 1000),
				  conn_interval_us);
	conn->supervision_expire = 0;
    a3b6:	8698      	strh	r0, [r3, #52]	; 0x34
	conn->procedure_reload =
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
	conn->procedure_expire = 0;
    a3b8:	8718      	strh	r0, [r3, #56]	; 0x38

#if defined(CONFIG_BLUETOOTH_CONTROLLER_LE_PING)
	conn->apto_reload =
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
	conn->apto_expire = 0;
    a3ba:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	conn->llcp_req = 0;
	conn->llcp_ack = 0;
	conn->llcp_version.tx = 0;
	conn->llcp_version.rx = 0;
    a3be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	conn->apto_reload =
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
	conn->apto_expire = 0;
	conn->appto_reload = (conn->apto_reload > (conn->latency + 2)) ?
		(conn->apto_reload - (conn->latency + 2)) : conn->apto_reload;
	conn->appto_expire = 0;
    a3c2:	2000      	movs	r0, #0
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	conn->llcp_req = 0;
	conn->llcp_ack = 0;
	conn->llcp_version.tx = 0;
	conn->llcp_version.rx = 0;
    a3c4:	f360 0241 	bfi	r2, r0, #1, #1
    a3c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	conn->data_channel_use = 0;
	conn->event_counter = 0;
	conn->conn_interval = _radio.observer.conn_interval;
	conn->latency_prepare = 0;
	conn->latency_event = 0;
	conn->latency = _radio.observer.conn_latency;
    a3cc:	84de      	strh	r6, [r3, #38]	; 0x26
	conn->apto_reload =
		RADIO_CONN_EVENTS((30 * 1000 * 1000), conn_interval_us);
	conn->apto_expire = 0;
	conn->appto_reload = (conn->apto_reload > (conn->latency + 2)) ?
		(conn->apto_reload - (conn->latency + 2)) : conn->apto_reload;
	conn->appto_expire = 0;
    a3ce:	8798      	strh	r0, [r3, #60]	; 0x3c
#endif /* CONFIG_BLUETOOTH_CONTROLLER_LE_PING */

	conn->llcp_req = 0;
    a3d0:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
	conn->llcp_ack = 0;
    a3d4:	f883 0069 	strb.w	r0, [r3, #105]	; 0x69
	conn->llcp_version.tx = 0;
	conn->llcp_version.rx = 0;
	conn->llcp_terminate.req = 0;
    a3d8:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	conn->llcp_length.req = 0;
	conn->llcp_length.ack = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

	conn->sn = 0;
    a3dc:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
	conn->llcp_req = 0;
	conn->llcp_ack = 0;
	conn->llcp_version.tx = 0;
	conn->llcp_version.rx = 0;
	conn->llcp_terminate.req = 0;
	conn->llcp_terminate.ack = 0;
    a3e0:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
	conn->pause_rx = 0;
	conn->pause_tx = 0;
	conn->enc_rx = 0;
	conn->enc_tx = 0;
	conn->refresh = 0;
	conn->empty = 0;
    a3e4:	f002 0280 	and.w	r2, r2, #128	; 0x80
    a3e8:	f360 12c7 	bfi	r2, r0, #7, #1
	conn->llcp_ack = 0;
	conn->llcp_version.tx = 0;
	conn->llcp_version.rx = 0;
	conn->llcp_terminate.req = 0;
	conn->llcp_terminate.ack = 0;
	conn->llcp_terminate.reason_peer = 0;
    a3ec:	f883 00a3 	strb.w	r0, [r3, #163]	; 0xa3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
    a3f0:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	conn->llcp_length.req = 0;
    a3f4:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_length.ack = 0;
    a3f8:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->pause_rx = 0;
	conn->pause_tx = 0;
	conn->enc_rx = 0;
	conn->enc_tx = 0;
	conn->refresh = 0;
	conn->empty = 0;
    a3fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	conn->pkt_tx_head = NULL;
    a400:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	conn->pkt_tx_ctrl = NULL;
    a404:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	conn->pkt_tx_data = NULL;
    a408:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
	conn->pkt_tx_last = NULL;
    a40c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	conn->packet_tx_head_len = 0;
    a410:	f883 010c 	strb.w	r0, [r3, #268]	; 0x10c
	conn->packet_tx_head_offset = 0;
    a414:	f883 010d 	strb.w	r0, [r3, #269]	; 0x10d
	conn->rssi_latest = 0x7F;
	conn->rssi_reported = 0x7F;
	conn->rssi_sample_count = 0;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_CONN_RSSI */

	_radio.observer.conn = conn;
    a418:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210

	return 0;
}
    a41c:	3714      	adds	r7, #20
    a41e:	46bd      	mov	sp, r7
    a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a424:	20000d6e 	.word	0x20000d6e
    a428:	02625a00 	.word	0x02625a00
    a42c:	01c9c380 	.word	0x01c9c380
    a430:	20000b44 	.word	0x20000b44

0000a434 <radio_connect_disable>:

uint32_t radio_connect_disable(void)
{
    a434:	b480      	push	{r7}
	uint32_t status;

	if (_radio.observer.conn == 0) {
    a436:	4b06      	ldr	r3, [pc, #24]	; (a450 <radio_connect_disable+0x1c>)
    a438:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210

	return 0;
}

uint32_t radio_connect_disable(void)
{
    a43c:	af00      	add	r7, sp, #0
	uint32_t status;

	if (_radio.observer.conn == 0) {
    a43e:	b11b      	cbz	r3, a448 <radio_connect_disable+0x14>
	}

	status = radio_scan_disable();

	return status;
}
    a440:	46bd      	mov	sp, r7
    a442:	bc80      	pop	{r7}

	if (_radio.observer.conn == 0) {
		return 1;
	}

	status = radio_scan_disable();
    a444:	f7ff beb4 	b.w	a1b0 <radio_scan_disable>

	return status;
}
    a448:	2001      	movs	r0, #1
    a44a:	46bd      	mov	sp, r7
    a44c:	bc80      	pop	{r7}
    a44e:	4770      	bx	lr
    a450:	20000b44 	.word	0x20000b44

0000a454 <radio_conn_update>:

uint32_t radio_conn_update(uint16_t handle, uint8_t cmd, uint8_t status,
			   uint16_t interval, uint16_t latency,
			   uint16_t timeout)
{
    a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a456:	af00      	add	r7, sp, #0
    a458:	460d      	mov	r5, r1
    a45a:	461e      	mov	r6, r3
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
    a45c:	f7fa fb8a 	bl	4b74 <connection_get>
	if ((!conn) ||
    a460:	b368      	cbz	r0, a4be <radio_conn_update+0x6a>
	    ((conn->llcp_req != conn->llcp_ack) &&
    a462:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
	struct connection *conn;

	ARG_UNUSED(status);

	conn = connection_get(handle);
	if ((!conn) ||
    a466:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    a46a:	42a3      	cmp	r3, r4
    a46c:	d009      	beq.n	a482 <radio_conn_update+0x2e>
	    ((conn->llcp_req != conn->llcp_ack) &&
    a46e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
    a472:	2b01      	cmp	r3, #1
    a474:	d123      	bne.n	a4be <radio_conn_update+0x6a>
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
    a476:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
    a47a:	f002 0207 	and.w	r2, r2, #7
    a47e:	2a04      	cmp	r2, #4
    a480:	d11f      	bne.n	a4c2 <radio_conn_update+0x6e>
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
    a482:	8b3b      	ldrh	r3, [r7, #24]
    a484:	f8a0 306e 	strh.w	r3, [r0, #110]	; 0x6e
	conn->llcp.connection_update.timeout = timeout;
    a488:	8bbb      	ldrh	r3, [r7, #28]
    a48a:	f8a0 3070 	strh.w	r3, [r0, #112]	; 0x70
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
    a48e:	2101      	movs	r1, #1
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    a490:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
		}

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
    a494:	f880 1094 	strb.w	r1, [r0, #148]	; 0x94
	conn->llcp.connection_update.win_offset_us = 0;
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    a498:	440d      	add	r5, r1

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
    a49a:	2200      	movs	r2, #0
	conn->llcp.connection_update.interval = interval;
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
    a49c:	f365 0302 	bfi	r3, r5, #0, #3
	conn->llcp.connection_update.is_internal = 0;
    a4a0:	f362 03c4 	bfi	r3, r2, #3, #2

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;
    a4a4:	440c      	add	r4, r1

		return 1;
	}

	conn->llcp.connection_update.win_size = 1;
	conn->llcp.connection_update.win_offset_us = 0;
    a4a6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
	conn->llcp.connection_update.interval = interval;
    a4aa:	f8a0 606c 	strh.w	r6, [r0, #108]	; 0x6c
	conn->llcp.connection_update.latency = latency;
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;
    a4ae:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;
    a4b2:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
	conn->llcp.connection_update.timeout = timeout;
	/* conn->llcp.connection_update.instant     = 0; */
	conn->llcp.connection_update.state = cmd + 1;
	conn->llcp.connection_update.is_internal = 0;

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
    a4b6:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
    a4ba:	4610      	mov	r0, r2
    a4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
		}

		return 1;
    a4be:	2001      	movs	r0, #1
    a4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	     ((conn->llcp_type != LLCP_CONNECTION_UPDATE) ||
	      (conn->llcp.connection_update.state !=
	       LLCP_CONN_STATE_APP_WAIT)))) {
		if ((conn) && (conn->llcp_type == LLCP_CONNECTION_UPDATE)) {
			/* controller busy (mockup requirement) */
			return 2;
    a4c2:	2002      	movs	r0, #2

	conn->llcp_type = LLCP_CONNECTION_UPDATE;
	conn->llcp_req++;

	return 0;
}
    a4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a4c8 <radio_chm_update>:

uint32_t radio_chm_update(uint8_t *chm)
{
    a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t instance;

	memcpy(&_radio.data_channel_map[0], chm,
    a4cc:	4c1f      	ldr	r4, [pc, #124]	; (a54c <radio_chm_update+0x84>)
    a4ce:	4601      	mov	r1, r0

	return 0;
}

uint32_t radio_chm_update(uint8_t *chm)
{
    a4d0:	af00      	add	r7, sp, #0
	uint8_t instance;

	memcpy(&_radio.data_channel_map[0], chm,
    a4d2:	2205      	movs	r2, #5

	return 0;
}

uint32_t radio_chm_update(uint8_t *chm)
{
    a4d4:	4605      	mov	r5, r0
	uint8_t instance;

	memcpy(&_radio.data_channel_map[0], chm,
    a4d6:	f204 202a 	addw	r0, r4, #554	; 0x22a
    a4da:	f7f6 fcc0 	bl	e5e <memcpy>
	       sizeof(_radio.data_channel_map));
	_radio.data_channel_count =
		util_ones_count_get(&_radio.data_channel_map[0],
    a4de:	f204 202a 	addw	r0, r4, #554	; 0x22a
    a4e2:	2105      	movs	r1, #5
    a4e4:	f7f8 fc44 	bl	2d70 <util_ones_count_get>
{
	uint8_t instance;

	memcpy(&_radio.data_channel_map[0], chm,
	       sizeof(_radio.data_channel_map));
	_radio.data_channel_count =
    a4e8:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    a4ec:	f894 4220 	ldrb.w	r4, [r4, #544]	; 0x220
    a4f0:	3c01      	subs	r4, #1
    a4f2:	b2e4      	uxtb	r4, r4
		}

		memcpy(&conn->llcp.channel_map.chm[0], chm,
		       sizeof(conn->llcp.channel_map.chm));
		/* conn->llcp.channel_map.instant     = 0; */
		conn->llcp.channel_map.initiate = 1;
    a4f4:	2601      	movs	r6, #1

		conn->llcp_type = LLCP_CHANNEL_MAP;
    a4f6:	f04f 0802 	mov.w	r8, #2
	_radio.data_channel_count =
		util_ones_count_get(&_radio.data_channel_map[0],
				    sizeof(_radio.data_channel_map));

	instance = _radio.connection_count;
	while (instance--) {
    a4fa:	2cff      	cmp	r4, #255	; 0xff
    a4fc:	d01f      	beq.n	a53e <radio_chm_update+0x76>
		struct connection *conn;

		conn = connection_get(instance);
    a4fe:	4620      	mov	r0, r4
    a500:	f7fa fb38 	bl	4b74 <connection_get>
		if (!conn || conn->role.slave.role) {
    a504:	4681      	mov	r9, r0
    a506:	b1b8      	cbz	r0, a538 <radio_chm_update+0x70>
    a508:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    a50c:	07db      	lsls	r3, r3, #31
    a50e:	d413      	bmi.n	a538 <radio_chm_update+0x70>
			continue;
		}

		if (conn->llcp_req != conn->llcp_ack) {
    a510:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    a514:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    a518:	429a      	cmp	r2, r3
    a51a:	d113      	bne.n	a544 <radio_chm_update+0x7c>
			return 1;
		}

		memcpy(&conn->llcp.channel_map.chm[0], chm,
    a51c:	2205      	movs	r2, #5
    a51e:	4629      	mov	r1, r5
    a520:	306d      	adds	r0, #109	; 0x6d
    a522:	f7f6 fc9c 	bl	e5e <memcpy>
		       sizeof(conn->llcp.channel_map.chm));
		/* conn->llcp.channel_map.instant     = 0; */
		conn->llcp.channel_map.initiate = 1;

		conn->llcp_type = LLCP_CHANNEL_MAP;
		conn->llcp_req++;
    a526:	f899 3068 	ldrb.w	r3, [r9, #104]	; 0x68
		}

		memcpy(&conn->llcp.channel_map.chm[0], chm,
		       sizeof(conn->llcp.channel_map.chm));
		/* conn->llcp.channel_map.instant     = 0; */
		conn->llcp.channel_map.initiate = 1;
    a52a:	f889 606c 	strb.w	r6, [r9, #108]	; 0x6c

		conn->llcp_type = LLCP_CHANNEL_MAP;
		conn->llcp_req++;
    a52e:	3301      	adds	r3, #1
		memcpy(&conn->llcp.channel_map.chm[0], chm,
		       sizeof(conn->llcp.channel_map.chm));
		/* conn->llcp.channel_map.instant     = 0; */
		conn->llcp.channel_map.initiate = 1;

		conn->llcp_type = LLCP_CHANNEL_MAP;
    a530:	f889 806a 	strb.w	r8, [r9, #106]	; 0x6a
		conn->llcp_req++;
    a534:	f889 3068 	strb.w	r3, [r9, #104]	; 0x68
    a538:	3c01      	subs	r4, #1
    a53a:	b2e4      	uxtb	r4, r4
    a53c:	e7dd      	b.n	a4fa <radio_chm_update+0x32>
	}

	return 0;
    a53e:	2000      	movs	r0, #0
    a540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn || conn->role.slave.role) {
			continue;
		}

		if (conn->llcp_req != conn->llcp_ack) {
			return 1;
    a544:	2001      	movs	r0, #1
		conn->llcp_type = LLCP_CHANNEL_MAP;
		conn->llcp_req++;
	}

	return 0;
}
    a546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a54a:	bf00      	nop
    a54c:	20000b44 	.word	0x20000b44

0000a550 <radio_start_enc_req_send>:
	return 1;
}

uint32_t radio_start_enc_req_send(uint16_t handle, uint8_t error_code,
				  uint8_t const *const ltk)
{
    a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a552:	af00      	add	r7, sp, #0
    a554:	460d      	mov	r5, r1
    a556:	4616      	mov	r6, r2
	struct connection *conn;

	conn = connection_get(handle);
    a558:	f7fa fb0c 	bl	4b74 <connection_get>
	if (!conn) {
    a55c:	4604      	mov	r4, r0
    a55e:	b908      	cbnz	r0, a564 <radio_start_enc_req_send+0x14>
		return 1;
    a560:	2001      	movs	r0, #1
    a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (error_code) {
    a564:	b315      	cbz	r5, a5ac <radio_start_enc_req_send+0x5c>
		if (conn->refresh == 0) {
    a566:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    a56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a56e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a572:	b973      	cbnz	r3, a592 <radio_start_enc_req_send+0x42>
			if (conn->llcp_req != conn->llcp_ack) {
    a574:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    a578:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    a57c:	4293      	cmp	r3, r2
    a57e:	d1ef      	bne.n	a560 <radio_start_enc_req_send+0x10>
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
    a580:	3301      	adds	r3, #1
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
    a582:	2203      	movs	r2, #3
		if (conn->refresh == 0) {
			if (conn->llcp_req != conn->llcp_ack) {
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;
    a584:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c

			conn->llcp_type = LLCP_ENCRYPTION;
			conn->llcp_req++;
    a588:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
				return 1;
			}

			conn->llcp.encryption.error_code = error_code;

			conn->llcp_type = LLCP_ENCRYPTION;
    a58c:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    a590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_req++;
		} else {
			if (conn->llcp_terminate.ack !=
    a592:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
    a596:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    a59a:	4293      	cmp	r3, r2
    a59c:	d1e0      	bne.n	a560 <radio_start_enc_req_send+0x10>
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
    a59e:	3301      	adds	r3, #1
			if (conn->llcp_terminate.ack !=
			    conn->llcp_terminate.req) {
				return 1;
			}

			conn->llcp_terminate.reason_own = error_code;
    a5a0:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2

			conn->llcp_terminate.req++;
    a5a4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
	}

	return 0;
    a5a8:	2000      	movs	r0, #0
    a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.reason_own = error_code;

			conn->llcp_terminate.req++;
		}
	} else {
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    a5ac:	2210      	movs	r2, #16
    a5ae:	4631      	mov	r1, r6
    a5b0:	3077      	adds	r0, #119	; 0x77
    a5b2:	f7f6 fc54 	bl	e5e <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if (conn->llcp_req != conn->llcp_ack) {
    a5b6:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
    a5ba:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    a5be:	4293      	cmp	r3, r2
    a5c0:	d1ce      	bne.n	a560 <radio_start_enc_req_send+0x10>
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
    a5c2:	3301      	adds	r3, #1
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    a5c4:	2203      	movs	r2, #3

		if (conn->llcp_req != conn->llcp_ack) {
			return 1;
		}

		conn->llcp.encryption.error_code = 0;
    a5c6:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c

		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_req++;
    a5ca:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			return 1;
		}

		conn->llcp.encryption.error_code = 0;

		conn->llcp_type = LLCP_ENCRYPTION;
    a5ce:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		conn->llcp_req++;
	}

	return 0;
    a5d2:	4628      	mov	r0, r5
}
    a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a5d6 <radio_feature_req_send>:

uint32_t radio_feature_req_send(uint16_t handle)
{
    a5d6:	b580      	push	{r7, lr}
    a5d8:	af00      	add	r7, sp, #0
	struct connection *conn;

	conn = connection_get(handle);
    a5da:	f7fa facb 	bl	4b74 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    a5de:	b168      	cbz	r0, a5fc <radio_feature_req_send+0x26>
    a5e0:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    a5e4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    a5e8:	4293      	cmp	r3, r2
    a5ea:	d107      	bne.n	a5fc <radio_feature_req_send+0x26>
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;
    a5ec:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    a5ee:	2204      	movs	r2, #4
	conn->llcp_req++;
    a5f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
    a5f4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
    a5f8:	2000      	movs	r0, #0
    a5fa:	bd80      	pop	{r7, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    a5fc:	2001      	movs	r0, #1

	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
	conn->llcp_req++;

	return 0;
}
    a5fe:	bd80      	pop	{r7, pc}

0000a600 <radio_version_ind_send>:

uint32_t radio_version_ind_send(uint16_t handle)
{
    a600:	b580      	push	{r7, lr}
    a602:	af00      	add	r7, sp, #0
	struct connection *conn;

	conn = connection_get(handle);
    a604:	f7fa fab6 	bl	4b74 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
    a608:	b168      	cbz	r0, a626 <radio_version_ind_send+0x26>
    a60a:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    a60e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    a612:	4293      	cmp	r3, r2
    a614:	d107      	bne.n	a626 <radio_version_ind_send+0x26>
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;
    a616:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    a618:	2205      	movs	r2, #5
	conn->llcp_req++;
    a61a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
	}

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
    a61e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
	conn->llcp_req++;

	return 0;
    a622:	2000      	movs	r0, #0
    a624:	bd80      	pop	{r7, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
		return 1;
    a626:	2001      	movs	r0, #1

	conn->llcp_type = LLCP_VERSION_EXCHANGE;
	conn->llcp_req++;

	return 0;
}
    a628:	bd80      	pop	{r7, pc}

0000a62a <radio_terminate_ind_send>:

uint32_t radio_terminate_ind_send(uint16_t handle, uint8_t reason)
{
    a62a:	b598      	push	{r3, r4, r7, lr}
    a62c:	af00      	add	r7, sp, #0
    a62e:	460c      	mov	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    a630:	f7fa faa0 	bl	4b74 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
    a634:	b160      	cbz	r0, a650 <radio_terminate_ind_send+0x26>
    a636:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    a63a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
    a63e:	4293      	cmp	r3, r2
    a640:	d106      	bne.n	a650 <radio_terminate_ind_send+0x26>
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;
    a642:	3301      	adds	r3, #1
	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
	}

	conn->llcp_terminate.reason_own = reason;
    a644:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2

	conn->llcp_terminate.req++;
    a648:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0

	return 0;
    a64c:	2000      	movs	r0, #0
    a64e:	bd98      	pop	{r3, r4, r7, pc}
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
		return 1;
    a650:	2001      	movs	r0, #1
	conn->llcp_terminate.reason_own = reason;

	conn->llcp_terminate.req++;

	return 0;
}
    a652:	bd98      	pop	{r3, r4, r7, pc}

0000a654 <radio_length_req_send>:

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
uint32_t radio_length_req_send(uint16_t handle, uint16_t tx_octets)
{
    a654:	b598      	push	{r3, r4, r7, lr}
    a656:	af00      	add	r7, sp, #0
    a658:	460c      	mov	r4, r1
	struct connection *conn;

	conn = connection_get(handle);
    a65a:	f7fa fa8b 	bl	4b74 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    a65e:	b1c0      	cbz	r0, a692 <radio_length_req_send+0x3e>
    a660:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    a664:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
    a668:	429a      	cmp	r2, r3
    a66a:	d112      	bne.n	a692 <radio_length_req_send+0x3e>
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
    a66c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
uint32_t radio_length_req_send(uint16_t handle, uint16_t tx_octets)
{
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
    a670:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
    a674:	4293      	cmp	r3, r2
    a676:	d10c      	bne.n	a692 <radio_length_req_send+0x3e>
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a678:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
	conn->llcp_length.tx_octets = tx_octets;
    a67c:	f8a0 40b6 	strh.w	r4, [r0, #182]	; 0xb6
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a680:	f36f 0201 	bfc	r2, #0, #2
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
    a684:	3301      	adds	r3, #1
		return 1;
	}

	/* TODO: parameter check tx_octets */

	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    a686:	f880 20b2 	strb.w	r2, [r0, #178]	; 0xb2
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;
    a68a:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0

	return 0;
    a68e:	2000      	movs	r0, #0
    a690:	bd98      	pop	{r3, r4, r7, pc}
	struct connection *conn;

	conn = connection_get(handle);
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
		return 1;
    a692:	2001      	movs	r0, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
	conn->llcp_length.tx_octets = tx_octets;
	conn->llcp_length.req++;

	return 0;
}
    a694:	bd98      	pop	{r3, r4, r7, pc}
	...

0000a698 <radio_length_default_get>:

void radio_length_default_get(uint16_t *max_tx_octets, uint16_t *max_tx_time)
{
	*max_tx_octets = _radio.default_tx_octets;
    a698:	4b04      	ldr	r3, [pc, #16]	; (a6ac <radio_length_default_get+0x14>)

	return 0;
}

void radio_length_default_get(uint16_t *max_tx_octets, uint16_t *max_tx_time)
{
    a69a:	b580      	push	{r7, lr}
	*max_tx_octets = _radio.default_tx_octets;
    a69c:	f8b3 2232 	ldrh.w	r2, [r3, #562]	; 0x232
    a6a0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
    a6a2:	f8b3 3234 	ldrh.w	r3, [r3, #564]	; 0x234
    a6a6:	800b      	strh	r3, [r1, #0]

	return 0;
}

void radio_length_default_get(uint16_t *max_tx_octets, uint16_t *max_tx_time)
{
    a6a8:	af00      	add	r7, sp, #0
	*max_tx_octets = _radio.default_tx_octets;
	*max_tx_time = _radio.default_tx_time;
    a6aa:	bd80      	pop	{r7, pc}
    a6ac:	20000b44 	.word	0x20000b44

0000a6b0 <radio_length_default_set>:
}

uint32_t radio_length_default_set(uint16_t max_tx_octets, uint16_t max_tx_time)
{
    a6b0:	b580      	push	{r7, lr}
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
    a6b2:	4b04      	ldr	r3, [pc, #16]	; (a6c4 <radio_length_default_set+0x14>)
	*max_tx_octets = _radio.default_tx_octets;
	*max_tx_time = _radio.default_tx_time;
}

uint32_t radio_length_default_set(uint16_t max_tx_octets, uint16_t max_tx_time)
{
    a6b4:	af00      	add	r7, sp, #0
	/* TODO: parameter check (for BT 5.0 compliance) */

	_radio.default_tx_octets = max_tx_octets;
    a6b6:	f8a3 0232 	strh.w	r0, [r3, #562]	; 0x232
	_radio.default_tx_time = max_tx_time;
    a6ba:	f8a3 1234 	strh.w	r1, [r3, #564]	; 0x234

	return 0;
}
    a6be:	2000      	movs	r0, #0
    a6c0:	bd80      	pop	{r7, pc}
    a6c2:	bf00      	nop
    a6c4:	20000b44 	.word	0x20000b44

0000a6c8 <radio_length_max_get>:

void radio_length_max_get(uint16_t *max_tx_octets, uint16_t *max_tx_time,
			  uint16_t *max_rx_octets, uint16_t *max_rx_time)
{
    a6c8:	b590      	push	{r4, r7, lr}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    a6ca:	241b      	movs	r4, #27
    a6cc:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    a6ce:	f44f 70a4 	mov.w	r0, #328	; 0x148
    a6d2:	8008      	strh	r0, [r1, #0]
	return 0;
}

void radio_length_max_get(uint16_t *max_tx_octets, uint16_t *max_tx_time,
			  uint16_t *max_rx_octets, uint16_t *max_rx_time)
{
    a6d4:	af00      	add	r7, sp, #0
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
	*max_tx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
    a6d6:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_LL_LENGTH_TIME_RX_MAX;
    a6d8:	8018      	strh	r0, [r3, #0]
    a6da:	bd90      	pop	{r4, r7, pc}

0000a6dc <radio_rx_get>:
	return cmplt;
}

uint8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx,
		     uint16_t *handle)
{
    a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6e0:	4605      	mov	r5, r0
    a6e2:	b082      	sub	sp, #8
    a6e4:	4608      	mov	r0, r1
	uint8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a6e6:	491c      	ldr	r1, [pc, #112]	; (a758 <radio_rx_get+0x7c>)
    a6e8:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
    a6ec:	f8d1 225c 	ldr.w	r2, [r1, #604]	; 0x25c
    a6f0:	4293      	cmp	r3, r2
	return cmplt;
}

uint8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx,
		     uint16_t *handle)
{
    a6f2:	af00      	add	r7, sp, #0
    a6f4:	460e      	mov	r6, r1
	uint8_t cmplt;

	cmplt = 0;
	if (_radio.link_rx_head != _radio.link_rx_tail) {
    a6f6:	d020      	beq.n	a73a <radio_rx_get+0x5e>
		struct radio_pdu_node_rx *_radio_pdu_node_rx;

		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
    a6f8:	f8d3 9004 	ldr.w	r9, [r3, #4]

		cmplt = tx_cmplt_get(handle,
    a6fc:	f201 2183 	addw	r1, r1, #643	; 0x283
    a700:	f899 2000 	ldrb.w	r2, [r9]
    a704:	f7fa f9e8 	bl	4ad8 <tx_cmplt_get>
				&_radio.packet_release_first,
				_radio_pdu_node_rx->hdr.onion.
				packet_release_last);
		if (!cmplt) {
    a708:	4604      	mov	r4, r0
    a70a:	b9e8      	cbnz	r0, a748 <radio_rx_get+0x6c>
			uint16_t handle;
			uint8_t first, cmplt_prev, cmplt_curr;

			first = _radio.packet_release_first;
    a70c:	f107 0808 	add.w	r8, r7, #8
    a710:	f896 3283 	ldrb.w	r3, [r6, #643]	; 0x283
    a714:	f808 3d03 	strb.w	r3, [r8, #-3]!
			cmplt_curr = 0;
    a718:	4682      	mov	sl, r0
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
    a71a:	f896 2284 	ldrb.w	r2, [r6, #644]	; 0x284
    a71e:	4641      	mov	r1, r8
    a720:	1db8      	adds	r0, r7, #6
    a722:	f7fa f9d9 	bl	4ad8 <tx_cmplt_get>
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
				 (cmplt_prev != cmplt_curr));
    a726:	f1ba 0f00 	cmp.w	sl, #0
    a72a:	d001      	beq.n	a730 <radio_rx_get+0x54>
	return cmplt;
}

uint8_t radio_rx_get(struct radio_pdu_node_rx **radio_pdu_node_rx,
		     uint16_t *handle)
{
    a72c:	4682      	mov	sl, r0
    a72e:	e7f4      	b.n	a71a <radio_rx_get+0x3e>
			cmplt_curr = 0;
			do {
				cmplt_prev = cmplt_curr;
				cmplt_curr = tx_cmplt_get(&handle, &first,
						_radio.packet_release_last);
			} while ((cmplt_prev != 0) ||
    a730:	2800      	cmp	r0, #0
    a732:	d1fb      	bne.n	a72c <radio_rx_get+0x50>
				 (cmplt_prev != cmplt_curr));

			*radio_pdu_node_rx = _radio_pdu_node_rx;
    a734:	f8c5 9000 	str.w	r9, [r5]
    a738:	e008      	b.n	a74c <radio_rx_get+0x70>
		} else {
			*radio_pdu_node_rx = NULL;
		}
	} else {
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
    a73a:	f891 2284 	ldrb.w	r2, [r1, #644]	; 0x284
    a73e:	f201 2183 	addw	r1, r1, #643	; 0x283
    a742:	f7fa f9c9 	bl	4ad8 <tx_cmplt_get>
    a746:	4604      	mov	r4, r0
				     _radio.packet_release_last);

		*radio_pdu_node_rx = NULL;
    a748:	2300      	movs	r3, #0
    a74a:	602b      	str	r3, [r5, #0]
	}

	return cmplt;
}
    a74c:	4620      	mov	r0, r4
    a74e:	3708      	adds	r7, #8
    a750:	46bd      	mov	sp, r7
    a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a756:	bf00      	nop
    a758:	20000b44 	.word	0x20000b44

0000a75c <radio_rx_dequeue>:

void radio_rx_dequeue(void)
{
    a75c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a75e:	b085      	sub	sp, #20
    a760:	af02      	add	r7, sp, #8
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    a762:	f107 0208 	add.w	r2, r7, #8
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a766:	4c2c      	ldr	r4, [pc, #176]	; (a818 <radio_rx_dequeue+0xbc>)
	return cmplt;
}

void radio_rx_dequeue(void)
{
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
    a768:	2300      	movs	r3, #0
    a76a:	f842 3d04 	str.w	r3, [r2, #-4]!
	void *link;

	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
    a76e:	f8d4 025c 	ldr.w	r0, [r4, #604]	; 0x25c
    a772:	f504 7116 	add.w	r1, r4, #600	; 0x258
    a776:	f7f8 fa2c 	bl	2bd2 <memq_dequeue>
			    (void **)&radio_pdu_node_rx);
	LL_ASSERT(link);
    a77a:	4605      	mov	r5, r0
    a77c:	b968      	cbnz	r0, a79a <radio_rx_dequeue+0x3e>
    a77e:	4b27      	ldr	r3, [pc, #156]	; (a81c <radio_rx_dequeue+0xc0>)
    a780:	9301      	str	r3, [sp, #4]
    a782:	4b27      	ldr	r3, [pc, #156]	; (a820 <radio_rx_dequeue+0xc4>)
    a784:	9300      	str	r3, [sp, #0]
    a786:	4927      	ldr	r1, [pc, #156]	; (a824 <radio_rx_dequeue+0xc8>)
    a788:	4b27      	ldr	r3, [pc, #156]	; (a828 <radio_rx_dequeue+0xcc>)
    a78a:	4a28      	ldr	r2, [pc, #160]	; (a82c <radio_rx_dequeue+0xd0>)
    a78c:	4828      	ldr	r0, [pc, #160]	; (a830 <radio_rx_dequeue+0xd4>)
    a78e:	f7f6 fd0d 	bl	11ac <printk>
    a792:	4629      	mov	r1, r5
    a794:	4628      	mov	r0, r5
    a796:	f001 ff5b 	bl	c650 <_SysFatalErrorHandler>

	mem_release(link, &_radio.link_rx_free);
    a79a:	4e1f      	ldr	r6, [pc, #124]	; (a818 <radio_rx_dequeue+0xbc>)
    a79c:	4628      	mov	r0, r5
    a79e:	f506 7115 	add.w	r1, r6, #596	; 0x254
    a7a2:	f7f8 f9c4 	bl	2b2e <mem_release>

	switch (radio_pdu_node_rx->hdr.type) {
    a7a6:	687b      	ldr	r3, [r7, #4]
    a7a8:	791a      	ldrb	r2, [r3, #4]
    a7aa:	2a07      	cmp	r2, #7
    a7ac:	d822      	bhi.n	a7f4 <radio_rx_dequeue+0x98>
    a7ae:	2301      	movs	r3, #1
    a7b0:	4093      	lsls	r3, r2
    a7b2:	f013 0fee 	tst.w	r3, #238	; 0xee
    a7b6:	d102      	bne.n	a7be <radio_rx_dequeue+0x62>
    a7b8:	06db      	lsls	r3, r3, #27
    a7ba:	d51b      	bpl.n	a7f4 <radio_rx_dequeue+0x98>
    a7bc:	e028      	b.n	a810 <radio_rx_dequeue+0xb4>
#if defined(CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR)
	case NODE_RX_TYPE_PROFILE:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

		/* release data link credit quota */
		LL_ASSERT(_radio.link_rx_data_quota <
    a7be:	f896 324c 	ldrb.w	r3, [r6, #588]	; 0x24c
    a7c2:	f896 2260 	ldrb.w	r2, [r6, #608]	; 0x260
    a7c6:	3b01      	subs	r3, #1
    a7c8:	429a      	cmp	r2, r3
    a7ca:	db0d      	blt.n	a7e8 <radio_rx_dequeue+0x8c>
    a7cc:	4b13      	ldr	r3, [pc, #76]	; (a81c <radio_rx_dequeue+0xc0>)
    a7ce:	9301      	str	r3, [sp, #4]
    a7d0:	4b13      	ldr	r3, [pc, #76]	; (a820 <radio_rx_dequeue+0xc4>)
    a7d2:	9300      	str	r3, [sp, #0]
    a7d4:	4913      	ldr	r1, [pc, #76]	; (a824 <radio_rx_dequeue+0xc8>)
    a7d6:	4b14      	ldr	r3, [pc, #80]	; (a828 <radio_rx_dequeue+0xcc>)
    a7d8:	4a14      	ldr	r2, [pc, #80]	; (a82c <radio_rx_dequeue+0xd0>)
    a7da:	4816      	ldr	r0, [pc, #88]	; (a834 <radio_rx_dequeue+0xd8>)
    a7dc:	f7f6 fce6 	bl	11ac <printk>
    a7e0:	2100      	movs	r1, #0
    a7e2:	4608      	mov	r0, r1
    a7e4:	f001 ff34 	bl	c650 <_SysFatalErrorHandler>
			  (_radio.packet_rx_count - 1));

		_radio.link_rx_data_quota++;
    a7e8:	f894 3260 	ldrb.w	r3, [r4, #608]	; 0x260
    a7ec:	3301      	adds	r3, #1
    a7ee:	f884 3260 	strb.w	r3, [r4, #608]	; 0x260
		break;
    a7f2:	e00d      	b.n	a810 <radio_rx_dequeue+0xb4>
	case NODE_RX_TYPE_TERMINATE:
		/* did not use data link quota */
		break;

	default:
		LL_ASSERT(0);
    a7f4:	4b09      	ldr	r3, [pc, #36]	; (a81c <radio_rx_dequeue+0xc0>)
    a7f6:	9301      	str	r3, [sp, #4]
    a7f8:	4b09      	ldr	r3, [pc, #36]	; (a820 <radio_rx_dequeue+0xc4>)
    a7fa:	9300      	str	r3, [sp, #0]
    a7fc:	4909      	ldr	r1, [pc, #36]	; (a824 <radio_rx_dequeue+0xc8>)
    a7fe:	4b0a      	ldr	r3, [pc, #40]	; (a828 <radio_rx_dequeue+0xcc>)
    a800:	4a0a      	ldr	r2, [pc, #40]	; (a82c <radio_rx_dequeue+0xd0>)
    a802:	480d      	ldr	r0, [pc, #52]	; (a838 <radio_rx_dequeue+0xdc>)
    a804:	f7f6 fcd2 	bl	11ac <printk>
    a808:	2100      	movs	r1, #0
    a80a:	4608      	mov	r0, r1
    a80c:	f001 ff20 	bl	c650 <_SysFatalErrorHandler>
		break;
	}
}
    a810:	370c      	adds	r7, #12
    a812:	46bd      	mov	sp, r7
    a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a816:	bf00      	nop
    a818:	20000b44 	.word	0x20000b44
    a81c:	0000dd4e 	.word	0x0000dd4e
    a820:	0000dd53 	.word	0x0000dd53
    a824:	0000dd04 	.word	0x0000dd04
    a828:	0000f036 	.word	0x0000f036
    a82c:	0000dcfd 	.word	0x0000dcfd
    a830:	0000e411 	.word	0x0000e411
    a834:	0000e77b 	.word	0x0000e77b
    a838:	0000e191 	.word	0x0000e191

0000a83c <radio_rx_mem_release>:

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    a83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a840:	b082      	sub	sp, #8
    a842:	4604      	mov	r4, r0

			mem_release(conn, &_radio.conn_free);
			break;

		default:
			LL_ASSERT(0);
    a844:	4d19      	ldr	r5, [pc, #100]	; (a8ac <radio_rx_mem_release+0x70>)
void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
    a846:	6800      	ldr	r0, [r0, #0]
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a848:	4e19      	ldr	r6, [pc, #100]	; (a8b0 <radio_rx_mem_release+0x74>)
		break;
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    a84a:	af02      	add	r7, sp, #8
	struct radio_pdu_node_rx *_radio_pdu_node_rx;
	struct connection *conn;

	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
    a84c:	b338      	cbz	r0, a89e <radio_rx_mem_release+0x62>
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;

		switch (_radio_pdu_node_rx_free->hdr.type) {
    a84e:	7902      	ldrb	r2, [r0, #4]
	_radio_pdu_node_rx = *radio_pdu_node_rx;
	while (_radio_pdu_node_rx) {
		struct radio_pdu_node_rx *_radio_pdu_node_rx_free;

		_radio_pdu_node_rx_free = _radio_pdu_node_rx;
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
    a850:	f8d0 8000 	ldr.w	r8, [r0]
    a854:	2a07      	cmp	r2, #7
    a856:	d813      	bhi.n	a880 <radio_rx_mem_release+0x44>
    a858:	2301      	movs	r3, #1
    a85a:	4093      	lsls	r3, r2
    a85c:	f013 0fee 	tst.w	r3, #238	; 0xee
    a860:	d10a      	bne.n	a878 <radio_rx_mem_release+0x3c>
    a862:	06db      	lsls	r3, r3, #27
    a864:	d50c      	bpl.n	a880 <radio_rx_mem_release+0x44>
			mem_release(_radio_pdu_node_rx_free,
				    &_radio.pkt_rx_data_free);
			break;

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
    a866:	88c2      	ldrh	r2, [r0, #6]
    a868:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
    a86c:	f44f 7188 	mov.w	r1, #272	; 0x110
    a870:	f7f8 f97d 	bl	2b6e <mem_get>
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    a874:	490f      	ldr	r1, [pc, #60]	; (a8b4 <radio_rx_mem_release+0x78>)
    a876:	e000      	b.n	a87a <radio_rx_mem_release+0x3e>

#if defined(CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR)
		case NODE_RX_TYPE_PROFILE:
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

			mem_release(_radio_pdu_node_rx_free,
    a878:	490f      	ldr	r1, [pc, #60]	; (a8b8 <radio_rx_mem_release+0x7c>)

		case NODE_RX_TYPE_TERMINATE:
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
				       _radio_pdu_node_rx_free->hdr.handle);

			mem_release(conn, &_radio.conn_free);
    a87a:	f7f8 f958 	bl	2b2e <mem_release>
			break;
    a87e:	e00c      	b.n	a89a <radio_rx_mem_release+0x5e>

		default:
			LL_ASSERT(0);
    a880:	4b0e      	ldr	r3, [pc, #56]	; (a8bc <radio_rx_mem_release+0x80>)
    a882:	9300      	str	r3, [sp, #0]
    a884:	490e      	ldr	r1, [pc, #56]	; (a8c0 <radio_rx_mem_release+0x84>)
    a886:	9501      	str	r5, [sp, #4]
    a888:	4b0e      	ldr	r3, [pc, #56]	; (a8c4 <radio_rx_mem_release+0x88>)
    a88a:	4a0f      	ldr	r2, [pc, #60]	; (a8c8 <radio_rx_mem_release+0x8c>)
    a88c:	480f      	ldr	r0, [pc, #60]	; (a8cc <radio_rx_mem_release+0x90>)
    a88e:	f7f6 fc8d 	bl	11ac <printk>
    a892:	2100      	movs	r1, #0
    a894:	4608      	mov	r0, r1
    a896:	f001 fedb 	bl	c650 <_SysFatalErrorHandler>
		break;
	}
}

void radio_rx_mem_release(struct radio_pdu_node_rx **radio_pdu_node_rx)
{
    a89a:	4640      	mov	r0, r8
    a89c:	e7d6      	b.n	a84c <radio_rx_mem_release+0x10>
			LL_ASSERT(0);
			break;
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;
    a89e:	6020      	str	r0, [r4, #0]

	packet_rx_allocate(0xff);
    a8a0:	20ff      	movs	r0, #255	; 0xff
}
    a8a2:	46bd      	mov	sp, r7
    a8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		}
	}

	*radio_pdu_node_rx = _radio_pdu_node_rx;

	packet_rx_allocate(0xff);
    a8a8:	f7fa b842 	b.w	4930 <packet_rx_allocate>
    a8ac:	0000dd4e 	.word	0x0000dd4e
    a8b0:	20000b44 	.word	0x20000b44
    a8b4:	20000d60 	.word	0x20000d60
    a8b8:	20000d80 	.word	0x20000d80
    a8bc:	0000dd53 	.word	0x0000dd53
    a8c0:	0000dd04 	.word	0x0000dd04
    a8c4:	0000f15c 	.word	0x0000f15c
    a8c8:	0000dcfd 	.word	0x0000dcfd
    a8cc:	0000e191 	.word	0x0000e191

0000a8d0 <do_radio_rx_fc_set>:
	}
}

uint8_t do_radio_rx_fc_set(uint16_t handle, uint8_t req,
				uint8_t ack)
{
    a8d0:	b590      	push	{r4, r7, lr}
	if (req == ack) {
    a8d2:	4291      	cmp	r1, r2
	}
}

uint8_t do_radio_rx_fc_set(uint16_t handle, uint8_t req,
				uint8_t ack)
{
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	4b15      	ldr	r3, [pc, #84]	; (a92c <do_radio_rx_fc_set+0x5c>)
	if (req == ack) {
    a8d8:	d118      	bne.n	a90c <do_radio_rx_fc_set+0x3c>
		if (_radio.link_rx_head == _radio.link_rx_tail) {
    a8da:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
    a8de:	f8d3 4258 	ldr.w	r4, [r3, #600]	; 0x258
    a8e2:	4294      	cmp	r4, r2
    a8e4:	d11e      	bne.n	a924 <do_radio_rx_fc_set+0x54>
			uint8_t ack1 = ack;

			if (ack1 == 0) {
    a8e6:	2900      	cmp	r1, #0
				ack1 = TRIPLE_BUFFER_SIZE;
    a8e8:	bf14      	ite	ne
    a8ea:	460a      	movne	r2, r1
    a8ec:	2203      	moveq	r2, #3
			}
			_radio.fc_handle[--ack1] = handle;
    a8ee:	3a01      	subs	r2, #1
    a8f0:	b2d2      	uxtb	r2, r2
    a8f2:	eb03 0442 	add.w	r4, r3, r2, lsl #1
			_radio.fc_ack = ack1;
    a8f6:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    a8fa:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c
			uint8_t ack1 = ack;

			if (ack1 == 0) {
				ack1 = TRIPLE_BUFFER_SIZE;
			}
			_radio.fc_handle[--ack1] = handle;
    a8fe:	f8a4 0286 	strh.w	r0, [r4, #646]	; 0x286
			_radio.fc_ack = ack1;

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
    a902:	4291      	cmp	r1, r2
    a904:	d010      	beq.n	a928 <do_radio_rx_fc_set+0x58>
				_radio.fc_ack = ack;
    a906:	f883 128d 	strb.w	r1, [r3, #653]	; 0x28d
    a90a:	e00b      	b.n	a924 <do_radio_rx_fc_set+0x54>
				return 1;
			}
		} else {
			return 1;
		}
	} else if (((req == 0) &&
    a90c:	b911      	cbnz	r1, a914 <do_radio_rx_fc_set+0x44>

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    a90e:	f8b3 328a 	ldrh.w	r3, [r3, #650]	; 0x28a
    a912:	e003      	b.n	a91c <do_radio_rx_fc_set+0x4c>
		} else {
			return 1;
		}
	} else if (((req == 0) &&
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
    a914:	eb03 0341 	add.w	r3, r3, r1, lsl #1

			/* check if ISR updated FC by changing fc_req */
			if (req != _radio.fc_req) {
				_radio.fc_ack = ack;

				return 1;
    a918:	f8b3 3284 	ldrh.w	r3, [r3, #644]	; 0x284
    a91c:	1a18      	subs	r0, r3, r0
    a91e:	bf18      	it	ne
    a920:	2001      	movne	r0, #1
    a922:	bd90      	pop	{r4, r7, pc}
			}
		} else {
			return 1;
    a924:	2001      	movs	r0, #1
    a926:	bd90      	pop	{r4, r7, pc}
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
		return 1;
	}

	return 0;
    a928:	2000      	movs	r0, #0
}
    a92a:	bd90      	pop	{r4, r7, pc}
    a92c:	20000b44 	.word	0x20000b44

0000a930 <radio_rx_fc_set>:

uint8_t radio_rx_fc_set(uint16_t handle, uint8_t fc)
{
    a930:	b4b0      	push	{r4, r5, r7}
	if (_radio.fc_ena) {
    a932:	4b16      	ldr	r3, [pc, #88]	; (a98c <radio_rx_fc_set+0x5c>)
    a934:	f893 228e 	ldrb.w	r2, [r3, #654]	; 0x28e

	return 0;
}

uint8_t radio_rx_fc_set(uint16_t handle, uint8_t fc)
{
    a938:	af00      	add	r7, sp, #0
    a93a:	460d      	mov	r5, r1
	if (_radio.fc_ena) {
    a93c:	b30a      	cbz	r2, a982 <radio_rx_fc_set+0x52>
		uint8_t req = _radio.fc_req;
    a93e:	f893 228c 	ldrb.w	r2, [r3, #652]	; 0x28c
    a942:	b2d1      	uxtb	r1, r2
		uint8_t ack = _radio.fc_ack;
    a944:	f893 228d 	ldrb.w	r2, [r3, #653]	; 0x28d

		if (fc) {
    a948:	b13d      	cbz	r5, a95a <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
    a94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a94e:	4298      	cmp	r0, r3
    a950:	d017      	beq.n	a982 <radio_rx_fc_set+0x52>
			}
		}
	}

	return 0;
}
    a952:	46bd      	mov	sp, r7
    a954:	bcb0      	pop	{r4, r5, r7}
		uint8_t req = _radio.fc_req;
		uint8_t ack = _radio.fc_ack;

		if (fc) {
			if (handle != 0xffff) {
				return do_radio_rx_fc_set(handle, req, ack);
    a956:	f7ff bfbb 	b.w	a8d0 <do_radio_rx_fc_set>
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
    a95a:	f8d3 0258 	ldr.w	r0, [r3, #600]	; 0x258
    a95e:	f8d3 425c 	ldr.w	r4, [r3, #604]	; 0x25c
    a962:	42a0      	cmp	r0, r4
    a964:	d10d      	bne.n	a982 <radio_rx_fc_set+0x52>
    a966:	4291      	cmp	r1, r2
    a968:	d00b      	beq.n	a982 <radio_rx_fc_set+0x52>
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a96a:	f8d3 425c 	ldr.w	r4, [r3, #604]	; 0x25c
				return do_radio_rx_fc_set(handle, req, ack);
			}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;
    a96e:	f883 128d 	strb.w	r1, [r3, #653]	; 0x28d

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a972:	42a0      	cmp	r0, r4
    a974:	d005      	beq.n	a982 <radio_rx_fc_set+0x52>
			    (req == _radio.fc_req)) {
    a976:	f893 028c 	ldrb.w	r0, [r3, #652]	; 0x28c
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
			   (req != ack)
		    ) {
			_radio.fc_ack = req;

			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
    a97a:	4281      	cmp	r1, r0
			    (req == _radio.fc_req)) {
				_radio.fc_ack = ack;
    a97c:	bf08      	it	eq
    a97e:	f883 228d 	strbeq.w	r2, [r3, #653]	; 0x28d
			}
		}
	}

	return 0;
}
    a982:	2000      	movs	r0, #0
    a984:	46bd      	mov	sp, r7
    a986:	bcb0      	pop	{r4, r5, r7}
    a988:	4770      	bx	lr
    a98a:	bf00      	nop
    a98c:	20000b44 	.word	0x20000b44

0000a990 <radio_tx_mem_acquire>:

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
    a990:	b480      	push	{r7}
	return mem_acquire(&_radio.pkt_tx_data_free);
    a992:	4803      	ldr	r0, [pc, #12]	; (a9a0 <radio_tx_mem_acquire+0x10>)

	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
    a994:	af00      	add	r7, sp, #0
	return mem_acquire(&_radio.pkt_tx_data_free);
}
    a996:	46bd      	mov	sp, r7
    a998:	bc80      	pop	{r7}
	return 0;
}

struct radio_pdu_node_tx *radio_tx_mem_acquire(void)
{
	return mem_acquire(&_radio.pkt_tx_data_free);
    a99a:	f7f8 b8ac 	b.w	2af6 <mem_acquire>
    a99e:	bf00      	nop
    a9a0:	20000db4 	.word	0x20000db4

0000a9a4 <radio_tx_mem_release>:
}

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
    a9a4:	b480      	push	{r7}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    a9a6:	4903      	ldr	r1, [pc, #12]	; (a9b4 <radio_tx_mem_release+0x10>)
{
	return mem_acquire(&_radio.pkt_tx_data_free);
}

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
    a9a8:	af00      	add	r7, sp, #0
	mem_release(node_tx, &_radio.pkt_tx_data_free);
}
    a9aa:	46bd      	mov	sp, r7
    a9ac:	bc80      	pop	{r7}
	return mem_acquire(&_radio.pkt_tx_data_free);
}

void radio_tx_mem_release(struct radio_pdu_node_tx *node_tx)
{
	mem_release(node_tx, &_radio.pkt_tx_data_free);
    a9ae:	f7f8 b8be 	b.w	2b2e <mem_release>
    a9b2:	bf00      	nop
    a9b4:	20000db4 	.word	0x20000db4

0000a9b8 <radio_tx_mem_enqueue>:
	conn->role.slave.latency_cancel = 0;
}

uint32_t radio_tx_mem_enqueue(uint16_t handle,
			      struct radio_pdu_node_tx *node_tx)
{
    a9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    a9bc:	4c3a      	ldr	r4, [pc, #232]	; (aaa8 <radio_tx_mem_enqueue+0xf0>)
	conn->role.slave.latency_cancel = 0;
}

uint32_t radio_tx_mem_enqueue(uint16_t handle,
			      struct radio_pdu_node_tx *node_tx)
{
    a9be:	b089      	sub	sp, #36	; 0x24
	uint8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    a9c0:	f894 5282 	ldrb.w	r5, [r4, #642]	; 0x282
	if (last == _radio.packet_tx_count) {
    a9c4:	f894 3280 	ldrb.w	r3, [r4, #640]	; 0x280
{
	uint8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    a9c8:	3501      	adds	r5, #1
	conn->role.slave.latency_cancel = 0;
}

uint32_t radio_tx_mem_enqueue(uint16_t handle,
			      struct radio_pdu_node_tx *node_tx)
{
    a9ca:	af08      	add	r7, sp, #32
	uint8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
    a9cc:	b2ed      	uxtb	r5, r5
	conn->role.slave.latency_cancel = 0;
}

uint32_t radio_tx_mem_enqueue(uint16_t handle,
			      struct radio_pdu_node_tx *node_tx)
{
    a9ce:	4681      	mov	r9, r0
    a9d0:	4688      	mov	r8, r1
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
	if (last == _radio.packet_tx_count) {
		last = 0;
    a9d2:	42ab      	cmp	r3, r5
    a9d4:	bf08      	it	eq
    a9d6:	2500      	moveq	r5, #0
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
    a9d8:	f7fa f8cc 	bl	4b74 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
    a9dc:	4606      	mov	r6, r0
    a9de:	2800      	cmp	r0, #0
    a9e0:	d05d      	beq.n	aa9e <radio_tx_mem_enqueue+0xe6>
    a9e2:	f894 3281 	ldrb.w	r3, [r4, #641]	; 0x281
    a9e6:	429d      	cmp	r5, r3
    a9e8:	d059      	beq.n	aa9e <radio_tx_mem_enqueue+0xe6>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
    a9ea:	f8b4 3274 	ldrh.w	r3, [r4, #628]	; 0x274
    a9ee:	f898 2005 	ldrb.w	r2, [r8, #5]
    a9f2:	3b07      	subs	r3, #7
    a9f4:	429a      	cmp	r2, r3
    a9f6:	d90d      	bls.n	aa14 <radio_tx_mem_enqueue+0x5c>
    a9f8:	4b2c      	ldr	r3, [pc, #176]	; (aaac <radio_tx_mem_enqueue+0xf4>)
    a9fa:	9301      	str	r3, [sp, #4]
    a9fc:	4b2c      	ldr	r3, [pc, #176]	; (aab0 <radio_tx_mem_enqueue+0xf8>)
    a9fe:	9300      	str	r3, [sp, #0]
    aa00:	492c      	ldr	r1, [pc, #176]	; (aab4 <radio_tx_mem_enqueue+0xfc>)
    aa02:	4b2d      	ldr	r3, [pc, #180]	; (aab8 <radio_tx_mem_enqueue+0x100>)
    aa04:	4a2d      	ldr	r2, [pc, #180]	; (aabc <radio_tx_mem_enqueue+0x104>)
    aa06:	482e      	ldr	r0, [pc, #184]	; (aac0 <radio_tx_mem_enqueue+0x108>)
    aa08:	f7f6 fbd0 	bl	11ac <printk>
    aa0c:	2100      	movs	r1, #0
    aa0e:	4608      	mov	r0, r1
    aa10:	f001 fe1e 	bl	c650 <_SysFatalErrorHandler>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
    aa14:	f894 2282 	ldrb.w	r2, [r4, #642]	; 0x282
    aa18:	f8d4 3278 	ldr.w	r3, [r4, #632]	; 0x278
    aa1c:	f823 9032 	strh.w	r9, [r3, r2, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
    aa20:	f894 2282 	ldrb.w	r2, [r4, #642]	; 0x282
    aa24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    aa28:	f8c3 8004 	str.w	r8, [r3, #4]
	_radio.packet_tx_last = last;
    aa2c:	f884 5282 	strb.w	r5, [r4, #642]	; 0x282

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    aa30:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    aa34:	07da      	lsls	r2, r3, #31
    aa36:	d401      	bmi.n	aa3c <radio_tx_mem_enqueue+0x84>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
    aa38:	2000      	movs	r0, #0
    aa3a:	e031      	b.n	aaa0 <radio_tx_mem_enqueue+0xe8>
	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
	_radio.packet_tx_last = last;

	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
    aa3c:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
    aa3e:	2a00      	cmp	r2, #0
    aa40:	d0fa      	beq.n	aa38 <radio_tx_mem_enqueue+0x80>
    aa42:	f003 0210 	and.w	r2, r3, #16
    aa46:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    aa4a:	2a00      	cmp	r2, #0
    aa4c:	d1f4      	bne.n	aa38 <radio_tx_mem_enqueue+0x80>
	    (conn->role.slave.latency_cancel == 0)) {
		uint32_t ticker_status;

		conn->role.slave.latency_cancel = 1;

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa4e:	f896 2020 	ldrb.w	r2, [r6, #32]
	/* break slave latency */
	if ((conn->role.slave.role != 0) && (conn->latency_event != 0) &&
	    (conn->role.slave.latency_cancel == 0)) {
		uint32_t ticker_status;

		conn->role.slave.latency_cancel = 1;
    aa52:	f043 0310 	orr.w	r3, r3, #16
    aa56:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44

		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
    aa5a:	4b1a      	ldr	r3, [pc, #104]	; (aac4 <radio_tx_mem_enqueue+0x10c>)
    aa5c:	9305      	str	r3, [sp, #20]
    aa5e:	3207      	adds	r2, #7
    aa60:	2301      	movs	r3, #1
    aa62:	9303      	str	r3, [sp, #12]
    aa64:	9606      	str	r6, [sp, #24]
    aa66:	4623      	mov	r3, r4
    aa68:	9404      	str	r4, [sp, #16]
    aa6a:	9402      	str	r4, [sp, #8]
    aa6c:	9401      	str	r4, [sp, #4]
    aa6e:	9400      	str	r4, [sp, #0]
    aa70:	b2d2      	uxtb	r2, r2
    aa72:	2103      	movs	r1, #3
    aa74:	4620      	mov	r0, r4
    aa76:	f7f9 fc7b 	bl	4370 <ticker_update>
				 RADIO_TICKER_USER_ID_APP,
				 RADIO_TICKER_ID_FIRST_CONNECTION +
				 conn->handle, 0, 0, 0, 0, 1, 0,
				 ticker_op_latency_cancelled,
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    aa7a:	f030 0302 	bics.w	r3, r0, #2
    aa7e:	d0db      	beq.n	aa38 <radio_tx_mem_enqueue+0x80>
    aa80:	4b0a      	ldr	r3, [pc, #40]	; (aaac <radio_tx_mem_enqueue+0xf4>)
    aa82:	9301      	str	r3, [sp, #4]
    aa84:	4b0a      	ldr	r3, [pc, #40]	; (aab0 <radio_tx_mem_enqueue+0xf8>)
    aa86:	9300      	str	r3, [sp, #0]
    aa88:	4a0c      	ldr	r2, [pc, #48]	; (aabc <radio_tx_mem_enqueue+0x104>)
    aa8a:	4b0b      	ldr	r3, [pc, #44]	; (aab8 <radio_tx_mem_enqueue+0x100>)
    aa8c:	4909      	ldr	r1, [pc, #36]	; (aab4 <radio_tx_mem_enqueue+0xfc>)
    aa8e:	480e      	ldr	r0, [pc, #56]	; (aac8 <radio_tx_mem_enqueue+0x110>)
    aa90:	f7f6 fb8c 	bl	11ac <printk>
    aa94:	4621      	mov	r1, r4
    aa96:	4620      	mov	r0, r4
    aa98:	f001 fdda 	bl	c650 <_SysFatalErrorHandler>
    aa9c:	e7cc      	b.n	aa38 <radio_tx_mem_enqueue+0x80>
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
	if (!conn || (last == _radio.packet_tx_first)) {
		return 1;
    aa9e:	2001      	movs	r0, #1
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
}
    aaa0:	3704      	adds	r7, #4
    aaa2:	46bd      	mov	sp, r7
    aaa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    aaa8:	20000b44 	.word	0x20000b44
    aaac:	0000dd4e 	.word	0x0000dd4e
    aab0:	0000dd53 	.word	0x0000dd53
    aab4:	0000dd04 	.word	0x0000dd04
    aab8:	0000f0b5 	.word	0x0000f0b5
    aabc:	0000dcfd 	.word	0x0000dcfd
    aac0:	0000eb9e 	.word	0x0000eb9e
    aac4:	000048e1 	.word	0x000048e1
    aac8:	0000e588 	.word	0x0000e588

0000aacc <radio_enc_req_send>:
	return 0;
}

uint32_t radio_enc_req_send(uint16_t handle, uint8_t *rand, uint8_t *ediv,
			    uint8_t *ltk)
{
    aacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aad0:	af00      	add	r7, sp, #0
    aad2:	4680      	mov	r8, r0
    aad4:	4689      	mov	r9, r1
    aad6:	4616      	mov	r6, r2
    aad8:	469a      	mov	sl, r3
	struct connection *conn;
	struct radio_pdu_node_tx *node_tx;

	conn = connection_get(handle);
    aada:	f7fa f84b 	bl	4b74 <connection_get>
	if (!conn) {
    aade:	4605      	mov	r5, r0
    aae0:	2800      	cmp	r0, #0
    aae2:	d04b      	beq.n	ab7c <radio_enc_req_send+0xb0>
		return 1;
	}

	node_tx = radio_tx_mem_acquire();
    aae4:	f7ff ff54 	bl	a990 <radio_tx_mem_acquire>
	if (node_tx) {
    aae8:	4604      	mov	r4, r0
    aaea:	2800      	cmp	r0, #0
    aaec:	d046      	beq.n	ab7c <radio_enc_req_send+0xb0>
		struct pdu_data *pdu_data_tx;

		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;

		memcpy(&conn->llcp.encryption.ltk[0], ltk,
    aaee:	2210      	movs	r2, #16
    aaf0:	4651      	mov	r1, sl
    aaf2:	f105 0077 	add.w	r0, r5, #119	; 0x77
    aaf6:	f7f6 f9b2 	bl	e5e <memcpy>
		       sizeof(conn->llcp.encryption.ltk));

		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
    aafa:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
    aafe:	f013 0330 	ands.w	r3, r3, #48	; 0x30
    ab02:	d11d      	bne.n	ab40 <radio_enc_req_send+0x74>
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    ab04:	7923      	ldrb	r3, [r4, #4]
    ab06:	f043 0303 	orr.w	r3, r3, #3
    ab0a:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
    ab0c:	2317      	movs	r3, #23
    ab0e:	7163      	strb	r3, [r4, #5]
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_enc_req);
			pdu_data_tx->payload.llctrl.opcode =
				PDU_DATA_LLCTRL_TYPE_ENC_REQ;
			memcpy(&pdu_data_tx->payload.llctrl.ctrldata.
    ab10:	2208      	movs	r2, #8
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
						    ctrldata) +
				sizeof(struct pdu_data_llctrl_enc_req);
			pdu_data_tx->payload.llctrl.opcode =
    ab12:	2303      	movs	r3, #3
    ab14:	71e3      	strb	r3, [r4, #7]
				PDU_DATA_LLCTRL_TYPE_ENC_REQ;
			memcpy(&pdu_data_tx->payload.llctrl.ctrldata.
    ab16:	4649      	mov	r1, r9
    ab18:	18a0      	adds	r0, r4, r2
    ab1a:	f7f6 f9a0 	bl	e5e <memcpy>
			       enc_req.rand[0], rand,
			       sizeof(pdu_data_tx->payload.llctrl.ctrldata.
				      enc_req.rand));
			pdu_data_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
				ediv[0];
    ab1e:	7833      	ldrb	r3, [r6, #0]
				PDU_DATA_LLCTRL_TYPE_ENC_REQ;
			memcpy(&pdu_data_tx->payload.llctrl.ctrldata.
			       enc_req.rand[0], rand,
			       sizeof(pdu_data_tx->payload.llctrl.ctrldata.
				      enc_req.rand));
			pdu_data_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
    ab20:	7423      	strb	r3, [r4, #16]
				ediv[0];
			pdu_data_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
    ab22:	7873      	ldrb	r3, [r6, #1]
    ab24:	7463      	strb	r3, [r4, #17]
				ediv[1];
			memset(&pdu_data_tx->payload.llctrl.ctrldata.enc_req.
    ab26:	2208      	movs	r2, #8
    ab28:	21cc      	movs	r1, #204	; 0xcc
    ab2a:	f104 0012 	add.w	r0, r4, #18
    ab2e:	f7f6 f9c3 	bl	eb8 <memset>
				skdm[0], 0xcc,
				/** @todo */
				sizeof(pdu_data_tx->payload.llctrl.ctrldata.
				       enc_req.skdm));
			memset(&pdu_data_tx->payload.llctrl.ctrldata.enc_req.
    ab32:	2204      	movs	r2, #4
    ab34:	21dd      	movs	r1, #221	; 0xdd
    ab36:	f104 001a 	add.w	r0, r4, #26
    ab3a:	f7f6 f9bd 	bl	eb8 <memset>
    ab3e:	e015      	b.n	ab6c <radio_enc_req_send+0xa0>
				ivm[0], 0xdd,
				/** @todo */
				sizeof(pdu_data_tx->payload.llctrl.ctrldata.
				       enc_req.ivm));
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
    ab40:	2b30      	cmp	r3, #48	; 0x30
    ab42:	d118      	bne.n	ab76 <radio_enc_req_send+0xaa>
			memcpy(&conn->llcp.encryption.rand[0], rand,
    ab44:	2208      	movs	r2, #8
    ab46:	4649      	mov	r1, r9
    ab48:	f105 006d 	add.w	r0, r5, #109	; 0x6d
    ab4c:	f7f6 f987 	bl	e5e <memcpy>
			       sizeof(conn->llcp.encryption.rand));

			conn->llcp.encryption.ediv[0] = ediv[0];
    ab50:	7833      	ldrb	r3, [r6, #0]
    ab52:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
			conn->llcp.encryption.ediv[1] = ediv[1];
    ab56:	7873      	ldrb	r3, [r6, #1]
    ab58:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76

			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
    ab5c:	7923      	ldrb	r3, [r4, #4]
    ab5e:	f043 0303 	orr.w	r3, r3, #3
    ab62:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
    ab64:	2301      	movs	r3, #1
    ab66:	7163      	strb	r3, [r4, #5]
				offsetof(struct pdu_data_llctrl, ctrldata);
			pdu_data_tx->payload.llctrl.opcode =
    ab68:	230a      	movs	r3, #10
    ab6a:	71e3      	strb	r3, [r4, #7]
			radio_tx_mem_release(node_tx);

			return 1;
		}

		if (radio_tx_mem_enqueue(handle, node_tx)) {
    ab6c:	4621      	mov	r1, r4
    ab6e:	4640      	mov	r0, r8
    ab70:	f7ff ff22 	bl	a9b8 <radio_tx_mem_enqueue>
    ab74:	b118      	cbz	r0, ab7e <radio_enc_req_send+0xb2>
			radio_tx_mem_release(node_tx);
    ab76:	4620      	mov	r0, r4
    ab78:	f7ff ff14 	bl	a9a4 <radio_tx_mem_release>

			return 1;
    ab7c:	2001      	movs	r0, #1

		return 0;
	}

	return 1;
}
    ab7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000ab84 <ll_address_get>:
	uint8_t tx_addr:1;
	uint8_t filter_policy:1;
} _ll_scan_params;

void ll_address_get(uint8_t addr_type, uint8_t *bdaddr)
{
    ab84:	b480      	push	{r7}
    ab86:	460b      	mov	r3, r1
    ab88:	af00      	add	r7, sp, #0
	if (addr_type) {
		memcpy(bdaddr, &_ll_context.rnd_addr[0], BDADDR_SIZE);
    ab8a:	2206      	movs	r2, #6
	uint8_t filter_policy:1;
} _ll_scan_params;

void ll_address_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type) {
    ab8c:	b108      	cbz	r0, ab92 <ll_address_get+0xe>
		memcpy(bdaddr, &_ll_context.rnd_addr[0], BDADDR_SIZE);
    ab8e:	4904      	ldr	r1, [pc, #16]	; (aba0 <ll_address_get+0x1c>)
    ab90:	e000      	b.n	ab94 <ll_address_get+0x10>
	} else {
		memcpy(bdaddr, &_ll_context.pub_addr[0], BDADDR_SIZE);
    ab92:	4904      	ldr	r1, [pc, #16]	; (aba4 <ll_address_get+0x20>)
    ab94:	4618      	mov	r0, r3
	}
}
    ab96:	46bd      	mov	sp, r7
    ab98:	bc80      	pop	{r7}
void ll_address_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type) {
		memcpy(bdaddr, &_ll_context.rnd_addr[0], BDADDR_SIZE);
	} else {
		memcpy(bdaddr, &_ll_context.pub_addr[0], BDADDR_SIZE);
    ab9a:	f7f6 b960 	b.w	e5e <memcpy>
    ab9e:	bf00      	nop
    aba0:	200010e6 	.word	0x200010e6
    aba4:	200010e0 	.word	0x200010e0

0000aba8 <ll_address_set>:
	}
}

void ll_address_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    aba8:	b480      	push	{r7}
	if (addr_type) {
		memcpy(&_ll_context.rnd_addr[0], bdaddr, BDADDR_SIZE);
    abaa:	2206      	movs	r2, #6
		memcpy(bdaddr, &_ll_context.pub_addr[0], BDADDR_SIZE);
	}
}

void ll_address_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    abac:	af00      	add	r7, sp, #0
	if (addr_type) {
    abae:	b108      	cbz	r0, abb4 <ll_address_set+0xc>
		memcpy(&_ll_context.rnd_addr[0], bdaddr, BDADDR_SIZE);
    abb0:	4803      	ldr	r0, [pc, #12]	; (abc0 <ll_address_set+0x18>)
    abb2:	e000      	b.n	abb6 <ll_address_set+0xe>
	} else {
		memcpy(&_ll_context.pub_addr[0], bdaddr, BDADDR_SIZE);
    abb4:	4803      	ldr	r0, [pc, #12]	; (abc4 <ll_address_set+0x1c>)
	}
}
    abb6:	46bd      	mov	sp, r7
    abb8:	bc80      	pop	{r7}
void ll_address_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
	if (addr_type) {
		memcpy(&_ll_context.rnd_addr[0], bdaddr, BDADDR_SIZE);
	} else {
		memcpy(&_ll_context.pub_addr[0], bdaddr, BDADDR_SIZE);
    abba:	f7f6 b950 	b.w	e5e <memcpy>
    abbe:	bf00      	nop
    abc0:	200010e6 	.word	0x200010e6
    abc4:	200010e0 	.word	0x200010e0

0000abc8 <ll_adv_params_set>:

void ll_adv_params_set(uint16_t interval, uint8_t adv_type,
		       uint8_t own_addr_type, uint8_t direct_addr_type,
		       uint8_t const *const direct_addr, uint8_t chl_map,
		       uint8_t filter_policy)
{
    abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	_ll_adv_params.interval = interval;
    abcc:	4c35      	ldr	r4, [pc, #212]	; (aca4 <ll_adv_params_set+0xdc>)

void ll_adv_params_set(uint16_t interval, uint8_t adv_type,
		       uint8_t own_addr_type, uint8_t direct_addr_type,
		       uint8_t const *const direct_addr, uint8_t chl_map,
		       uint8_t filter_policy)
{
    abce:	af00      	add	r7, sp, #0
    abd0:	4688      	mov	r8, r1
    abd2:	4699      	mov	r9, r3
	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	_ll_adv_params.interval = interval;
	_ll_adv_params.chl_map = chl_map;
    abd4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
    abd8:	78e3      	ldrb	r3, [r4, #3]

	/* remember params so that set adv/scan data and adv enable
	 * interface can correctly update adv/scan data in the
	 * double buffer between caller and controller context.
	 */
	_ll_adv_params.interval = interval;
    abda:	8020      	strh	r0, [r4, #0]
	_ll_adv_params.chl_map = chl_map;
    abdc:	f361 0302 	bfi	r3, r1, #0, #3
    abe0:	70e3      	strb	r3, [r4, #3]
	_ll_adv_params.filter_policy = filter_policy;
    abe2:	78a0      	ldrb	r0, [r4, #2]
    abe4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    abe8:	f363 1087 	bfi	r0, r3, #6, #2
	_ll_adv_params.adv_type = adv_type;
    abec:	f368 0003 	bfi	r0, r8, #0, #4
	_ll_adv_params.tx_addr = own_addr_type;
    abf0:	f362 1004 	bfi	r0, r2, #4, #1
	_ll_adv_params.rx_addr = 0;
    abf4:	f36f 1045 	bfc	r0, #5, #1
    abf8:	70a0      	strb	r0, [r4, #2]

	/* update the current adv data */
	radio_adv_data = radio_adv_data_get();
    abfa:	f7ff f823 	bl	9c44 <radio_adv_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    abfe:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	pdu->type = _ll_adv_params.adv_type;
    ac02:	78a2      	ldrb	r2, [r4, #2]
	_ll_adv_params.tx_addr = own_addr_type;
	_ll_adv_params.rx_addr = 0;

	/* update the current adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac04:	2528      	movs	r5, #40	; 0x28
    ac06:	435d      	muls	r5, r3
	pdu->type = _ll_adv_params.adv_type;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	if (adv_type == PDU_ADV_TYPE_DIRECT_IND) {
    ac08:	f1b8 0f01 	cmp.w	r8, #1
	_ll_adv_params.rx_addr = 0;

	/* update the current adv data */
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = _ll_adv_params.adv_type;
    ac0c:	5d43      	ldrb	r3, [r0, r5]
    ac0e:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->tx_addr = _ll_adv_params.tx_addr;
    ac12:	f3c2 1200 	ubfx	r2, r2, #4, #1
    ac16:	f362 1386 	bfi	r3, r2, #6, #1
	_ll_adv_params.adv_type = adv_type;
	_ll_adv_params.tx_addr = own_addr_type;
	_ll_adv_params.rx_addr = 0;

	/* update the current adv data */
	radio_adv_data = radio_adv_data_get();
    ac1a:	4606      	mov	r6, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac1c:	eb00 0a05 	add.w	sl, r0, r5
	pdu->type = _ll_adv_params.adv_type;
	pdu->tx_addr = _ll_adv_params.tx_addr;
    ac20:	5543      	strb	r3, [r0, r5]
	if (adv_type == PDU_ADV_TYPE_DIRECT_IND) {
    ac22:	d113      	bne.n	ac4c <ll_adv_params_set+0x84>
		_ll_adv_params.rx_addr = direct_addr_type;
    ac24:	78a3      	ldrb	r3, [r4, #2]
		memcpy(&_ll_adv_params.direct_addr[0], direct_addr,
    ac26:	6a39      	ldr	r1, [r7, #32]
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = _ll_adv_params.adv_type;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	if (adv_type == PDU_ADV_TYPE_DIRECT_IND) {
		_ll_adv_params.rx_addr = direct_addr_type;
    ac28:	f369 1345 	bfi	r3, r9, #5, #1
		memcpy(&_ll_adv_params.direct_addr[0], direct_addr,
    ac2c:	2206      	movs	r2, #6
    ac2e:	f104 000a 	add.w	r0, r4, #10
	radio_adv_data = radio_adv_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
	pdu->type = _ll_adv_params.adv_type;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	if (adv_type == PDU_ADV_TYPE_DIRECT_IND) {
		_ll_adv_params.rx_addr = direct_addr_type;
    ac32:	70a3      	strb	r3, [r4, #2]
		memcpy(&_ll_adv_params.direct_addr[0], direct_addr,
    ac34:	f7f6 f913 	bl	e5e <memcpy>
			 BDADDR_SIZE);
		memcpy(&pdu->payload.direct_ind.init_addr[0],
    ac38:	2206      	movs	r2, #6
    ac3a:	6a39      	ldr	r1, [r7, #32]
    ac3c:	f10a 0009 	add.w	r0, sl, #9
    ac40:	f7f6 f90d 	bl	e5e <memcpy>
			 direct_addr, BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
    ac44:	f89a 3001 	ldrb.w	r3, [sl, #1]
    ac48:	220c      	movs	r2, #12
    ac4a:	e004      	b.n	ac56 <ll_adv_params_set+0x8e>
	} else if (pdu->len == 0) {
    ac4c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    ac50:	0699      	lsls	r1, r3, #26
    ac52:	d104      	bne.n	ac5e <ll_adv_params_set+0x96>
		pdu->len = BDADDR_SIZE;
    ac54:	2206      	movs	r2, #6
    ac56:	f362 0305 	bfi	r3, r2, #0, #6
    ac5a:	f88a 3001 	strb.w	r3, [sl, #1]
	}
	pdu->rx_addr = _ll_adv_params.rx_addr;
    ac5e:	78a3      	ldrb	r3, [r4, #2]
    ac60:	5d72      	ldrb	r2, [r6, r5]
    ac62:	f3c3 1340 	ubfx	r3, r3, #5, #1
    ac66:	f363 12c7 	bfi	r2, r3, #7, #1
    ac6a:	5572      	strb	r2, [r6, r5]

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
    ac6c:	f7fe fff0 	bl	9c50 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac70:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
    ac74:	2328      	movs	r3, #40	; 0x28
    ac76:	435a      	muls	r2, r3
	pdu->type = PDU_ADV_TYPE_SCAN_RESP;
    ac78:	2104      	movs	r1, #4
    ac7a:	5c83      	ldrb	r3, [r0, r2]
    ac7c:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->tx_addr = _ll_adv_params.tx_addr;
    ac80:	78a1      	ldrb	r1, [r4, #2]
    ac82:	f3c1 1100 	ubfx	r1, r1, #4, #1
    ac86:	f361 1386 	bfi	r3, r1, #6, #1
	pdu->rx_addr = 0;
    ac8a:	f36f 13c7 	bfc	r3, #7, #1
	}
	pdu->rx_addr = _ll_adv_params.rx_addr;

	/* update the current scan data */
	radio_adv_data = radio_scan_data_get();
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
    ac8e:	1885      	adds	r5, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RESP;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	pdu->rx_addr = 0;
    ac90:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
    ac92:	786b      	ldrb	r3, [r5, #1]
    ac94:	069a      	lsls	r2, r3, #26
		pdu->len = BDADDR_SIZE;
    ac96:	bf02      	ittt	eq
    ac98:	2206      	moveq	r2, #6
    ac9a:	f362 0305 	bfieq	r3, r2, #0, #6
    ac9e:	706b      	strbeq	r3, [r5, #1]
    aca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aca4:	200010ec 	.word	0x200010ec

0000aca8 <ll_adv_data_set>:
	}
}

void ll_adv_data_set(uint8_t len, uint8_t const *const data)
{
    aca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    acac:	af00      	add	r7, sp, #0
    acae:	4680      	mov	r8, r0
    acb0:	4689      	mov	r9, r1
	uint8_t last;

	/** @todo dont update data if directed adv type. */

	/* use the last index in double buffer, */
	radio_adv_data = radio_adv_data_get();
    acb2:	f7fe ffc7 	bl	9c44 <radio_adv_data_get>
	if (radio_adv_data->first == radio_adv_data->last) {
    acb6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    acba:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    acbe:	42a3      	cmp	r3, r4
	uint8_t last;

	/** @todo dont update data if directed adv type. */

	/* use the last index in double buffer, */
	radio_adv_data = radio_adv_data_get();
    acc0:	4605      	mov	r5, r0
	if (radio_adv_data->first == radio_adv_data->last) {
    acc2:	d104      	bne.n	acce <ll_adv_data_set+0x26>
		last = radio_adv_data->last + 1;
    acc4:	3401      	adds	r4, #1
    acc6:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    acc8:	2c02      	cmp	r4, #2
    acca:	bf08      	it	eq
    accc:	2400      	moveq	r4, #0
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    acce:	2228      	movs	r2, #40	; 0x28
    acd0:	4362      	muls	r2, r4
	pdu->type = _ll_adv_params.adv_type;
    acd2:	f8df a070 	ldr.w	sl, [pc, #112]	; ad44 <ll_adv_data_set+0x9c>
    acd6:	5cab      	ldrb	r3, [r5, r2]
    acd8:	f89a 1002 	ldrb.w	r1, [sl, #2]
    acdc:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->tx_addr = _ll_adv_params.tx_addr;
    ace0:	f3c1 1100 	ubfx	r1, r1, #4, #1
    ace4:	f361 1386 	bfi	r3, r1, #6, #1
	pdu->rx_addr = _ll_adv_params.rx_addr;
    ace8:	f89a 1002 	ldrb.w	r1, [sl, #2]
    acec:	f3c1 1140 	ubfx	r1, r1, #5, #1
    acf0:	f361 13c7 	bfi	r3, r1, #7, #1
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
    acf4:	18ae      	adds	r6, r5, r2
	pdu->type = _ll_adv_params.adv_type;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	pdu->rx_addr = _ll_adv_params.rx_addr;
    acf6:	54ab      	strb	r3, [r5, r2]
	memcpy(&pdu->payload.adv_ind.addr[0],
    acf8:	f10a 0104 	add.w	r1, sl, #4
    acfc:	2206      	movs	r2, #6
    acfe:	1cf0      	adds	r0, r6, #3
    ad00:	f7f6 f8ad 	bl	e5e <memcpy>
		 &_ll_adv_params.adv_addr[0], BDADDR_SIZE);
	if (_ll_adv_params.adv_type == PDU_ADV_TYPE_DIRECT_IND) {
    ad04:	f89a 3002 	ldrb.w	r3, [sl, #2]
    ad08:	f003 030f 	and.w	r3, r3, #15
    ad0c:	2b01      	cmp	r3, #1
    ad0e:	f106 0009 	add.w	r0, r6, #9
    ad12:	d109      	bne.n	ad28 <ll_adv_data_set+0x80>
		memcpy(&pdu->payload.direct_ind.init_addr[0],
    ad14:	2206      	movs	r2, #6
    ad16:	f10a 010a 	add.w	r1, sl, #10
    ad1a:	f7f6 f8a0 	bl	e5e <memcpy>
			 &_ll_adv_params.direct_addr[0], BDADDR_SIZE);
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
    ad1e:	7873      	ldrb	r3, [r6, #1]
    ad20:	220c      	movs	r2, #12
    ad22:	f362 0305 	bfi	r3, r2, #0, #6
    ad26:	e008      	b.n	ad3a <ll_adv_data_set+0x92>
	} else {
		memcpy(&pdu->payload.adv_ind.data[0], data, len);
    ad28:	4642      	mov	r2, r8
    ad2a:	4649      	mov	r1, r9
    ad2c:	f7f6 f897 	bl	e5e <memcpy>
		pdu->len = BDADDR_SIZE + len;
    ad30:	7873      	ldrb	r3, [r6, #1]
    ad32:	f108 0806 	add.w	r8, r8, #6
    ad36:	f368 0305 	bfi	r3, r8, #0, #6
    ad3a:	7073      	strb	r3, [r6, #1]
	}

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
    ad3c:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
    ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad44:	200010ec 	.word	0x200010ec

0000ad48 <ll_scan_data_set>:
}

void ll_scan_data_set(uint8_t len, uint8_t const *const data)
{
    ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ad4c:	af00      	add	r7, sp, #0
    ad4e:	4606      	mov	r6, r0
    ad50:	4688      	mov	r8, r1
	struct radio_adv_data *radio_scan_data;
	struct pdu_adv *pdu;
	uint8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    ad52:	f7fe ff7d 	bl	9c50 <radio_scan_data_get>
	if (radio_scan_data->first == radio_scan_data->last) {
    ad56:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    ad5a:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    ad5e:	42a3      	cmp	r3, r4
	struct radio_adv_data *radio_scan_data;
	struct pdu_adv *pdu;
	uint8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
    ad60:	4605      	mov	r5, r0
	if (radio_scan_data->first == radio_scan_data->last) {
    ad62:	d104      	bne.n	ad6e <ll_scan_data_set+0x26>
		last = radio_scan_data->last + 1;
    ad64:	3401      	adds	r4, #1
    ad66:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
    ad68:	2c02      	cmp	r4, #2
    ad6a:	bf08      	it	eq
    ad6c:	2400      	moveq	r4, #0
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    ad6e:	2228      	movs	r2, #40	; 0x28
    ad70:	4362      	muls	r2, r4
	pdu->type = PDU_ADV_TYPE_SCAN_RESP;
    ad72:	2104      	movs	r1, #4
    ad74:	5cab      	ldrb	r3, [r5, r2]
    ad76:	f361 0303 	bfi	r3, r1, #0, #4
	pdu->tx_addr = _ll_adv_params.tx_addr;
    ad7a:	4911      	ldr	r1, [pc, #68]	; (adc0 <ll_scan_data_set+0x78>)
    ad7c:	7888      	ldrb	r0, [r1, #2]
    ad7e:	f3c0 1000 	ubfx	r0, r0, #4, #1
    ad82:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
    ad86:	f36f 13c7 	bfc	r3, #7, #1
	} else {
		last = radio_scan_data->last;
	}

	/* update scan pdu fields. */
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
    ad8a:	eb05 0902 	add.w	r9, r5, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RESP;
	pdu->tx_addr = _ll_adv_params.tx_addr;
	pdu->rx_addr = 0;
    ad8e:	54ab      	strb	r3, [r5, r2]
	pdu->len = BDADDR_SIZE + len;
    ad90:	f899 3001 	ldrb.w	r3, [r9, #1]
    ad94:	1db2      	adds	r2, r6, #6
    ad96:	f362 0305 	bfi	r3, r2, #0, #6
    ad9a:	f889 3001 	strb.w	r3, [r9, #1]
	memcpy(&pdu->payload.scan_resp.addr[0],
    ad9e:	2206      	movs	r2, #6
    ada0:	3104      	adds	r1, #4
    ada2:	f109 0003 	add.w	r0, r9, #3
    ada6:	f7f6 f85a 	bl	e5e <memcpy>
		 &_ll_adv_params.adv_addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_resp.data[0], data, len);
    adaa:	4632      	mov	r2, r6
    adac:	4641      	mov	r1, r8
    adae:	f109 0009 	add.w	r0, r9, #9
    adb2:	f7f6 f854 	bl	e5e <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
    adb6:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
    adba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    adbe:	bf00      	nop
    adc0:	200010ec 	.word	0x200010ec

0000adc4 <ll_adv_enable>:
}

uint32_t ll_adv_enable(uint8_t enable)
{
    adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    adc6:	af00      	add	r7, sp, #0
	uint32_t status;

	if (enable) {
    adc8:	2800      	cmp	r0, #0
    adca:	d03d      	beq.n	ae48 <ll_adv_enable+0x84>
		 */

		/* remember addr to use and also update the addr in
		 * both adv and scan PDUs.
		 */
		radio_adv_data = radio_adv_data_get();
    adcc:	f7fe ff3a 	bl	9c44 <radio_adv_data_get>
    add0:	4606      	mov	r6, r0
		radio_scan_data = radio_scan_data_get();
    add2:	f7fe ff3d 	bl	9c50 <radio_scan_data_get>
		pdu_adv = (struct pdu_adv *)&radio_adv_data->data
				[radio_adv_data->last][0];
		pdu_scan = (struct pdu_adv *)&radio_scan_data->data
				[radio_scan_data->last][0];
		if (_ll_adv_params.tx_addr) {
    add6:	4c1f      	ldr	r4, [pc, #124]	; (ae54 <ll_adv_enable+0x90>)
		 */
		radio_adv_data = radio_adv_data_get();
		radio_scan_data = radio_scan_data_get();
		pdu_adv = (struct pdu_adv *)&radio_adv_data->data
				[radio_adv_data->last][0];
		pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    add8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
		/* remember addr to use and also update the addr in
		 * both adv and scan PDUs.
		 */
		radio_adv_data = radio_adv_data_get();
		radio_scan_data = radio_scan_data_get();
		pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    addc:	f896 2051 	ldrb.w	r2, [r6, #81]	; 0x51
    ade0:	2528      	movs	r5, #40	; 0x28
				[radio_adv_data->last][0];
		pdu_scan = (struct pdu_adv *)&radio_scan_data->data
    ade2:	fb05 0003 	mla	r0, r5, r3, r0
				[radio_scan_data->last][0];
		if (_ll_adv_params.tx_addr) {
    ade6:	78a3      	ldrb	r3, [r4, #2]
		/* remember addr to use and also update the addr in
		 * both adv and scan PDUs.
		 */
		radio_adv_data = radio_adv_data_get();
		radio_scan_data = radio_scan_data_get();
		pdu_adv = (struct pdu_adv *)&radio_adv_data->data
    ade8:	fb05 6602 	mla	r6, r5, r2, r6
				[radio_adv_data->last][0];
		pdu_scan = (struct pdu_adv *)&radio_scan_data->data
				[radio_scan_data->last][0];
		if (_ll_adv_params.tx_addr) {
    adec:	f013 0f10 	tst.w	r3, #16
			memcpy(&_ll_adv_params.adv_addr[0],
    adf0:	f04f 0206 	mov.w	r2, #6
    adf4:	f106 0603 	add.w	r6, r6, #3
    adf8:	f100 0503 	add.w	r5, r0, #3
		radio_scan_data = radio_scan_data_get();
		pdu_adv = (struct pdu_adv *)&radio_adv_data->data
				[radio_adv_data->last][0];
		pdu_scan = (struct pdu_adv *)&radio_scan_data->data
				[radio_scan_data->last][0];
		if (_ll_adv_params.tx_addr) {
    adfc:	d00b      	beq.n	ae16 <ll_adv_enable+0x52>
			memcpy(&_ll_adv_params.adv_addr[0],
    adfe:	4916      	ldr	r1, [pc, #88]	; (ae58 <ll_adv_enable+0x94>)
    ae00:	1d20      	adds	r0, r4, #4
    ae02:	f7f6 f82c 	bl	e5e <memcpy>
				 &_ll_context.rnd_addr[0], BDADDR_SIZE);
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    ae06:	2206      	movs	r2, #6
    ae08:	4913      	ldr	r1, [pc, #76]	; (ae58 <ll_adv_enable+0x94>)
    ae0a:	4630      	mov	r0, r6
    ae0c:	f7f6 f827 	bl	e5e <memcpy>
				 &_ll_context.rnd_addr[0], BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_resp.addr[0],
    ae10:	2206      	movs	r2, #6
    ae12:	4911      	ldr	r1, [pc, #68]	; (ae58 <ll_adv_enable+0x94>)
    ae14:	e00a      	b.n	ae2c <ll_adv_enable+0x68>
				 &_ll_context.rnd_addr[0], BDADDR_SIZE);
		} else {
			memcpy(&_ll_adv_params.adv_addr[0],
    ae16:	4911      	ldr	r1, [pc, #68]	; (ae5c <ll_adv_enable+0x98>)
    ae18:	1d20      	adds	r0, r4, #4
    ae1a:	f7f6 f820 	bl	e5e <memcpy>
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
    ae1e:	2206      	movs	r2, #6
    ae20:	490e      	ldr	r1, [pc, #56]	; (ae5c <ll_adv_enable+0x98>)
    ae22:	4630      	mov	r0, r6
    ae24:	f7f6 f81b 	bl	e5e <memcpy>
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_resp.addr[0],
    ae28:	490c      	ldr	r1, [pc, #48]	; (ae5c <ll_adv_enable+0x98>)
    ae2a:	2206      	movs	r2, #6
    ae2c:	4628      	mov	r0, r5
    ae2e:	f7f6 f816 	bl	e5e <memcpy>
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
		}

		status = radio_adv_enable(_ll_adv_params.interval,
						_ll_adv_params.chl_map,
						_ll_adv_params.filter_policy);
    ae32:	78a2      	ldrb	r2, [r4, #2]
			memcpy(&pdu_scan->payload.scan_resp.addr[0],
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
		}

		status = radio_adv_enable(_ll_adv_params.interval,
						_ll_adv_params.chl_map,
    ae34:	78e1      	ldrb	r1, [r4, #3]
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_resp.addr[0],
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
		}

		status = radio_adv_enable(_ll_adv_params.interval,
    ae36:	8820      	ldrh	r0, [r4, #0]
    ae38:	0992      	lsrs	r2, r2, #6
    ae3a:	f001 0107 	and.w	r1, r1, #7
	} else {
		status = radio_adv_disable();
	}

	return status;
}
    ae3e:	46bd      	mov	sp, r7
    ae40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
			memcpy(&pdu_scan->payload.scan_resp.addr[0],
				 &_ll_context.pub_addr[0], BDADDR_SIZE);
		}

		status = radio_adv_enable(_ll_adv_params.interval,
    ae44:	f7fe bf74 	b.w	9d30 <radio_adv_enable>
	} else {
		status = radio_adv_disable();
	}

	return status;
}
    ae48:	46bd      	mov	sp, r7
    ae4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		status = radio_adv_enable(_ll_adv_params.interval,
						_ll_adv_params.chl_map,
						_ll_adv_params.filter_policy);
	} else {
		status = radio_adv_disable();
    ae4e:	f7ff b8b7 	b.w	9fc0 <radio_adv_disable>
    ae52:	bf00      	nop
    ae54:	200010ec 	.word	0x200010ec
    ae58:	200010e6 	.word	0x200010e6
    ae5c:	200010e0 	.word	0x200010e0

0000ae60 <ll_scan_params_set>:
	return status;
}

void ll_scan_params_set(uint8_t scan_type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    ae60:	b5b0      	push	{r4, r5, r7, lr}
	_ll_scan_params.scan_type = scan_type;
    ae62:	4d07      	ldr	r5, [pc, #28]	; (ae80 <ll_scan_params_set+0x20>)
    ae64:	792c      	ldrb	r4, [r5, #4]
	_ll_scan_params.interval = interval;
    ae66:	8029      	strh	r1, [r5, #0]
	return status;
}

void ll_scan_params_set(uint8_t scan_type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    ae68:	af00      	add	r7, sp, #0
	_ll_scan_params.scan_type = scan_type;
    ae6a:	f360 0400 	bfi	r4, r0, #0, #1
	_ll_scan_params.interval = interval;
	_ll_scan_params.window = window;
	_ll_scan_params.tx_addr = own_addr_type;
    ae6e:	f363 0441 	bfi	r4, r3, #1, #1
	_ll_scan_params.filter_policy = filter_policy;
    ae72:	7c3b      	ldrb	r3, [r7, #16]
void ll_scan_params_set(uint8_t scan_type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
	_ll_scan_params.scan_type = scan_type;
	_ll_scan_params.interval = interval;
	_ll_scan_params.window = window;
    ae74:	806a      	strh	r2, [r5, #2]
	_ll_scan_params.tx_addr = own_addr_type;
	_ll_scan_params.filter_policy = filter_policy;
    ae76:	f363 0482 	bfi	r4, r3, #2, #1
    ae7a:	712c      	strb	r4, [r5, #4]
    ae7c:	bdb0      	pop	{r4, r5, r7, pc}
    ae7e:	bf00      	nop
    ae80:	200010fc 	.word	0x200010fc

0000ae84 <ll_scan_enable>:
}

uint32_t ll_scan_enable(uint8_t enable)
{
    ae84:	b5b0      	push	{r4, r5, r7, lr}
    ae86:	b082      	sub	sp, #8
    ae88:	af02      	add	r7, sp, #8
	uint32_t status;

	if (enable) {
    ae8a:	b1b0      	cbz	r0, aeba <ll_scan_enable+0x36>
		status = radio_scan_enable(_ll_scan_params.scan_type,
    ae8c:	490d      	ldr	r1, [pc, #52]	; (aec4 <ll_scan_enable+0x40>)
    ae8e:	4a0e      	ldr	r2, [pc, #56]	; (aec8 <ll_scan_enable+0x44>)
    ae90:	7908      	ldrb	r0, [r1, #4]
    ae92:	880b      	ldrh	r3, [r1, #0]
    ae94:	f3c0 0580 	ubfx	r5, r0, #2, #1
    ae98:	9501      	str	r5, [sp, #4]
    ae9a:	f010 0f02 	tst.w	r0, #2
    ae9e:	f1a2 0406 	sub.w	r4, r2, #6
    aea2:	8849      	ldrh	r1, [r1, #2]
    aea4:	9100      	str	r1, [sp, #0]
    aea6:	bf08      	it	eq
    aea8:	4622      	moveq	r2, r4
    aeaa:	f3c0 0140 	ubfx	r1, r0, #1, #1
    aeae:	f000 0001 	and.w	r0, r0, #1
    aeb2:	f7ff f8a5 	bl	a000 <radio_scan_enable>
	} else {
		status = radio_scan_disable();
	}

	return status;
}
    aeb6:	46bd      	mov	sp, r7
    aeb8:	bdb0      	pop	{r4, r5, r7, pc}
    aeba:	46bd      	mov	sp, r7
    aebc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
					&_ll_context.pub_addr[0],
				_ll_scan_params.interval,
				_ll_scan_params.window,
				_ll_scan_params.filter_policy);
	} else {
		status = radio_scan_disable();
    aec0:	f7ff b976 	b.w	a1b0 <radio_scan_disable>
    aec4:	200010fc 	.word	0x200010fc
    aec8:	200010e6 	.word	0x200010e6

0000aecc <ll_create_connection>:
uint32_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			      uint8_t filter_policy, uint8_t peer_addr_type,
			      uint8_t *peer_addr, uint8_t own_addr_type,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    aecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aed0:	b082      	sub	sp, #8
    aed2:	af02      	add	r7, sp, #8
    aed4:	460e      	mov	r6, r1
    aed6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
	uint32_t status;

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    aed8:	9100      	str	r1, [sp, #0]
uint32_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			      uint8_t filter_policy, uint8_t peer_addr_type,
			      uint8_t *peer_addr, uint8_t own_addr_type,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    aeda:	4605      	mov	r5, r0
    aedc:	4690      	mov	r8, r2
    aede:	4618      	mov	r0, r3
    aee0:	8c3a      	ldrh	r2, [r7, #32]
    aee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
	uint32_t status;

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    aee4:	69b9      	ldr	r1, [r7, #24]
uint32_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			      uint8_t filter_policy, uint8_t peer_addr_type,
			      uint8_t *peer_addr, uint8_t own_addr_type,
			      uint16_t interval, uint16_t latency,
			      uint16_t timeout)
{
    aee6:	7f3c      	ldrb	r4, [r7, #28]
	uint32_t status;

	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
    aee8:	f7ff f980 	bl	a1ec <radio_connect_enable>
					latency, timeout);

	if (status) {
    aeec:	b970      	cbnz	r0, af0c <ll_create_connection+0x40>
		return status;
	}

	return radio_scan_enable(0, own_addr_type, (own_addr_type) ?
    aeee:	4a09      	ldr	r2, [pc, #36]	; (af14 <ll_create_connection+0x48>)
    aef0:	f8c7 801c 	str.w	r8, [r7, #28]
    aef4:	1f91      	subs	r1, r2, #6
    aef6:	2c00      	cmp	r4, #0
    aef8:	bf08      	it	eq
    aefa:	460a      	moveq	r2, r1
    aefc:	462b      	mov	r3, r5
    aefe:	4621      	mov	r1, r4
    af00:	61be      	str	r6, [r7, #24]
			&_ll_context.rnd_addr[0] :
			&_ll_context.pub_addr[0],
		scan_interval, scan_window, filter_policy);
}
    af02:	46bd      	mov	sp, r7
    af04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	if (status) {
		return status;
	}

	return radio_scan_enable(0, own_addr_type, (own_addr_type) ?
    af08:	f7ff b87a 	b.w	a000 <radio_scan_enable>
			&_ll_context.rnd_addr[0] :
			&_ll_context.pub_addr[0],
		scan_interval, scan_window, filter_policy);
}
    af0c:	46bd      	mov	sp, r7
    af0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af12:	bf00      	nop
    af14:	200010e6 	.word	0x200010e6

0000af18 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    af18:	b580      	push	{r7, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    af1a:	4803      	ldr	r0, [pc, #12]	; (af28 <_hci_driver_init+0x10>)
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    af1c:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    af1e:	f7f7 fc39 	bl	2794 <bt_hci_driver_register>

	return 0;
}
    af22:	2000      	movs	r0, #0
    af24:	bd80      	pop	{r7, pc}
    af26:	bf00      	nop
    af28:	200002b0 	.word	0x200002b0

0000af2c <radio_nrf5_isr>:
{
	k_sem_give(&sem_prio_recv);
}

static void radio_nrf5_isr(void *arg)
{
    af2c:	b480      	push	{r7}
    af2e:	af00      	add	r7, sp, #0
	isr_radio(arg);
}
    af30:	46bd      	mov	sp, r7
    af32:	bc80      	pop	{r7}
	k_sem_give(&sem_prio_recv);
}

static void radio_nrf5_isr(void *arg)
{
	isr_radio(arg);
    af34:	f7f8 b870 	b.w	3018 <isr_radio>

0000af38 <rtc0_nrf5_isr>:
}

static void rtc0_nrf5_isr(void *arg)
{
    af38:	b5b0      	push	{r4, r5, r7, lr}
	uint32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
    af3a:	4b0d      	ldr	r3, [pc, #52]	; (af70 <rtc0_nrf5_isr+0x38>)
    af3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
    af40:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
{
	isr_radio(arg);
}

static void rtc0_nrf5_isr(void *arg)
{
    af44:	af00      	add	r7, sp, #0
    af46:	461c      	mov	r4, r3
	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
    af48:	b122      	cbz	r2, af54 <rtc0_nrf5_isr+0x1c>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    af4a:	2000      	movs	r0, #0
    af4c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

		ticker_trigger(0);
    af50:	f7f9 f9ae 	bl	42b0 <ticker_trigger>
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
    af54:	b12d      	cbz	r5, af62 <rtc0_nrf5_isr+0x2a>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
    af56:	2300      	movs	r3, #0
    af58:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

		ticker_trigger(1);
    af5c:	2001      	movs	r0, #1
    af5e:	f7f9 f9a7 	bl	42b0 <ticker_trigger>
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    af62:	2000      	movs	r0, #0
}
    af64:	46bd      	mov	sp, r7
    af66:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
    af6a:	f7f7 bea9 	b.w	2cc0 <mayfly_run>
    af6e:	bf00      	nop
    af70:	4000b000 	.word	0x4000b000

0000af74 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    af74:	b480      	push	{r7}
	mayfly_run(MAYFLY_CALL_ID_1);
    af76:	2001      	movs	r0, #1
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
    af78:	af00      	add	r7, sp, #0
	mayfly_run(MAYFLY_CALL_ID_1);
}
    af7a:	46bd      	mov	sp, r7
    af7c:	bc80      	pop	{r7}
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
	mayfly_run(MAYFLY_CALL_ID_1);
    af7e:	f7f7 be9f 	b.w	2cc0 <mayfly_run>

0000af82 <rng_nrf5_isr>:

	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
    af82:	b480      	push	{r7}
    af84:	af00      	add	r7, sp, #0
	isr_rand(arg);
}
    af86:	46bd      	mov	sp, r7
    af88:	bc80      	pop	{r7}
	mayfly_run(MAYFLY_CALL_ID_0);
}

static void rng_nrf5_isr(void *arg)
{
	isr_rand(arg);
    af8a:	f7f7 bfcf 	b.w	2f2c <isr_rand>
	...

0000af90 <hci_driver_open>:

	return err;
}

static int hci_driver_open(void)
{
    af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af94:	b086      	sub	sp, #24
	uint32_t err;

	DEBUG_INIT();

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
    af96:	4846      	ldr	r0, [pc, #280]	; (b0b0 <hci_driver_open+0x120>)

	return err;
}

static int hci_driver_open(void)
{
    af98:	af06      	add	r7, sp, #24
	uint32_t err;

	DEBUG_INIT();

	/* TODO: bind and use RNG driver */
	rand_init(_rand_context, sizeof(_rand_context));
    af9a:	2108      	movs	r1, #8
    af9c:	f7f7 ff5e 	bl	2e5c <rand_init>

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    afa0:	4844      	ldr	r0, [pc, #272]	; (b0b4 <hci_driver_open+0x124>)
    afa2:	f001 fbe3 	bl	c76c <device_get_binding>
	if (!clk_k32) {
    afa6:	b910      	cbnz	r0, afae <hci_driver_open+0x1e>
		return -ENODEV;
    afa8:	f06f 0012 	mvn.w	r0, #18
    afac:	e07d      	b.n	b0aa <hci_driver_open+0x11a>
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;

	return api->on(dev, sys);
    afae:	6843      	ldr	r3, [r0, #4]
    afb0:	2101      	movs	r1, #1
    afb2:	681b      	ldr	r3, [r3, #0]
    afb4:	4798      	blx	r3
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
    afb6:	f7f7 feed 	bl	2d94 <cntr_init>

	mayfly_init();
    afba:	f7f7 fe1b 	bl	2bf4 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    afbe:	4b3e      	ldr	r3, [pc, #248]	; (b0b8 <hci_driver_open+0x128>)
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
    afc0:	2203      	movs	r2, #3
    afc2:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;
    afc4:	2202      	movs	r2, #2
    afc6:	761a      	strb	r2, [r3, #24]
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    afc8:	2108      	movs	r1, #8
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    afca:	2000      	movs	r0, #0
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    afcc:	4a3b      	ldr	r2, [pc, #236]	; (b0bc <hci_driver_open+0x12c>)
	/* TODO: bind and use counter driver */
	cntr_init();

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
    afce:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    afd0:	260d      	movs	r6, #13

	mayfly_init();

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
    afd2:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = RADIO_TICKER_USER_APP_OPS;

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, RADIO_TICKER_NODES,
    afd4:	9202      	str	r2, [sp, #8]
    afd6:	e88d 0048 	stmia.w	sp, {r3, r6}
    afda:	4a39      	ldr	r2, [pc, #228]	; (b0c0 <hci_driver_open+0x130>)
    afdc:	2304      	movs	r3, #4
    afde:	f7f9 f90f 	bl	4200 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    RADIO_TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
    afe2:	4838      	ldr	r0, [pc, #224]	; (b0c4 <hci_driver_open+0x134>)
    afe4:	f001 fbc2 	bl	c76c <device_get_binding>
	if (!clk_m16) {
    afe8:	2800      	cmp	r0, #0
    afea:	d0dd      	beq.n	afa8 <hci_driver_open+0x18>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
    afec:	4b36      	ldr	r3, [pc, #216]	; (b0c8 <hci_driver_open+0x138>)
    afee:	9303      	str	r3, [sp, #12]
    aff0:	2501      	movs	r5, #1
    aff2:	231b      	movs	r3, #27
    aff4:	f44f 7839 	mov.w	r8, #740	; 0x2e4
    aff8:	9302      	str	r3, [sp, #8]
    affa:	9301      	str	r3, [sp, #4]
    affc:	f8cd 8010 	str.w	r8, [sp, #16]
    b000:	9500      	str	r5, [sp, #0]
    b002:	462b      	mov	r3, r5
    b004:	462a      	mov	r2, r5
    b006:	2107      	movs	r1, #7
    b008:	f7fe fd5a 	bl	9ac0 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
    b00c:	4604      	mov	r4, r0
    b00e:	b178      	cbz	r0, b030 <hci_driver_open+0xa0>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
    b010:	4b2e      	ldr	r3, [pc, #184]	; (b0cc <hci_driver_open+0x13c>)
    b012:	9303      	str	r3, [sp, #12]
    b014:	4b2e      	ldr	r3, [pc, #184]	; (b0d0 <hci_driver_open+0x140>)
    b016:	9001      	str	r0, [sp, #4]
    b018:	9300      	str	r3, [sp, #0]
    b01a:	f8cd 8008 	str.w	r8, [sp, #8]
    b01e:	4b2d      	ldr	r3, [pc, #180]	; (b0d4 <hci_driver_open+0x144>)
    b020:	4a2d      	ldr	r2, [pc, #180]	; (b0d8 <hci_driver_open+0x148>)
    b022:	492e      	ldr	r1, [pc, #184]	; (b0dc <hci_driver_open+0x14c>)
    b024:	482e      	ldr	r0, [pc, #184]	; (b0e0 <hci_driver_open+0x150>)
    b026:	f7f6 f8c1 	bl	11ac <printk>
		       sizeof(_radio));
		return -ENOMEM;
    b02a:	f06f 000b 	mvn.w	r0, #11
    b02e:	e03c      	b.n	b0aa <hci_driver_open+0x11a>
	}

	IRQ_CONNECT(NRF5_IRQ_RADIO_IRQn, 0, radio_nrf5_isr, 0, 0);
    b030:	4602      	mov	r2, r0
    b032:	4601      	mov	r1, r0
    b034:	4628      	mov	r0, r5
    b036:	f001 fa6d 	bl	c514 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, 0, rtc0_nrf5_isr, 0, 0);
    b03a:	4622      	mov	r2, r4
    b03c:	4621      	mov	r1, r4
    b03e:	200b      	movs	r0, #11
    b040:	f001 fa68 	bl	c514 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, 0, 0);
    b044:	4622      	mov	r2, r4
    b046:	4629      	mov	r1, r5
    b048:	4630      	mov	r0, r6
    b04a:	f001 fa63 	bl	c514 <_irq_priority_set>
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, 0, swi4_nrf5_isr, 0, 0);
    b04e:	4622      	mov	r2, r4
    b050:	4621      	mov	r1, r4
    b052:	2018      	movs	r0, #24
    b054:	f001 fa5e 	bl	c514 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RADIO_IRQn);
    b058:	4628      	mov	r0, r5
    b05a:	f001 fa2b 	bl	c4b4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
    b05e:	200b      	movs	r0, #11
    b060:	f001 fa28 	bl	c4b4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
    b064:	4630      	mov	r0, r6
    b066:	f001 fa25 	bl	c4b4 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
    b06a:	2018      	movs	r0, #24
    b06c:	f001 fa22 	bl	c4b4 <_arch_irq_enable>

	k_thread_spawn(prio_recv_thread_stack, sizeof(prio_recv_thread_stack),
    b070:	f06f 0309 	mvn.w	r3, #9
    b074:	9302      	str	r3, [sp, #8]
    b076:	4a1b      	ldr	r2, [pc, #108]	; (b0e4 <hci_driver_open+0x154>)
    b078:	9404      	str	r4, [sp, #16]
    b07a:	4623      	mov	r3, r4
    b07c:	f44f 7133 	mov.w	r1, #716	; 0x2cc
    b080:	9403      	str	r4, [sp, #12]
    b082:	9401      	str	r4, [sp, #4]
    b084:	9400      	str	r4, [sp, #0]
    b086:	4818      	ldr	r0, [pc, #96]	; (b0e8 <hci_driver_open+0x158>)
    b088:	f002 fb9c 	bl	d7c4 <k_thread_spawn>
		       prio_recv_thread, NULL, NULL, NULL, K_PRIO_COOP(6), 0,
		       K_NO_WAIT);

	k_thread_spawn(recv_thread_stack, sizeof(recv_thread_stack),
    b08c:	f06f 0308 	mvn.w	r3, #8
    b090:	9302      	str	r3, [sp, #8]
    b092:	9404      	str	r4, [sp, #16]
    b094:	9403      	str	r4, [sp, #12]
    b096:	9401      	str	r4, [sp, #4]
    b098:	9400      	str	r4, [sp, #0]
    b09a:	4623      	mov	r3, r4
    b09c:	4a13      	ldr	r2, [pc, #76]	; (b0ec <hci_driver_open+0x15c>)
    b09e:	4814      	ldr	r0, [pc, #80]	; (b0f0 <hci_driver_open+0x160>)
    b0a0:	f240 518c 	movw	r1, #1420	; 0x58c
    b0a4:	f002 fb8e 	bl	d7c4 <k_thread_spawn>
		       recv_thread, NULL, NULL, NULL, K_PRIO_COOP(7), 0,
		       K_NO_WAIT);

	BT_DBG("Success.");

	return 0;
    b0a8:	4620      	mov	r0, r4
}
    b0aa:	46bd      	mov	sp, r7
    b0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b0b0:	20001480 	.word	0x20001480
    b0b4:	0000db62 	.word	0x0000db62
    b0b8:	20001224 	.word	0x20001224
    b0bc:	20001244 	.word	0x20001244
    b0c0:	20001104 	.word	0x20001104
    b0c4:	0000db77 	.word	0x0000db77
    b0c8:	20000ddc 	.word	0x20000ddc
    b0cc:	0000dd4e 	.word	0x0000dd4e
    b0d0:	0000dd53 	.word	0x0000dd53
    b0d4:	0000f399 	.word	0x0000f399
    b0d8:	0000dcfd 	.word	0x0000dcfd
    b0dc:	0000dd04 	.word	0x0000dd04
    b0e0:	0000ec57 	.word	0x0000ec57
    b0e4:	0000b0f5 	.word	0x0000b0f5
    b0e8:	200019e4 	.word	0x200019e4
    b0ec:	0000b159 	.word	0x0000b159
    b0f0:	20001d78 	.word	0x20001d78

0000b0f4 <prio_recv_thread>:
{
	mayfly_run(MAYFLY_CALL_ID_1);
}

static void prio_recv_thread(void *p1, void *p2, void *p3)
{
    b0f4:	b5b0      	push	{r4, r5, r7, lr}
    b0f6:	b082      	sub	sp, #8
    b0f8:	af00      	add	r7, sp, #0
		struct radio_pdu_node_rx *node_rx;
		struct net_buf *buf;
		uint8_t num_cmplt;
		uint16_t handle;

		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    b0fa:	1cb9      	adds	r1, r7, #2
    b0fc:	1d38      	adds	r0, r7, #4
    b0fe:	f7ff faed 	bl	a6dc <radio_rx_get>
    b102:	4605      	mov	r5, r0
    b104:	b1a8      	cbz	r0, b132 <prio_recv_thread+0x3e>

			buf = bt_buf_get_rx(K_FOREVER);
    b106:	f04f 30ff 	mov.w	r0, #4294967295
    b10a:	f7f7 fc81 	bl	2a10 <bt_buf_get_rx>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(uint8_t *)net_buf_user_data(buf) = type;
    b10e:	8ac3      	ldrh	r3, [r0, #22]
    b110:	4403      	add	r3, r0
    b112:	331b      	adds	r3, #27
    b114:	f023 0303 	bic.w	r3, r3, #3
    b118:	2201      	movs	r2, #1
    b11a:	701a      	strb	r2, [r3, #0]
    b11c:	4604      	mov	r4, r0
			bt_buf_set_type(buf, BT_BUF_EVT);
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    b11e:	462a      	mov	r2, r5
    b120:	8879      	ldrh	r1, [r7, #2]
    b122:	f000 fe7b 	bl	be1c <hci_num_cmplt_encode>
			BT_DBG("Num Complete: 0x%04x:%u", handle, num_cmplt);
			bt_recv_prio(buf);
    b126:	4620      	mov	r0, r4
    b128:	f7f7 fa9a 	bl	2660 <bt_recv_prio>

			k_yield();
    b12c:	f002 f834 	bl	d198 <k_yield>
    b130:	e7e3      	b.n	b0fa <prio_recv_thread+0x6>
		}

		if (node_rx) {
    b132:	687b      	ldr	r3, [r7, #4]
    b134:	b133      	cbz	r3, b144 <prio_recv_thread+0x50>

			radio_rx_dequeue();
    b136:	f7ff fb11 	bl	a75c <radio_rx_dequeue>

			BT_DBG("RX node enqueue");
			k_fifo_put(&recv_fifo, node_rx);
    b13a:	6879      	ldr	r1, [r7, #4]
    b13c:	4804      	ldr	r0, [pc, #16]	; (b150 <prio_recv_thread+0x5c>)
    b13e:	f001 fba9 	bl	c894 <k_fifo_put>
    b142:	e7da      	b.n	b0fa <prio_recv_thread+0x6>

			continue;
		}

		BT_DBG("sem take...");
		k_sem_take(&sem_prio_recv, K_FOREVER);
    b144:	f04f 31ff 	mov.w	r1, #4294967295
    b148:	4802      	ldr	r0, [pc, #8]	; (b154 <prio_recv_thread+0x60>)
    b14a:	f002 f94c 	bl	d3e6 <k_sem_take>
    b14e:	e7d4      	b.n	b0fa <prio_recv_thread+0x6>
    b150:	2000035c 	.word	0x2000035c
    b154:	20000338 	.word	0x20000338

0000b158 <recv_thread>:
			      sizeof(prio_recv_thread_stack));
	}
}

static void recv_thread(void *p1, void *p2, void *p3)
{
    b158:	b5b0      	push	{r4, r5, r7, lr}
    b15a:	b082      	sub	sp, #8
		 */
		if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU ||
		    pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
			/* generate a (non-priority) HCI event */
			if (hci_evt_is_discardable(node_rx)) {
				buf = bt_buf_get_rx(K_NO_WAIT);
    b15c:	2500      	movs	r5, #0
			      sizeof(prio_recv_thread_stack));
	}
}

static void recv_thread(void *p1, void *p2, void *p3)
{
    b15e:	af00      	add	r7, sp, #0
		struct radio_pdu_node_rx *node_rx;
		struct pdu_data *pdu_data;
		struct net_buf *buf;

		BT_DBG("RX node get");
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    b160:	f04f 31ff 	mov.w	r1, #4294967295
    b164:	4825      	ldr	r0, [pc, #148]	; (b1fc <recv_thread+0xa4>)
    b166:	f001 fc23 	bl	c9b0 <k_fifo_get>

		pdu_data = (void *)node_rx->pdu_data;
		/* Check if we need to generate an HCI event or ACL
		 * data
		 */
		if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU ||
    b16a:	7903      	ldrb	r3, [r0, #4]
		struct radio_pdu_node_rx *node_rx;
		struct pdu_data *pdu_data;
		struct net_buf *buf;

		BT_DBG("RX node get");
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    b16c:	6078      	str	r0, [r7, #4]

		pdu_data = (void *)node_rx->pdu_data;
		/* Check if we need to generate an HCI event or ACL
		 * data
		 */
		if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU ||
    b16e:	2b01      	cmp	r3, #1
    b170:	d104      	bne.n	b17c <recv_thread+0x24>
    b172:	7a03      	ldrb	r3, [r0, #8]
    b174:	f003 0303 	and.w	r3, r3, #3
    b178:	2b03      	cmp	r3, #3
    b17a:	d116      	bne.n	b1aa <recv_thread+0x52>
		    pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
			/* generate a (non-priority) HCI event */
			if (hci_evt_is_discardable(node_rx)) {
    b17c:	f000 fe63 	bl	be46 <hci_evt_is_discardable>
    b180:	b108      	cbz	r0, b186 <recv_thread+0x2e>
				buf = bt_buf_get_rx(K_NO_WAIT);
    b182:	2000      	movs	r0, #0
    b184:	e001      	b.n	b18a <recv_thread+0x32>
			} else {
				buf = bt_buf_get_rx(K_FOREVER);
    b186:	f04f 30ff 	mov.w	r0, #4294967295
    b18a:	f7f7 fc41 	bl	2a10 <bt_buf_get_rx>
    b18e:	4604      	mov	r4, r0
			}

			if (buf) {
    b190:	b1d8      	cbz	r0, b1ca <recv_thread+0x72>
    b192:	8ac3      	ldrh	r3, [r0, #22]
    b194:	4403      	add	r3, r0
    b196:	331b      	adds	r3, #27
    b198:	f023 0303 	bic.w	r3, r3, #3
    b19c:	2201      	movs	r2, #1
    b19e:	701a      	strb	r2, [r3, #0]
				bt_buf_set_type(buf, BT_BUF_EVT);
				hci_evt_encode(node_rx, buf);
    b1a0:	4601      	mov	r1, r0
    b1a2:	6878      	ldr	r0, [r7, #4]
    b1a4:	f000 fca6 	bl	baf4 <hci_evt_encode>
    b1a8:	e00f      	b.n	b1ca <recv_thread+0x72>
			}
		} else {
			/* generate ACL data */
			buf = bt_buf_get_rx(K_FOREVER);
    b1aa:	f04f 30ff 	mov.w	r0, #4294967295
    b1ae:	f7f7 fc2f 	bl	2a10 <bt_buf_get_rx>
    b1b2:	8ac3      	ldrh	r3, [r0, #22]
    b1b4:	4403      	add	r3, r0
    b1b6:	331b      	adds	r3, #27
    b1b8:	f023 0303 	bic.w	r3, r3, #3
    b1bc:	2203      	movs	r2, #3
    b1be:	701a      	strb	r2, [r3, #0]
    b1c0:	4604      	mov	r4, r0
			bt_buf_set_type(buf, BT_BUF_ACL_IN);
			hci_acl_encode(node_rx, buf);
    b1c2:	4601      	mov	r1, r0
    b1c4:	6878      	ldr	r0, [r7, #4]
    b1c6:	f000 fc4d 	bl	ba64 <hci_acl_encode>
		}

		radio_rx_fc_set(node_rx->hdr.handle, 0);
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	2100      	movs	r1, #0
    b1ce:	88d8      	ldrh	r0, [r3, #6]
    b1d0:	f7ff fbae 	bl	a930 <radio_rx_fc_set>
		node_rx->hdr.onion.next = 0;
    b1d4:	f107 0008 	add.w	r0, r7, #8
    b1d8:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    b1dc:	601d      	str	r5, [r3, #0]
		radio_rx_mem_release(&node_rx);
    b1de:	f7ff fb2d 	bl	a83c <radio_rx_mem_release>

		if (buf) {
    b1e2:	b13c      	cbz	r4, b1f4 <recv_thread+0x9c>
			if (buf->len) {
    b1e4:	8aa3      	ldrh	r3, [r4, #20]
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    b1e6:	4620      	mov	r0, r4
		radio_rx_fc_set(node_rx->hdr.handle, 0);
		node_rx->hdr.onion.next = 0;
		radio_rx_mem_release(&node_rx);

		if (buf) {
			if (buf->len) {
    b1e8:	b113      	cbz	r3, b1f0 <recv_thread+0x98>
				BT_DBG("Packet in: type:%u len:%u",
					bt_buf_get_type(buf), buf->len);
				bt_recv(buf);
    b1ea:	f7f7 f91f 	bl	242c <bt_recv>
    b1ee:	e001      	b.n	b1f4 <recv_thread+0x9c>
			} else {
				net_buf_unref(buf);
    b1f0:	f000 fe9c 	bl	bf2c <net_buf_unref>
			}
		}

		k_yield();
    b1f4:	f001 ffd0 	bl	d198 <k_yield>

		stack_analyze("recv thread stack", recv_thread_stack,
			      sizeof(recv_thread_stack));
	}
    b1f8:	e7b2      	b.n	b160 <recv_thread+0x8>
    b1fa:	bf00      	nop
    b1fc:	2000035c 	.word	0x2000035c

0000b200 <hci_driver_send>:

	return err;
}

static int hci_driver_send(struct net_buf *buf)
{
    b200:	b5f0      	push	{r4, r5, r6, r7, lr}
    b202:	b085      	sub	sp, #20
	uint8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    b204:	8a83      	ldrh	r3, [r0, #20]

	return err;
}

static int hci_driver_send(struct net_buf *buf)
{
    b206:	af04      	add	r7, sp, #16
    b208:	4605      	mov	r5, r0
	uint8_t type;
	int err;

	BT_DBG("enter");

	if (!buf->len) {
    b20a:	b953      	cbnz	r3, b222 <hci_driver_send+0x22>
		BT_ERR("Empty HCI packet");
    b20c:	4b25      	ldr	r3, [pc, #148]	; (b2a4 <hci_driver_send+0xa4>)
    b20e:	9301      	str	r3, [sp, #4]
    b210:	4b25      	ldr	r3, [pc, #148]	; (b2a8 <hci_driver_send+0xa8>)
    b212:	9300      	str	r3, [sp, #0]
    b214:	4a25      	ldr	r2, [pc, #148]	; (b2ac <hci_driver_send+0xac>)
    b216:	4b26      	ldr	r3, [pc, #152]	; (b2b0 <hci_driver_send+0xb0>)
    b218:	4926      	ldr	r1, [pc, #152]	; (b2b4 <hci_driver_send+0xb4>)
    b21a:	4827      	ldr	r0, [pc, #156]	; (b2b8 <hci_driver_send+0xb8>)
    b21c:	f7f5 ffc6 	bl	11ac <printk>
    b220:	e032      	b.n	b288 <hci_driver_send+0x88>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(uint8_t *)net_buf_user_data(buf);
    b222:	8ac3      	ldrh	r3, [r0, #22]
    b224:	4403      	add	r3, r0
    b226:	331b      	adds	r3, #27
    b228:	f023 0303 	bic.w	r3, r3, #3
    b22c:	781b      	ldrb	r3, [r3, #0]
		return -EINVAL;
	}

	type = bt_buf_get_type(buf);
	switch (type) {
    b22e:	b12b      	cbz	r3, b23c <hci_driver_send+0x3c>
    b230:	2b02      	cmp	r3, #2
    b232:	d11e      	bne.n	b272 <hci_driver_send+0x72>
	case BT_BUF_ACL_OUT:
		err = hci_acl_handle(buf);
    b234:	f000 fbb6 	bl	b9a4 <hci_acl_handle>
    b238:	4604      	mov	r4, r0
		break;
    b23a:	e028      	b.n	b28e <hci_driver_send+0x8e>
	 * memory checking in hci_cmd_handle().
	 * this might actually be CMD_COMPLETE or CMD_STATUS, but the
	 * actual point is to retrieve the event from the priority
	 * queue
	 */
	evt = bt_buf_get_rx(K_FOREVER);
    b23c:	f04f 30ff 	mov.w	r0, #4294967295
    b240:	f7f7 fbe6 	bl	2a10 <bt_buf_get_rx>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	*(uint8_t *)net_buf_user_data(buf) = type;
    b244:	8ac3      	ldrh	r3, [r0, #22]
    b246:	4403      	add	r3, r0
    b248:	331b      	adds	r3, #27
    b24a:	f023 0303 	bic.w	r3, r3, #3
    b24e:	2201      	movs	r2, #1
    b250:	4606      	mov	r6, r0
	bt_buf_set_type(evt, BT_BUF_EVT);
	err = hci_cmd_handle(buf, evt);
    b252:	4601      	mov	r1, r0
    b254:	701a      	strb	r2, [r3, #0]
    b256:	4628      	mov	r0, r5
    b258:	f000 f950 	bl	b4fc <hci_cmd_handle>
	if (!err && evt->len) {
    b25c:	4604      	mov	r4, r0
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    b25e:	4630      	mov	r0, r6
	 * queue
	 */
	evt = bt_buf_get_rx(K_FOREVER);
	bt_buf_set_type(evt, BT_BUF_EVT);
	err = hci_cmd_handle(buf, evt);
	if (!err && evt->len) {
    b260:	b924      	cbnz	r4, b26c <hci_driver_send+0x6c>
    b262:	8ab3      	ldrh	r3, [r6, #20]
    b264:	b113      	cbz	r3, b26c <hci_driver_send+0x6c>
		BT_DBG("Replying with event of %u bytes", evt->len);
		bt_recv_prio(evt);
    b266:	f7f7 f9fb 	bl	2660 <bt_recv_prio>
    b26a:	e011      	b.n	b290 <hci_driver_send+0x90>
	} else {
		net_buf_unref(evt);
    b26c:	f000 fe5e 	bl	bf2c <net_buf_unref>
    b270:	e00d      	b.n	b28e <hci_driver_send+0x8e>
		break;
	case BT_BUF_CMD:
		err = cmd_handle(buf);
		break;
	default:
		BT_ERR("Unknown HCI type %u", type);
    b272:	4a0c      	ldr	r2, [pc, #48]	; (b2a4 <hci_driver_send+0xa4>)
    b274:	9301      	str	r3, [sp, #4]
    b276:	4b0c      	ldr	r3, [pc, #48]	; (b2a8 <hci_driver_send+0xa8>)
    b278:	9202      	str	r2, [sp, #8]
    b27a:	9300      	str	r3, [sp, #0]
    b27c:	4a0b      	ldr	r2, [pc, #44]	; (b2ac <hci_driver_send+0xac>)
    b27e:	4b0c      	ldr	r3, [pc, #48]	; (b2b0 <hci_driver_send+0xb0>)
    b280:	490c      	ldr	r1, [pc, #48]	; (b2b4 <hci_driver_send+0xb4>)
    b282:	480e      	ldr	r0, [pc, #56]	; (b2bc <hci_driver_send+0xbc>)
    b284:	f7f5 ff92 	bl	11ac <printk>
		return -EINVAL;
    b288:	f06f 0015 	mvn.w	r0, #21
    b28c:	e006      	b.n	b29c <hci_driver_send+0x9c>
	}

	if (!err) {
    b28e:	b924      	cbnz	r4, b29a <hci_driver_send+0x9a>
		net_buf_unref(buf);
    b290:	4628      	mov	r0, r5
    b292:	f000 fe4b 	bl	bf2c <net_buf_unref>
    b296:	2000      	movs	r0, #0
    b298:	e000      	b.n	b29c <hci_driver_send+0x9c>
    b29a:	4620      	mov	r0, r4
	}

	BT_DBG("exit: %d", err);

	return err;
}
    b29c:	3704      	adds	r7, #4
    b29e:	46bd      	mov	sp, r7
    b2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2a2:	bf00      	nop
    b2a4:	0000dd4e 	.word	0x0000dd4e
    b2a8:	0000dd53 	.word	0x0000dd53
    b2ac:	0000dcfd 	.word	0x0000dcfd
    b2b0:	0000f3b5 	.word	0x0000f3b5
    b2b4:	0000dd04 	.word	0x0000dd04
    b2b8:	0000ec8c 	.word	0x0000ec8c
    b2bc:	0000ecad 	.word	0x0000ecad

0000b2c0 <hci_le_rand>:
static BT_STACK_NOINIT(recv_thread_stack, CONFIG_BLUETOOTH_RX_STACK_SIZE);

K_MUTEX_DEFINE(mutex_rand);

void hci_le_rand(void *buf, uint8_t len)
{
    b2c0:	b5b0      	push	{r4, r5, r7, lr}
    b2c2:	4605      	mov	r5, r0
    b2c4:	af00      	add	r7, sp, #0
    b2c6:	460c      	mov	r4, r1
	while (len) {
    b2c8:	b18c      	cbz	r4, b2ee <hci_le_rand+0x2e>
		k_mutex_lock(&mutex_rand, K_FOREVER);
    b2ca:	f04f 31ff 	mov.w	r1, #4294967295
    b2ce:	4808      	ldr	r0, [pc, #32]	; (b2f0 <hci_le_rand+0x30>)
    b2d0:	f001 fd4e 	bl	cd70 <k_mutex_lock>
		len = rand_get(len, buf);
    b2d4:	4620      	mov	r0, r4
    b2d6:	4629      	mov	r1, r5
    b2d8:	f7f7 fdf8 	bl	2ecc <rand_get>
    b2dc:	b2c4      	uxtb	r4, r0
		k_mutex_unlock(&mutex_rand);
    b2de:	4804      	ldr	r0, [pc, #16]	; (b2f0 <hci_le_rand+0x30>)
    b2e0:	f001 fda4 	bl	ce2c <k_mutex_unlock>
		if (len) {
    b2e4:	b11c      	cbz	r4, b2ee <hci_le_rand+0x2e>
    b2e6:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    b2e8:	bf40      	sev
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    b2ea:	bf20      	wfe
    b2ec:	e7ec      	b.n	b2c8 <hci_le_rand+0x8>
    b2ee:	bdb0      	pop	{r4, r5, r7, pc}
    b2f0:	20000348 	.word	0x20000348

0000b2f4 <mayfly_enable>:
	return 0;
}
#endif

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b2f4:	b590      	push	{r4, r7, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
    b2f6:	2901      	cmp	r1, #1
	return 0;
}
#endif

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b2f8:	b083      	sub	sp, #12
    b2fa:	4614      	mov	r4, r2
    b2fc:	af02      	add	r7, sp, #8
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
    b2fe:	d00d      	beq.n	b31c <mayfly_enable+0x28>
    b300:	4b0d      	ldr	r3, [pc, #52]	; (b338 <mayfly_enable+0x44>)
    b302:	9301      	str	r3, [sp, #4]
    b304:	4b0d      	ldr	r3, [pc, #52]	; (b33c <mayfly_enable+0x48>)
    b306:	9300      	str	r3, [sp, #0]
    b308:	490d      	ldr	r1, [pc, #52]	; (b340 <mayfly_enable+0x4c>)
    b30a:	4b0e      	ldr	r3, [pc, #56]	; (b344 <mayfly_enable+0x50>)
    b30c:	4a0e      	ldr	r2, [pc, #56]	; (b348 <mayfly_enable+0x54>)
    b30e:	480f      	ldr	r0, [pc, #60]	; (b34c <mayfly_enable+0x58>)
    b310:	f7f5 ff4c 	bl	11ac <printk>
    b314:	2100      	movs	r1, #0
    b316:	4608      	mov	r0, r1
    b318:	f001 f99a 	bl	c650 <_SysFatalErrorHandler>

	if (enable) {
		irq_enable(SWI4_IRQn);
    b31c:	2018      	movs	r0, #24
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
    b31e:	b12c      	cbz	r4, b32c <mayfly_enable+0x38>
		irq_enable(SWI4_IRQn);
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b320:	3704      	adds	r7, #4
    b322:	46bd      	mov	sp, r7
    b324:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
		irq_enable(SWI4_IRQn);
    b328:	f001 b8c4 	b.w	c4b4 <_arch_irq_enable>
	} else {
		irq_disable(SWI4_IRQn);
	}
}
    b32c:	3704      	adds	r7, #4
    b32e:	46bd      	mov	sp, r7
    b330:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);

	if (enable) {
		irq_enable(SWI4_IRQn);
	} else {
		irq_disable(SWI4_IRQn);
    b334:	f001 b8ce 	b.w	c4d4 <_arch_irq_disable>
    b338:	0000dd4e 	.word	0x0000dd4e
    b33c:	0000dd53 	.word	0x0000dd53
    b340:	0000dd04 	.word	0x0000dd04
    b344:	0000f3c5 	.word	0x0000f3c5
    b348:	0000dcfd 	.word	0x0000dcfd
    b34c:	0000ecd1 	.word	0x0000ecd1

0000b350 <mayfly_is_enabled>:
	}
}

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
    b350:	b580      	push	{r7, lr}
    b352:	b082      	sub	sp, #8
    b354:	af02      	add	r7, sp, #8
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
    b356:	b909      	cbnz	r1, b35c <mayfly_is_enabled+0xc>
		return irq_is_enabled(RTC0_IRQn);
    b358:	200b      	movs	r0, #11
    b35a:	e002      	b.n	b362 <mayfly_is_enabled+0x12>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
    b35c:	2901      	cmp	r1, #1
    b35e:	d105      	bne.n	b36c <mayfly_is_enabled+0x1c>
		return irq_is_enabled(SWI4_IRQn);
    b360:	2018      	movs	r0, #24
	}

	LL_ASSERT(0);

	return 0;
}
    b362:	46bd      	mov	sp, r7
    b364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
	(void)caller_id;

	if (callee_id == MAYFLY_CALL_ID_0) {
		return irq_is_enabled(RTC0_IRQn);
	} else if (callee_id == MAYFLY_CALL_ID_1) {
		return irq_is_enabled(SWI4_IRQn);
    b368:	f001 b8c4 	b.w	c4f4 <_arch_irq_is_enabled>
	}

	LL_ASSERT(0);
    b36c:	4b08      	ldr	r3, [pc, #32]	; (b390 <mayfly_is_enabled+0x40>)
    b36e:	9301      	str	r3, [sp, #4]
    b370:	4b08      	ldr	r3, [pc, #32]	; (b394 <mayfly_is_enabled+0x44>)
    b372:	9300      	str	r3, [sp, #0]
    b374:	4a08      	ldr	r2, [pc, #32]	; (b398 <mayfly_is_enabled+0x48>)
    b376:	4b09      	ldr	r3, [pc, #36]	; (b39c <mayfly_is_enabled+0x4c>)
    b378:	4909      	ldr	r1, [pc, #36]	; (b3a0 <mayfly_is_enabled+0x50>)
    b37a:	480a      	ldr	r0, [pc, #40]	; (b3a4 <mayfly_is_enabled+0x54>)
    b37c:	f7f5 ff16 	bl	11ac <printk>
    b380:	2100      	movs	r1, #0
    b382:	4608      	mov	r0, r1
    b384:	f001 f964 	bl	c650 <_SysFatalErrorHandler>

	return 0;
}
    b388:	2000      	movs	r0, #0
    b38a:	46bd      	mov	sp, r7
    b38c:	bd80      	pop	{r7, pc}
    b38e:	bf00      	nop
    b390:	0000dd4e 	.word	0x0000dd4e
    b394:	0000dd53 	.word	0x0000dd53
    b398:	0000dcfd 	.word	0x0000dcfd
    b39c:	0000f387 	.word	0x0000f387
    b3a0:	0000dd04 	.word	0x0000dd04
    b3a4:	0000e191 	.word	0x0000e191

0000b3a8 <mayfly_prio_is_equal>:

uint32_t mayfly_prio_is_equal(uint8_t caller_id, uint8_t callee_id)
{
    b3a8:	b580      	push	{r7, lr}
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    b3aa:	4288      	cmp	r0, r1

	return 0;
}

uint32_t mayfly_prio_is_equal(uint8_t caller_id, uint8_t callee_id)
{
    b3ac:	af00      	add	r7, sp, #0
	return (caller_id == callee_id) ||
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    b3ae:	d00a      	beq.n	b3c6 <mayfly_prio_is_equal+0x1e>
	return 0;
}

uint32_t mayfly_prio_is_equal(uint8_t caller_id, uint8_t callee_id)
{
	return (caller_id == callee_id) ||
    b3b0:	b918      	cbnz	r0, b3ba <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
		(callee_id == MAYFLY_CALL_ID_1)) ||
    b3b2:	1e4b      	subs	r3, r1, #1
    b3b4:	4258      	negs	r0, r3
    b3b6:	4158      	adcs	r0, r3
    b3b8:	bd80      	pop	{r7, pc}
    b3ba:	2801      	cmp	r0, #1
    b3bc:	d105      	bne.n	b3ca <mayfly_prio_is_equal+0x22>
    b3be:	fab1 f081 	clz	r0, r1
    b3c2:	0940      	lsrs	r0, r0, #5
    b3c4:	bd80      	pop	{r7, pc}
    b3c6:	2001      	movs	r0, #1
    b3c8:	bd80      	pop	{r7, pc}
    b3ca:	2000      	movs	r0, #0
	       ((caller_id == MAYFLY_CALL_ID_1) &&
		(callee_id == MAYFLY_CALL_ID_0));
}
    b3cc:	bd80      	pop	{r7, pc}
	...

0000b3d0 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
    b3d0:	b580      	push	{r7, lr}
    b3d2:	b082      	sub	sp, #8
    b3d4:	af02      	add	r7, sp, #8
	(void)caller_id;

	switch (callee_id) {
    b3d6:	b121      	cbz	r1, b3e2 <mayfly_pend+0x12>
    b3d8:	2901      	cmp	r1, #1
    b3da:	d109      	bne.n	b3f0 <mayfly_pend+0x20>
 * @return N/A
 */

static inline void _NvicIrqPend(unsigned int irq)
{
	__scs.nvic.ispr[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
    b3dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b3e0:	e001      	b.n	b3e6 <mayfly_pend+0x16>
    b3e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b3e6:	4b0b      	ldr	r3, [pc, #44]	; (b414 <mayfly_pend+0x44>)
    b3e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
		break;
	}
}
    b3ec:	46bd      	mov	sp, r7
    b3ee:	bd80      	pop	{r7, pc}
		_NvicIrqPend(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
    b3f0:	4b09      	ldr	r3, [pc, #36]	; (b418 <mayfly_pend+0x48>)
    b3f2:	9301      	str	r3, [sp, #4]
    b3f4:	4b09      	ldr	r3, [pc, #36]	; (b41c <mayfly_pend+0x4c>)
    b3f6:	9300      	str	r3, [sp, #0]
    b3f8:	4a09      	ldr	r2, [pc, #36]	; (b420 <mayfly_pend+0x50>)
    b3fa:	4b0a      	ldr	r3, [pc, #40]	; (b424 <mayfly_pend+0x54>)
    b3fc:	490a      	ldr	r1, [pc, #40]	; (b428 <mayfly_pend+0x58>)
    b3fe:	480b      	ldr	r0, [pc, #44]	; (b42c <mayfly_pend+0x5c>)
    b400:	f7f5 fed4 	bl	11ac <printk>
    b404:	2100      	movs	r1, #0
    b406:	4608      	mov	r0, r1
		break;
	}
}
    b408:	46bd      	mov	sp, r7
    b40a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
		_NvicIrqPend(SWI4_IRQn);
		break;

	case MAYFLY_CALL_ID_PROGRAM:
	default:
		LL_ASSERT(0);
    b40e:	f001 b91f 	b.w	c650 <_SysFatalErrorHandler>
    b412:	bf00      	nop
    b414:	e000e000 	.word	0xe000e000
    b418:	0000dd4e 	.word	0x0000dd4e
    b41c:	0000dd53 	.word	0x0000dd53
    b420:	0000dcfd 	.word	0x0000dcfd
    b424:	0000f3a9 	.word	0x0000f3a9
    b428:	0000dd04 	.word	0x0000dd04
    b42c:	0000e191 	.word	0x0000e191

0000b430 <radio_active_callback>:
		break;
	}
}

void radio_active_callback(uint8_t active)
{
    b430:	b580      	push	{r7, lr}
    b432:	af00      	add	r7, sp, #0
    b434:	bd80      	pop	{r7, pc}
	...

0000b438 <radio_event_callback>:
}

void radio_event_callback(void)
{
    b438:	b480      	push	{r7}
	k_sem_give(&sem_prio_recv);
    b43a:	4803      	ldr	r0, [pc, #12]	; (b448 <radio_event_callback+0x10>)
void radio_active_callback(uint8_t active)
{
}

void radio_event_callback(void)
{
    b43c:	af00      	add	r7, sp, #0
	k_sem_give(&sem_prio_recv);
}
    b43e:	46bd      	mov	sp, r7
    b440:	bc80      	pop	{r7}
{
}

void radio_event_callback(void)
{
	k_sem_give(&sem_prio_recv);
    b442:	f001 bfbc 	b.w	d3be <k_sem_give>
    b446:	bf00      	nop
    b448:	20000338 	.word	0x20000338

0000b44c <evt_create>:
 * cmd status events to avoid passing it up the call chain.
 */
static uint16_t _opcode;

static void evt_create(struct net_buf *buf, uint8_t evt, uint8_t len)
{
    b44c:	b5b0      	push	{r4, r5, r7, lr}
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    b44e:	3010      	adds	r0, #16
 * cmd status events to avoid passing it up the call chain.
 */
static uint16_t _opcode;

static void evt_create(struct net_buf *buf, uint8_t evt, uint8_t len)
{
    b450:	460d      	mov	r5, r1
    b452:	af00      	add	r7, sp, #0
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    b454:	2102      	movs	r1, #2
 * cmd status events to avoid passing it up the call chain.
 */
static uint16_t _opcode;

static void evt_create(struct net_buf *buf, uint8_t evt, uint8_t len)
{
    b456:	4614      	mov	r4, r2
	struct bt_hci_evt_hdr *hdr;

	hdr = net_buf_add(buf, sizeof(*hdr));
    b458:	f000 fd84 	bl	bf64 <net_buf_simple_add>
	hdr->evt = evt;
    b45c:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    b45e:	7044      	strb	r4, [r0, #1]
    b460:	bdb0      	pop	{r4, r5, r7, pc}
	...

0000b464 <cmd_status>:
	cc->opcode = sys_cpu_to_le16(_opcode);
	return net_buf_add(buf, plen);
}

static void cmd_status(struct net_buf *buf, uint8_t status)
{
    b464:	b5b0      	push	{r4, r5, r7, lr}
	struct bt_hci_evt_cmd_status *cs;

	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    b466:	2204      	movs	r2, #4
	cc->opcode = sys_cpu_to_le16(_opcode);
	return net_buf_add(buf, plen);
}

static void cmd_status(struct net_buf *buf, uint8_t status)
{
    b468:	af00      	add	r7, sp, #0
    b46a:	4605      	mov	r5, r0
    b46c:	460c      	mov	r4, r1
	struct bt_hci_evt_cmd_status *cs;

	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    b46e:	210f      	movs	r1, #15
    b470:	f7ff ffec 	bl	b44c <evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
    b474:	2104      	movs	r1, #4
    b476:	f105 0010 	add.w	r0, r5, #16
    b47a:	f000 fd73 	bl	bf64 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1;
    b47e:	2301      	movs	r3, #1
    b480:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    b482:	4b02      	ldr	r3, [pc, #8]	; (b48c <cmd_status+0x28>)
	struct bt_hci_evt_cmd_status *cs;

	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
    b484:	7004      	strb	r4, [r0, #0]
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
    b486:	881b      	ldrh	r3, [r3, #0]
    b488:	8043      	strh	r3, [r0, #2]
    b48a:	bdb0      	pop	{r4, r5, r7, pc}
    b48c:	20001488 	.word	0x20001488

0000b490 <cmd_complete>:
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf *buf, uint8_t plen)
{
    b490:	b5b0      	push	{r4, r5, r7, lr}
	struct bt_hci_evt_cmd_complete *cc;

	evt_create(buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    b492:	1cca      	adds	r2, r1, #3
	hdr->evt = evt;
	hdr->len = len;
}

static void *cmd_complete(struct net_buf *buf, uint8_t plen)
{
    b494:	4604      	mov	r4, r0
    b496:	af00      	add	r7, sp, #0
    b498:	460d      	mov	r5, r1
	struct bt_hci_evt_cmd_complete *cc;

	evt_create(buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    b49a:	b2d2      	uxtb	r2, r2

	cc = net_buf_add(buf, sizeof(*cc));
    b49c:	3410      	adds	r4, #16

static void *cmd_complete(struct net_buf *buf, uint8_t plen)
{
	struct bt_hci_evt_cmd_complete *cc;

	evt_create(buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    b49e:	210e      	movs	r1, #14
    b4a0:	f7ff ffd4 	bl	b44c <evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
    b4a4:	2103      	movs	r1, #3
    b4a6:	4620      	mov	r0, r4
    b4a8:	f000 fd5c 	bl	bf64 <net_buf_simple_add>
	cc->ncmd = 1;
    b4ac:	2301      	movs	r3, #1
    b4ae:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    b4b0:	4b05      	ldr	r3, [pc, #20]	; (b4c8 <cmd_complete+0x38>)
    b4b2:	881b      	ldrh	r3, [r3, #0]
    b4b4:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(buf, plen);
    b4b8:	4629      	mov	r1, r5
    b4ba:	4620      	mov	r0, r4
}
    b4bc:	46bd      	mov	sp, r7
    b4be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	evt_create(buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1;
	cc->opcode = sys_cpu_to_le16(_opcode);
	return net_buf_add(buf, plen);
    b4c2:	f000 bd4f 	b.w	bf64 <net_buf_simple_add>
    b4c6:	bf00      	nop
    b4c8:	20001488 	.word	0x20001488

0000b4cc <meta_evt>:
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ce:	4604      	mov	r4, r0
    b4d0:	4615      	mov	r5, r2
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b4d2:	3201      	adds	r2, #1
	cs->ncmd = 1;
	cs->opcode = sys_cpu_to_le16(_opcode);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    b4d4:	af00      	add	r7, sp, #0
    b4d6:	460e      	mov	r6, r1
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b4d8:	b2d2      	uxtb	r2, r2
	me = net_buf_add(buf, sizeof(*me));
    b4da:	3410      	adds	r4, #16

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    b4dc:	213e      	movs	r1, #62	; 0x3e
    b4de:	f7ff ffb5 	bl	b44c <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    b4e2:	2101      	movs	r1, #1
    b4e4:	4620      	mov	r0, r4
    b4e6:	f000 fd3d 	bl	bf64 <net_buf_simple_add>
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    b4ea:	4629      	mov	r1, r5
{
	struct bt_hci_evt_le_meta_event *me;

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    b4ec:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    b4ee:	4620      	mov	r0, r4
}
    b4f0:	46bd      	mov	sp, r7
    b4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;

	return net_buf_add(buf, melen);
    b4f6:	f000 bd35 	b.w	bf64 <net_buf_simple_add>
	...

0000b4fc <hci_cmd_handle>:

	return 0;
}

int hci_cmd_handle(struct net_buf *cmd, struct net_buf *evt)
{
    b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4fe:	b089      	sub	sp, #36	; 0x24
    b500:	460c      	mov	r4, r1
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	uint8_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    b502:	8a81      	ldrh	r1, [r0, #20]
    b504:	2902      	cmp	r1, #2

	return 0;
}

int hci_cmd_handle(struct net_buf *cmd, struct net_buf *evt)
{
    b506:	af06      	add	r7, sp, #24
    b508:	4605      	mov	r5, r0
	struct bt_hci_evt_cc_status *ccst;
	struct bt_hci_cmd_hdr *chdr;
	uint8_t ocf;
	int err;

	if (cmd->len < sizeof(*chdr)) {
    b50a:	d808      	bhi.n	b51e <hci_cmd_handle+0x22>
		BT_ERR("No HCI Command header");
    b50c:	4ba2      	ldr	r3, [pc, #648]	; (b798 <hci_cmd_handle+0x29c>)
    b50e:	9301      	str	r3, [sp, #4]
    b510:	4ba2      	ldr	r3, [pc, #648]	; (b79c <hci_cmd_handle+0x2a0>)
    b512:	9300      	str	r3, [sp, #0]
    b514:	4aa2      	ldr	r2, [pc, #648]	; (b7a0 <hci_cmd_handle+0x2a4>)
    b516:	4ba3      	ldr	r3, [pc, #652]	; (b7a4 <hci_cmd_handle+0x2a8>)
    b518:	49a3      	ldr	r1, [pc, #652]	; (b7a8 <hci_cmd_handle+0x2ac>)
    b51a:	48a4      	ldr	r0, [pc, #656]	; (b7ac <hci_cmd_handle+0x2b0>)
    b51c:	e011      	b.n	b542 <hci_cmd_handle+0x46>
		return -EINVAL;
	}

	chdr = (void *)cmd->data;
    b51e:	6903      	ldr	r3, [r0, #16]
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    b520:	4ea3      	ldr	r6, [pc, #652]	; (b7b0 <hci_cmd_handle+0x2b4>)
    b522:	781a      	ldrb	r2, [r3, #0]
    b524:	7858      	ldrb	r0, [r3, #1]

	if (cmd->len < chdr->param_len) {
    b526:	789b      	ldrb	r3, [r3, #2]
		return -EINVAL;
	}

	chdr = (void *)cmd->data;
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    b528:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

	if (cmd->len < chdr->param_len) {
    b52c:	428b      	cmp	r3, r1
		return -EINVAL;
	}

	chdr = (void *)cmd->data;
	/* store in a global for later CC/CS event creation */
	_opcode = sys_le16_to_cpu(chdr->opcode);
    b52e:	8032      	strh	r2, [r6, #0]

	if (cmd->len < chdr->param_len) {
    b530:	d90c      	bls.n	b54c <hci_cmd_handle+0x50>
		BT_ERR("Invalid HCI CMD packet length");
    b532:	4b99      	ldr	r3, [pc, #612]	; (b798 <hci_cmd_handle+0x29c>)
    b534:	9301      	str	r3, [sp, #4]
    b536:	4b99      	ldr	r3, [pc, #612]	; (b79c <hci_cmd_handle+0x2a0>)
    b538:	9300      	str	r3, [sp, #0]
    b53a:	4a99      	ldr	r2, [pc, #612]	; (b7a0 <hci_cmd_handle+0x2a4>)
    b53c:	4b99      	ldr	r3, [pc, #612]	; (b7a4 <hci_cmd_handle+0x2a8>)
    b53e:	499a      	ldr	r1, [pc, #616]	; (b7a8 <hci_cmd_handle+0x2ac>)
    b540:	489c      	ldr	r0, [pc, #624]	; (b7b4 <hci_cmd_handle+0x2b8>)
    b542:	f7f5 fe33 	bl	11ac <printk>
		return -EINVAL;
    b546:	f06f 0015 	mvn.w	r0, #21
    b54a:	e228      	b.n	b99e <hci_cmd_handle+0x4a2>
	}

	net_buf_pull(cmd, sizeof(*chdr));
    b54c:	2103      	movs	r1, #3
    b54e:	f105 0010 	add.w	r0, r5, #16
    b552:	f000 fd23 	bl	bf9c <net_buf_simple_pull>

	ocf = BT_OCF(_opcode);
    b556:	8833      	ldrh	r3, [r6, #0]
    b558:	b2d9      	uxtb	r1, r3

	switch (BT_OGF(_opcode)) {
    b55a:	0a9b      	lsrs	r3, r3, #10
    b55c:	3b01      	subs	r3, #1
    b55e:	2b07      	cmp	r3, #7
    b560:	f200 8216 	bhi.w	b990 <hci_cmd_handle+0x494>
    b564:	e8df f013 	tbh	[pc, r3, lsl #1]
    b568:	02140008 	.word	0x02140008
    b56c:	00210018 	.word	0x00210018
    b570:	02140214 	.word	0x02140214
    b574:	00800214 	.word	0x00800214
}

static int link_control_cmd_handle(uint8_t ocf, struct net_buf *cmd,
				   struct net_buf *evt)
{
	switch (ocf) {
    b578:	2906      	cmp	r1, #6
    b57a:	d007      	beq.n	b58c <hci_cmd_handle+0x90>
    b57c:	291d      	cmp	r1, #29
    b57e:	f040 8207 	bne.w	b990 <hci_cmd_handle+0x494>
{
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
	uint16_t handle;
	uint32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
    b582:	692b      	ldr	r3, [r5, #16]
	status = radio_version_ind_send(handle);
    b584:	8818      	ldrh	r0, [r3, #0]
    b586:	f7ff f83b 	bl	a600 <radio_version_ind_send>
    b58a:	e12b      	b.n	b7e4 <hci_cmd_handle+0x2e8>
    b58c:	692b      	ldr	r3, [r5, #16]
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
	uint16_t handle;
	uint32_t status;

	handle = sys_le16_to_cpu(cmd->handle);
	status = radio_terminate_ind_send(handle, cmd->reason);
    b58e:	7899      	ldrb	r1, [r3, #2]
    b590:	8818      	ldrh	r0, [r3, #0]
    b592:	f7ff f84a 	bl	a62a <radio_terminate_ind_send>
    b596:	e125      	b.n	b7e4 <hci_cmd_handle+0x2e8>
}

static int ctrl_bb_cmd_handle(uint8_t ocf, struct net_buf *cmd,
			      struct net_buf *evt)
{
	switch (ocf) {
    b598:	2901      	cmp	r1, #1
    b59a:	f000 809f 	beq.w	b6dc <hci_cmd_handle+0x1e0>
    b59e:	2903      	cmp	r1, #3
    b5a0:	f040 81f6 	bne.w	b990 <hci_cmd_handle+0x494>

static void reset(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_evt_cc_status *ccst;

	ctrl_reset();
    b5a4:	f7fe fb0a 	bl	9bbc <ctrl_reset>
    b5a8:	e097      	b.n	b6da <hci_cmd_handle+0x1de>
}

static int info_cmd_handle(uint8_t ocf, struct net_buf *cmd,
			   struct net_buf *evt)
{
	switch (ocf) {
    b5aa:	3901      	subs	r1, #1
    b5ac:	2908      	cmp	r1, #8
    b5ae:	f200 81ef 	bhi.w	b990 <hci_cmd_handle+0x494>
    b5b2:	e8df f011 	tbh	[pc, r1, lsl #1]
    b5b6:	0009      	.short	0x0009
    b5b8:	003f001b 	.word	0x003f001b
    b5bc:	01ed01ed 	.word	0x01ed01ed
    b5c0:	01ed01ed 	.word	0x01ed01ed
    b5c4:	004d01ed 	.word	0x004d01ed

static void read_local_version_info(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b5c8:	2109      	movs	r1, #9
    b5ca:	4620      	mov	r0, r4
    b5cc:	f7ff ff60 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b5d0:	2300      	movs	r3, #0
	rp->hci_version = BT_HCI_VERSION_4_2;
    b5d2:	2208      	movs	r2, #8
{
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    b5d4:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_4_2;
	rp->hci_revision = sys_cpu_to_le16(0);
    b5d6:	7083      	strb	r3, [r0, #2]
    b5d8:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    b5da:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_hci_rp_read_local_version_info *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
	rp->hci_version = BT_HCI_VERSION_4_2;
    b5de:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    b5e0:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    b5e2:	7143      	strb	r3, [r0, #5]
    b5e4:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    b5e6:	71c3      	strb	r3, [r0, #7]
    b5e8:	7203      	strb	r3, [r0, #8]
    b5ea:	e1d7      	b.n	b99c <hci_cmd_handle+0x4a0>

static void read_supported_commands(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b5ec:	2141      	movs	r1, #65	; 0x41
    b5ee:	4620      	mov	r0, r4
    b5f0:	f7ff ff4e 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b5f4:	2100      	movs	r1, #0

static void read_supported_commands(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b5f6:	4604      	mov	r4, r0

	rp->status = 0x00;
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    b5f8:	2240      	movs	r2, #64	; 0x40
{
	struct bt_hci_rp_read_supported_commands *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    b5fa:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    b5fe:	f7f5 fc5b 	bl	eb8 <memset>
	/* Disconnect. */
	rp->commands[0] = (1 << 5);
    b602:	2320      	movs	r3, #32
    b604:	7063      	strb	r3, [r4, #1]
	/* Set Event Mask, and Reset. */
	rp->commands[5] = (1 << 6) | (1 << 7);
    b606:	23c0      	movs	r3, #192	; 0xc0
    b608:	71a3      	strb	r3, [r4, #6]
	/* Read Local Version Info, Read Local Supported Features. */
	rp->commands[14] = (1 << 3) | (1 << 5);
    b60a:	2328      	movs	r3, #40	; 0x28
    b60c:	73e3      	strb	r3, [r4, #15]
	/* Read BD ADDR. */
	rp->commands[15] = (1 << 1);
    b60e:	2302      	movs	r3, #2
    b610:	7423      	strb	r3, [r4, #16]
	/* All LE commands in this octet. */
	rp->commands[25] = 0xF7;
    b612:	23f7      	movs	r3, #247	; 0xf7
    b614:	76a3      	strb	r3, [r4, #26]
	/* All LE commands in this octet. */
	rp->commands[26] = 0xFF;
    b616:	23ff      	movs	r3, #255	; 0xff
    b618:	76e3      	strb	r3, [r4, #27]
	/* All LE commands in this octet,
	 */
	rp->commands[27] = 0xFF;
    b61a:	7723      	strb	r3, [r4, #28]
	/* LE Start Encryption, LE Long Term Key Req Reply,
	 * LE Long Term Key Req Neg Reply. and
	 * LE Read Supported States.
	 */
	rp->commands[28] = (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3);
    b61c:	230f      	movs	r3, #15
    b61e:	7763      	strb	r3, [r4, #29]
	/* LE Remote Conn Param Req and Neg Reply */
	rp->commands[33] = (1 << 4) | (1 << 5);

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Set Data Length, and LE Read Suggested Data Length. */
	rp->commands[33] |= (1 << 6) | (1 << 7);
    b620:	23f0      	movs	r3, #240	; 0xf0
    b622:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	/* LE Write Suggested Data Length. */
	rp->commands[34] = (1 << 0);
    b626:	2301      	movs	r3, #1
    b628:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[34] |= (1 << 1) | (1 << 2);
#endif

#if defined(CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH)
	/* LE Read Maximum Data Length. */
	rp->commands[35] = (1 << 3);
    b62c:	2308      	movs	r3, #8
    b62e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    b632:	e1b3      	b.n	b99c <hci_cmd_handle+0x4a0>

static void read_local_features(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b634:	2109      	movs	r1, #9
    b636:	4620      	mov	r0, r4
    b638:	f7ff ff2a 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b63c:	2100      	movs	r1, #0

static void read_local_features(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b63e:	4604      	mov	r4, r0

	rp->status = 0x00;
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    b640:	2208      	movs	r2, #8
{
	struct bt_hci_rp_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    b642:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    b646:	f7f5 fc37 	bl	eb8 <memset>
	/* BR/EDR not supported and LE supported */
	rp->features[4] = (1 << 5) | (1 << 6);
    b64a:	2360      	movs	r3, #96	; 0x60
    b64c:	7163      	strb	r3, [r4, #5]
    b64e:	e1a5      	b.n	b99c <hci_cmd_handle+0x4a0>

static void read_bd_addr(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_read_bd_addr *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b650:	2107      	movs	r1, #7
    b652:	4620      	mov	r0, r4
    b654:	f7ff ff1c 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b658:	4601      	mov	r1, r0
    b65a:	2300      	movs	r3, #0
    b65c:	f801 3b01 	strb.w	r3, [r1], #1
	ll_address_get(0, &rp->bdaddr.val[0]);
    b660:	4618      	mov	r0, r3
    b662:	f7ff fa8f 	bl	ab84 <ll_address_get>
    b666:	e199      	b.n	b99c <hci_cmd_handle+0x4a0>
#endif /* CONFIG_BLUETOOTH_CONTROLLER_DATA_LENGTH */

static int controller_cmd_handle(uint8_t ocf, struct net_buf *cmd,
				 struct net_buf *evt)
{
	switch (ocf) {
    b668:	3901      	subs	r1, #1
    b66a:	292e      	cmp	r1, #46	; 0x2e
    b66c:	f200 8190 	bhi.w	b990 <hci_cmd_handle+0x494>
    b670:	e8df f011 	tbh	[pc, r1, lsl #1]
    b674:	00390033 	.word	0x00390033
    b678:	018e0045 	.word	0x018e0045
    b67c:	0053002f 	.word	0x0053002f
    b680:	00700069 	.word	0x00700069
    b684:	007c0076 	.word	0x007c0076
    b688:	008d0081 	.word	0x008d0081
    b68c:	00c000a4 	.word	0x00c000a4
    b690:	00cc00c3 	.word	0x00cc00c3
    b694:	00de00cf 	.word	0x00de00cf
    b698:	00f000e4 	.word	0x00f000e4
    b69c:	00fd018e 	.word	0x00fd018e
    b6a0:	01100102 	.word	0x01100102
    b6a4:	0125011b 	.word	0x0125011b
    b6a8:	01300129 	.word	0x01300129
    b6ac:	018e018e 	.word	0x018e018e
    b6b0:	0141018e 	.word	0x0141018e
    b6b4:	0154014a 	.word	0x0154014a
    b6b8:	01710167 	.word	0x01710167
    b6bc:	018e018e 	.word	0x018e018e
    b6c0:	018e018e 	.word	0x018e018e
    b6c4:	018e018e 	.word	0x018e018e
    b6c8:	018e018e 	.word	0x018e018e
    b6cc:	018e018e 	.word	0x018e018e
    b6d0:	0180      	.short	0x0180
static void le_set_random_address(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_set_random_address *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_address_set(1, &cmd->bdaddr.val[0]);
    b6d2:	6929      	ldr	r1, [r5, #16]
    b6d4:	2001      	movs	r0, #1
    b6d6:	f7ff fa67 	bl	aba8 <ll_address_set>
{
	struct bt_hci_evt_cc_status *ccst;

	/** TODO */

	ccst = cmd_complete(evt, sizeof(*ccst));
    b6da:	2101      	movs	r1, #1
    b6dc:	4620      	mov	r0, r4
    b6de:	f7ff fed7 	bl	b490 <cmd_complete>
	ccst->status = 0x00;
    b6e2:	2300      	movs	r3, #0
    b6e4:	e159      	b.n	b99a <hci_cmd_handle+0x49e>

static void le_read_buffer_size(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_buffer_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b6e6:	2104      	movs	r1, #4
    b6e8:	4620      	mov	r0, r4
    b6ea:	f7ff fed1 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b6ee:	2300      	movs	r3, #0
    b6f0:	7003      	strb	r3, [r0, #0]

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    b6f2:	221b      	movs	r2, #27
    b6f4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    b6f6:	2301      	movs	r3, #1

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;

	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    b6f8:	7042      	strb	r2, [r0, #1]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    b6fa:	70c3      	strb	r3, [r0, #3]
    b6fc:	e14e      	b.n	b99c <hci_cmd_handle+0x4a0>

static void le_read_local_features(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b6fe:	2109      	movs	r1, #9
    b700:	4620      	mov	r0, r4
    b702:	f7ff fec5 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b706:	2100      	movs	r1, #0

static void le_read_local_features(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b708:	4604      	mov	r4, r0

	rp->status = 0x00;

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    b70a:	2208      	movs	r2, #8
{
	struct bt_hci_rp_le_read_local_features *rp;

	rp = cmd_complete(evt, sizeof(*rp));

	rp->status = 0x00;
    b70c:	f800 1b01 	strb.w	r1, [r0], #1

	memset(&rp->features[0], 0x00, sizeof(rp->features));
    b710:	f7f5 fbd2 	bl	eb8 <memset>
	rp->features[0] = RADIO_BLE_FEATURES;
    b714:	233f      	movs	r3, #63	; 0x3f
    b716:	7063      	strb	r3, [r4, #1]
    b718:	e140      	b.n	b99c <hci_cmd_handle+0x4a0>
    b71a:	692d      	ldr	r5, [r5, #16]

static void le_set_adv_param(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint8_t const c_adv_type[] = {
    b71c:	4b26      	ldr	r3, [pc, #152]	; (b7b8 <hci_cmd_handle+0x2bc>)
		PDU_ADV_TYPE_SCAN_IND, PDU_ADV_TYPE_NONCONN_IND };
	uint16_t min_interval;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

	ll_adv_params_set(min_interval, c_adv_type[cmd->type],
    b71e:	7929      	ldrb	r1, [r5, #4]

static void le_set_adv_param(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint8_t const c_adv_type[] = {
    b720:	6818      	ldr	r0, [r3, #0]
    b722:	6078      	str	r0, [r7, #4]
		PDU_ADV_TYPE_SCAN_IND, PDU_ADV_TYPE_NONCONN_IND };
	uint16_t min_interval;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

	ll_adv_params_set(min_interval, c_adv_type[cmd->type],
    b724:	f107 0008 	add.w	r0, r7, #8
    b728:	4401      	add	r1, r0
    b72a:	7bae      	ldrb	r6, [r5, #14]
    b72c:	79ab      	ldrb	r3, [r5, #6]
    b72e:	796a      	ldrb	r2, [r5, #5]
    b730:	8828      	ldrh	r0, [r5, #0]
    b732:	f811 1c04 	ldrb.w	r1, [r1, #-4]
    b736:	9602      	str	r6, [sp, #8]
    b738:	7b6e      	ldrb	r6, [r5, #13]
    b73a:	9601      	str	r6, [sp, #4]
			  cmd->own_addr_type, cmd->direct_addr.type,
			  &cmd->direct_addr.a.val[0], cmd->channel_map,
    b73c:	3507      	adds	r5, #7
		PDU_ADV_TYPE_SCAN_IND, PDU_ADV_TYPE_NONCONN_IND };
	uint16_t min_interval;

	min_interval = sys_le16_to_cpu(cmd->min_interval);

	ll_adv_params_set(min_interval, c_adv_type[cmd->type],
    b73e:	9500      	str	r5, [sp, #0]
    b740:	f7ff fa42 	bl	abc8 <ll_adv_params_set>
    b744:	e7c9      	b.n	b6da <hci_cmd_handle+0x1de>

static void le_read_adv_ch_tx_power(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_ch_tx_power *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b746:	2102      	movs	r1, #2
    b748:	4620      	mov	r0, r4
    b74a:	f7ff fea1 	bl	b490 <cmd_complete>

	rp->status = 0x00;
    b74e:	2300      	movs	r3, #0
    b750:	7003      	strb	r3, [r0, #0]
    b752:	e059      	b.n	b808 <hci_cmd_handle+0x30c>
    b754:	692b      	ldr	r3, [r5, #16]
static void le_set_adv_data(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_adv_data_set(cmd->len, &cmd->data[0]);
    b756:	1c59      	adds	r1, r3, #1
    b758:	7818      	ldrb	r0, [r3, #0]
    b75a:	f7ff faa5 	bl	aca8 <ll_adv_data_set>
    b75e:	e7bc      	b.n	b6da <hci_cmd_handle+0x1de>
    b760:	692b      	ldr	r3, [r5, #16]
static void le_set_scan_rsp_data(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;

	ll_scan_data_set(cmd->len, &cmd->data[0]);
    b762:	1c59      	adds	r1, r3, #1
    b764:	7818      	ldrb	r0, [r3, #0]
    b766:	f7ff faef 	bl	ad48 <ll_scan_data_set>
    b76a:	e7b6      	b.n	b6da <hci_cmd_handle+0x1de>
{
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = ll_adv_enable(cmd->enable);
    b76c:	692b      	ldr	r3, [r5, #16]
    b76e:	7818      	ldrb	r0, [r3, #0]
    b770:	f7ff fb28 	bl	adc4 <ll_adv_enable>
    b774:	e071      	b.n	b85a <hci_cmd_handle+0x35e>
    b776:	692d      	ldr	r5, [r5, #16]
	uint16_t window;

	interval = sys_le16_to_cpu(cmd->interval);
	window = sys_le16_to_cpu(cmd->window);

	ll_scan_params_set(cmd->scan_type, interval, window, cmd->addr_type,
    b778:	796b      	ldrb	r3, [r5, #5]
    b77a:	f8b5 2003 	ldrh.w	r2, [r5, #3]
    b77e:	f8b5 1001 	ldrh.w	r1, [r5, #1]
    b782:	7828      	ldrb	r0, [r5, #0]
    b784:	79ad      	ldrb	r5, [r5, #6]
    b786:	9500      	str	r5, [sp, #0]
    b788:	f7ff fb6a 	bl	ae60 <ll_scan_params_set>
    b78c:	e7a5      	b.n	b6da <hci_cmd_handle+0x1de>
{
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = ll_scan_enable(cmd->enable);
    b78e:	692b      	ldr	r3, [r5, #16]
    b790:	7818      	ldrb	r0, [r3, #0]
    b792:	f7ff fb77 	bl	ae84 <ll_scan_enable>
    b796:	e060      	b.n	b85a <hci_cmd_handle+0x35e>
    b798:	0000dd4e 	.word	0x0000dd4e
    b79c:	0000dd53 	.word	0x0000dd53
    b7a0:	0000dcfd 	.word	0x0000dcfd
    b7a4:	0000f3f3 	.word	0x0000f3f3
    b7a8:	0000dd04 	.word	0x0000dd04
    b7ac:	0000ed0c 	.word	0x0000ed0c
    b7b0:	20001488 	.word	0x20001488
    b7b4:	0000ed32 	.word	0x0000ed32
    b7b8:	0000daa8 	.word	0x0000daa8
    b7bc:	692d      	ldr	r5, [r5, #16]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	status = ll_create_connection(scan_interval, scan_window,
    b7be:	f8b5 6013 	ldrh.w	r6, [r5, #19]
    b7c2:	796b      	ldrb	r3, [r5, #5]
    b7c4:	792a      	ldrb	r2, [r5, #4]
    b7c6:	8869      	ldrh	r1, [r5, #2]
    b7c8:	8828      	ldrh	r0, [r5, #0]
    b7ca:	9604      	str	r6, [sp, #16]
    b7cc:	f8b5 6011 	ldrh.w	r6, [r5, #17]
    b7d0:	9603      	str	r6, [sp, #12]
    b7d2:	f8b5 600f 	ldrh.w	r6, [r5, #15]
    b7d6:	9602      	str	r6, [sp, #8]
    b7d8:	7b2e      	ldrb	r6, [r5, #12]
    b7da:	9601      	str	r6, [sp, #4]
    b7dc:	3506      	adds	r5, #6
    b7de:	9500      	str	r5, [sp, #0]
    b7e0:	f7ff fb74 	bl	aecc <ll_create_connection>
				      cmd->peer_addr.type,
				      &cmd->peer_addr.a.val[0],
				      cmd->own_addr_type, conn_interval_max,
				      conn_latency, supervision_timeout);

	cmd_status(evt, (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    b7e4:	2800      	cmp	r0, #0
    b7e6:	bf14      	ite	ne
    b7e8:	210c      	movne	r1, #12
    b7ea:	2100      	moveq	r1, #0
    b7ec:	4620      	mov	r0, r4
    b7ee:	f7ff fe39 	bl	b464 <cmd_status>
    b7f2:	e0d3      	b.n	b99c <hci_cmd_handle+0x4a0>
static void le_create_conn_cancel(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_connect_disable();
    b7f4:	f7fe fe1e 	bl	a434 <radio_connect_disable>
    b7f8:	e02f      	b.n	b85a <hci_cmd_handle+0x35e>

static void le_read_wl_size(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_wl_size *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b7fa:	2102      	movs	r1, #2
    b7fc:	4620      	mov	r0, r4
    b7fe:	f7ff fe47 	bl	b490 <cmd_complete>
	rp->status = 0x00;
    b802:	2300      	movs	r3, #0
    b804:	7003      	strb	r3, [r0, #0]

	rp->wl_size = 8;
    b806:	2308      	movs	r3, #8
    b808:	7043      	strb	r3, [r0, #1]
    b80a:	e0c7      	b.n	b99c <hci_cmd_handle+0x4a0>

static void le_clear_wl(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_evt_cc_status *ccst;

	radio_filter_clear();
    b80c:	f7fe fa26 	bl	9c5c <radio_filter_clear>
    b810:	e763      	b.n	b6da <hci_cmd_handle+0x1de>
    b812:	692b      	ldr	r3, [r5, #16]
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_filter_add(cmd->addr.type, &cmd->addr.a.val[0]);
    b814:	1c59      	adds	r1, r3, #1
    b816:	7818      	ldrb	r0, [r3, #0]
    b818:	f7fe fa2a 	bl	9c70 <radio_filter_add>

	ccst = cmd_complete(evt, sizeof(*ccst));
    b81c:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_add_dev_to_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_filter_add(cmd->addr.type, &cmd->addr.a.val[0]);
    b81e:	4605      	mov	r5, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    b820:	4620      	mov	r0, r4
    b822:	f7ff fe35 	bl	b490 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b826:	2d00      	cmp	r5, #0
    b828:	bf0c      	ite	eq
    b82a:	2300      	moveq	r3, #0
    b82c:	2307      	movne	r3, #7
    b82e:	e0b4      	b.n	b99a <hci_cmd_handle+0x49e>
    b830:	692b      	ldr	r3, [r5, #16]
{
	struct bt_hci_cp_le_rem_dev_from_wl *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_filter_remove(cmd->addr.type, &cmd->addr.a.val[0]);
    b832:	1c59      	adds	r1, r3, #1
    b834:	7818      	ldrb	r0, [r3, #0]
    b836:	f7fe fa41 	bl	9cbc <radio_filter_remove>
    b83a:	e00e      	b.n	b85a <hci_cmd_handle+0x35e>
    b83c:	692a      	ldr	r2, [r5, #16]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);

	/** @todo if peer supports LE Conn Param Req,
	* use Req cmd (1) instead of Initiate cmd (0).
	*/
	status = radio_conn_update(handle, 0, 0, conn_interval_max,
    b83e:	8911      	ldrh	r1, [r2, #8]
    b840:	8893      	ldrh	r3, [r2, #4]
    b842:	8810      	ldrh	r0, [r2, #0]
    b844:	9101      	str	r1, [sp, #4]
    b846:	88d2      	ldrh	r2, [r2, #6]
    b848:	9200      	str	r2, [sp, #0]
    b84a:	2200      	movs	r2, #0
    b84c:	4611      	mov	r1, r2
    b84e:	f7fe fe01 	bl	a454 <radio_conn_update>
    b852:	e7c7      	b.n	b7e4 <hci_cmd_handle+0x2e8>
{
	struct bt_hci_cp_le_set_host_ch_classif *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_chm_update(&cmd->ch_map[0]);
    b854:	6928      	ldr	r0, [r5, #16]
    b856:	f7fe fe37 	bl	a4c8 <radio_chm_update>
    b85a:	4605      	mov	r5, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    b85c:	2101      	movs	r1, #1
    b85e:	4620      	mov	r0, r4
    b860:	f7ff fe16 	bl	b490 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    b864:	2d00      	cmp	r5, #0
    b866:	bf0c      	ite	eq
    b868:	2300      	moveq	r3, #0
    b86a:	230c      	movne	r3, #12
    b86c:	e095      	b.n	b99a <hci_cmd_handle+0x49e>
{
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
	uint32_t status;
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
    b86e:	692b      	ldr	r3, [r5, #16]
	status = radio_feature_req_send(handle);
    b870:	8818      	ldrh	r0, [r3, #0]
    b872:	f7fe feb0 	bl	a5d6 <radio_feature_req_send>
    b876:	e7b5      	b.n	b7e4 <hci_cmd_handle+0x2e8>
static void le_encrypt(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b878:	2111      	movs	r1, #17
    b87a:	4620      	mov	r0, r4
    b87c:	692d      	ldr	r5, [r5, #16]
    b87e:	f7ff fe07 	bl	b490 <cmd_complete>

	ecb_encrypt(&cmd->key[0], &cmd->plaintext[0], &rp->enc_data[0], 0);
    b882:	2300      	movs	r3, #0
static void le_encrypt(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
	struct bt_hci_rp_le_encrypt *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b884:	4604      	mov	r4, r0

	ecb_encrypt(&cmd->key[0], &cmd->plaintext[0], &rp->enc_data[0], 0);
    b886:	1c42      	adds	r2, r0, #1
    b888:	f105 0110 	add.w	r1, r5, #16
    b88c:	4628      	mov	r0, r5
    b88e:	f7f7 fb7d 	bl	2f8c <ecb_encrypt>
    b892:	e07a      	b.n	b98a <hci_cmd_handle+0x48e>
static void le_rand(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_rand *rp;
	uint8_t count = sizeof(rp->rand);

	rp = cmd_complete(evt, sizeof(*rp));
    b894:	2109      	movs	r1, #9
    b896:	4620      	mov	r0, r4
    b898:	f7ff fdfa 	bl	b490 <cmd_complete>
	rp->status = 0x00;
    b89c:	2300      	movs	r3, #0
    b89e:	f800 3b01 	strb.w	r3, [r0], #1

	hci_le_rand(rp->rand, count);
    b8a2:	2108      	movs	r1, #8
    b8a4:	f7ff fd0c 	bl	b2c0 <hci_le_rand>
    b8a8:	e078      	b.n	b99c <hci_cmd_handle+0x4a0>
    b8aa:	6928      	ldr	r0, [r5, #16]
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
	uint32_t status;
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = radio_enc_req_send(handle,
    b8ac:	f100 030c 	add.w	r3, r0, #12
    b8b0:	f100 020a 	add.w	r2, r0, #10
    b8b4:	1c81      	adds	r1, r0, #2
    b8b6:	8800      	ldrh	r0, [r0, #0]
    b8b8:	f7ff f908 	bl	aacc <radio_enc_req_send>
    b8bc:	e792      	b.n	b7e4 <hci_cmd_handle+0x2e8>
    b8be:	692d      	ldr	r5, [r5, #16]
	struct bt_hci_rp_le_ltk_req_reply *rp;
	uint32_t status;
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = radio_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    b8c0:	2100      	movs	r1, #0
    b8c2:	1caa      	adds	r2, r5, #2
    b8c4:	e002      	b.n	b8cc <hci_cmd_handle+0x3d0>
    b8c6:	692d      	ldr	r5, [r5, #16]
	struct bt_hci_rp_le_ltk_req_neg_reply *rp;
	uint32_t status;
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = radio_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    b8c8:	2200      	movs	r2, #0
    b8ca:	2106      	movs	r1, #6
    b8cc:	8828      	ldrh	r0, [r5, #0]
    b8ce:	f7fe fe3f 	bl	a550 <radio_start_enc_req_send>
    b8d2:	e028      	b.n	b926 <hci_cmd_handle+0x42a>

static void le_read_supp_states(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_supp_states *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b8d4:	2109      	movs	r1, #9
    b8d6:	4620      	mov	r0, r4
    b8d8:	f7ff fdda 	bl	b490 <cmd_complete>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    b8dc:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
    b8de:	2200      	movs	r2, #0
    b8e0:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    b8e2:	7083      	strb	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    b8e4:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    b8e6:	7103      	strb	r3, [r0, #4]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    b8e8:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    b8ea:	2303      	movs	r3, #3
    b8ec:	7002      	strb	r2, [r0, #0]
    b8ee:	7183      	strb	r3, [r0, #6]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    b8f0:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    b8f2:	7202      	strb	r2, [r0, #8]
    b8f4:	e052      	b.n	b99c <hci_cmd_handle+0x4a0>
    b8f6:	692d      	ldr	r5, [r5, #16]
	handle = sys_le16_to_cpu(cmd->handle);
	interval_max = sys_le16_to_cpu(cmd->interval_max);
	latency = sys_le16_to_cpu(cmd->latency);
	timeout = sys_le16_to_cpu(cmd->timeout);

	status = radio_conn_update(handle, 2, 0, interval_max, latency,
    b8f8:	892a      	ldrh	r2, [r5, #8]
    b8fa:	88ab      	ldrh	r3, [r5, #4]
    b8fc:	8828      	ldrh	r0, [r5, #0]
    b8fe:	9201      	str	r2, [sp, #4]
    b900:	88ea      	ldrh	r2, [r5, #6]
    b902:	9200      	str	r2, [sp, #0]
    b904:	2200      	movs	r2, #0
    b906:	e005      	b.n	b914 <hci_cmd_handle+0x418>
    b908:	692d      	ldr	r5, [r5, #16]
	struct bt_hci_rp_le_conn_param_req_neg_reply *rp;
	uint32_t status;
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	status = radio_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    b90a:	2300      	movs	r3, #0
    b90c:	78aa      	ldrb	r2, [r5, #2]
    b90e:	8828      	ldrh	r0, [r5, #0]
    b910:	9301      	str	r3, [sp, #4]
    b912:	9300      	str	r3, [sp, #0]
    b914:	2102      	movs	r1, #2
    b916:	f7fe fd9d 	bl	a454 <radio_conn_update>
    b91a:	e004      	b.n	b926 <hci_cmd_handle+0x42a>
    b91c:	692d      	ldr	r5, [r5, #16]
	uint16_t handle;

	handle = sys_le16_to_cpu(cmd->handle);
	tx_octets = sys_le16_to_cpu(cmd->tx_octets);
	/** @todo add reject_ext_ind support in ctrl.c */
	status = radio_length_req_send(handle, tx_octets);
    b91e:	8869      	ldrh	r1, [r5, #2]
    b920:	8828      	ldrh	r0, [r5, #0]
    b922:	f7fe fe97 	bl	a654 <radio_length_req_send>
    b926:	4606      	mov	r6, r0

	rp = cmd_complete(evt, sizeof(*rp));
    b928:	2103      	movs	r1, #3
    b92a:	4620      	mov	r0, r4
    b92c:	f7ff fdb0 	bl	b490 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    b930:	2e00      	cmp	r6, #0
    b932:	bf0c      	ite	eq
    b934:	2300      	moveq	r3, #0
    b936:	230c      	movne	r3, #12
    b938:	7003      	strb	r3, [r0, #0]
	rp->handle = cmd->handle;
    b93a:	882b      	ldrh	r3, [r5, #0]
    b93c:	f8a0 3001 	strh.w	r3, [r0, #1]
    b940:	e02c      	b.n	b99c <hci_cmd_handle+0x4a0>

static void le_read_default_data_len(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_default_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b942:	2105      	movs	r1, #5
    b944:	4620      	mov	r0, r4
    b946:	f7ff fda3 	bl	b490 <cmd_complete>
    b94a:	4604      	mov	r4, r0

	radio_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    b94c:	1cc1      	adds	r1, r0, #3
    b94e:	3001      	adds	r0, #1
    b950:	f7fe fea2 	bl	a698 <radio_length_default_get>
    b954:	e019      	b.n	b98a <hci_cmd_handle+0x48e>
    b956:	692b      	ldr	r3, [r5, #16]
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    b958:	8859      	ldrh	r1, [r3, #2]
    b95a:	8818      	ldrh	r0, [r3, #0]
    b95c:	f7fe fea8 	bl	a6b0 <radio_length_default_set>

	ccst = cmd_complete(evt, sizeof(*ccst));
    b960:	2101      	movs	r1, #1
{
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
	struct bt_hci_evt_cc_status *ccst;
	uint32_t status;

	status = radio_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    b962:	4605      	mov	r5, r0

	ccst = cmd_complete(evt, sizeof(*ccst));
    b964:	4620      	mov	r0, r4
    b966:	f7ff fd93 	bl	b490 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAMS;
    b96a:	2d00      	cmp	r5, #0
    b96c:	bf0c      	ite	eq
    b96e:	2300      	moveq	r3, #0
    b970:	231e      	movne	r3, #30
    b972:	e012      	b.n	b99a <hci_cmd_handle+0x49e>

static void le_read_max_data_len(struct net_buf *buf, struct net_buf *evt)
{
	struct bt_hci_rp_le_read_max_data_len *rp;

	rp = cmd_complete(evt, sizeof(*rp));
    b974:	2109      	movs	r1, #9
    b976:	4620      	mov	r0, r4
    b978:	f7ff fd8a 	bl	b490 <cmd_complete>
    b97c:	4604      	mov	r4, r0

	radio_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    b97e:	1dc3      	adds	r3, r0, #7
    b980:	1d42      	adds	r2, r0, #5
    b982:	1cc1      	adds	r1, r0, #3
    b984:	3001      	adds	r0, #1
    b986:	f7fe fe9f 	bl	a6c8 <radio_length_max_get>
			     &rp->max_rx_octets, &rp->max_rx_time);
	rp->status = 0x00;
    b98a:	2300      	movs	r3, #0
    b98c:	7023      	strb	r3, [r4, #0]
    b98e:	e005      	b.n	b99c <hci_cmd_handle+0x4a0>
		err = -EINVAL;
		break;
	}

	if (err == -EINVAL) {
		ccst = cmd_complete(evt, sizeof(*ccst));
    b990:	2101      	movs	r1, #1
    b992:	4620      	mov	r0, r4
    b994:	f7ff fd7c 	bl	b490 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    b998:	2301      	movs	r3, #1
    b99a:	7003      	strb	r3, [r0, #0]
	}

	return 0;
    b99c:	2000      	movs	r0, #0
}
    b99e:	370c      	adds	r7, #12
    b9a0:	46bd      	mov	sp, r7
    b9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b9a4 <hci_acl_handle>:

int hci_acl_handle(struct net_buf *buf)
{
    b9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b9a8:	b083      	sub	sp, #12
	struct bt_hci_acl_hdr *acl;
	uint16_t handle;
	uint8_t flags;
	uint16_t len;

	if (buf->len < sizeof(*acl)) {
    b9aa:	8a83      	ldrh	r3, [r0, #20]
    b9ac:	2b03      	cmp	r3, #3

	return 0;
}

int hci_acl_handle(struct net_buf *buf)
{
    b9ae:	af02      	add	r7, sp, #8
    b9b0:	4606      	mov	r6, r0
	struct bt_hci_acl_hdr *acl;
	uint16_t handle;
	uint8_t flags;
	uint16_t len;

	if (buf->len < sizeof(*acl)) {
    b9b2:	d808      	bhi.n	b9c6 <hci_acl_handle+0x22>
		BT_ERR("No HCI ACL header");
    b9b4:	4b24      	ldr	r3, [pc, #144]	; (ba48 <hci_acl_handle+0xa4>)
    b9b6:	9301      	str	r3, [sp, #4]
    b9b8:	4b24      	ldr	r3, [pc, #144]	; (ba4c <hci_acl_handle+0xa8>)
    b9ba:	9300      	str	r3, [sp, #0]
    b9bc:	4a24      	ldr	r2, [pc, #144]	; (ba50 <hci_acl_handle+0xac>)
    b9be:	4b25      	ldr	r3, [pc, #148]	; (ba54 <hci_acl_handle+0xb0>)
    b9c0:	4925      	ldr	r1, [pc, #148]	; (ba58 <hci_acl_handle+0xb4>)
    b9c2:	4826      	ldr	r0, [pc, #152]	; (ba5c <hci_acl_handle+0xb8>)
    b9c4:	e012      	b.n	b9ec <hci_acl_handle+0x48>
		return -EINVAL;
	}

	acl = (void *)buf->data;
    b9c6:	f850 3f10 	ldr.w	r3, [r0, #16]!
	len = sys_le16_to_cpu(acl->len);
	handle = sys_le16_to_cpu(acl->handle);
	net_buf_pull(buf, sizeof(*acl));
    b9ca:	2104      	movs	r1, #4
		BT_ERR("No HCI ACL header");
		return -EINVAL;
	}

	acl = (void *)buf->data;
	len = sys_le16_to_cpu(acl->len);
    b9cc:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    b9d0:	881d      	ldrh	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    b9d2:	f000 fae3 	bl	bf9c <net_buf_simple_pull>

	if (buf->len < len) {
    b9d6:	8ab3      	ldrh	r3, [r6, #20]
    b9d8:	4543      	cmp	r3, r8
    b9da:	d20c      	bcs.n	b9f6 <hci_acl_handle+0x52>
		BT_ERR("Invalid HCI ACL packet length");
    b9dc:	4b1a      	ldr	r3, [pc, #104]	; (ba48 <hci_acl_handle+0xa4>)
    b9de:	9301      	str	r3, [sp, #4]
    b9e0:	4b1a      	ldr	r3, [pc, #104]	; (ba4c <hci_acl_handle+0xa8>)
    b9e2:	9300      	str	r3, [sp, #0]
    b9e4:	4a1a      	ldr	r2, [pc, #104]	; (ba50 <hci_acl_handle+0xac>)
    b9e6:	4b1b      	ldr	r3, [pc, #108]	; (ba54 <hci_acl_handle+0xb0>)
    b9e8:	491b      	ldr	r1, [pc, #108]	; (ba58 <hci_acl_handle+0xb4>)
    b9ea:	481d      	ldr	r0, [pc, #116]	; (ba60 <hci_acl_handle+0xbc>)
    b9ec:	f7f5 fbde 	bl	11ac <printk>
		return -EINVAL;
    b9f0:	f06f 0015 	mvn.w	r0, #21
    b9f4:	e024      	b.n	ba40 <hci_acl_handle+0x9c>

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
	handle = bt_acl_handle(handle);

	radio_pdu_node_tx = radio_tx_mem_acquire();
    b9f6:	f7fe ffcb 	bl	a990 <radio_tx_mem_acquire>
		BT_ERR("Invalid HCI ACL packet length");
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
    b9fa:	ea4f 3915 	mov.w	r9, r5, lsr #12
	handle = bt_acl_handle(handle);

	radio_pdu_node_tx = radio_tx_mem_acquire();
	if (radio_pdu_node_tx) {
    b9fe:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* assigning flags first because handle will be overwritten */
	flags = bt_acl_flags(handle);
	handle = bt_acl_handle(handle);
    ba00:	f3c5 050b 	ubfx	r5, r5, #0, #12

	radio_pdu_node_tx = radio_tx_mem_acquire();
	if (radio_pdu_node_tx) {
    ba04:	b1d8      	cbz	r0, ba3e <hci_acl_handle+0x9a>
    ba06:	7903      	ldrb	r3, [r0, #4]
		struct pdu_data *pdu_data;

		pdu_data = (struct pdu_data *)radio_pdu_node_tx->pdu_data;
		if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ba08:	f1b9 0f00 	cmp.w	r9, #0
    ba0c:	d002      	beq.n	ba14 <hci_acl_handle+0x70>
    ba0e:	f1b9 0f02 	cmp.w	r9, #2
    ba12:	d101      	bne.n	ba18 <hci_acl_handle+0x74>
			pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ba14:	2202      	movs	r2, #2
    ba16:	e000      	b.n	ba1a <hci_acl_handle+0x76>
		} else {
			pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ba18:	2201      	movs	r2, #1
    ba1a:	f362 0301 	bfi	r3, r2, #0, #2
    ba1e:	7123      	strb	r3, [r4, #4]
		}
		pdu_data->len = len;
    ba20:	f884 8005 	strb.w	r8, [r4, #5]
		memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    ba24:	6931      	ldr	r1, [r6, #16]
    ba26:	4642      	mov	r2, r8
    ba28:	1de0      	adds	r0, r4, #7
    ba2a:	f7f5 fa18 	bl	e5e <memcpy>
		if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ba2e:	4621      	mov	r1, r4
    ba30:	4628      	mov	r0, r5
    ba32:	f7fe ffc1 	bl	a9b8 <radio_tx_mem_enqueue>
    ba36:	b110      	cbz	r0, ba3e <hci_acl_handle+0x9a>
			radio_tx_mem_release(radio_pdu_node_tx);
    ba38:	4620      	mov	r0, r4
    ba3a:	f7fe ffb3 	bl	a9a4 <radio_tx_mem_release>
		}
	}

	return 0;
    ba3e:	2000      	movs	r0, #0
}
    ba40:	3704      	adds	r7, #4
    ba42:	46bd      	mov	sp, r7
    ba44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ba48:	0000dd4e 	.word	0x0000dd4e
    ba4c:	0000dd53 	.word	0x0000dd53
    ba50:	0000dcfd 	.word	0x0000dcfd
    ba54:	0000f402 	.word	0x0000f402
    ba58:	0000dd04 	.word	0x0000dd04
    ba5c:	0000ed60 	.word	0x0000ed60
    ba60:	0000ed82 	.word	0x0000ed82

0000ba64 <hci_acl_encode>:
		return;
	}
}

void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba66:	b083      	sub	sp, #12
	uint8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    ba68:	7a03      	ldrb	r3, [r0, #8]
    ba6a:	f003 0303 	and.w	r3, r3, #3
    ba6e:	3b01      	subs	r3, #1
    ba70:	2b01      	cmp	r3, #1
		return;
	}
}

void hci_acl_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    ba72:	af02      	add	r7, sp, #8
    ba74:	4604      	mov	r4, r0
	uint8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    ba76:	d81f      	bhi.n	bab8 <hci_acl_encode+0x54>
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    ba78:	f101 0610 	add.w	r6, r1, #16
	uint16_t handle_flags;
	uint16_t handle;
	uint8_t *data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;
	handle = node_rx->hdr.handle;
    ba7c:	88c5      	ldrh	r5, [r0, #6]

	switch (pdu_data->ll_id) {
	case PDU_DATA_LLID_DATA_CONTINUE:
	case PDU_DATA_LLID_DATA_START:
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    ba7e:	2104      	movs	r1, #4
    ba80:	4630      	mov	r0, r6
    ba82:	f000 fa6f 	bl	bf64 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ba86:	7a23      	ldrb	r3, [r4, #8]
    ba88:	f003 0303 	and.w	r3, r3, #3
    ba8c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    ba8e:	bf0c      	ite	eq
    ba90:	f445 5500 	orreq.w	r5, r5, #8192	; 0x2000
		} else {
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    ba94:	f445 5580 	orrne.w	r5, r5, #4096	; 0x1000
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
    ba98:	8005      	strh	r5, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    ba9a:	7a63      	ldrb	r3, [r4, #9]
    ba9c:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    ba9e:	7a61      	ldrb	r1, [r4, #9]
    baa0:	4630      	mov	r0, r6
    baa2:	f000 fa5f 	bl	bf64 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    baa6:	7a62      	ldrb	r2, [r4, #9]
    baa8:	f104 010b 	add.w	r1, r4, #11
	default:
		LL_ASSERT(0);
		break;
	}

}
    baac:	3704      	adds	r7, #4
    baae:	46bd      	mov	sp, r7
    bab0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
		}
		acl->handle = sys_cpu_to_le16(handle_flags);
		acl->len = sys_cpu_to_le16(pdu_data->len);
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    bab4:	f7f5 b9d3 	b.w	e5e <memcpy>
		break;

	default:
		LL_ASSERT(0);
    bab8:	4b08      	ldr	r3, [pc, #32]	; (badc <hci_acl_encode+0x78>)
    baba:	9301      	str	r3, [sp, #4]
    babc:	4b08      	ldr	r3, [pc, #32]	; (bae0 <hci_acl_encode+0x7c>)
    babe:	9300      	str	r3, [sp, #0]
    bac0:	4a08      	ldr	r2, [pc, #32]	; (bae4 <hci_acl_encode+0x80>)
    bac2:	4b09      	ldr	r3, [pc, #36]	; (bae8 <hci_acl_encode+0x84>)
    bac4:	4909      	ldr	r1, [pc, #36]	; (baec <hci_acl_encode+0x88>)
    bac6:	480a      	ldr	r0, [pc, #40]	; (baf0 <hci_acl_encode+0x8c>)
    bac8:	f7f5 fb70 	bl	11ac <printk>
    bacc:	2100      	movs	r1, #0
    bace:	4608      	mov	r0, r1
		break;
	}

}
    bad0:	3704      	adds	r7, #4
    bad2:	46bd      	mov	sp, r7
    bad4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		data = (void *)net_buf_add(buf, pdu_data->len);
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
		break;

	default:
		LL_ASSERT(0);
    bad8:	f000 bdba 	b.w	c650 <_SysFatalErrorHandler>
    badc:	0000dd4e 	.word	0x0000dd4e
    bae0:	0000dd53 	.word	0x0000dd53
    bae4:	0000dcfd 	.word	0x0000dcfd
    bae8:	0000f3e4 	.word	0x0000f3e4
    baec:	0000dd04 	.word	0x0000dd04
    baf0:	0000e191 	.word	0x0000e191

0000baf4 <hci_evt_encode>:
	}

}

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    baf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    baf6:	b087      	sub	sp, #28
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    baf8:	7903      	ldrb	r3, [r0, #4]
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
	uint8_t *b = (uint8_t *)node_rx;
	uint16_t handle;

	handle = node_rx->hdr.handle;
    bafa:	88c6      	ldrh	r6, [r0, #6]
{
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    bafc:	2b01      	cmp	r3, #1
	}

}

void hci_evt_encode(struct radio_pdu_node_rx *node_rx, struct net_buf *buf)
{
    bafe:	af04      	add	r7, sp, #16
    bb00:	4604      	mov	r4, r0
    bb02:	460d      	mov	r5, r1
	struct pdu_data *pdu_data;

	pdu_data = (struct pdu_data *)node_rx->pdu_data;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    bb04:	f000 80ae 	beq.w	bc64 <hci_evt_encode+0x170>
	uint8_t *b = (uint8_t *)node_rx;
	uint16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    bb08:	3b02      	subs	r3, #2
    bb0a:	2b05      	cmp	r3, #5
    bb0c:	f200 80a4 	bhi.w	bc58 <hci_evt_encode+0x164>
    bb10:	e8df f003 	tbb	[pc, r3]
    bb14:	74644303 	.word	0x74644303
    bb18:	9687      	.short	0x9687
}

static void le_advertising_report(struct pdu_data *pdu_data, uint8_t *b,
				  struct net_buf *buf)
{
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bb1a:	4bb4      	ldr	r3, [pc, #720]	; (bdec <hci_evt_encode+0x2f8>)
    bb1c:	6818      	ldr	r0, [r3, #0]
    bb1e:	889a      	ldrh	r2, [r3, #4]
    bb20:	799b      	ldrb	r3, [r3, #6]
    bb22:	71bb      	strb	r3, [r7, #6]
	struct bt_hci_ev_le_advertising_info *adv_info;
	uint8_t data_len;
	uint8_t *rssi;
	uint8_t info_len;

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    bb24:	7a23      	ldrb	r3, [r4, #8]
}

static void le_advertising_report(struct pdu_data *pdu_data, uint8_t *b,
				  struct net_buf *buf)
{
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bb26:	80ba      	strh	r2, [r7, #4]
	struct bt_hci_ev_le_advertising_info *adv_info;
	uint8_t data_len;
	uint8_t *rssi;
	uint8_t info_len;

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    bb28:	f003 030f 	and.w	r3, r3, #15
    bb2c:	2b01      	cmp	r3, #1
		data_len = (adv->len - BDADDR_SIZE);
    bb2e:	bf18      	it	ne
    bb30:	7a66      	ldrbne	r6, [r4, #9]
}

static void le_advertising_report(struct pdu_data *pdu_data, uint8_t *b,
				  struct net_buf *buf)
{
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    bb32:	6038      	str	r0, [r7, #0]
	uint8_t data_len;
	uint8_t *rssi;
	uint8_t info_len;

	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
		data_len = (adv->len - BDADDR_SIZE);
    bb34:	bf1d      	ittte	ne
    bb36:	f3c6 0605 	ubfxne	r6, r6, #0, #6
    bb3a:	3e06      	subne	r6, #6
    bb3c:	b2f6      	uxtbne	r6, r6
	} else {
		data_len = 0;
    bb3e:	2600      	moveq	r6, #0
	}

	info_len = sizeof(struct bt_hci_ev_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    bb40:	f106 020b 	add.w	r2, r6, #11
    bb44:	b2d2      	uxtb	r2, r2
    bb46:	2102      	movs	r1, #2
    bb48:	4628      	mov	r0, r5
    bb4a:	f7ff fcbf 	bl	b4cc <meta_evt>
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
    bb4e:	2301      	movs	r3, #1
    bb50:	7003      	strb	r3, [r0, #0]
	adv_info = (void *)(((uint8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    bb52:	7a23      	ldrb	r3, [r4, #8]
    bb54:	f107 0208 	add.w	r2, r7, #8
    bb58:	f003 030f 	and.w	r3, r3, #15
    bb5c:	4413      	add	r3, r2
		data_len = 0;
	}

	info_len = sizeof(struct bt_hci_ev_le_advertising_info) + data_len +
		   sizeof(*rssi);
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    bb5e:	4605      	mov	r5, r0
		       sizeof(*sep) + info_len);

	sep->num_reports = 1;
	adv_info = (void *)(((uint8_t *)sep) + sizeof(*sep));

	adv_info->evt_type = c_adv_type[adv->type];
    bb60:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    bb64:	7043      	strb	r3, [r0, #1]
	adv_info->addr.type = adv->tx_addr;
    bb66:	7a23      	ldrb	r3, [r4, #8]
    bb68:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bb6c:	7083      	strb	r3, [r0, #2]
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    bb6e:	f104 010b 	add.w	r1, r4, #11
    bb72:	2206      	movs	r2, #6
    bb74:	3003      	adds	r0, #3
    bb76:	f7f5 f972 	bl	e5e <memcpy>
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    bb7a:	350a      	adds	r5, #10
	adv_info->evt_type = c_adv_type[adv->type];
	adv_info->addr.type = adv->tx_addr;
	memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
	       sizeof(bt_addr_t));

	adv_info->length = data_len;
    bb7c:	f805 6c01 	strb.w	r6, [r5, #-1]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    bb80:	f104 0111 	add.w	r1, r4, #17
    bb84:	4632      	mov	r2, r6
    bb86:	4628      	mov	r0, r5
    bb88:	f7f5 f969 	bl	e5e <memcpy>
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
		  offsetof(struct pdu_adv, payload) + adv->len];
    bb8c:	7a63      	ldrb	r3, [r4, #9]

	adv_info->length = data_len;
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
	/* RSSI */
	rssi = &adv_info->data[0] + data_len;
	*rssi = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    bb8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bb92:	441c      	add	r4, r3
    bb94:	7ae3      	ldrb	r3, [r4, #11]
    bb96:	55ab      	strb	r3, [r5, r6]
    bb98:	e125      	b.n	bde6 <hci_evt_encode+0x2f2>
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    bb9a:	2212      	movs	r2, #18
    bb9c:	2101      	movs	r1, #1
    bb9e:	4628      	mov	r0, r5
    bba0:	f7ff fc94 	bl	b4cc <meta_evt>

	sep->status = radio_cc->status;
    bba4:	7ae3      	ldrb	r3, [r4, #11]
    bba6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bba8:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->role = radio_cc->role;
    bbac:	7b23      	ldrb	r3, [r4, #12]
    bbae:	70c3      	strb	r3, [r0, #3]
	sep->peer_addr.type = radio_cc->peer_addr_type;
    bbb0:	7b63      	ldrb	r3, [r4, #13]
    bbb2:	7103      	strb	r3, [r0, #4]
	struct bt_hci_evt_le_conn_complete *sep;
	struct radio_le_conn_cmplt *radio_cc;

	radio_cc = (struct radio_le_conn_cmplt *) (pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*sep));
    bbb4:	4605      	mov	r5, r0

	sep->status = radio_cc->status;
	sep->handle = sys_cpu_to_le16(handle);
	sep->role = radio_cc->role;
	sep->peer_addr.type = radio_cc->peer_addr_type;
	memcpy(&sep->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    bbb6:	2206      	movs	r2, #6
    bbb8:	f104 010e 	add.w	r1, r4, #14
    bbbc:	3005      	adds	r0, #5
    bbbe:	f7f5 f94e 	bl	e5e <memcpy>
	sep->interval = sys_cpu_to_le16(radio_cc->interval);
    bbc2:	8ba3      	ldrh	r3, [r4, #28]
    bbc4:	f8a5 300b 	strh.w	r3, [r5, #11]
	sep->latency = sys_cpu_to_le16(radio_cc->latency);
    bbc8:	8be3      	ldrh	r3, [r4, #30]
    bbca:	f8a5 300d 	strh.w	r3, [r5, #13]
	sep->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    bbce:	8c23      	ldrh	r3, [r4, #32]
    bbd0:	f8a5 300f 	strh.w	r3, [r5, #15]
	sep->clock_accuracy = radio_cc->mca;
    bbd4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    bbd8:	746b      	strb	r3, [r5, #17]
    bbda:	e104      	b.n	bde6 <hci_evt_encode+0x2f2>
static void disconn_complete(struct pdu_data *pdu_data, uint16_t handle,
			     struct net_buf *buf)
{
	struct bt_hci_evt_disconn_complete *ep;

	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    bbdc:	2204      	movs	r2, #4
    bbde:	2105      	movs	r1, #5
    bbe0:	4628      	mov	r0, r5
    bbe2:	f7ff fc33 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bbe6:	2104      	movs	r1, #4
    bbe8:	f105 0010 	add.w	r0, r5, #16
    bbec:	f000 f9ba 	bl	bf64 <net_buf_simple_add>

	ep->status = 0x00;
    bbf0:	2300      	movs	r3, #0
    bbf2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bbf4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    bbf8:	7a23      	ldrb	r3, [r4, #8]
    bbfa:	e066      	b.n	bcca <hci_evt_encode+0x1d6>
	struct radio_le_conn_update_cmplt *radio_cu;

	radio_cu = (struct radio_le_conn_update_cmplt *)
			(pdu_data->payload.lldata);

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    bbfc:	2209      	movs	r2, #9
    bbfe:	2103      	movs	r1, #3
    bc00:	4628      	mov	r0, r5
    bc02:	f7ff fc63 	bl	b4cc <meta_evt>

	sep->status = radio_cu->status;
    bc06:	7ae3      	ldrb	r3, [r4, #11]
    bc08:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bc0a:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    bc0e:	89a3      	ldrh	r3, [r4, #12]
    bc10:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    bc14:	89e3      	ldrh	r3, [r4, #14]
    bc16:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    bc1a:	8a23      	ldrh	r3, [r4, #16]
    bc1c:	f8a0 3007 	strh.w	r3, [r0, #7]
    bc20:	e0e1      	b.n	bde6 <hci_evt_encode+0x2f2>
static void enc_refresh_complete(struct pdu_data *pdu_data, uint16_t handle,
				 struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_key_refresh_complete *ep;

	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    bc22:	2203      	movs	r2, #3
    bc24:	2130      	movs	r1, #48	; 0x30
    bc26:	4628      	mov	r0, r5
    bc28:	f7ff fc10 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bc2c:	2103      	movs	r1, #3
    bc2e:	f105 0010 	add.w	r0, r5, #16
    bc32:	f000 f997 	bl	bf64 <net_buf_simple_add>

	ep->status = 0x00;
    bc36:	2300      	movs	r3, #0
    bc38:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bc3a:	f8a0 6001 	strh.w	r6, [r0, #1]
    bc3e:	e0d2      	b.n	bde6 <hci_evt_encode+0x2f2>
static void auth_payload_timeout_exp(struct pdu_data *pdu_data, uint16_t handle,
				     struct net_buf *buf)
{
	struct bt_hci_evt_auth_payload_timeout_exp *ep;

	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    bc40:	2202      	movs	r2, #2
    bc42:	2157      	movs	r1, #87	; 0x57
    bc44:	4628      	mov	r0, r5
    bc46:	f7ff fc01 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bc4a:	2102      	movs	r1, #2
    bc4c:	f105 0010 	add.w	r0, r5, #16
    bc50:	f000 f988 	bl	bf64 <net_buf_simple_add>

	ep->handle = sys_cpu_to_le16(handle);
    bc54:	8006      	strh	r6, [r0, #0]
    bc56:	e0c6      	b.n	bde6 <hci_evt_encode+0x2f2>
			pdu_data->payload.profile.max);
		return;
#endif /* CONFIG_BLUETOOTH_CONTROLLER_PROFILE_ISR */

	default:
		LL_ASSERT(0);
    bc58:	4b65      	ldr	r3, [pc, #404]	; (bdf0 <hci_evt_encode+0x2fc>)
    bc5a:	9301      	str	r3, [sp, #4]
    bc5c:	4b65      	ldr	r3, [pc, #404]	; (bdf4 <hci_evt_encode+0x300>)
    bc5e:	9300      	str	r3, [sp, #0]
    bc60:	4b65      	ldr	r3, [pc, #404]	; (bdf8 <hci_evt_encode+0x304>)
    bc62:	e0b3      	b.n	bdcc <hci_evt_encode+0x2d8>
static void encode_data_ctrl(struct radio_pdu_node_rx *node_rx,
			     struct pdu_data *pdu_data, struct net_buf *buf)
{
	uint16_t handle = node_rx->hdr.handle;

	switch (pdu_data->payload.llctrl.opcode) {
    bc64:	7ac3      	ldrb	r3, [r0, #11]
    bc66:	3b03      	subs	r3, #3
    bc68:	2b12      	cmp	r3, #18
    bc6a:	f200 80aa 	bhi.w	bdc2 <hci_evt_encode+0x2ce>
    bc6e:	e8df f003 	tbb	[pc, r3]
    bc72:	a80a      	.short	0xa80a
    bc74:	a8871da8 	.word	0xa8871da8
    bc78:	41a8a82e 	.word	0x41a8a82e
    bc7c:	a86aa858 	.word	0xa86aa858
    bc80:	78a8a8a8 	.word	0x78a8a8a8
    bc84:	78          	.byte	0x78
    bc85:	00          	.byte	0x00
static void le_ltk_request(struct pdu_data *pdu_data, uint16_t handle,
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    bc86:	220c      	movs	r2, #12
    bc88:	2105      	movs	r1, #5
    bc8a:	4628      	mov	r0, r5
    bc8c:	f7ff fc1e 	bl	b4cc <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    bc90:	2208      	movs	r2, #8
static void le_ltk_request(struct pdu_data *pdu_data, uint16_t handle,
				    struct net_buf *buf)
{
	struct bt_hci_evt_le_ltk_request *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    bc92:	4605      	mov	r5, r0

	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    bc94:	f104 010c 	add.w	r1, r4, #12
{
	struct bt_hci_evt_le_ltk_request *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
    bc98:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    bc9c:	f7f5 f8df 	bl	e5e <memcpy>
	       sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    bca0:	2202      	movs	r2, #2
    bca2:	f104 0114 	add.w	r1, r4, #20
    bca6:	f105 000a 	add.w	r0, r5, #10
    bcaa:	e01d      	b.n	bce8 <hci_evt_encode+0x1f4>
static void encrypt_change(uint8_t err, uint16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    bcac:	2204      	movs	r2, #4
    bcae:	2108      	movs	r1, #8
    bcb0:	4628      	mov	r0, r5
    bcb2:	f7ff fbcb 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bcb6:	2104      	movs	r1, #4
    bcb8:	f105 0010 	add.w	r0, r5, #16
    bcbc:	f000 f952 	bl	bf64 <net_buf_simple_add>

	ep->status = err;
    bcc0:	2300      	movs	r3, #0
    bcc2:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bcc4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    bcc8:	2301      	movs	r3, #1
    bcca:	70c3      	strb	r3, [r0, #3]
    bccc:	e08b      	b.n	bde6 <hci_evt_encode+0x2f2>
static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
	struct bt_hci_ev_le_remote_feat_complete *sep;

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    bcce:	220b      	movs	r2, #11
    bcd0:	2104      	movs	r1, #4
    bcd2:	4628      	mov	r0, r5
    bcd4:	f7ff fbfa 	bl	b4cc <meta_evt>

	sep->status = status;
    bcd8:	2300      	movs	r3, #0
    bcda:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bcdc:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
		memcpy(&sep->features[0],
    bce0:	2208      	movs	r2, #8
    bce2:	f104 010c 	add.w	r1, r4, #12
    bce6:	3003      	adds	r0, #3
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    bce8:	370c      	adds	r7, #12
    bcea:	46bd      	mov	sp, r7
    bcec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));

	sep->status = status;
	sep->handle = sys_cpu_to_le16(handle);
	if (!status) {
		memcpy(&sep->features[0],
    bcf0:	f7f5 b8b5 	b.w	e5e <memcpy>
static void remote_version_info(struct pdu_data *pdu_data, uint16_t handle,
				struct net_buf *buf)
{
	struct bt_hci_evt_remote_version_info *ep;

	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    bcf4:	2207      	movs	r2, #7
    bcf6:	210c      	movs	r1, #12
    bcf8:	4628      	mov	r0, r5
    bcfa:	f7ff fba7 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bcfe:	2107      	movs	r1, #7
    bd00:	f105 0010 	add.w	r0, r5, #16
    bd04:	f000 f92e 	bl	bf64 <net_buf_simple_add>

	ep->status = 0x00;
    bd08:	2300      	movs	r3, #0
    bd0a:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bd0c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
    bd10:	7b23      	ldrb	r3, [r4, #12]
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
    bd12:	70c3      	strb	r3, [r0, #3]
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
    bd14:	f8b4 300d 	ldrh.w	r3, [r4, #13]

	ep->status = 0x00;
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
    bd18:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
	      pdu_data->payload.llctrl.ctrldata.version_ind.sub_version_number;
    bd1a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
	ep->handle = sys_cpu_to_le16(handle);
	ep->version =
	      pdu_data->payload.llctrl.ctrldata.version_ind.version_number;
	ep->manufacturer =
		pdu_data->payload.llctrl.ctrldata.version_ind.company_id;
	ep->subversion =
    bd1e:	7183      	strb	r3, [r0, #6]
    bd20:	e061      	b.n	bde6 <hci_evt_encode+0x2f2>
	case PDU_DATA_LLCTRL_TYPE_VERSION_IND:
		remote_version_info(pdu_data, handle, buf);
		break;

	case PDU_DATA_LLCTRL_TYPE_REJECT_IND:
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    bd22:	7b04      	ldrb	r4, [r0, #12]
static void encrypt_change(uint8_t err, uint16_t handle,
			   struct net_buf *buf)
{
	struct bt_hci_evt_encrypt_change *ep;

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    bd24:	2204      	movs	r2, #4
    bd26:	2108      	movs	r1, #8
    bd28:	4628      	mov	r0, r5
    bd2a:	f7ff fb8f 	bl	b44c <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    bd2e:	2104      	movs	r1, #4
    bd30:	f105 0010 	add.w	r0, r5, #16
    bd34:	f000 f916 	bl	bf64 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    bd38:	fab4 f384 	clz	r3, r4
	struct bt_hci_evt_encrypt_change *ep;

	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
    bd3c:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    bd3e:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    bd42:	095b      	lsrs	r3, r3, #5
    bd44:	e7c1      	b.n	bcca <hci_evt_encode+0x1d6>
static void le_conn_param_req(struct pdu_data *pdu_data, uint16_t handle,
			      struct net_buf *buf)
{
	struct bt_hci_evt_le_conn_param_req *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    bd46:	220a      	movs	r2, #10
    bd48:	2106      	movs	r1, #6
    bd4a:	4628      	mov	r0, r5
    bd4c:	f7ff fbbe 	bl	b4cc <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    bd50:	8006      	strh	r6, [r0, #0]
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    bd52:	89a3      	ldrh	r3, [r4, #12]
	struct bt_hci_evt_le_conn_param_req *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
    bd54:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    bd56:	89e3      	ldrh	r3, [r4, #14]
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->interval_min =
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
	sep->interval_max =
    bd58:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    bd5a:	8a23      	ldrh	r3, [r4, #16]
    bd5c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    bd5e:	8a63      	ldrh	r3, [r4, #18]
    bd60:	e00c      	b.n	bd7c <hci_evt_encode+0x288>
static void le_data_len_change(struct pdu_data *pdu_data, uint16_t handle,
			       struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    bd62:	220a      	movs	r2, #10
    bd64:	2107      	movs	r1, #7
    bd66:	4628      	mov	r0, r5
    bd68:	f7ff fbb0 	bl	b4cc <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    bd6c:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    bd6e:	8a23      	ldrh	r3, [r4, #16]
	struct bt_hci_evt_le_data_len_change *sep;

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
    bd70:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    bd72:	8a63      	ldrh	r3, [r4, #18]
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));

	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
    bd74:	8083      	strh	r3, [r0, #4]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    bd76:	89a3      	ldrh	r3, [r4, #12]
	sep->handle = sys_cpu_to_le16(handle);
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
    bd78:	80c3      	strh	r3, [r0, #6]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    bd7a:	89e3      	ldrh	r3, [r4, #14]
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
	sep->max_rx_time =
    bd7c:	8103      	strh	r3, [r0, #8]
    bd7e:	e032      	b.n	bde6 <hci_evt_encode+0x2f2>
    bd80:	7b03      	ldrb	r3, [r0, #12]

static void le_unknown_rsp(struct pdu_data *pdu_data, uint16_t handle,
			   struct net_buf *buf)
{

	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    bd82:	2b0e      	cmp	r3, #14
    bd84:	d111      	bne.n	bdaa <hci_evt_encode+0x2b6>
static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
	struct bt_hci_ev_le_remote_feat_complete *sep;

	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    bd86:	220b      	movs	r2, #11
    bd88:	2104      	movs	r1, #4
    bd8a:	4628      	mov	r0, r5
    bd8c:	f7ff fb9e 	bl	b4cc <meta_evt>

	sep->status = status;
    bd90:	231a      	movs	r3, #26
    bd92:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    bd94:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    bd98:	2208      	movs	r2, #8
    bd9a:	2100      	movs	r1, #0
    bd9c:	3003      	adds	r0, #3
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    bd9e:	370c      	adds	r7, #12
    bda0:	46bd      	mov	sp, r7
    bda2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	if (!status) {
		memcpy(&sep->features[0],
		       &pdu_data->payload.llctrl.ctrldata.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    bda6:	f7f5 b887 	b.w	eb8 <memset>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
					    NULL, handle, buf);
		break;

	default:
		BT_WARN("type: 0x%02x",
    bdaa:	4a11      	ldr	r2, [pc, #68]	; (bdf0 <hci_evt_encode+0x2fc>)
    bdac:	9301      	str	r3, [sp, #4]
    bdae:	4b13      	ldr	r3, [pc, #76]	; (bdfc <hci_evt_encode+0x308>)
    bdb0:	9202      	str	r2, [sp, #8]
    bdb2:	9300      	str	r3, [sp, #0]
    bdb4:	4a12      	ldr	r2, [pc, #72]	; (be00 <hci_evt_encode+0x30c>)
    bdb6:	4b13      	ldr	r3, [pc, #76]	; (be04 <hci_evt_encode+0x310>)
    bdb8:	4913      	ldr	r1, [pc, #76]	; (be08 <hci_evt_encode+0x314>)
    bdba:	4814      	ldr	r0, [pc, #80]	; (be0c <hci_evt_encode+0x318>)
    bdbc:	f7f5 f9f6 	bl	11ac <printk>
    bdc0:	e011      	b.n	bde6 <hci_evt_encode+0x2f2>
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    bdc2:	4b0b      	ldr	r3, [pc, #44]	; (bdf0 <hci_evt_encode+0x2fc>)
    bdc4:	9301      	str	r3, [sp, #4]
    bdc6:	4b0b      	ldr	r3, [pc, #44]	; (bdf4 <hci_evt_encode+0x300>)
    bdc8:	9300      	str	r3, [sp, #0]
    bdca:	4b11      	ldr	r3, [pc, #68]	; (be10 <hci_evt_encode+0x31c>)
    bdcc:	4a11      	ldr	r2, [pc, #68]	; (be14 <hci_evt_encode+0x320>)
    bdce:	490e      	ldr	r1, [pc, #56]	; (be08 <hci_evt_encode+0x314>)
    bdd0:	4811      	ldr	r0, [pc, #68]	; (be18 <hci_evt_encode+0x324>)
    bdd2:	f7f5 f9eb 	bl	11ac <printk>
    bdd6:	2100      	movs	r1, #0
    bdd8:	4608      	mov	r0, r1
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    bdda:	370c      	adds	r7, #12
    bddc:	46bd      	mov	sp, r7
    bdde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	case PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP:
		le_unknown_rsp(pdu_data, handle, buf);
		break;

	default:
		LL_ASSERT(0);
    bde2:	f000 bc35 	b.w	c650 <_SysFatalErrorHandler>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
		encode_control(node_rx, pdu_data, buf);
	} else {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    bde6:	370c      	adds	r7, #12
    bde8:	46bd      	mov	sp, r7
    bdea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdec:	0000daac 	.word	0x0000daac
    bdf0:	0000dd4e 	.word	0x0000dd4e
    bdf4:	0000dd53 	.word	0x0000dd53
    bdf8:	0000f420 	.word	0x0000f420
    bdfc:	0000dea2 	.word	0x0000dea2
    be00:	0000de65 	.word	0x0000de65
    be04:	0000f411 	.word	0x0000f411
    be08:	0000dd04 	.word	0x0000dd04
    be0c:	0000edb0 	.word	0x0000edb0
    be10:	0000f3d3 	.word	0x0000f3d3
    be14:	0000dcfd 	.word	0x0000dcfd
    be18:	0000e191 	.word	0x0000e191

0000be1c <hci_num_cmplt_encode>:

void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    be1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be1e:	4606      	mov	r6, r0
    be20:	af00      	add	r7, sp, #0
    be22:	460d      	mov	r5, r1
    be24:	4614      	mov	r4, r2
	uint8_t len;

	num_handles = 1;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    be26:	2113      	movs	r1, #19
    be28:	2205      	movs	r2, #5
    be2a:	f7ff fb0f 	bl	b44c <evt_create>

	ep = net_buf_add(buf, len);
    be2e:	2105      	movs	r1, #5
    be30:	f106 0010 	add.w	r0, r6, #16
    be34:	f000 f896 	bl	bf64 <net_buf_simple_add>
	ep->num_handles = num_handles;
    be38:	2301      	movs	r3, #1
    be3a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    be3c:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    be40:	f8a0 4003 	strh.w	r4, [r0, #3]
    be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000be46 <hci_evt_is_discardable>:
}

bool hci_evt_is_discardable(struct radio_pdu_node_rx *node_rx)
{
    be46:	b580      	push	{r7, lr}
	switch (node_rx->hdr.type) {
    be48:	7900      	ldrb	r0, [r0, #4]
	case NODE_RX_TYPE_REPORT:
		return true;
	default:
		return false;
	}
}
    be4a:	1e83      	subs	r3, r0, #2
    be4c:	4258      	negs	r0, r3
	hc->handle = sys_cpu_to_le16(handle);
	hc->count = sys_cpu_to_le16(num);
}

bool hci_evt_is_discardable(struct radio_pdu_node_rx *node_rx)
{
    be4e:	af00      	add	r7, sp, #0
	case NODE_RX_TYPE_REPORT:
		return true;
	default:
		return false;
	}
}
    be50:	4158      	adcs	r0, r3
    be52:	bd80      	pop	{r7, pc}

0000be54 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, int32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, int32_t timeout)
#endif
{
    be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be56:	4604      	mov	r4, r0
    be58:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    be5a:	f04f 0320 	mov.w	r3, #32
    be5e:	f3ef 8511 	mrs	r5, BASEPRI
    be62:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
    be66:	89c3      	ldrh	r3, [r0, #14]
    be68:	b30b      	cbz	r3, beae <net_buf_alloc+0x5a>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
    be6a:	8982      	ldrh	r2, [r0, #12]
    be6c:	429a      	cmp	r2, r3
    be6e:	d906      	bls.n	be7e <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
    be70:	2100      	movs	r1, #0
    be72:	f000 ff45 	bl	cd00 <k_lifo_get>
			if (buf) {
    be76:	b110      	cbz	r0, be7e <net_buf_alloc+0x2a>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    be78:	f385 8811 	msr	BASEPRI, r5
    be7c:	e01c      	b.n	beb8 <net_buf_alloc+0x64>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
    be7e:	89e6      	ldrh	r6, [r4, #14]
    be80:	1e73      	subs	r3, r6, #1
    be82:	81e3      	strh	r3, [r4, #14]
    be84:	f385 8811 	msr	BASEPRI, r5
static inline struct net_buf *pool_get_uninit(struct net_buf_pool *pool,
					      uint16_t uninit_count)
{
	struct net_buf *buf;

	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
    be88:	8a21      	ldrh	r1, [r4, #16]
    be8a:	8a60      	ldrh	r0, [r4, #18]
    be8c:	89a2      	ldrh	r2, [r4, #12]
    be8e:	3003      	adds	r0, #3
    be90:	1ccb      	adds	r3, r1, #3
    be92:	f023 0303 	bic.w	r3, r3, #3
    be96:	f020 0003 	bic.w	r0, r0, #3
    be9a:	4418      	add	r0, r3
    be9c:	f100 0318 	add.w	r3, r0, #24
    bea0:	1b90      	subs	r0, r2, r6
    bea2:	69a2      	ldr	r2, [r4, #24]
    bea4:	fb00 2003 	mla	r0, r0, r3, r2

	buf->pool = pool;
    bea8:	60c4      	str	r4, [r0, #12]
	buf->size = pool->buf_size;
    beaa:	82c1      	strh	r1, [r0, #22]

		uninit_count = pool->uninit_count--;
		irq_unlock(key);

		buf = pool_get_uninit(pool, uninit_count);
		goto success;
    beac:	e004      	b.n	beb8 <net_buf_alloc+0x64>
    beae:	f385 8811 	msr	BASEPRI, r5
		}
	} else {
		buf = k_lifo_get(&pool->free, timeout);
	}
#else
	buf = k_lifo_get(&pool->free, timeout);
    beb2:	f000 ff25 	bl	cd00 <k_lifo_get>
#endif
	if (!buf) {
    beb6:	b140      	cbz	r0, beca <net_buf_alloc+0x76>
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
    beb8:	2301      	movs	r3, #1
    beba:	7203      	strb	r3, [r0, #8]
	buf->len   = 0;
	buf->data  = buf->__buf;
    bebc:	f100 0218 	add.w	r2, r0, #24

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
	buf->len   = 0;
    bec0:	2300      	movs	r3, #0
    bec2:	8283      	strh	r3, [r0, #20]
	buf->data  = buf->__buf;
    bec4:	6102      	str	r2, [r0, #16]
	buf->flags = 0;
    bec6:	7243      	strb	r3, [r0, #9]
	buf->frags = NULL;
    bec8:	6003      	str	r3, [r0, #0]

	return buf;
}
    beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000becc <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, int32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, int32_t timeout)
#endif
{
    becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bece:	af00      	add	r7, sp, #0
    bed0:	4606      	mov	r6, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
    bed2:	f000 fd6d 	bl	c9b0 <k_fifo_get>
	if (!buf) {
    bed6:	4605      	mov	r5, r0
    bed8:	b180      	cbz	r0, befc <net_buf_get+0x30>
    beda:	4604      	mov	r4, r0
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    bedc:	7a63      	ldrb	r3, [r4, #9]
    bede:	f013 0301 	ands.w	r3, r3, #1
    bee2:	d00a      	beq.n	befa <net_buf_get+0x2e>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    bee4:	2100      	movs	r1, #0
    bee6:	4630      	mov	r0, r6
    bee8:	f000 fd62 	bl	c9b0 <k_fifo_get>
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
    beec:	7a63      	ldrb	r3, [r4, #9]

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
    beee:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
    bef0:	f023 0301 	bic.w	r3, r3, #1
    bef4:	7263      	strb	r3, [r4, #9]
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
    bef6:	4604      	mov	r4, r0
    bef8:	e7f0      	b.n	bedc <net_buf_get+0x10>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
    befa:	6023      	str	r3, [r4, #0]

	return buf;
}
    befc:	4628      	mov	r0, r5
    befe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bf00 <net_buf_reserve>:

void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
    bf00:	b580      	push	{r7, lr}
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    bf02:	f100 0318 	add.w	r3, r0, #24
    bf06:	4419      	add	r1, r3

	return buf;
}

void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
    bf08:	af00      	add	r7, sp, #0
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
    bf0a:	6101      	str	r1, [r0, #16]
    bf0c:	bd80      	pop	{r7, pc}

0000bf0e <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    bf0e:	b490      	push	{r4, r7}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    bf10:	460a      	mov	r2, r1

	buf->data = buf->__buf + reserve;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
    bf12:	af00      	add	r7, sp, #0
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
    bf14:	6814      	ldr	r4, [r2, #0]
    bf16:	b12c      	cbz	r4, bf24 <net_buf_put+0x16>
		tail->flags |= NET_BUF_FRAGS;
    bf18:	7a53      	ldrb	r3, [r2, #9]
    bf1a:	f043 0301 	orr.w	r3, r3, #1
    bf1e:	7253      	strb	r3, [r2, #9]
    bf20:	4622      	mov	r2, r4
    bf22:	e7f7      	b.n	bf14 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
}
    bf24:	46bd      	mov	sp, r7
    bf26:	bc90      	pop	{r4, r7}

	for (tail = buf; tail->frags; tail = tail->frags) {
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
    bf28:	f000 bcf4 	b.w	c914 <k_fifo_put_list>

0000bf2c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    bf2c:	b598      	push	{r3, r4, r7, lr}
    bf2e:	4601      	mov	r1, r0
    bf30:	af00      	add	r7, sp, #0
	NET_BUF_ASSERT(buf);

	while (buf) {
    bf32:	b181      	cbz	r1, bf56 <net_buf_unref+0x2a>
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool %p frags %p", buf, buf->ref,
			    buf->pool, buf->frags);

		if (--buf->ref > 0) {
    bf34:	7a0b      	ldrb	r3, [r1, #8]
#endif
{
	NET_BUF_ASSERT(buf);

	while (buf) {
		struct net_buf *frags = buf->frags;
    bf36:	680c      	ldr	r4, [r1, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool %p frags %p", buf, buf->ref,
			    buf->pool, buf->frags);

		if (--buf->ref > 0) {
    bf38:	3b01      	subs	r3, #1
    bf3a:	b2db      	uxtb	r3, r3
    bf3c:	720b      	strb	r3, [r1, #8]
    bf3e:	b953      	cbnz	r3, bf56 <net_buf_unref+0x2a>
			return;
		}

		buf->frags = NULL;

		if (buf->pool->destroy) {
    bf40:	68c8      	ldr	r0, [r1, #12]

		if (--buf->ref > 0) {
			return;
		}

		buf->frags = NULL;
    bf42:	600b      	str	r3, [r1, #0]

		if (buf->pool->destroy) {
    bf44:	6943      	ldr	r3, [r0, #20]
    bf46:	b113      	cbz	r3, bf4e <net_buf_unref+0x22>
			buf->pool->destroy(buf);
    bf48:	4608      	mov	r0, r1
    bf4a:	4798      	blx	r3
    bf4c:	e001      	b.n	bf52 <net_buf_unref+0x26>
 *
 *  @param buf Buffer to destroy.
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	k_lifo_put(&buf->pool->free, buf);
    bf4e:	f000 fe5d 	bl	cc0c <k_lifo_put>
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
    bf52:	4621      	mov	r1, r4
    bf54:	e7ed      	b.n	bf32 <net_buf_unref+0x6>
    bf56:	bd98      	pop	{r3, r4, r7, pc}

0000bf58 <net_buf_ref>:
		buf = frags;
	}
}

struct net_buf *net_buf_ref(struct net_buf *buf)
{
    bf58:	b580      	push	{r7, lr}
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool %p",
		    buf, buf->ref, buf->pool);
	buf->ref++;
    bf5a:	7a03      	ldrb	r3, [r0, #8]
    bf5c:	3301      	adds	r3, #1
		buf = frags;
	}
}

struct net_buf *net_buf_ref(struct net_buf *buf)
{
    bf5e:	af00      	add	r7, sp, #0
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool %p",
		    buf, buf->ref, buf->pool);
	buf->ref++;
    bf60:	7203      	strb	r3, [r0, #8]
	return buf;
}
    bf62:	bd80      	pop	{r7, pc}

0000bf64 <net_buf_simple_add>:
#define NET_BUF_SIMPLE_INFO(fmt, ...)
#define NET_BUF_SIMPLE_ASSERT(cond)
#endif /* CONFIG_NET_BUF_SIMPLE_LOG */

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
    bf64:	b580      	push	{r7, lr}
 *
 *  @return Tail pointer for the buffer.
 */
static inline uint8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
    bf66:	8883      	ldrh	r3, [r0, #4]
    bf68:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    bf6a:	4419      	add	r1, r3
    bf6c:	8081      	strh	r1, [r0, #4]
#define NET_BUF_SIMPLE_INFO(fmt, ...)
#define NET_BUF_SIMPLE_ASSERT(cond)
#endif /* CONFIG_NET_BUF_SIMPLE_LOG */

void *net_buf_simple_add(struct net_buf_simple *buf, size_t len)
{
    bf6e:	af00      	add	r7, sp, #0

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
	return tail;
}
    bf70:	18d0      	adds	r0, r2, r3
    bf72:	bd80      	pop	{r7, pc}

0000bf74 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    bf74:	b4b0      	push	{r4, r5, r7}
    bf76:	8883      	ldrh	r3, [r0, #4]
    bf78:	6804      	ldr	r4, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    bf7a:	189d      	adds	r5, r3, r2
    bf7c:	8085      	strh	r5, [r0, #4]
	return tail;
}

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
    bf7e:	af00      	add	r7, sp, #0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    bf80:	18e0      	adds	r0, r4, r3
}
    bf82:	46bd      	mov	sp, r7
    bf84:	bcb0      	pop	{r4, r5, r7}
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
    bf86:	f7f4 bf6a 	b.w	e5e <memcpy>

0000bf8a <net_buf_simple_add_u8>:
}

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
    bf8a:	b590      	push	{r4, r7, lr}
    bf8c:	8883      	ldrh	r3, [r0, #4]
    bf8e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
    bf90:	1c5c      	adds	r4, r3, #1
    bf92:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
    bf94:	54d1      	strb	r1, [r2, r3]

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
    bf96:	af00      	add	r7, sp, #0

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;

	return u8;
}
    bf98:	18d0      	adds	r0, r2, r3
    bf9a:	bd90      	pop	{r4, r7, pc}

0000bf9c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    bf9c:	8883      	ldrh	r3, [r0, #4]

	*data = val;
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
    bf9e:	b580      	push	{r7, lr}
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
    bfa0:	1a5b      	subs	r3, r3, r1
    bfa2:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
    bfa4:	6803      	ldr	r3, [r0, #0]
    bfa6:	4419      	add	r1, r3
    bfa8:	6001      	str	r1, [r0, #0]

	*data = val;
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
    bfaa:	af00      	add	r7, sp, #0

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
	return buf->data += len;
}
    bfac:	4608      	mov	r0, r1
    bfae:	bd80      	pop	{r7, pc}

0000bfb0 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    bfb0:	b580      	push	{r7, lr}
	uint8_t val;

	val = buf->data[0];
    bfb2:	6803      	ldr	r3, [r0, #0]
	buf->len -= len;
	return buf->data += len;
}

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
    bfb4:	af00      	add	r7, sp, #0
	uint8_t val;

	val = buf->data[0];
	net_buf_simple_pull(buf, 1);
    bfb6:	2101      	movs	r1, #1

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
	uint8_t val;

	val = buf->data[0];
    bfb8:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
    bfba:	f7ff ffef 	bl	bf9c <net_buf_simple_pull>

	return val;
}
    bfbe:	4610      	mov	r0, r2
    bfc0:	bd80      	pop	{r7, pc}

0000bfc2 <net_buf_simple_headroom>:

	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
    bfc2:	b580      	push	{r7, lr}
	return buf->data - buf->__buf;
    bfc4:	f100 0308 	add.w	r3, r0, #8
    bfc8:	6800      	ldr	r0, [r0, #0]

	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
    bfca:	af00      	add	r7, sp, #0
	return buf->data - buf->__buf;
}
    bfcc:	1ac0      	subs	r0, r0, r3
    bfce:	bd80      	pop	{r7, pc}

0000bfd0 <ftpan_32>:

	return false;
}

static bool ftpan_36(void)
{
    bfd0:	b580      	push	{r7, lr}
	if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
    bfd2:	4b0d      	ldr	r3, [pc, #52]	; (c008 <ftpan_32+0x38>)
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	2b06      	cmp	r3, #6

	return false;
}

static bool ftpan_36(void)
{
    bfd8:	af00      	add	r7, sp, #0
	if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
    bfda:	d112      	bne.n	c002 <ftpan_32+0x32>
		(((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
    bfdc:	4b0b      	ldr	r3, [pc, #44]	; (c00c <ftpan_32+0x3c>)
	return false;
}

static bool ftpan_36(void)
{
	if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
    bfde:	6818      	ldr	r0, [r3, #0]
    bfe0:	f010 000f 	ands.w	r0, r0, #15
    bfe4:	d10d      	bne.n	c002 <ftpan_32+0x32>
		(((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    bfe6:	3304      	adds	r3, #4
    bfe8:	681b      	ldr	r3, [r3, #0]
    bfea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    bfee:	2b30      	cmp	r3, #48	; 0x30
    bff0:	d108      	bne.n	c004 <ftpan_32+0x34>
			(((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
    bff2:	4b07      	ldr	r3, [pc, #28]	; (c010 <ftpan_32+0x40>)

static bool ftpan_36(void)
{
	if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
		(((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
		if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
    bff4:	681b      	ldr	r3, [r3, #0]
    bff6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    bffa:	bf0c      	ite	eq
    bffc:	2001      	moveq	r0, #1
    bffe:	2000      	movne	r0, #0
    c000:	bd80      	pop	{r7, pc}
			(((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
    c002:	2000      	movs	r0, #0
}
    c004:	bd80      	pop	{r7, pc}
    c006:	bf00      	nop
    c008:	f0000fe0 	.word	0xf0000fe0
    c00c:	f0000fe4 	.word	0xf0000fe4
    c010:	f0000fec 	.word	0xf0000fec

0000c014 <nordicsemi_nrf52_init>:
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
}

static int nordicsemi_nrf52_init(struct device *arg)
{
    c014:	b598      	push	{r3, r4, r7, lr}
    c016:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    c018:	f04f 0320 	mov.w	r3, #32
    c01c:	f3ef 8411 	mrs	r4, BASEPRI
    c020:	f383 8811 	msr	BASEPRI, r3
 * @return N/A
 */

static inline void _scs_relocate_vector_table(void *new_addr)
{
	__scs.scb.vtor.val = ((uint32_t)new_addr & 0xffffff80);
    c024:	4a35      	ldr	r2, [pc, #212]	; (c0fc <nordicsemi_nrf52_init+0xe8>)
    c026:	2300      	movs	r3, #0
    c028:	f8c2 3d08 	str.w	r3, [r2, #3336]	; 0xd08
	__asm__ volatile(
    c02c:	f3bf 8f4f 	dsb	sy
    c030:	f3bf 8f6f 	isb	sy
{
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
    c034:	f7ff ffcc 	bl	bfd0 <ftpan_32>
    c038:	b120      	cbz	r0, c044 <nordicsemi_nrf52_init+0x30>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    c03a:	4931      	ldr	r1, [pc, #196]	; (c100 <nordicsemi_nrf52_init+0xec>)
    c03c:	68cb      	ldr	r3, [r1, #12]
    c03e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    c042:	60cb      	str	r3, [r1, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
    c044:	f7ff ffc4 	bl	bfd0 <ftpan_32>
    c048:	b110      	cbz	r0, c050 <nordicsemi_nrf52_init+0x3c>
		*(volatile uint32_t *)0x400005A0 = 0x3;
    c04a:	4b2e      	ldr	r3, [pc, #184]	; (c104 <nordicsemi_nrf52_init+0xf0>)
    c04c:	2103      	movs	r1, #3
    c04e:	6019      	str	r1, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
    c050:	f7ff ffbe 	bl	bfd0 <ftpan_32>
    c054:	b130      	cbz	r0, c064 <nordicsemi_nrf52_init+0x50>
		NRF_CLOCK->EVENTS_DONE = 0;
    c056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c05a:	2100      	movs	r1, #0
    c05c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
    c060:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
    c064:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c068:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    c06c:	2900      	cmp	r1, #0
    c06e:	db03      	blt.n	c078 <nordicsemi_nrf52_init+0x64>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
    c070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    c074:	2b00      	cmp	r3, #0
    c076:	da2f      	bge.n	c0d8 <nordicsemi_nrf52_init+0xc4>
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c078:	4b23      	ldr	r3, [pc, #140]	; (c108 <nordicsemi_nrf52_init+0xf4>)
    c07a:	2201      	movs	r2, #1
    c07c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c080:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    c084:	2a00      	cmp	r2, #0
    c086:	d0fb      	beq.n	c080 <nordicsemi_nrf52_init+0x6c>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
    c088:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    c08c:	2115      	movs	r1, #21
    c08e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c092:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    c096:	2a00      	cmp	r2, #0
    c098:	d0fb      	beq.n	c092 <nordicsemi_nrf52_init+0x7e>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
    c09a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c09e:	2215      	movs	r2, #21
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c0a0:	4919      	ldr	r1, [pc, #100]	; (c108 <nordicsemi_nrf52_init+0xf4>)
		}
		NRF_UICR->PSELRESET[0] = 21;
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
    c0a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c0a6:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    c0aa:	4b17      	ldr	r3, [pc, #92]	; (c108 <nordicsemi_nrf52_init+0xf4>)
    c0ac:	2a00      	cmp	r2, #0
    c0ae:	d0fa      	beq.n	c0a6 <nordicsemi_nrf52_init+0x92>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c0b0:	2200      	movs	r2, #0
    c0b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
    c0b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    c0ba:	2a00      	cmp	r2, #0
    c0bc:	d0fb      	beq.n	c0b6 <nordicsemi_nrf52_init+0xa2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c0be:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c0c2:	4912      	ldr	r1, [pc, #72]	; (c10c <nordicsemi_nrf52_init+0xf8>)
    c0c4:	4b12      	ldr	r3, [pc, #72]	; (c110 <nordicsemi_nrf52_init+0xfc>)
    c0c6:	68ca      	ldr	r2, [r1, #12]
    c0c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    c0cc:	4313      	orrs	r3, r2
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c0ce:	60cb      	str	r3, [r1, #12]
    c0d0:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    c0d4:	bf00      	nop
    c0d6:	e7fd      	b.n	c0d4 <nordicsemi_nrf52_init+0xc0>
 * @return 1 if so, 0 otherwise
 */

static inline void _ScbMemFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.mmfsr.val = 0xfe;
    c0d8:	23fe      	movs	r3, #254	; 0xfe
    c0da:	f882 3d28 	strb.w	r3, [r2, #3368]	; 0xd28
 * @return N/A
 */

static inline void _ScbBusFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.bfsr.val = 0xfe;
    c0de:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
 * @return N/A
 */

static inline void _ScbUsageFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.ufsr.val = 0xffff;
    c0e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0e6:	f8a2 3d2a 	strh.w	r3, [r2, #3370]	; 0xd2a
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultAllFaultsReset(void)
{
	return __scs.scb.hfsr.val = 0xffff;
    c0ea:	f8c2 3d2c 	str.w	r3, [r2, #3372]	; 0xd2c

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
    c0ee:	4b09      	ldr	r3, [pc, #36]	; (c114 <nordicsemi_nrf52_init+0x100>)
    c0f0:	4a09      	ldr	r2, [pc, #36]	; (c118 <nordicsemi_nrf52_init+0x104>)
    c0f2:	601a      	str	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c0f4:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    c0f8:	2000      	movs	r0, #0
    c0fa:	bd98      	pop	{r3, r4, r7, pc}
    c0fc:	e000e000 	.word	0xe000e000
    c100:	e000edf0 	.word	0xe000edf0
    c104:	400005a0 	.word	0x400005a0
    c108:	4001e000 	.word	0x4001e000
    c10c:	e000ed00 	.word	0xe000ed00
    c110:	05fa0004 	.word	0x05fa0004
    c114:	200002c0 	.word	0x200002c0
    c118:	03d09000 	.word	0x03d09000

0000c11c <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    c11c:	4805      	ldr	r0, [pc, #20]	; (c134 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    c11e:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
    c120:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
    c122:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
    c124:	d805      	bhi.n	c132 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    c126:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
    c128:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    c12a:	d002      	beq.n	c132 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    c12c:	4902      	ldr	r1, [pc, #8]	; (c138 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    c12e:	4a03      	ldr	r2, [pc, #12]	; (c13c <_EXIT_EXC+0xa>)
    str r2, [r1]
    c130:	600a      	str	r2, [r1, #0]

0000c132 <_EXIT_EXC>:
_ExcExitWithGdbStub:

_EXIT_EXC:
#endif /* CONFIG_PREEMPT_ENABLED */

    bx lr
    c132:	4770      	bx	lr
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    c134:	2000148c 	.word	0x2000148c
    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
    cmp r0, r1
    beq _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    c138:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    c13c:	10000000 	.word	0x10000000

0000c140 <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    c140:	b580      	push	{r7, lr}
#if defined(CONFIG_ARMV6_M)
	volatile uint32_t * const ipr = &__scs.nvic.ipr[_PRIO_IP_IDX(irq)];
	*ipr = ((*ipr & ~((uint32_t)0xff << _PRIO_BIT_SHIFT(irq))) |
		((uint32_t)prio << _PRIO_BIT_SHIFT(irq)));
#elif defined(CONFIG_ARMV7_M)
	__scs.nvic.ipr[irq] = prio;
    c142:	4805      	ldr	r0, [pc, #20]	; (c158 <_IntLibInit+0x18>)
    c144:	af00      	add	r7, sp, #0
	int irq = 0;
    c146:	2300      	movs	r3, #0
    c148:	2120      	movs	r1, #32
    c14a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    c14c:	3301      	adds	r3, #1
    c14e:	2b27      	cmp	r3, #39	; 0x27
    c150:	f882 1400 	strb.w	r1, [r2, #1024]	; 0x400
    c154:	d1f9      	bne.n	c14a <_IntLibInit+0xa>
		_NvicIrqPrioSet(irq, _EXC_IRQ_DEFAULT_PRIO);
	}
}
    c156:	bd80      	pop	{r7, pc}
    c158:	e000e000 	.word	0xe000e000

0000c15c <__pendsv>:
	pop {r0}
	mov lr, r0
#endif

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c15c:	490d      	ldr	r1, [pc, #52]	; (c194 <__pendsv+0x38>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c15e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in TCS in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c160:	480d      	ldr	r0, [pc, #52]	; (c198 <__pendsv+0x3c>)
    add r0, r2
    c162:	4410      	add	r0, r2

    /* save callee-saved + psp in TCS */
    mrs ip, PSP
    c164:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
    c168:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    c16c:	4f0b      	ldr	r7, [pc, #44]	; (c19c <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    c16e:	4e0c      	ldr	r6, [pc, #48]	; (c1a0 <__pendsv+0x44>)

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c170:	2020      	movs	r0, #32
    msr BASEPRI, r0
    c172:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
    c176:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    c178:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    c17a:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
    c17c:	6d90      	ldr	r0, [r2, #88]	; 0x58
    movs.n r3, #0
    c17e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    c180:	6593      	str	r3, [r2, #88]	; 0x58
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    c182:	f380 8811 	msr	BASEPRI, r0
    add r0, r2, #_thread_offset_to_preempt_float
    vldmia r0, {s16-s31}
#endif

    /* load callee-saved + psp from TCS */
    add r0, r2, #_thread_offset_to_callee_saved
    c186:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    c18a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
    c18e:	f38c 8809 	msr	PSP, ip

    /* exc return */
    bx lr
    c192:	4770      	bx	lr
	pop {r0}
	mov lr, r0
#endif

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    c194:	2000148c 	.word	0x2000148c
    ldr r2, [r1, #_kernel_offset_to_current]

    /* addr of callee-saved regs in TCS in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    c198:	00000028 	.word	0x00000028
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    c19c:	e000ed04 	.word	0xe000ed04
    ldr v3, =_SCS_ICSR_UNPENDSV
    c1a0:	08000000 	.word	0x08000000

0000c1a4 <__svc>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
    c1a4:	4040      	eors	r0, r0
    msr BASEPRI, r0
    c1a6:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    c1aa:	4902      	ldr	r1, [pc, #8]	; (c1b4 <__svc+0x10>)
    ldr r2, =_SCS_ICSR_PENDSV
    c1ac:	4a02      	ldr	r2, [pc, #8]	; (c1b8 <__svc+0x14>)
    str r2, [r1, #0]
    c1ae:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
    c1b0:	4770      	bx	lr
    c1b2:	0000      	.short	0x0000
     */
    eors.n r0, r0
    msr BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    c1b4:	e000ed04 	.word	0xe000ed04
    ldr r2, =_SCS_ICSR_PENDSV
    c1b8:	10000000 	.word	0x10000000

0000c1bc <_Swap>:
 *
 */

SECTION_FUNC(TEXT, _Swap)

    ldr r1, =_kernel
    c1bc:	4904      	ldr	r1, [pc, #16]	; (c1d0 <_Swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
    c1be:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
    c1c0:	6590      	str	r0, [r2, #88]	; 0x58

    /*
     * Set _Swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    c1c2:	4904      	ldr	r1, [pc, #16]	; (c1d4 <_Swap+0x18>)
    ldr r1, [r1]
    c1c4:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
    c1c6:	65d1      	str	r1, [r2, #92]	; 0x5c
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
    c1c8:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
    c1ca:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
    bx lr
    c1cc:	4770      	bx	lr
    c1ce:	0000      	.short	0x0000
 *
 */

SECTION_FUNC(TEXT, _Swap)

    ldr r1, =_kernel
    c1d0:	2000148c 	.word	0x2000148c

    /*
     * Set _Swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
    c1d4:	0000f8c0 	.word	0x0000f8c0

0000c1d8 <_FaultThreadShow.isra.2>:
 *
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
    c1d8:	b598      	push	{r3, r4, r7, lr}
    c1da:	af00      	add	r7, sp, #0
    c1dc:	4604      	mov	r4, r0
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    c1de:	f000 fff7 	bl	d1d0 <k_current_get>
    c1e2:	6822      	ldr	r2, [r4, #0]
    c1e4:	4601      	mov	r1, r0
    c1e6:	4803      	ldr	r0, [pc, #12]	; (c1f4 <_FaultThreadShow.isra.2+0x1c>)
	       "  Faulting instruction address:  0x%" PRIx32 "\n",
	       k_current_get(), esf->pc);
}
    c1e8:	46bd      	mov	sp, r7
    c1ea:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
	PR_EXC("  Executing thread ID (thread): %p\n"
    c1ee:	f7f4 bfdd 	b.w	11ac <printk>
    c1f2:	bf00      	nop
    c1f4:	0000f42f 	.word	0x0000f42f

0000c1f8 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
    c1f8:	b598      	push	{r3, r4, r7, lr}
    c1fa:	4604      	mov	r4, r0
    c1fc:	af00      	add	r7, sp, #0
	PR_EXC("***** USAGE FAULT *****\n");
    c1fe:	481b      	ldr	r0, [pc, #108]	; (c26c <_UsageFault+0x74>)
    c200:	f7f4 ffd4 	bl	11ac <printk>

	_FaultThreadShow(esf);
    c204:	f104 0018 	add.w	r0, r4, #24
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsDivByZero(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.divbyzero;
    c208:	4c19      	ldr	r4, [pc, #100]	; (c270 <_UsageFault+0x78>)
    c20a:	f7ff ffe5 	bl	c1d8 <_FaultThreadShow.isra.2>
    c20e:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a

	/* bits are sticky: they stack and must be reset */
	if (_ScbUsageFaultIsDivByZero()) {
    c212:	059a      	lsls	r2, r3, #22
    c214:	d502      	bpl.n	c21c <_UsageFault+0x24>
		PR_EXC("  Division by zero\n");
    c216:	4817      	ldr	r0, [pc, #92]	; (c274 <_UsageFault+0x7c>)
    c218:	f7f4 ffc8 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsUnaligned(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.unaligned;
    c21c:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsUnaligned()) {
    c220:	05db      	lsls	r3, r3, #23
    c222:	d502      	bpl.n	c22a <_UsageFault+0x32>
		PR_EXC("  Unaligned memory access\n");
    c224:	4814      	ldr	r0, [pc, #80]	; (c278 <_UsageFault+0x80>)
    c226:	f7f4 ffc1 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsNoCp(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.nocp;
    c22a:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsNoCp()) {
    c22e:	0718      	lsls	r0, r3, #28
    c230:	d502      	bpl.n	c238 <_UsageFault+0x40>
		PR_EXC("  No coprocessor instructions\n");
    c232:	4812      	ldr	r0, [pc, #72]	; (c27c <_UsageFault+0x84>)
    c234:	f7f4 ffba 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsInvalidPcLoad(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.invpc;
    c238:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsInvalidPcLoad()) {
    c23c:	0759      	lsls	r1, r3, #29
    c23e:	d502      	bpl.n	c246 <_UsageFault+0x4e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    c240:	480f      	ldr	r0, [pc, #60]	; (c280 <_UsageFault+0x88>)
    c242:	f7f4 ffb3 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsInvalidState(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.invstate;
    c246:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsInvalidState()) {
    c24a:	079a      	lsls	r2, r3, #30
    c24c:	d502      	bpl.n	c254 <_UsageFault+0x5c>
		PR_EXC("  Illegal use of the EPSR\n");
    c24e:	480d      	ldr	r0, [pc, #52]	; (c284 <_UsageFault+0x8c>)
    c250:	f7f4 ffac 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsUndefinedInstr(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.undefinstr;
    c254:	f8b4 3d2a 	ldrh.w	r3, [r4, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsUndefinedInstr()) {
    c258:	07db      	lsls	r3, r3, #31
    c25a:	d502      	bpl.n	c262 <_UsageFault+0x6a>
		PR_EXC("  Attempt to execute undefined instruction\n");
    c25c:	480a      	ldr	r0, [pc, #40]	; (c288 <_UsageFault+0x90>)
    c25e:	f7f4 ffa5 	bl	11ac <printk>
 * @return N/A
 */

static inline void _ScbUsageFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.ufsr.val = 0xffff;
    c262:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c266:	f8a4 3d2a 	strh.w	r3, [r4, #3370]	; 0xd2a
    c26a:	bd98      	pop	{r3, r4, r7, pc}
    c26c:	0000f479 	.word	0x0000f479
    c270:	e000e000 	.word	0xe000e000
    c274:	0000f492 	.word	0x0000f492
    c278:	0000f4a6 	.word	0x0000f4a6
    c27c:	0000f4c1 	.word	0x0000f4c1
    c280:	0000f4e0 	.word	0x0000f4e0
    c284:	0000f506 	.word	0x0000f506
    c288:	0000f521 	.word	0x0000f521

0000c28c <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c28e:	4604      	mov	r4, r0
    c290:	af00      	add	r7, sp, #0
	PR_EXC("***** MPU FAULT *****\n");
    c292:	481c      	ldr	r0, [pc, #112]	; (c304 <_MpuFault+0x78>)
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    c294:	460e      	mov	r6, r1
	PR_EXC("***** MPU FAULT *****\n");
    c296:	f7f4 ff89 	bl	11ac <printk>

	_FaultThreadShow(esf);
    c29a:	f104 0018 	add.w	r0, r4, #24
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsStacking(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.mstkerr;
    c29e:	4c1a      	ldr	r4, [pc, #104]	; (c308 <_MpuFault+0x7c>)
    c2a0:	f7ff ff9a 	bl	c1d8 <_FaultThreadShow.isra.2>
    c2a4:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28

	if (_ScbMemFaultIsStacking()) {
    c2a8:	06d9      	lsls	r1, r3, #27
    c2aa:	d501      	bpl.n	c2b0 <_MpuFault+0x24>
		PR_EXC("  Stacking error\n");
    c2ac:	4817      	ldr	r0, [pc, #92]	; (c30c <_MpuFault+0x80>)
    c2ae:	e023      	b.n	c2f8 <_MpuFault+0x6c>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsUnstacking(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.munstkerr;
    c2b0:	f894 5d28 	ldrb.w	r5, [r4, #3368]	; 0xd28
    c2b4:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	} else if (_ScbMemFaultIsUnstacking()) {
    c2b8:	b10d      	cbz	r5, c2be <_MpuFault+0x32>
		PR_EXC("  Unstacking error\n");
    c2ba:	4815      	ldr	r0, [pc, #84]	; (c310 <_MpuFault+0x84>)
    c2bc:	e01c      	b.n	c2f8 <_MpuFault+0x6c>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsDataAccessViolation(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.daccviol;
    c2be:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
	} else if (_ScbMemFaultIsDataAccessViolation()) {
    c2c2:	079a      	lsls	r2, r3, #30
    c2c4:	d513      	bpl.n	c2ee <_MpuFault+0x62>
		PR_EXC("  Data Access Violation\n");
    c2c6:	4813      	ldr	r0, [pc, #76]	; (c314 <_MpuFault+0x88>)
    c2c8:	f7f4 ff70 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsMmfarValid(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.mmarvalid;
    c2cc:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
		if (_ScbMemFaultIsMmfarValid()) {
    c2d0:	09db      	lsrs	r3, r3, #7
    c2d2:	d016      	beq.n	c302 <_MpuFault+0x76>
 * @return the faulting address
 */

static inline uint32_t _ScbMemFaultAddrGet(void)
{
	return __scs.scb.mmfar;
    c2d4:	f8d4 1d34 	ldr.w	r1, [r4, #3380]	; 0xd34
			PR_EXC("  Address: 0x%" PRIx32 "\n",
    c2d8:	480f      	ldr	r0, [pc, #60]	; (c318 <_MpuFault+0x8c>)
    c2da:	f7f4 ff67 	bl	11ac <printk>
			       _ScbMemFaultAddrGet());
			if (fromHardFault) {
    c2de:	b186      	cbz	r6, c302 <_MpuFault+0x76>
 * @return N/A
 */

static inline void _ScbMemFaultMmfarReset(void)
{
	__scs.scb.cfsr.byte.mmfsr.bit.mmarvalid = 0;
    c2e0:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
    c2e4:	f365 13c7 	bfi	r3, r5, #7, #1
    c2e8:	f884 3d28 	strb.w	r3, [r4, #3368]	; 0xd28
    c2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsInstrAccessViolation(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.iaccviol;
    c2ee:	f894 3d28 	ldrb.w	r3, [r4, #3368]	; 0xd28
				_ScbMemFaultMmfarReset();
			}
		}
	} else if (_ScbMemFaultIsInstrAccessViolation()) {
    c2f2:	07db      	lsls	r3, r3, #31
    c2f4:	d505      	bpl.n	c302 <_MpuFault+0x76>
		PR_EXC("  Instruction Access Violation\n");
    c2f6:	4809      	ldr	r0, [pc, #36]	; (c31c <_MpuFault+0x90>)
	}
}
    c2f8:	46bd      	mov	sp, r7
    c2fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			if (fromHardFault) {
				_ScbMemFaultMmfarReset();
			}
		}
	} else if (_ScbMemFaultIsInstrAccessViolation()) {
		PR_EXC("  Instruction Access Violation\n");
    c2fe:	f7f4 bf55 	b.w	11ac <printk>
    c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c304:	0000f54d 	.word	0x0000f54d
    c308:	e000e000 	.word	0xe000e000
    c30c:	0000f564 	.word	0x0000f564
    c310:	0000f576 	.word	0x0000f576
    c314:	0000f58a 	.word	0x0000f58a
    c318:	0000f5a3 	.word	0x0000f5a3
    c31c:	0000f5b4 	.word	0x0000f5b4

0000c320 <_BusFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
    c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c322:	4604      	mov	r4, r0
    c324:	af00      	add	r7, sp, #0
	PR_EXC("***** BUS FAULT *****\n");
    c326:	4822      	ldr	r0, [pc, #136]	; (c3b0 <_BusFault+0x90>)
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
    c328:	460e      	mov	r6, r1
	PR_EXC("***** BUS FAULT *****\n");
    c32a:	f7f4 ff3f 	bl	11ac <printk>

	_FaultThreadShow(esf);
    c32e:	f104 0018 	add.w	r0, r4, #24
    c332:	f7ff ff51 	bl	c1d8 <_FaultThreadShow.isra.2>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsStacking(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.stkerr;
    c336:	4b1f      	ldr	r3, [pc, #124]	; (c3b4 <_BusFault+0x94>)
    c338:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29

	if (_ScbBusFaultIsStacking()) {
    c33c:	f012 0f10 	tst.w	r2, #16
    c340:	461c      	mov	r4, r3
    c342:	d001      	beq.n	c348 <_BusFault+0x28>
		PR_EXC("  Stacking error\n");
    c344:	481c      	ldr	r0, [pc, #112]	; (c3b8 <_BusFault+0x98>)
    c346:	e02c      	b.n	c3a2 <_BusFault+0x82>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsUnstacking(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.unstkerr;
    c348:	f893 5d29 	ldrb.w	r5, [r3, #3369]	; 0xd29
    c34c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	} else if (_ScbBusFaultIsUnstacking()) {
    c350:	b10d      	cbz	r5, c356 <_BusFault+0x36>
		PR_EXC("  Unstacking error\n");
    c352:	481a      	ldr	r0, [pc, #104]	; (c3bc <_BusFault+0x9c>)
    c354:	e025      	b.n	c3a2 <_BusFault+0x82>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsPrecise(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.preciserr;
    c356:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
	} else if (_ScbBusFaultIsPrecise()) {
    c35a:	0790      	lsls	r0, r2, #30
    c35c:	d518      	bpl.n	c390 <_BusFault+0x70>
		PR_EXC("  Precise data bus error\n");
    c35e:	4818      	ldr	r0, [pc, #96]	; (c3c0 <_BusFault+0xa0>)
    c360:	f7f4 ff24 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsBfarValid(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.bfarvalid;
    c364:	f894 3d29 	ldrb.w	r3, [r4, #3369]	; 0xd29
		if (_ScbBusFaultIsBfarValid()) {
    c368:	09db      	lsrs	r3, r3, #7
    c36a:	d00b      	beq.n	c384 <_BusFault+0x64>
 * @return the faulting address
 */

static inline uint32_t _ScbBusFaultAddrGet(void)
{
	return __scs.scb.bfar;
    c36c:	f8d4 1d38 	ldr.w	r1, [r4, #3384]	; 0xd38
			PR_EXC("  Address: 0x%" PRIx32 "\n",
    c370:	4814      	ldr	r0, [pc, #80]	; (c3c4 <_BusFault+0xa4>)
    c372:	f7f4 ff1b 	bl	11ac <printk>
			       _ScbBusFaultAddrGet());
			if (fromHardFault) {
    c376:	b12e      	cbz	r6, c384 <_BusFault+0x64>
 * @return N/A
 */

static inline void _ScbBusFaultBfarReset(void)
{
	__scs.scb.cfsr.byte.bfsr.bit.bfarvalid = 0;
    c378:	f894 3d29 	ldrb.w	r3, [r4, #3369]	; 0xd29
    c37c:	f365 13c7 	bfi	r3, r5, #7, #1
    c380:	f884 3d29 	strb.w	r3, [r4, #3369]	; 0xd29
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsImprecise(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.impreciserr;
    c384:	f894 3d29 	ldrb.w	r3, [r4, #3369]	; 0xd29
				_ScbBusFaultBfarReset();
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (_ScbBusFaultIsImprecise()) {
    c388:	0759      	lsls	r1, r3, #29
    c38a:	d50f      	bpl.n	c3ac <_BusFault+0x8c>
			PR_EXC("  Imprecise data bus error\n");
    c38c:	480e      	ldr	r0, [pc, #56]	; (c3c8 <_BusFault+0xa8>)
    c38e:	e008      	b.n	c3a2 <_BusFault+0x82>
    c390:	f893 2d29 	ldrb.w	r2, [r3, #3369]	; 0xd29
		}
	} else if (_ScbBusFaultIsImprecise()) {
    c394:	0752      	lsls	r2, r2, #29
    c396:	d4f9      	bmi.n	c38c <_BusFault+0x6c>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsInstrBusErr(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.ibuserr;
    c398:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
		PR_EXC("  Imprecise data bus error\n");
	} else if (_ScbBusFaultIsInstrBusErr()) {
    c39c:	07db      	lsls	r3, r3, #31
    c39e:	d505      	bpl.n	c3ac <_BusFault+0x8c>
		PR_EXC("  Instruction bus error\n");
    c3a0:	480a      	ldr	r0, [pc, #40]	; (c3cc <_BusFault+0xac>)
	}
}
    c3a2:	46bd      	mov	sp, r7
    c3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			PR_EXC("  Imprecise data bus error\n");
		}
	} else if (_ScbBusFaultIsImprecise()) {
		PR_EXC("  Imprecise data bus error\n");
	} else if (_ScbBusFaultIsInstrBusErr()) {
		PR_EXC("  Instruction bus error\n");
    c3a8:	f7f4 bf00 	b.w	11ac <printk>
    c3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3ae:	bf00      	nop
    c3b0:	0000f5d4 	.word	0x0000f5d4
    c3b4:	e000e000 	.word	0xe000e000
    c3b8:	0000f564 	.word	0x0000f564
    c3bc:	0000f576 	.word	0x0000f576
    c3c0:	0000f5eb 	.word	0x0000f5eb
    c3c4:	0000f5a3 	.word	0x0000f5a3
    c3c8:	0000f605 	.word	0x0000f605
    c3cc:	0000f621 	.word	0x0000f621

0000c3d0 <_Fault>:
 *            state the exception was taken.
 *
 * @return This function does not return.
 */
void _Fault(const NANO_ESF *esf)
{
    c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @return the currently executing vector number, 0 if in thread mode.
 */

static inline uint32_t _ScbActiveVectorGet(void)
{
	return __scs.scb.icsr.bit.vectactive;
    c3d2:	4a2a      	ldr	r2, [pc, #168]	; (c47c <_Fault+0xac>)
    c3d4:	f8d2 3d04 	ldr.w	r3, [r2, #3332]	; 0xd04
    c3d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
    c3dc:	1ed9      	subs	r1, r3, #3
 *            state the exception was taken.
 *
 * @return This function does not return.
 */
void _Fault(const NANO_ESF *esf)
{
    c3de:	af00      	add	r7, sp, #0
    c3e0:	4604      	mov	r4, r0
    c3e2:	4616      	mov	r6, r2
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
	switch (fault) {
    c3e4:	2909      	cmp	r1, #9
    c3e6:	d838      	bhi.n	c45a <_Fault+0x8a>
    c3e8:	e8df f001 	tbb	[pc, r1]
    c3ec:	2f2a2505 	.word	0x2f2a2505
    c3f0:	37373737 	.word	0x37373737
    c3f4:	3337      	.short	0x3337
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
	PR_EXC("***** HARD FAULT *****\n");
    c3f6:	4822      	ldr	r0, [pc, #136]	; (c480 <_Fault+0xb0>)
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultIsBusErrOnVectorRead(void)
{
	return __scs.scb.hfsr.bit.vecttbl;
    c3f8:	4d20      	ldr	r5, [pc, #128]	; (c47c <_Fault+0xac>)
    c3fa:	f7f4 fed7 	bl	11ac <printk>
    c3fe:	f8d6 3d2c 	ldr.w	r3, [r6, #3372]	; 0xd2c

#if defined(CONFIG_ARMV6_M)
	_FaultThreadShow(esf);
#elif defined(CONFIG_ARMV7_M)
	if (_ScbHardFaultIsBusErrOnVectorRead()) {
    c402:	079a      	lsls	r2, r3, #30
    c404:	d501      	bpl.n	c40a <_Fault+0x3a>
		PR_EXC("  Bus fault on vector table read\n");
    c406:	481f      	ldr	r0, [pc, #124]	; (c484 <_Fault+0xb4>)
    c408:	e024      	b.n	c454 <_Fault+0x84>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultIsForced(void)
{
	return __scs.scb.hfsr.bit.forced;
    c40a:	f8d5 3d2c 	ldr.w	r3, [r5, #3372]	; 0xd2c
	} else if (_ScbHardFaultIsForced()) {
    c40e:	005b      	lsls	r3, r3, #1
    c410:	d52d      	bpl.n	c46e <_Fault+0x9e>
		PR_EXC("  Fault escalation (see below)\n");
    c412:	481d      	ldr	r0, [pc, #116]	; (c488 <_Fault+0xb8>)
    c414:	f7f4 feca 	bl	11ac <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsMemFault(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.val;
    c418:	f895 3d28 	ldrb.w	r3, [r5, #3368]	; 0xd28
		if (_ScbIsMemFault()) {
    c41c:	b10b      	cbz	r3, c422 <_Fault+0x52>
			_MpuFault(esf, 1);
    c41e:	2101      	movs	r1, #1
    c420:	e00a      	b.n	c438 <_Fault+0x68>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsBusFault(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.val;
    c422:	f895 3d29 	ldrb.w	r3, [r5, #3369]	; 0xd29
		} else if (_ScbIsBusFault()) {
    c426:	b10b      	cbz	r3, c42c <_Fault+0x5c>
			_BusFault(esf, 1);
    c428:	2101      	movs	r1, #1
    c42a:	e00a      	b.n	c442 <_Fault+0x72>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsUsageFault(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.val;
    c42c:	f8b5 3d2a 	ldrh.w	r3, [r5, #3370]	; 0xd2a
    c430:	b29b      	uxth	r3, r3
		} else if (_ScbIsUsageFault()) {
    c432:	b1e3      	cbz	r3, c46e <_Fault+0x9e>
    c434:	e009      	b.n	c44a <_Fault+0x7a>
		_HardFault(esf);
		break;
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
    c436:	2100      	movs	r1, #0
    c438:	4620      	mov	r0, r4
    c43a:	f7ff ff27 	bl	c28c <_MpuFault>
    c43e:	e016      	b.n	c46e <_Fault+0x9e>
		break;
	case 5:
		_BusFault(esf, 0);
    c440:	2100      	movs	r1, #0
    c442:	4620      	mov	r0, r4
    c444:	f7ff ff6c 	bl	c320 <_BusFault>
    c448:	e011      	b.n	c46e <_Fault+0x9e>
		break;
	case 6:
		_UsageFault(esf);
    c44a:	4620      	mov	r0, r4
    c44c:	f7ff fed4 	bl	c1f8 <_UsageFault>
    c450:	e00d      	b.n	c46e <_Fault+0x9e>
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    c452:	480e      	ldr	r0, [pc, #56]	; (c48c <_Fault+0xbc>)
    c454:	f7f4 feaa 	bl	11ac <printk>
    c458:	e009      	b.n	c46e <_Fault+0x9e>
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
    c45a:	480d      	ldr	r0, [pc, #52]	; (c490 <_Fault+0xc0>)
    c45c:	490d      	ldr	r1, [pc, #52]	; (c494 <_Fault+0xc4>)
    c45e:	f1a3 0210 	sub.w	r2, r3, #16
    c462:	2b0f      	cmp	r3, #15
    c464:	bfd8      	it	le
    c466:	4601      	movle	r1, r0
    c468:	480b      	ldr	r0, [pc, #44]	; (c498 <_Fault+0xc8>)
    c46a:	f7f4 fe9f 	bl	11ac <printk>
{
	int fault = _ScbActiveVectorGet();

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    c46e:	4621      	mov	r1, r4
    c470:	2000      	movs	r0, #0
}
    c472:	46bd      	mov	sp, r7
    c474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
{
	int fault = _ScbActiveVectorGet();

	FAULT_DUMP(esf, fault);

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    c478:	f000 b8ea 	b.w	c650 <_SysFatalErrorHandler>
    c47c:	e000e000 	.word	0xe000e000
    c480:	0000f668 	.word	0x0000f668
    c484:	0000f680 	.word	0x0000f680
    c488:	0000f6a2 	.word	0x0000f6a2
    c48c:	0000f6c2 	.word	0x0000f6c2
    c490:	0000f63a 	.word	0x0000f63a
    c494:	0000f64f 	.word	0x0000f64f
    c498:	0000f6f9 	.word	0x0000f6f9

0000c49c <_FaultInit>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void _FaultInit(void)
{
    c49c:	b580      	push	{r7, lr}
 * @return N/A
 */

static inline void _ScbDivByZeroFaultEnable(void)
{
	__scs.scb.ccr.bit.div_0_trp = 1;
    c49e:	4a04      	ldr	r2, [pc, #16]	; (c4b0 <_FaultInit+0x14>)
    c4a0:	f8d2 3d14 	ldr.w	r3, [r2, #3348]	; 0xd14
    c4a4:	f043 0310 	orr.w	r3, r3, #16
    c4a8:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
    c4ac:	af00      	add	r7, sp, #0
    c4ae:	bd80      	pop	{r7, pc}
    c4b0:	e000e000 	.word	0xe000e000

0000c4b4 <_arch_irq_enable>:
 * the specified <irq>.
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
    c4b4:	b580      	push	{r7, lr}
 * @return N/A
 */

static inline void _NvicIrqEnable(unsigned int irq)
{
	__scs.nvic.iser[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
    c4b6:	0943      	lsrs	r3, r0, #5
    c4b8:	2201      	movs	r2, #1
    c4ba:	f000 001f 	and.w	r0, r0, #31
    c4be:	fa02 f000 	lsl.w	r0, r2, r0
    c4c2:	3340      	adds	r3, #64	; 0x40
    c4c4:	4a02      	ldr	r2, [pc, #8]	; (c4d0 <_arch_irq_enable+0x1c>)
    c4c6:	af00      	add	r7, sp, #0
    c4c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    c4cc:	bd80      	pop	{r7, pc}
    c4ce:	bf00      	nop
    c4d0:	e000e000 	.word	0xe000e000

0000c4d4 <_arch_irq_disable>:
 * interrupts for the specified <irq>.
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
    c4d4:	b580      	push	{r7, lr}
 * @return N/A
 */

static inline void _NvicIrqDisable(unsigned int irq)
{
	__scs.nvic.icer[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
    c4d6:	0943      	lsrs	r3, r0, #5
    c4d8:	2201      	movs	r2, #1
    c4da:	f000 001f 	and.w	r0, r0, #31
    c4de:	fa02 f000 	lsl.w	r0, r2, r0
    c4e2:	3360      	adds	r3, #96	; 0x60
    c4e4:	4a02      	ldr	r2, [pc, #8]	; (c4f0 <_arch_irq_disable+0x1c>)
    c4e6:	af00      	add	r7, sp, #0
    c4e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    c4ec:	bd80      	pop	{r7, pc}
    c4ee:	bf00      	nop
    c4f0:	e000e000 	.word	0xe000e000

0000c4f4 <_arch_irq_is_enabled>:
 *
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
    c4f4:	b580      	push	{r7, lr}
 * @return 1 if IRQ is enabled, 0 otherwise
 */

static inline int _NvicIsIrqEnabled(unsigned int irq)
{
	return __scs.nvic.iser[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
    c4f6:	0943      	lsrs	r3, r0, #5
    c4f8:	3340      	adds	r3, #64	; 0x40
    c4fa:	4a05      	ldr	r2, [pc, #20]	; (c510 <_arch_irq_is_enabled+0x1c>)
	return _NvicIsIrqEnabled(irq);
    c4fc:	f000 001f 	and.w	r0, r0, #31
    c500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c504:	2301      	movs	r3, #1
    c506:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
    c50a:	af00      	add	r7, sp, #0
	return _NvicIsIrqEnabled(irq);
}
    c50c:	4010      	ands	r0, r2
    c50e:	bd80      	pop	{r7, pc}
    c510:	e000e000 	.word	0xe000e000

0000c514 <_irq_priority_set>:
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    c514:	b580      	push	{r7, lr}
#if defined(CONFIG_ARMV6_M)
	volatile uint32_t * const ipr = &__scs.nvic.ipr[_PRIO_IP_IDX(irq)];
	*ipr = ((*ipr & ~((uint32_t)0xff << _PRIO_BIT_SHIFT(irq))) |
		((uint32_t)prio << _PRIO_BIT_SHIFT(irq)));
#elif defined(CONFIG_ARMV7_M)
	__scs.nvic.ipr[irq] = prio;
    c516:	4b04      	ldr	r3, [pc, #16]	; (c528 <_irq_priority_set+0x14>)
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	_NvicIrqPrioSet(irq, _EXC_PRIO(prio));
    c518:	3101      	adds	r1, #1
    c51a:	0149      	lsls	r1, r1, #5
    c51c:	4418      	add	r0, r3
    c51e:	b2c9      	uxtb	r1, r1
    c520:	f880 1400 	strb.w	r1, [r0, #1024]	; 0x400
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    c524:	af00      	add	r7, sp, #0
    c526:	bd80      	pop	{r7, pc}
    c528:	e000e000 	.word	0xe000e000

0000c52c <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    c52c:	b480      	push	{r7}
    c52e:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);
	__reserved();
}
    c530:	46bd      	mov	sp, r7
    c532:	bc80      	pop	{r7}
 * @return N/A
 */
void _irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	__reserved();
    c534:	f000 b834 	b.w	c5a0 <__bus_fault>

0000c538 <_new_thread>:

void _new_thread(char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
    c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(pStackMem, 0xaa, stackSize);
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    c53a:	4401      	add	r1, r0
    c53c:	f021 0107 	bic.w	r1, r1, #7

void _new_thread(char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
    c540:	af00      	add	r7, sp, #0
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (uint32_t)pEntry;
	pInitCtx->a2 = (uint32_t)parameter1;
    c542:	f841 3c1c 	str.w	r3, [r1, #-28]
	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
    c546:	4e0f      	ldr	r6, [pc, #60]	; (c584 <_new_thread+0x4c>)
	pInitCtx->a1 = (uint32_t)pEntry;
	pInitCtx->a2 = (uint32_t)parameter1;
	pInitCtx->a3 = (uint32_t)parameter2;
    c548:	69bb      	ldr	r3, [r7, #24]
    c54a:	f841 3c18 	str.w	r3, [r1, #-24]
	pInitCtx->a4 = (uint32_t)parameter3;
    c54e:	69fb      	ldr	r3, [r7, #28]
    c550:	f841 3c14 	str.w	r3, [r1, #-20]
	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
    c554:	f026 0601 	bic.w	r6, r6, #1
	pInitCtx->a1 = (uint32_t)pEntry;
	pInitCtx->a2 = (uint32_t)parameter1;
	pInitCtx->a3 = (uint32_t)parameter2;
	pInitCtx->a4 = (uint32_t)parameter3;
	pInitCtx->xpsr =
    c558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

void _new_thread(char *pStackMem, size_t stackSize,
		 _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
    c55c:	4605      	mov	r5, r0

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
	pInitCtx->a1 = (uint32_t)pEntry;
    c55e:	f841 2c20 	str.w	r2, [r1, #-32]
	pInitCtx->a2 = (uint32_t)parameter1;
	pInitCtx->a3 = (uint32_t)parameter2;
	pInitCtx->a4 = (uint32_t)parameter3;
	pInitCtx->xpsr =
    c562:	f841 3c04 	str.w	r3, [r1, #-4]
	memset(pStackMem, 0xaa, stackSize);
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    c566:	f1a1 0420 	sub.w	r4, r1, #32
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
    c56a:	f841 6c08 	str.w	r6, [r1, #-8]
	pInitCtx->a3 = (uint32_t)parameter2;
	pInitCtx->a4 = (uint32_t)parameter3;
	pInitCtx->xpsr =
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	_init_thread_base(&tcs->base, priority, K_PRESTART, options);
    c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c570:	6a39      	ldr	r1, [r7, #32]
    c572:	2204      	movs	r2, #4
    c574:	f001 f9f6 	bl	d964 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	tcs->init_data = NULL;
    c578:	2300      	movs	r3, #0
    c57a:	64eb      	str	r3, [r5, #76]	; 0x4c
	tcs->fn_abort = NULL;
    c57c:	652b      	str	r3, [r5, #80]	; 0x50
	 * and the corresponding parameters.
	 */
	tcs->entry = (struct __thread_entry *)(pInitCtx);
#endif

	tcs->callee_saved.psp = (uint32_t)pInitCtx;
    c57e:	64ac      	str	r4, [r5, #72]	; 0x48
	tcs->arch.basepri = 0;
    c580:	65ab      	str	r3, [r5, #88]	; 0x58
    c582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c584:	0000d799 	.word	0x0000d799

0000c588 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    c588:	4901      	ldr	r1, [pc, #4]	; (c590 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    c58a:	2210      	movs	r2, #16
	str r2, [r1]
    c58c:	600a      	str	r2, [r1, #0]
	bx lr
    c58e:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
    c590:	e000ed10 	.word	0xe000ed10

0000c594 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    c594:	4040      	eors	r0, r0
	msr BASEPRI, r0
    c596:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
    c59a:	bf30      	wfi

	bx lr
    c59c:	4770      	bx	lr
    c59e:	bf00      	nop

0000c5a0 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
    c5a0:	4040      	eors	r0, r0
	msr BASEPRI, r0
    c5a2:	f380 8811 	msr	BASEPRI, r0

	/* this reimplements _ScbIsNestedExc() */
	ldr ip, =_SCS_ICSR
    c5a6:	f8df c01c 	ldr.w	ip, [pc, #28]	; c5c4 <__bus_fault+0x24>
	ldr ip, [ip]
    c5aa:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
    c5ae:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    c5b2:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
    c5b4:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
    c5b8:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
    c5bc:	b500      	push	{lr}
	bl _Fault
    c5be:	f7ff ff07 	bl	c3d0 <_Fault>

	pop {pc}
    c5c2:	bd00      	pop	{pc}
	/* force unlock interrupts */
	eors.n r0, r0
	msr BASEPRI, r0

	/* this reimplements _ScbIsNestedExc() */
	ldr ip, =_SCS_ICSR
    c5c4:	e000ed04 	.word	0xe000ed04

0000c5c8 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
    c5c8:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    c5ca:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c5cc:	4a0b      	ldr	r2, [pc, #44]	; (c5fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    c5ce:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    c5d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
    c5d2:	bf1e      	ittt	ne
	movne	r1, #0
    c5d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    c5d6:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
    c5d8:	f000 fa10 	blne	c9fc <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    c5dc:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
    c5de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
    c5e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    c5e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    c5ea:	4905      	ldr	r1, [pc, #20]	; (c600 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    c5ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    c5ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    c5f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
    c5f2:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
    c5f6:	f7ff bd91 	b.w	c11c <_ExcExit>
    c5fa:	0000      	.short	0x0000
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    c5fc:	2000148c 	.word	0x2000148c
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
    c600:	000000dc 	.word	0x000000dc

0000c604 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    c604:	b580      	push	{r7, lr}
	switch (reason) {
    c606:	2801      	cmp	r0, #1
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    c608:	af00      	add	r7, sp, #0
    c60a:	4604      	mov	r4, r0
    c60c:	460d      	mov	r5, r1
	switch (reason) {
    c60e:	d003      	beq.n	c618 <_NanoFatalErrorHandler+0x14>
    c610:	2803      	cmp	r0, #3
    c612:	d105      	bne.n	c620 <_NanoFatalErrorHandler+0x1c>
		PR_EXC("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		PR_EXC("**** Kernel Allocation Failure! ****\n");
    c614:	480a      	ldr	r0, [pc, #40]	; (c640 <_NanoFatalErrorHandler+0x3c>)
    c616:	e000      	b.n	c61a <_NanoFatalErrorHandler+0x16>
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
	switch (reason) {
	case _NANO_ERR_INVALID_TASK_EXIT:
		PR_EXC("***** Invalid Exit Software Error! *****\n");
    c618:	480a      	ldr	r0, [pc, #40]	; (c644 <_NanoFatalErrorHandler+0x40>)
		PR_EXC("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		PR_EXC("**** Kernel Allocation Failure! ****\n");
    c61a:	f7f4 fdc7 	bl	11ac <printk>
		break;
    c61e:	e003      	b.n	c628 <_NanoFatalErrorHandler+0x24>

	default:
		PR_EXC("**** Unknown Fatal Error %d! ****\n", reason);
    c620:	4601      	mov	r1, r0
    c622:	4809      	ldr	r0, [pc, #36]	; (c648 <_NanoFatalErrorHandler+0x44>)
    c624:	f7f4 fdc2 	bl	11ac <printk>
		break;
	}
	PR_EXC("Current thread ID = %p\n"
    c628:	f000 fdd2 	bl	d1d0 <k_current_get>
    c62c:	69aa      	ldr	r2, [r5, #24]
    c62e:	4601      	mov	r1, r0
    c630:	4806      	ldr	r0, [pc, #24]	; (c64c <_NanoFatalErrorHandler+0x48>)
    c632:	f7f4 fdbb 	bl	11ac <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    c636:	4629      	mov	r1, r5
    c638:	4620      	mov	r0, r4
    c63a:	f000 f809 	bl	c650 <_SysFatalErrorHandler>
    c63e:	e7fe      	b.n	c63e <_NanoFatalErrorHandler+0x3a>
    c640:	0000f737 	.word	0x0000f737
    c644:	0000f70d 	.word	0x0000f70d
    c648:	0000f75d 	.word	0x0000f75d
    c64c:	0000f780 	.word	0x0000f780

0000c650 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
FUNC_NORETURN void _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
    c650:	b580      	push	{r7, lr}
    c652:	af00      	add	r7, sp, #0
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
    c654:	f001 f882 	bl	d75c <k_is_in_isr>
    c658:	b150      	cbz	r0, c670 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
    c65a:	f001 f87f 	bl	d75c <k_is_in_isr>
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
		printk("Fatal fault in %s! Spinning...\n",
    c65e:	4b0b      	ldr	r3, [pc, #44]	; (c68c <_SysFatalErrorHandler+0x3c>)
    c660:	490b      	ldr	r1, [pc, #44]	; (c690 <_SysFatalErrorHandler+0x40>)
    c662:	2800      	cmp	r0, #0
    c664:	bf08      	it	eq
    c666:	4619      	moveq	r1, r3
    c668:	480a      	ldr	r0, [pc, #40]	; (c694 <_SysFatalErrorHandler+0x44>)
    c66a:	f7f4 fd9f 	bl	11ac <printk>
    c66e:	e00b      	b.n	c688 <_SysFatalErrorHandler+0x38>
{
	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

#if !defined(CONFIG_SIMPLE_FATAL_ERROR_HANDLER)
	if (k_is_in_isr() || _is_thread_essential()) {
    c670:	f001 f888 	bl	d784 <_is_thread_essential>
    c674:	2800      	cmp	r0, #0
    c676:	d1f0      	bne.n	c65a <_SysFatalErrorHandler+0xa>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
		for (;;)
			; /* spin forever */
	}
	printk("Fatal fault in thread %p! Aborting.\n", _current);
    c678:	4c07      	ldr	r4, [pc, #28]	; (c698 <_SysFatalErrorHandler+0x48>)
    c67a:	4808      	ldr	r0, [pc, #32]	; (c69c <_SysFatalErrorHandler+0x4c>)
    c67c:	68a1      	ldr	r1, [r4, #8]
    c67e:	f7f4 fd95 	bl	11ac <printk>
	k_thread_abort(_current);
    c682:	68a0      	ldr	r0, [r4, #8]
    c684:	f000 f80c 	bl	c6a0 <k_thread_abort>
    c688:	e7fe      	b.n	c688 <_SysFatalErrorHandler+0x38>
    c68a:	bf00      	nop
    c68c:	0000f7c0 	.word	0x0000f7c0
    c690:	0000f7bc 	.word	0x0000f7bc
    c694:	0000f7d1 	.word	0x0000f7d1
    c698:	2000148c 	.word	0x2000148c
    c69c:	0000f7f1 	.word	0x0000f7f1

0000c6a0 <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct tcs *thread);

void k_thread_abort(k_tid_t thread)
{
    c6a0:	b5b0      	push	{r4, r5, r7, lr}
    c6a2:	4605      	mov	r5, r0
    c6a4:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    c6a6:	f04f 0320 	mov.w	r3, #32
    c6aa:	f3ef 8411 	mrs	r4, BASEPRI
    c6ae:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
    c6b2:	f001 f8e1 	bl	d878 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    c6b6:	4b0c      	ldr	r3, [pc, #48]	; (c6e8 <k_thread_abort+0x48>)
    c6b8:	689b      	ldr	r3, [r3, #8]
    c6ba:	429d      	cmp	r5, r3
    c6bc:	d10e      	bne.n	c6dc <k_thread_abort+0x3c>
 */

static inline int _ScbIsInThreadMode(void)
{
	/* 0 == thread mode */
	return !__scs.scb.icsr.bit.vectactive;
    c6be:	4b0b      	ldr	r3, [pc, #44]	; (c6ec <k_thread_abort+0x4c>)
    c6c0:	f8d3 2d04 	ldr.w	r2, [r3, #3332]	; 0xd04
    c6c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
		if (_ScbIsInThreadMode()) {
    c6c8:	b912      	cbnz	r2, c6d0 <k_thread_abort+0x30>
			_Swap(key);
    c6ca:	4620      	mov	r0, r4
    c6cc:	f7ff fd76 	bl	c1bc <_Swap>
 * @return N/A
 */

static inline void _ScbPendsvSet(void)
{
	__scs.scb.icsr.bit.pendsvset = 1;
    c6d0:	f8d3 2d04 	ldr.w	r2, [r3, #3332]	; 0xd04
    c6d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    c6d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
			_ScbPendsvSet();
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    c6dc:	4620      	mov	r0, r4
}
    c6de:	46bd      	mov	sp, r7
    c6e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
			_ScbPendsvSet();
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    c6e4:	f000 bd04 	b.w	d0f0 <_reschedule_threads>
    c6e8:	2000148c 	.word	0x2000148c
    c6ec:	e000e000 	.word	0xe000e000

0000c6f0 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    c6f0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    c6f2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    c6f6:	4805      	ldr	r0, [pc, #20]	; (c70c <__reset+0x1c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    c6f8:	4905      	ldr	r1, [pc, #20]	; (c710 <__reset+0x20>)
    adds r0, r0, r1
    c6fa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    c6fc:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    c700:	2002      	movs	r0, #2
    msr CONTROL, r0
    c702:	f380 8814 	msr	CONTROL, r0

    b _PrepC
    c706:	f000 b809 	b.w	c71c <_PrepC>
    c70a:	0000      	.short	0x0000

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
    c70c:	2000293c 	.word	0x2000293c
    ldr r1, =CONFIG_ISR_STACK_SIZE
    c710:	00000800 	.word	0x00000800

0000c714 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    c714:	bf30      	wfi
    b _SysNmiOnReset
    c716:	f7ff bffd 	b.w	c714 <_SysNmiOnReset>
    c71a:	bf00      	nop

0000c71c <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    c71c:	b580      	push	{r7, lr}
    c71e:	af00      	add	r7, sp, #0
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    c720:	f000 f9a6 	bl	ca70 <_bss_zero>
	_data_copy();
    c724:	f000 f9b2 	bl	ca8c <_data_copy>
	_Cstart();
    c728:	f000 f9de 	bl	cae8 <_Cstart>

0000c72c <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    c72c:	b580      	push	{r7, lr}
    c72e:	af00      	add	r7, sp, #0
	handler();
    c730:	f7ff fff0 	bl	c714 <_SysNmiOnReset>
	_ExcExit();
}
    c734:	46bd      	mov	sp, r7
    c736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 */

void __nmi(void)
{
	handler();
	_ExcExit();
    c73a:	f7ff bcef 	b.w	c11c <_ExcExit>
	...

0000c740 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    c740:	b5b0      	push	{r4, r5, r7, lr}
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
    c742:	4b09      	ldr	r3, [pc, #36]	; (c768 <_sys_device_do_config_level+0x28>)
    c744:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    c748:	3001      	adds	r0, #1
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    c74a:	af00      	add	r7, sp, #0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
    c74c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    c750:	4620      	mov	r0, r4
    c752:	42a8      	cmp	r0, r5
    c754:	f104 040c 	add.w	r4, r4, #12
    c758:	d204      	bcs.n	c764 <_sys_device_do_config_level+0x24>
		struct device_config *device = info->config;

		device->init(info);
    c75a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    c75e:	685b      	ldr	r3, [r3, #4]
    c760:	4798      	blx	r3
    c762:	e7f5      	b.n	c750 <_sys_device_do_config_level+0x10>
	}
}
    c764:	bdb0      	pop	{r4, r5, r7, pc}
    c766:	bf00      	nop
    c768:	0000f89c 	.word	0x0000f89c

0000c76c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    c76e:	4c0a      	ldr	r4, [pc, #40]	; (c798 <device_get_binding+0x2c>)
    c770:	4d0a      	ldr	r5, [pc, #40]	; (c79c <device_get_binding+0x30>)
		device->init(info);
	}
}

struct device *device_get_binding(const char *name)
{
    c772:	af00      	add	r7, sp, #0
    c774:	4606      	mov	r6, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    c776:	42ac      	cmp	r4, r5
    c778:	d00c      	beq.n	c794 <device_get_binding+0x28>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    c77a:	6863      	ldr	r3, [r4, #4]
    c77c:	b90b      	cbnz	r3, c782 <device_get_binding+0x16>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    c77e:	340c      	adds	r4, #12
    c780:	e7f9      	b.n	c776 <device_get_binding+0xa>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    c782:	6823      	ldr	r3, [r4, #0]
    c784:	4630      	mov	r0, r6
    c786:	6819      	ldr	r1, [r3, #0]
    c788:	f7f4 fb42 	bl	e10 <strcmp>
    c78c:	2800      	cmp	r0, #0
    c78e:	d1f6      	bne.n	c77e <device_get_binding+0x12>
    c790:	4620      	mov	r0, r4
			return info;
		}
	}

	return NULL;
}
    c792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    c794:	2000      	movs	r0, #0
    c796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c798:	200002cc 	.word	0x200002cc
    c79c:	20000338 	.word	0x20000338

0000c7a0 <_ready_thread>:
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    c7a0:	b480      	push	{r7}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    c7a2:	7a42      	ldrb	r2, [r0, #9]
    c7a4:	f022 0104 	bic.w	r1, r2, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    c7a8:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    c7ac:	af00      	add	r7, sp, #0
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    c7ae:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    c7b0:	d106      	bne.n	c7c0 <_ready_thread+0x20>
    c7b2:	6a03      	ldr	r3, [r0, #32]
    c7b4:	3301      	adds	r3, #1
    c7b6:	d103      	bne.n	c7c0 <_ready_thread+0x20>
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
	}
}
    c7b8:	46bd      	mov	sp, r7
    c7ba:	bc80      	pop	{r7}

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    c7bc:	f000 bbda 	b.w	cf74 <_add_thread_to_ready_q>
	}
}
    c7c0:	46bd      	mov	sp, r7
    c7c2:	bc80      	pop	{r7}
    c7c4:	4770      	bx	lr
	...

0000c7c8 <_must_switch_threads>:
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
    c7c8:	b580      	push	{r7, lr}
	return _is_preempt(_current) && __must_switch_threads();
    c7ca:	4b07      	ldr	r3, [pc, #28]	; (c7e8 <_must_switch_threads+0x20>)
/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
#ifdef CONFIG_PREEMPT_ENABLED
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    c7cc:	689b      	ldr	r3, [r3, #8]
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    c7ce:	895b      	ldrh	r3, [r3, #10]
    c7d0:	2b7f      	cmp	r3, #127	; 0x7f
/*
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
    c7d2:	af00      	add	r7, sp, #0
	return _is_preempt(_current) && __must_switch_threads();
    c7d4:	d805      	bhi.n	c7e2 <_must_switch_threads+0x1a>
    c7d6:	f000 fc73 	bl	d0c0 <__must_switch_threads>
    c7da:	3000      	adds	r0, #0
    c7dc:	bf18      	it	ne
    c7de:	2001      	movne	r0, #1
    c7e0:	bd80      	pop	{r7, pc}
    c7e2:	2000      	movs	r0, #0
}
    c7e4:	bd80      	pop	{r7, pc}
    c7e6:	bf00      	nop
    c7e8:	2000148c 	.word	0x2000148c

0000c7ec <_get_thread_to_unpend>:
{
	return (struct k_thread *)sys_dlist_peek_head(wait_q);
}

static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
    c7ec:	b580      	push	{r7, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c7ee:	4b17      	ldr	r3, [pc, #92]	; (c84c <_get_thread_to_unpend+0x60>)
    c7f0:	681a      	ldr	r2, [r3, #0]
    c7f2:	6803      	ldr	r3, [r0, #0]
{
	return (struct k_thread *)sys_dlist_peek_head(wait_q);
}

static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
    c7f4:	af00      	add	r7, sp, #0
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    c7f6:	b1b2      	cbz	r2, c826 <_get_thread_to_unpend+0x3a>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7f8:	4298      	cmp	r0, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    c7fa:	461a      	mov	r2, r3
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c7fc:	d01b      	beq.n	c836 <_get_thread_to_unpend+0x4a>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    c7fe:	b1e3      	cbz	r3, c83a <_get_thread_to_unpend+0x4e>
    c800:	6840      	ldr	r0, [r0, #4]
    c802:	4283      	cmp	r3, r0
    c804:	bf14      	ite	ne
    c806:	681b      	ldrne	r3, [r3, #0]
    c808:	2300      	moveq	r3, #0

		/* skip threads that have an expired timeout */
		SYS_DLIST_FOR_EACH_NODE_SAFE(q, cur, next) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    c80a:	6a11      	ldr	r1, [r2, #32]
    c80c:	3102      	adds	r1, #2
    c80e:	d104      	bne.n	c81a <_get_thread_to_unpend+0x2e>
    c810:	b19b      	cbz	r3, c83a <_get_thread_to_unpend+0x4e>
    c812:	4298      	cmp	r0, r3
    c814:	d015      	beq.n	c842 <_get_thread_to_unpend+0x56>
    c816:	6819      	ldr	r1, [r3, #0]
    c818:	e014      	b.n	c844 <_get_thread_to_unpend+0x58>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    c81a:	e892 000a 	ldmia.w	r2, {r1, r3}
    c81e:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    c820:	6811      	ldr	r1, [r2, #0]
    c822:	604b      	str	r3, [r1, #4]
    c824:	e00b      	b.n	c83e <_get_thread_to_unpend+0x52>

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    c826:	4298      	cmp	r0, r3
    c828:	d009      	beq.n	c83e <_get_thread_to_unpend+0x52>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    c82a:	e893 0006 	ldmia.w	r3, {r1, r2}
    c82e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    c830:	6819      	ldr	r1, [r3, #0]
    c832:	604a      	str	r2, [r1, #4]
    c834:	e001      	b.n	c83a <_get_thread_to_unpend+0x4e>
			}

			sys_dlist_remove(cur);
			return thread;
		}
		return NULL;
    c836:	2000      	movs	r0, #0
    c838:	bd80      	pop	{r7, pc}
    c83a:	4618      	mov	r0, r3
    c83c:	bd80      	pop	{r7, pc}
    c83e:	4610      	mov	r0, r2
    c840:	bd80      	pop	{r7, pc}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    c842:	2100      	movs	r1, #0
    c844:	461a      	mov	r2, r3
    c846:	460b      	mov	r3, r1
    c848:	e7df      	b.n	c80a <_get_thread_to_unpend+0x1e>
    c84a:	bf00      	nop
    c84c:	200015b8 	.word	0x200015b8

0000c850 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    c850:	b580      	push	{r7, lr}
    c852:	4603      	mov	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c854:	6900      	ldr	r0, [r0, #16]
    c856:	1c42      	adds	r2, r0, #1
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    c858:	af00      	add	r7, sp, #0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    c85a:	d010      	beq.n	c87e <_abort_timeout+0x2e>
    c85c:	4a08      	ldr	r2, [pc, #32]	; (c880 <_abort_timeout+0x30>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    c85e:	6912      	ldr	r2, [r2, #16]
    c860:	4293      	cmp	r3, r2
    c862:	bf1f      	itttt	ne
    c864:	681a      	ldrne	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    c866:	6911      	ldrne	r1, [r2, #16]
    c868:	1840      	addne	r0, r0, r1
    c86a:	6110      	strne	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    c86c:	e893 0006 	ldmia.w	r3, {r1, r2}
    c870:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    c872:	6819      	ldr	r1, [r3, #0]
    c874:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    c876:	f04f 32ff 	mov.w	r2, #4294967295
    c87a:	611a      	str	r2, [r3, #16]

	return 0;
    c87c:	2000      	movs	r0, #0
}
    c87e:	bd80      	pop	{r7, pc}
    c880:	2000148c 	.word	0x2000148c

0000c884 <k_fifo_init>:
SYS_INIT(init_fifo_module, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

#endif /* CONFIG_OBJECT_TRACING */

void k_fifo_init(struct k_fifo *fifo)
{
    c884:	b580      	push	{r7, lr}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    c886:	2300      	movs	r3, #0
    c888:	af00      	add	r7, sp, #0
    c88a:	6083      	str	r3, [r0, #8]
	list->tail = NULL;
    c88c:	60c3      	str	r3, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    c88e:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    c890:	6040      	str	r0, [r0, #4]
    c892:	bd80      	pop	{r7, pc}

0000c894 <k_fifo_put>:
	_ready_thread(thread);
	_set_thread_return_value_with_data(thread, 0, data);
}

void k_fifo_put(struct k_fifo *fifo, void *data)
{
    c894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c898:	4606      	mov	r6, r0
    c89a:	af00      	add	r7, sp, #0
    c89c:	460d      	mov	r5, r1
    c89e:	f04f 0320 	mov.w	r3, #32
    c8a2:	f3ef 8811 	mrs	r8, BASEPRI
    c8a6:	f383 8811 	msr	BASEPRI, r3

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _get_thread_to_unpend(wait_q);
    c8aa:	f7ff ff9f 	bl	c7ec <_get_thread_to_unpend>

	if (thread) {
    c8ae:	4604      	mov	r4, r0
    c8b0:	b1b8      	cbz	r0, c8e2 <k_fifo_put+0x4e>
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    c8b2:	7a43      	ldrb	r3, [r0, #9]
    c8b4:	f023 0302 	bic.w	r3, r3, #2
    c8b8:	7243      	strb	r3, [r0, #9]

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    c8ba:	3010      	adds	r0, #16
    c8bc:	f7ff ffc8 	bl	c850 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    c8c0:	4620      	mov	r0, r4
    c8c2:	f7ff ff6d 	bl	c7a0 <_ready_thread>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    c8c6:	2300      	movs	r3, #0
    c8c8:	65e3      	str	r3, [r4, #92]	; 0x5c
_set_thread_return_value_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	_set_thread_return_value(thread, value);
	thread->base.swap_data = data;
    c8ca:	60e5      	str	r5, [r4, #12]
 */
static ALWAYS_INLINE uint32_t _IpsrGet(void)
{
	uint32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    c8cc:	f3ef 8305 	mrs	r3, IPSR
	 * hard fault, to a detect a nested exception.
	 */
#if defined(CONFIG_ARMV6_M)
	return (vector > 10) || (vector == 3);
#elif defined(CONFIG_ARMV7_M)
	return (vector > 10) || (vector && _ScbIsNestedExc());
    c8d0:	2b0a      	cmp	r3, #10
    c8d2:	d80b      	bhi.n	c8ec <k_fifo_put+0x58>
    c8d4:	b18b      	cbz	r3, c8fa <k_fifo_put+0x66>
 */

static inline int _ScbIsNestedExc(void)
{
	/* !bit == preempted exceptions */
	return !__scs.scb.icsr.bit.rettobase;
    c8d6:	4b0e      	ldr	r3, [pc, #56]	; (c910 <k_fifo_put+0x7c>)
    c8d8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    c8dc:	051b      	lsls	r3, r3, #20
    c8de:	d40c      	bmi.n	c8fa <k_fifo_put+0x66>
    c8e0:	e004      	b.n	c8ec <k_fifo_put+0x58>
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;

	if (!list->tail) {
    c8e2:	68f3      	ldr	r3, [r6, #12]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node)
{
	node->next = NULL;
    c8e4:	6028      	str	r0, [r5, #0]

	if (!list->tail) {
    c8e6:	b92b      	cbnz	r3, c8f4 <k_fifo_put+0x60>
		list->tail = node;
    c8e8:	60f5      	str	r5, [r6, #12]
		list->head = node;
    c8ea:	60b5      	str	r5, [r6, #8]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c8ec:	f388 8811 	msr	BASEPRI, r8
    c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else {
		list->tail->next = node;
    c8f4:	601d      	str	r5, [r3, #0]
		list->tail = node;
    c8f6:	60f5      	str	r5, [r6, #12]
    c8f8:	e7f8      	b.n	c8ec <k_fifo_put+0x58>

	first_pending_thread = _unpend_first_thread(&fifo->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
    c8fa:	f7ff ff65 	bl	c7c8 <_must_switch_threads>
    c8fe:	2800      	cmp	r0, #0
    c900:	d0f4      	beq.n	c8ec <k_fifo_put+0x58>
			(void)_Swap(key);
    c902:	4640      	mov	r0, r8
	} else {
		sys_slist_append(&fifo->data_q, data);
	}

	irq_unlock(key);
}
    c904:	46bd      	mov	sp, r7
    c906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	first_pending_thread = _unpend_first_thread(&fifo->wait_q);

	if (first_pending_thread) {
		prepare_thread_to_run(first_pending_thread, data);
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
    c90a:	f7ff bc57 	b.w	c1bc <_Swap>
    c90e:	bf00      	nop
    c910:	e000e000 	.word	0xe000e000

0000c914 <k_fifo_put_list>:

	irq_unlock(key);
}

void k_fifo_put_list(struct k_fifo *fifo, void *head, void *tail)
{
    c914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c918:	4604      	mov	r4, r0
    c91a:	af00      	add	r7, sp, #0
    c91c:	460e      	mov	r6, r1
    c91e:	4692      	mov	sl, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    c920:	f04f 0320 	mov.w	r3, #32
    c924:	f3ef 8911 	mrs	r9, BASEPRI
    c928:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    c92c:	f8d0 8000 	ldr.w	r8, [r0]
    c930:	f04f 0b00 	mov.w	fp, #0
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c934:	4540      	cmp	r0, r8
    c936:	bf08      	it	eq
    c938:	f04f 0800 	moveq.w	r8, #0
	unsigned int key;

	key = irq_lock();

	first_thread = _peek_first_pending_thread(&fifo->wait_q);
	while (head && ((thread = _unpend_first_thread(&fifo->wait_q)))) {
    c93c:	b1d6      	cbz	r6, c974 <k_fifo_put_list+0x60>

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _get_thread_to_unpend(wait_q);
    c93e:	4620      	mov	r0, r4
    c940:	f7ff ff54 	bl	c7ec <_get_thread_to_unpend>

	if (thread) {
    c944:	4605      	mov	r5, r0
    c946:	b170      	cbz	r0, c966 <k_fifo_put_list+0x52>
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    c948:	7a43      	ldrb	r3, [r0, #9]
    c94a:	f023 0302 	bic.w	r3, r3, #2
    c94e:	7243      	strb	r3, [r0, #9]
    c950:	3010      	adds	r0, #16
    c952:	f7ff ff7d 	bl	c850 <_abort_timeout>
}

static void prepare_thread_to_run(struct k_thread *thread, void *data)
{
	_abort_thread_timeout(thread);
	_ready_thread(thread);
    c956:	4628      	mov	r0, r5
    c958:	f7ff ff22 	bl	c7a0 <_ready_thread>
    c95c:	60ee      	str	r6, [r5, #12]
    c95e:	f8c5 b05c 	str.w	fp, [r5, #92]	; 0x5c
	key = irq_lock();

	first_thread = _peek_first_pending_thread(&fifo->wait_q);
	while (head && ((thread = _unpend_first_thread(&fifo->wait_q)))) {
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
    c962:	6836      	ldr	r6, [r6, #0]
    c964:	e7ea      	b.n	c93c <k_fifo_put_list+0x28>
 * @param tail A pointer to the last element of the list to append
 */
static inline void sys_slist_append_list(sys_slist_t *list,
					 void *head, void *tail)
{
	if (!list->tail) {
    c966:	68e3      	ldr	r3, [r4, #12]
    c968:	b90b      	cbnz	r3, c96e <k_fifo_put_list+0x5a>
		list->head = (sys_snode_t *)head;
    c96a:	60a6      	str	r6, [r4, #8]
    c96c:	e000      	b.n	c970 <k_fifo_put_list+0x5c>
		list->tail = (sys_snode_t *)tail;
	} else {
		list->tail->next = (sys_snode_t *)head;
    c96e:	601e      	str	r6, [r3, #0]
		list->tail = (sys_snode_t *)tail;
    c970:	f8c4 a00c 	str.w	sl, [r4, #12]

	if (head) {
		sys_slist_append_list(&fifo->data_q, head, tail);
	}

	if (first_thread) {
    c974:	f1b8 0f00 	cmp.w	r8, #0
    c978:	d009      	beq.n	c98e <k_fifo_put_list+0x7a>
    c97a:	f3ef 8305 	mrs	r3, IPSR
    c97e:	2b0a      	cmp	r3, #10
    c980:	d805      	bhi.n	c98e <k_fifo_put_list+0x7a>
    c982:	b143      	cbz	r3, c996 <k_fifo_put_list+0x82>
    c984:	4b09      	ldr	r3, [pc, #36]	; (c9ac <k_fifo_put_list+0x98>)
    c986:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    c98a:	051b      	lsls	r3, r3, #20
    c98c:	d403      	bmi.n	c996 <k_fifo_put_list+0x82>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c98e:	f389 8811 	msr	BASEPRI, r9
    c992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!_is_in_isr() && _must_switch_threads()) {
    c996:	f7ff ff17 	bl	c7c8 <_must_switch_threads>
    c99a:	2800      	cmp	r0, #0
    c99c:	d0f7      	beq.n	c98e <k_fifo_put_list+0x7a>
			(void)_Swap(key);
    c99e:	4648      	mov	r0, r9
			return;
		}
	}

	irq_unlock(key);
}
    c9a0:	46bd      	mov	sp, r7
    c9a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		sys_slist_append_list(&fifo->data_q, head, tail);
	}

	if (first_thread) {
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
    c9a6:	f7ff bc09 	b.w	c1bc <_Swap>
    c9aa:	bf00      	nop
    c9ac:	e000e000 	.word	0xe000e000

0000c9b0 <k_fifo_get>:
	 */
	return k_fifo_put_list(fifo, list->head, list->tail);
}

void *k_fifo_get(struct k_fifo *fifo, int32_t timeout)
{
    c9b0:	b5b0      	push	{r4, r5, r7, lr}
    c9b2:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    c9b4:	f04f 0420 	mov.w	r4, #32
    c9b8:	f3ef 8511 	mrs	r5, BASEPRI
    c9bc:	f384 8811 	msr	BASEPRI, r4
    c9c0:	6884      	ldr	r4, [r0, #8]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&fifo->data_q))) {
    c9c2:	b144      	cbz	r4, c9d6 <k_fifo_get+0x26>
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
	if (list->tail == node) {
    c9c4:	68c1      	ldr	r1, [r0, #12]
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list)
{
	sys_snode_t *node = list->head;

	list->head = node->next;
    c9c6:	6822      	ldr	r2, [r4, #0]
    c9c8:	6082      	str	r2, [r0, #8]
	if (list->tail == node) {
    c9ca:	428c      	cmp	r4, r1
		list->tail = list->head;
    c9cc:	bf08      	it	eq
    c9ce:	60c2      	streq	r2, [r0, #12]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    c9d0:	f385 8811 	msr	BASEPRI, r5
    c9d4:	e00e      	b.n	c9f4 <k_fifo_get+0x44>
		data = sys_slist_get_not_empty(&fifo->data_q);
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    c9d6:	b919      	cbnz	r1, c9e0 <k_fifo_get+0x30>
    c9d8:	f385 8811 	msr	BASEPRI, r5
		irq_unlock(key);
		return NULL;
    c9dc:	4608      	mov	r0, r1
    c9de:	bdb0      	pop	{r4, r5, r7, pc}
	}

	_pend_current_thread(&fifo->wait_q, timeout);
    c9e0:	f000 fb5c 	bl	d09c <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
    c9e4:	4628      	mov	r0, r5
    c9e6:	f7ff fbe9 	bl	c1bc <_Swap>
    c9ea:	b918      	cbnz	r0, c9f4 <k_fifo_get+0x44>
    c9ec:	4b02      	ldr	r3, [pc, #8]	; (c9f8 <k_fifo_get+0x48>)
    c9ee:	689b      	ldr	r3, [r3, #8]
    c9f0:	68d8      	ldr	r0, [r3, #12]
    c9f2:	bdb0      	pop	{r4, r5, r7, pc}
    c9f4:	4620      	mov	r0, r4
}
    c9f6:	bdb0      	pop	{r4, r5, r7, pc}
    c9f8:	2000148c 	.word	0x2000148c

0000c9fc <_sys_power_save_idle_exit>:
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(int32_t ticks)
{
    c9fc:	b480      	push	{r7}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif
#ifdef CONFIG_TICKLESS_IDLE
	if ((ticks == K_FOREVER) || ticks >= _sys_idle_threshold_ticks) {
    c9fe:	1c43      	adds	r3, r0, #1
	k_cpu_idle();
#endif
}

void _sys_power_save_idle_exit(int32_t ticks)
{
    ca00:	af00      	add	r7, sp, #0
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif
#ifdef CONFIG_TICKLESS_IDLE
	if ((ticks == K_FOREVER) || ticks >= _sys_idle_threshold_ticks) {
    ca02:	d003      	beq.n	ca0c <_sys_power_save_idle_exit+0x10>
    ca04:	4b05      	ldr	r3, [pc, #20]	; (ca1c <_sys_power_save_idle_exit+0x20>)
    ca06:	681b      	ldr	r3, [r3, #0]
    ca08:	4298      	cmp	r0, r3
    ca0a:	db03      	blt.n	ca14 <_sys_power_save_idle_exit+0x18>
		_timer_idle_exit();
	}
#else
	ARG_UNUSED(ticks);
#endif /* CONFIG_TICKLESS_IDLE */
}
    ca0c:	46bd      	mov	sp, r7
    ca0e:	bc80      	pop	{r7}
#endif
#ifdef CONFIG_TICKLESS_IDLE
	if ((ticks == K_FOREVER) || ticks >= _sys_idle_threshold_ticks) {
		/* Resume normal periodic system timer interrupts */

		_timer_idle_exit();
    ca10:	f7f3 bf1a 	b.w	848 <_timer_idle_exit>
	}
#else
	ARG_UNUSED(ticks);
#endif /* CONFIG_TICKLESS_IDLE */
}
    ca14:	46bd      	mov	sp, r7
    ca16:	bc80      	pop	{r7}
    ca18:	4770      	bx	lr
    ca1a:	bf00      	nop
    ca1c:	200002c4 	.word	0x200002c4

0000ca20 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ca20:	b580      	push	{r7, lr}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ca22:	4d11      	ldr	r5, [pc, #68]	; (ca68 <idle+0x48>)
#endif

static void _sys_power_save_idle(int32_t ticks __unused)
{
#if defined(CONFIG_TICKLESS_IDLE)
	if ((ticks == K_FOREVER) || ticks >= _sys_idle_threshold_ticks) {
    ca24:	f8df 8044 	ldr.w	r8, [pc, #68]	; ca6c <idle+0x4c>
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    ca28:	af00      	add	r7, sp, #0
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ca2a:	f105 060c 	add.w	r6, r5, #12
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    ca2e:	f04f 0220 	mov.w	r2, #32
    ca32:	f3ef 8311 	mrs	r3, BASEPRI
    ca36:	f382 8811 	msr	BASEPRI, r2
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ca3a:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ca3c:	42b3      	cmp	r3, r6
    ca3e:	d008      	beq.n	ca52 <idle+0x32>
static inline int32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    ca40:	b13b      	cbz	r3, ca52 <idle+0x32>
    ca42:	691c      	ldr	r4, [r3, #16]
#endif

static void _sys_power_save_idle(int32_t ticks __unused)
{
#if defined(CONFIG_TICKLESS_IDLE)
	if ((ticks == K_FOREVER) || ticks >= _sys_idle_threshold_ticks) {
    ca44:	1c63      	adds	r3, r4, #1
    ca46:	d006      	beq.n	ca56 <idle+0x36>
    ca48:	f8d8 3000 	ldr.w	r3, [r8]
    ca4c:	42a3      	cmp	r3, r4
    ca4e:	dd02      	ble.n	ca56 <idle+0x36>
    ca50:	e004      	b.n	ca5c <idle+0x3c>
    ca52:	f04f 34ff 	mov.w	r4, #4294967295
		/*
		 * Stop generating system timer interrupts until it's time for
		 * the next scheduled kernel timer to expire.
		 */

		_timer_idle_enter(ticks);
    ca56:	4620      	mov	r0, r4
    ca58:	f7f3 fee8 	bl	82c <_timer_idle_enter>
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(int32_t ticks)
{
	_kernel.idle = ticks;
    ca5c:	4b02      	ldr	r3, [pc, #8]	; (ca68 <idle+0x48>)
    ca5e:	615c      	str	r4, [r3, #20]
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
    ca60:	f7ff fd98 	bl	c594 <k_cpu_idle>
    ca64:	e7e3      	b.n	ca2e <idle+0xe>
    ca66:	bf00      	nop
    ca68:	2000148c 	.word	0x2000148c
    ca6c:	200002c4 	.word	0x200002c4

0000ca70 <_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    ca70:	b480      	push	{r7}
	memset(&__bss_start, 0,
    ca72:	4804      	ldr	r0, [pc, #16]	; (ca84 <_bss_zero+0x14>)
    ca74:	4a04      	ldr	r2, [pc, #16]	; (ca88 <_bss_zero+0x18>)
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void _bss_zero(void)
{
    ca76:	af00      	add	r7, sp, #0
	memset(&__bss_start, 0,
    ca78:	1a12      	subs	r2, r2, r0
    ca7a:	2100      	movs	r1, #0
		 ((uint32_t) &__bss_end - (uint32_t) &__bss_start));
}
    ca7c:	46bd      	mov	sp, r7
    ca7e:	bc80      	pop	{r7}
 *
 * @return N/A
 */
void _bss_zero(void)
{
	memset(&__bss_start, 0,
    ca80:	f7f4 ba1a 	b.w	eb8 <memset>
    ca84:	20000370 	.word	0x20000370
    ca88:	200015d8 	.word	0x200015d8

0000ca8c <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    ca8c:	b480      	push	{r7}
	memcpy(&__data_ram_start, &__data_rom_start,
    ca8e:	4804      	ldr	r0, [pc, #16]	; (caa0 <_data_copy+0x14>)
    ca90:	4a04      	ldr	r2, [pc, #16]	; (caa4 <_data_copy+0x18>)
    ca92:	4905      	ldr	r1, [pc, #20]	; (caa8 <_data_copy+0x1c>)
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    ca94:	af00      	add	r7, sp, #0
	memcpy(&__data_ram_start, &__data_rom_start,
    ca96:	1a12      	subs	r2, r2, r0
		 ((uint32_t) &__data_ram_end - (uint32_t) &__data_ram_start));
}
    ca98:	46bd      	mov	sp, r7
    ca9a:	bc80      	pop	{r7}
 *
 * @return N/A
 */
void _data_copy(void)
{
	memcpy(&__data_ram_start, &__data_rom_start,
    ca9c:	f7f4 b9df 	b.w	e5e <memcpy>
    caa0:	20000000 	.word	0x20000000
    caa4:	2000036c 	.word	0x2000036c
    caa8:	0000f8c4 	.word	0x0000f8c4

0000caac <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    caac:	b580      	push	{r7, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    caae:	2002      	movs	r0, #2
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    cab0:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    cab2:	f7ff fe45 	bl	c740 <_sys_device_do_config_level>

	/* These 3 are deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_SECONDARY);
    cab6:	2005      	movs	r0, #5
    cab8:	f7ff fe42 	bl	c740 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_NANOKERNEL);
    cabc:	2006      	movs	r0, #6
    cabe:	f7ff fe3f 	bl	c740 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_MICROKERNEL);
    cac2:	2007      	movs	r0, #7
    cac4:	f7ff fe3c 	bl	c740 <_sys_device_do_config_level>

	/* Final init level before app starts */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    cac8:	2003      	movs	r0, #3
    caca:	f7ff fe39 	bl	c740 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    cace:	f000 fef9 	bl	d8c4 <_init_static_threads>
	 */
#if defined(MDEF_MAIN_THREAD_PRIORITY) && \
		(MDEF_MAIN_THREAD_PRIORITY != CONFIG_MAIN_THREAD_PRIORITY)
	k_thread_priority_set(_main_thread, MDEF_MAIN_THREAD_PRIORITY);
#endif
	main();
    cad2:	f7f3 fd77 	bl	5c4 <main>

	/* Terminate thread normally since it has no more work to do */
	_main_thread->base.thread_state &= ~K_ESSENTIAL;
    cad6:	4a03      	ldr	r2, [pc, #12]	; (cae4 <_main+0x38>)
    cad8:	7a53      	ldrb	r3, [r2, #9]
    cada:	f023 0301 	bic.w	r3, r3, #1
    cade:	7253      	strb	r3, [r2, #9]
    cae0:	bd80      	pop	{r7, pc}
    cae2:	bf00      	nop
    cae4:	2000243c 	.word	0x2000243c

0000cae8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    cae8:	b580      	push	{r7, lr}
    caea:	b084      	sub	sp, #16
    caec:	af04      	add	r7, sp, #16
	 * spurious interrupts. This must be performed before other kernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    caee:	f7ff fb27 	bl	c140 <_IntLibInit>
    caf2:	4b3d      	ldr	r3, [pc, #244]	; (cbe8 <_Cstart+0x100>)
    caf4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    caf8:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    cafa:	605b      	str	r3, [r3, #4]
    cafc:	3308      	adds	r3, #8

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    cafe:	4293      	cmp	r3, r2
    cb00:	d1fa      	bne.n	caf8 <_Cstart+0x10>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    cb02:	4d3a      	ldr	r5, [pc, #232]	; (cbec <_Cstart+0x104>)
    cb04:	4e3a      	ldr	r6, [pc, #232]	; (cbf0 <_Cstart+0x108>)

	_new_thread(_main_stack, MAIN_STACK_SIZE,
    cb06:	f8df 80fc 	ldr.w	r8, [pc, #252]	; cc04 <_Cstart+0x11c>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_ready_q.cache = _main_thread;
    cb0a:	61b5      	str	r5, [r6, #24]

	_new_thread(_main_stack, MAIN_STACK_SIZE,
    cb0c:	2400      	movs	r4, #0
    cb0e:	f04f 0a01 	mov.w	sl, #1
    cb12:	4642      	mov	r2, r8
    cb14:	4623      	mov	r3, r4
    cb16:	f44f 6180 	mov.w	r1, #1024	; 0x400
    cb1a:	4628      	mov	r0, r5
    cb1c:	f8cd a00c 	str.w	sl, [sp, #12]
    cb20:	9402      	str	r4, [sp, #8]
    cb22:	9401      	str	r4, [sp, #4]
    cb24:	9400      	str	r4, [sp, #0]
    cb26:	f7ff fd07 	bl	c538 <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    cb2a:	7a6b      	ldrb	r3, [r5, #9]
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_stack, IDLE_STACK_SIZE,
    cb2c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; cc08 <_Cstart+0x120>
    cb30:	f023 0304 	bic.w	r3, r3, #4
    cb34:	726b      	strb	r3, [r5, #9]

	_new_thread(_main_stack, MAIN_STACK_SIZE,
		    _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
    cb36:	4628      	mov	r0, r5
    cb38:	f000 fa1c 	bl	cf74 <_add_thread_to_ready_q>

#ifdef CONFIG_MULTITHREADING
	_new_thread(_idle_stack, IDLE_STACK_SIZE,
    cb3c:	230f      	movs	r3, #15
    cb3e:	9302      	str	r3, [sp, #8]
    cb40:	4a2c      	ldr	r2, [pc, #176]	; (cbf4 <_Cstart+0x10c>)
    cb42:	f8cd a00c 	str.w	sl, [sp, #12]
    cb46:	4623      	mov	r3, r4
    cb48:	f44f 7180 	mov.w	r1, #256	; 0x100
    cb4c:	4648      	mov	r0, r9
    cb4e:	9401      	str	r4, [sp, #4]
    cb50:	9400      	str	r4, [sp, #0]
    cb52:	f7ff fcf1 	bl	c538 <_new_thread>
    cb56:	f899 3009 	ldrb.w	r3, [r9, #9]
		    idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
    cb5a:	4648      	mov	r0, r9
    cb5c:	f023 0304 	bic.w	r3, r3, #4
    cb60:	f889 3009 	strb.w	r3, [r9, #9]
    cb64:	f000 fa06 	bl	cf74 <_add_thread_to_ready_q>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    cb68:	f106 030c 	add.w	r3, r6, #12
    cb6c:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
    cb6e:	6133      	str	r3, [r6, #16]
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(uint32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    cb70:	4b21      	ldr	r3, [pc, #132]	; (cbf8 <_Cstart+0x110>)
    cb72:	f383 8808 	msr	MSP, r3
	*shpr = ((*shpr & ~((uint32_t)0xff << _PRIO_BIT_SHIFT(exc))) |
		 ((uint32_t)pri << _PRIO_BIT_SHIFT(exc)));
#elif defined(CONFIG_ARMV7_M)
	/* For priority exception handler 4-15 */
	__ASSERT((exc > 3) && (exc < 16), "");
	__scs.scb.shpr[exc - 4] = pri;
    cb76:	4b21      	ldr	r3, [pc, #132]	; (cbfc <_Cstart+0x114>)
    cb78:	22e0      	movs	r2, #224	; 0xe0
    cb7a:	f883 2d22 	strb.w	r2, [r3, #3362]	; 0xd22
    cb7e:	f883 4d1f 	strb.w	r4, [r3, #3359]	; 0xd1f
    cb82:	f883 4d18 	strb.w	r4, [r3, #3352]	; 0xd18
    cb86:	f883 4d19 	strb.w	r4, [r3, #3353]	; 0xd19
    cb8a:	f883 4d1a 	strb.w	r4, [r3, #3354]	; 0xd1a
 * @return N/A
 */

static inline void _ScbUsageFaultEnable(void)
{
	__scs.scb.shcsr.bit.usgfaultena = 1;
    cb8e:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    cb92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    cb96:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 * @return N/A
 */

static inline void _ScbBusFaultEnable(void)
{
	__scs.scb.shcsr.bit.busfaultena = 1;
    cb9a:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    cb9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    cba2:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 * @return N/A
 */

static inline void _ScbMemFaultEnable(void)
{
	__scs.scb.shcsr.bit.memfaultena = 1;
    cba6:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    cbaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    cbae:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void nanoArchInit(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    cbb2:	f7ff fc73 	bl	c49c <_FaultInit>
	_CpuIdleInit();
    cbb6:	f7ff fce7 	bl	c588 <_CpuIdleInit>
	 */

	prepare_multithreading(dummy_thread);

	/* Deprecated */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRIMARY);
    cbba:	2004      	movs	r0, #4
    cbbc:	f7ff fdc0 	bl	c740 <_sys_device_do_config_level>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    cbc0:	4620      	mov	r0, r4
    cbc2:	f7ff fdbd 	bl	c740 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    cbc6:	4650      	mov	r0, sl
    cbc8:	f7ff fdba 	bl	c740 <_sys_device_do_config_level>
	char *start_of_main_stack;

	start_of_main_stack = main_stack + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = (void *)main_stack;
    cbcc:	60b5      	str	r5, [r6, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
    cbce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    cbd2:	f025 0507 	bic.w	r5, r5, #7
    cbd6:	4b0a      	ldr	r3, [pc, #40]	; (cc00 <_Cstart+0x118>)
    cbd8:	f385 8809 	msr	PSP, r5
    cbdc:	2100      	movs	r1, #0
    cbde:	f381 8811 	msr	BASEPRI, r1
    cbe2:	4640      	mov	r0, r8
    cbe4:	4718      	bx	r3
    cbe6:	bf00      	nop
    cbe8:	200014ac 	.word	0x200014ac
    cbec:	2000243c 	.word	0x2000243c
    cbf0:	2000148c 	.word	0x2000148c
    cbf4:	0000ca21 	.word	0x0000ca21
    cbf8:	2000313c 	.word	0x2000313c
    cbfc:	e000e000 	.word	0xe000e000
    cc00:	0000d799 	.word	0x0000d799
    cc04:	0000caad 	.word	0x0000caad
    cc08:	2000283c 	.word	0x2000283c

0000cc0c <k_lifo_put>:

	SYS_TRACING_OBJ_INIT(k_lifo, lifo);
}

void k_lifo_put(struct k_lifo *lifo, void *data)
{
    cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc0e:	460e      	mov	r6, r1
    cc10:	af00      	add	r7, sp, #0
    cc12:	f04f 0320 	mov.w	r3, #32
    cc16:	f3ef 8511 	mrs	r5, BASEPRI
    cc1a:	f383 8811 	msr	BASEPRI, r3
static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    cc1e:	4b35      	ldr	r3, [pc, #212]	; (ccf4 <k_lifo_put+0xe8>)
    cc20:	6804      	ldr	r4, [r0, #0]
    cc22:	681b      	ldr	r3, [r3, #0]
    cc24:	b18b      	cbz	r3, cc4a <k_lifo_put+0x3e>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cc26:	42a0      	cmp	r0, r4
    cc28:	d047      	beq.n	ccba <k_lifo_put+0xae>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    cc2a:	2c00      	cmp	r4, #0
    cc2c:	d045      	beq.n	ccba <k_lifo_put+0xae>
    cc2e:	6841      	ldr	r1, [r0, #4]
    cc30:	428c      	cmp	r4, r1
    cc32:	bf14      	ite	ne
    cc34:	6823      	ldrne	r3, [r4, #0]
    cc36:	2300      	moveq	r3, #0

		/* skip threads that have an expired timeout */
		SYS_DLIST_FOR_EACH_NODE_SAFE(q, cur, next) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    cc38:	6a22      	ldr	r2, [r4, #32]
    cc3a:	3202      	adds	r2, #2
    cc3c:	d107      	bne.n	cc4e <k_lifo_put+0x42>
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d03b      	beq.n	ccba <k_lifo_put+0xae>
    cc42:	4299      	cmp	r1, r3
    cc44:	d052      	beq.n	ccec <k_lifo_put+0xe0>
    cc46:	681a      	ldr	r2, [r3, #0]
    cc48:	e051      	b.n	ccee <k_lifo_put+0xe2>

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    cc4a:	42a0      	cmp	r0, r4
    cc4c:	d035      	beq.n	ccba <k_lifo_put+0xae>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    cc4e:	e894 000c 	ldmia.w	r4, {r2, r3}
    cc52:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    cc54:	6822      	ldr	r2, [r4, #0]
    cc56:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    cc58:	7a63      	ldrb	r3, [r4, #9]
    cc5a:	f023 0302 	bic.w	r3, r3, #2
    cc5e:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    cc60:	6a23      	ldr	r3, [r4, #32]
    cc62:	1c5a      	adds	r2, r3, #1
    cc64:	d011      	beq.n	cc8a <k_lifo_put+0x7e>
    cc66:	4924      	ldr	r1, [pc, #144]	; (ccf8 <k_lifo_put+0xec>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    cc68:	6909      	ldr	r1, [r1, #16]
    cc6a:	f104 0210 	add.w	r2, r4, #16
    cc6e:	4291      	cmp	r1, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    cc70:	bf1f      	itttt	ne
    cc72:	6922      	ldrne	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    cc74:	6911      	ldrne	r1, [r2, #16]
    cc76:	185b      	addne	r3, r3, r1
    cc78:	6113      	strne	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    cc7a:	6963      	ldr	r3, [r4, #20]
    cc7c:	6922      	ldr	r2, [r4, #16]
    cc7e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    cc80:	6922      	ldr	r2, [r4, #16]
    cc82:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    cc84:	f04f 33ff 	mov.w	r3, #4294967295
    cc88:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    cc8a:	7a63      	ldrb	r3, [r4, #9]
    cc8c:	f023 0204 	bic.w	r2, r3, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    cc90:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    cc94:	7262      	strb	r2, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    cc96:	d102      	bne.n	cc9e <k_lifo_put+0x92>
    cc98:	6a23      	ldr	r3, [r4, #32]
    cc9a:	3301      	adds	r3, #1
    cc9c:	d013      	beq.n	ccc6 <k_lifo_put+0xba>
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    cc9e:	2300      	movs	r3, #0
    cca0:	65e3      	str	r3, [r4, #92]	; 0x5c
    cca2:	60e6      	str	r6, [r4, #12]
 */
static ALWAYS_INLINE uint32_t _IpsrGet(void)
{
	uint32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    cca4:	f3ef 8305 	mrs	r3, IPSR
    cca8:	2b0a      	cmp	r3, #10
    ccaa:	d809      	bhi.n	ccc0 <k_lifo_put+0xb4>
    ccac:	b17b      	cbz	r3, ccce <k_lifo_put+0xc2>
 */

static inline int _ScbIsNestedExc(void)
{
	/* !bit == preempted exceptions */
	return !__scs.scb.icsr.bit.rettobase;
    ccae:	4b13      	ldr	r3, [pc, #76]	; (ccfc <k_lifo_put+0xf0>)
    ccb0:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    ccb4:	0519      	lsls	r1, r3, #20
    ccb6:	d40a      	bmi.n	ccce <k_lifo_put+0xc2>
    ccb8:	e002      	b.n	ccc0 <k_lifo_put+0xb4>
		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
			return;
		}
	} else {
		*(void **)data = lifo->list;
    ccba:	6883      	ldr	r3, [r0, #8]
    ccbc:	6033      	str	r3, [r6, #0]
		lifo->list = data;
    ccbe:	6086      	str	r6, [r0, #8]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ccc0:	f385 8811 	msr	BASEPRI, r5
    ccc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    ccc6:	4620      	mov	r0, r4
    ccc8:	f000 f954 	bl	cf74 <_add_thread_to_ready_q>
    cccc:	e7e7      	b.n	cc9e <k_lifo_put+0x92>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    ccce:	4b0a      	ldr	r3, [pc, #40]	; (ccf8 <k_lifo_put+0xec>)
/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
#ifdef CONFIG_PREEMPT_ENABLED
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ccd0:	689b      	ldr	r3, [r3, #8]
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    ccd2:	895b      	ldrh	r3, [r3, #10]
    ccd4:	2b7f      	cmp	r3, #127	; 0x7f
    ccd6:	d8f3      	bhi.n	ccc0 <k_lifo_put+0xb4>
    ccd8:	f000 f9f2 	bl	d0c0 <__must_switch_threads>
    ccdc:	2800      	cmp	r0, #0
    ccde:	d0ef      	beq.n	ccc0 <k_lifo_put+0xb4>

		_set_thread_return_value_with_data(first_pending_thread,
						   0, data);

		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
    cce0:	4628      	mov	r0, r5
		*(void **)data = lifo->list;
		lifo->list = data;
	}

	irq_unlock(key);
}
    cce2:	46bd      	mov	sp, r7
    cce4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

		_set_thread_return_value_with_data(first_pending_thread,
						   0, data);

		if (!_is_in_isr() && _must_switch_threads()) {
			(void)_Swap(key);
    cce8:	f7ff ba68 	b.w	c1bc <_Swap>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    ccec:	2200      	movs	r2, #0
    ccee:	461c      	mov	r4, r3
    ccf0:	4613      	mov	r3, r2
    ccf2:	e7a1      	b.n	cc38 <k_lifo_put+0x2c>
    ccf4:	200015b8 	.word	0x200015b8
    ccf8:	2000148c 	.word	0x2000148c
    ccfc:	e000e000 	.word	0xe000e000

0000cd00 <k_lifo_get>:

	irq_unlock(key);
}

void *k_lifo_get(struct k_lifo *lifo, int32_t timeout)
{
    cd00:	b5b0      	push	{r4, r5, r7, lr}
    cd02:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    cd04:	f04f 0420 	mov.w	r4, #32
    cd08:	f3ef 8511 	mrs	r5, BASEPRI
    cd0c:	f384 8811 	msr	BASEPRI, r4
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(lifo->list)) {
    cd10:	6884      	ldr	r4, [r0, #8]
    cd12:	b114      	cbz	r4, cd1a <k_lifo_get+0x1a>
		data = lifo->list;
		lifo->list = *(void **)data;
    cd14:	6822      	ldr	r2, [r4, #0]
    cd16:	6082      	str	r2, [r0, #8]
    cd18:	e000      	b.n	cd1c <k_lifo_get+0x1c>
		irq_unlock(key);
		return data;
	}

	if (timeout == K_NO_WAIT) {
    cd1a:	b911      	cbnz	r1, cd22 <k_lifo_get+0x22>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cd1c:	f385 8811 	msr	BASEPRI, r5
		irq_unlock(key);
		return NULL;
    cd20:	e008      	b.n	cd34 <k_lifo_get+0x34>
	}

	_pend_current_thread(&lifo->wait_q, timeout);
    cd22:	f000 f9bb 	bl	d09c <_pend_current_thread>

	return _Swap(key) ? NULL : _current->base.swap_data;
    cd26:	4628      	mov	r0, r5
    cd28:	f7ff fa48 	bl	c1bc <_Swap>
    cd2c:	b910      	cbnz	r0, cd34 <k_lifo_get+0x34>
    cd2e:	4b02      	ldr	r3, [pc, #8]	; (cd38 <k_lifo_get+0x38>)
    cd30:	689b      	ldr	r3, [r3, #8]
    cd32:	68dc      	ldr	r4, [r3, #12]
}
    cd34:	4620      	mov	r0, r4
    cd36:	bdb0      	pop	{r4, r5, r7, pc}
    cd38:	2000148c 	.word	0x2000148c

0000cd3c <adjust_owner_prio.isra.2>:
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    cd3c:	b5b0      	push	{r4, r5, r7, lr}
{
	if (mutex->owner->base.prio != new_prio) {
    cd3e:	7a83      	ldrb	r3, [r0, #10]
    cd40:	b25b      	sxtb	r3, r3
    cd42:	428b      	cmp	r3, r1
	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
    cd44:	af00      	add	r7, sp, #0
    cd46:	4604      	mov	r4, r0
{
	if (mutex->owner->base.prio != new_prio) {
    cd48:	d011      	beq.n	cd6e <adjust_owner_prio.isra.2+0x32>
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    cd4a:	7a43      	ldrb	r3, [r0, #9]
    cd4c:	f013 0f3e 	tst.w	r3, #62	; 0x3e
    cd50:	b2cd      	uxtb	r5, r1
    cd52:	d10b      	bne.n	cd6c <adjust_owner_prio.isra.2+0x30>
    cd54:	6a03      	ldr	r3, [r0, #32]
    cd56:	3301      	adds	r3, #1
    cd58:	d108      	bne.n	cd6c <adjust_owner_prio.isra.2+0x30>
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
    cd5a:	f000 f935 	bl	cfc8 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
		_add_thread_to_ready_q(thread);
    cd5e:	4620      	mov	r0, r4
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
		_remove_thread_from_ready_q(thread);
		thread->base.prio = prio;
    cd60:	72a5      	strb	r5, [r4, #10]
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		_thread_priority_set(mutex->owner, new_prio);
	}
}
    cd62:	46bd      	mov	sp, r7
    cd64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		_add_thread_to_ready_q(thread);
    cd68:	f000 b904 	b.w	cf74 <_add_thread_to_ready_q>
	} else {
		thread->base.prio = prio;
    cd6c:	72a5      	strb	r5, [r4, #10]
    cd6e:	bdb0      	pop	{r4, r5, r7, pc}

0000cd70 <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, int32_t timeout)
{
    cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    cd72:	4b2d      	ldr	r3, [pc, #180]	; (ce28 <k_mutex_lock+0xb8>)
    cd74:	689b      	ldr	r3, [r3, #8]
    cd76:	7ada      	ldrb	r2, [r3, #11]
    cd78:	3a01      	subs	r2, #1
    cd7a:	72da      	strb	r2, [r3, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    cd7c:	68c2      	ldr	r2, [r0, #12]
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int k_mutex_lock(struct k_mutex *mutex, int32_t timeout)
{
    cd7e:	af00      	add	r7, sp, #0
    cd80:	4604      	mov	r4, r0
    cd82:	460d      	mov	r5, r1
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
    cd84:	b122      	cbz	r2, cd90 <k_mutex_lock+0x20>
    cd86:	6880      	ldr	r0, [r0, #8]
    cd88:	4298      	cmp	r0, r3
    cd8a:	d10b      	bne.n	cda4 <k_mutex_lock+0x34>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
    cd8c:	6921      	ldr	r1, [r4, #16]
    cd8e:	e001      	b.n	cd94 <k_mutex_lock+0x24>
    cd90:	7a99      	ldrb	r1, [r3, #10]
    cd92:	b249      	sxtb	r1, r1
					mutex->owner_orig_prio;

		mutex->lock_count++;
    cd94:	3201      	adds	r2, #1

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
    cd96:	6121      	str	r1, [r4, #16]
					_current->base.prio :
					mutex->owner_orig_prio;

		mutex->lock_count++;
    cd98:	60e2      	str	r2, [r4, #12]
		mutex->owner = _current;
    cd9a:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
    cd9c:	f000 f9be 	bl	d11c <k_sched_unlock>

		return 0;
    cda0:	2000      	movs	r0, #0
    cda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
    cda4:	b921      	cbnz	r1, cdb0 <k_mutex_lock+0x40>
		k_sched_unlock();
    cda6:	f000 f9b9 	bl	d11c <k_sched_unlock>
		return -EBUSY;
    cdaa:	f06f 000f 	mvn.w	r0, #15
    cdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
    cdb0:	7a99      	ldrb	r1, [r3, #10]
					    mutex->owner->base.prio);
    cdb2:	7a83      	ldrb	r3, [r0, #10]
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
    cdb4:	b249      	sxtb	r1, r1
    cdb6:	b25b      	sxtb	r3, r3
    cdb8:	4299      	cmp	r1, r3
    cdba:	bfa8      	it	ge
    cdbc:	4619      	movge	r1, r3
    cdbe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    cdc2:	f04f 0320 	mov.w	r3, #32
    cdc6:	f3ef 8611 	mrs	r6, BASEPRI
    cdca:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    cdce:	68a0      	ldr	r0, [r4, #8]
    cdd0:	7a83      	ldrb	r3, [r0, #10]
    cdd2:	b25b      	sxtb	r3, r3
    cdd4:	428b      	cmp	r3, r1
    cdd6:	dd01      	ble.n	cddc <k_mutex_lock+0x6c>
		adjust_owner_prio(mutex, new_prio);
    cdd8:	f7ff ffb0 	bl	cd3c <adjust_owner_prio.isra.2>
	}

	_pend_current_thread(&mutex->wait_q, timeout);
    cddc:	4620      	mov	r0, r4
    cdde:	4629      	mov	r1, r5
    cde0:	f000 f95c 	bl	d09c <_pend_current_thread>

	int got_mutex = _Swap(key);
    cde4:	4630      	mov	r0, r6
    cde6:	f7ff f9e9 	bl	c1bc <_Swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
    cdea:	2800      	cmp	r0, #0
    cdec:	d0d6      	beq.n	cd9c <k_mutex_lock+0x2c>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    cdee:	6823      	ldr	r3, [r4, #0]
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
    cdf0:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cdf2:	429c      	cmp	r4, r3
    cdf4:	bf08      	it	eq
    cdf6:	2300      	moveq	r3, #0
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
    cdf8:	b133      	cbz	r3, ce08 <k_mutex_lock+0x98>

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
    cdfa:	7a9b      	ldrb	r3, [r3, #10]
    cdfc:	b25b      	sxtb	r3, r3
    cdfe:	4299      	cmp	r1, r3
    ce00:	bfa8      	it	ge
    ce02:	4619      	movge	r1, r3
    ce04:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    ce08:	f04f 0320 	mov.w	r3, #32
    ce0c:	f3ef 8511 	mrs	r5, BASEPRI
    ce10:	f383 8811 	msr	BASEPRI, r3
						     new_prio) : new_prio;

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
    ce14:	68a0      	ldr	r0, [r4, #8]
    ce16:	f7ff ff91 	bl	cd3c <adjust_owner_prio.isra.2>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    ce1a:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
    ce1e:	f000 f97d 	bl	d11c <k_sched_unlock>

	return -EAGAIN;
    ce22:	f06f 000a 	mvn.w	r0, #10
}
    ce26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce28:	2000148c 	.word	0x2000148c

0000ce2c <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
    ce2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ce30:	4a39      	ldr	r2, [pc, #228]	; (cf18 <k_mutex_unlock+0xec>)
    ce32:	6891      	ldr	r1, [r2, #8]
    ce34:	7acb      	ldrb	r3, [r1, #11]
    ce36:	3b01      	subs	r3, #1
    ce38:	72cb      	strb	r3, [r1, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    ce3a:	68c3      	ldr	r3, [r0, #12]
    ce3c:	1e5e      	subs	r6, r3, #1

	return -EAGAIN;
}

void k_mutex_unlock(struct k_mutex *mutex)
{
    ce3e:	af00      	add	r7, sp, #0
    ce40:	4605      	mov	r5, r0

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
    ce42:	60c6      	str	r6, [r0, #12]
    ce44:	4691      	mov	r9, r2

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
    ce46:	b126      	cbz	r6, ce52 <k_mutex_unlock+0x26>
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
}
    ce48:	46bd      	mov	sp, r7
    ce4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	mutex->lock_count--;

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
		k_sched_unlock();
    ce4e:	f000 b965 	b.w	d11c <k_sched_unlock>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    ce52:	f04f 0320 	mov.w	r3, #32
    ce56:	f3ef 8811 	mrs	r8, BASEPRI
    ce5a:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ce5e:	6901      	ldr	r1, [r0, #16]
    ce60:	6880      	ldr	r0, [r0, #8]
    ce62:	f7ff ff6b 	bl	cd3c <adjust_owner_prio.isra.2>
static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    ce66:	4b2d      	ldr	r3, [pc, #180]	; (cf1c <k_mutex_unlock+0xf0>)
    ce68:	682c      	ldr	r4, [r5, #0]
    ce6a:	681b      	ldr	r3, [r3, #0]
    ce6c:	b18b      	cbz	r3, ce92 <k_mutex_unlock+0x66>
    ce6e:	42a5      	cmp	r5, r4
    ce70:	d045      	beq.n	cefe <k_mutex_unlock+0xd2>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    ce72:	2c00      	cmp	r4, #0
    ce74:	d043      	beq.n	cefe <k_mutex_unlock+0xd2>
    ce76:	6869      	ldr	r1, [r5, #4]
    ce78:	428c      	cmp	r4, r1
    ce7a:	bf14      	ite	ne
    ce7c:	6823      	ldrne	r3, [r4, #0]
    ce7e:	4633      	moveq	r3, r6

		/* skip threads that have an expired timeout */
		SYS_DLIST_FOR_EACH_NODE_SAFE(q, cur, next) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    ce80:	6a22      	ldr	r2, [r4, #32]
    ce82:	3202      	adds	r2, #2
    ce84:	d107      	bne.n	ce96 <k_mutex_unlock+0x6a>
    ce86:	2b00      	cmp	r3, #0
    ce88:	d039      	beq.n	cefe <k_mutex_unlock+0xd2>
    ce8a:	428b      	cmp	r3, r1
    ce8c:	d040      	beq.n	cf10 <k_mutex_unlock+0xe4>
    ce8e:	681a      	ldr	r2, [r3, #0]
    ce90:	e03f      	b.n	cf12 <k_mutex_unlock+0xe6>

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    ce92:	42a5      	cmp	r5, r4
    ce94:	d033      	beq.n	cefe <k_mutex_unlock+0xd2>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    ce96:	e894 000c 	ldmia.w	r4, {r2, r3}
    ce9a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    ce9c:	6822      	ldr	r2, [r4, #0]
    ce9e:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    cea0:	7a63      	ldrb	r3, [r4, #9]
    cea2:	f023 0302 	bic.w	r3, r3, #2
    cea6:	7263      	strb	r3, [r4, #9]
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    cea8:	6a23      	ldr	r3, [r4, #32]
    ceaa:	1c5a      	adds	r2, r3, #1
    ceac:	d011      	beq.n	ced2 <k_mutex_unlock+0xa6>
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    ceae:	f8d9 1010 	ldr.w	r1, [r9, #16]
    ceb2:	f104 0210 	add.w	r2, r4, #16
    ceb6:	4291      	cmp	r1, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    ceb8:	bf1f      	itttt	ne
    ceba:	6922      	ldrne	r2, [r4, #16]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    cebc:	6911      	ldrne	r1, [r2, #16]
    cebe:	185b      	addne	r3, r3, r1
    cec0:	6113      	strne	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    cec2:	6963      	ldr	r3, [r4, #20]
    cec4:	6922      	ldr	r2, [r4, #16]
    cec6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    cec8:	6922      	ldr	r2, [r4, #16]
    ceca:	6053      	str	r3, [r2, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    cecc:	f04f 33ff 	mov.w	r3, #4294967295
    ced0:	6223      	str	r3, [r4, #32]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    ced2:	7a63      	ldrb	r3, [r4, #9]
    ced4:	f023 0204 	bic.w	r2, r3, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    ced8:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    cedc:	7262      	strb	r2, [r4, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    cede:	d102      	bne.n	cee6 <k_mutex_unlock+0xba>
    cee0:	6a23      	ldr	r3, [r4, #32]
    cee2:	3301      	adds	r3, #1
    cee4:	d010      	beq.n	cf08 <k_mutex_unlock+0xdc>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    cee6:	f388 8811 	msr	BASEPRI, r8
    ceea:	2300      	movs	r3, #0
    ceec:	65e3      	str	r3, [r4, #92]	; 0x5c
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
		mutex->lock_count++;
    ceee:	68eb      	ldr	r3, [r5, #12]
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
    cef0:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
    cef2:	3301      	adds	r3, #1
    cef4:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
    cef6:	7aa3      	ldrb	r3, [r4, #10]
    cef8:	b25b      	sxtb	r3, r3
    cefa:	612b      	str	r3, [r5, #16]
    cefc:	e7a4      	b.n	ce48 <k_mutex_unlock+0x1c>
    cefe:	f388 8811 	msr	BASEPRI, r8
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
    cf02:	2300      	movs	r3, #0
    cf04:	60ab      	str	r3, [r5, #8]
    cf06:	e79f      	b.n	ce48 <k_mutex_unlock+0x1c>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    cf08:	4620      	mov	r0, r4
    cf0a:	f000 f833 	bl	cf74 <_add_thread_to_ready_q>
    cf0e:	e7ea      	b.n	cee6 <k_mutex_unlock+0xba>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    cf10:	2200      	movs	r2, #0
    cf12:	461c      	mov	r4, r3
    cf14:	4613      	mov	r3, r2
    cf16:	e7b3      	b.n	ce80 <k_mutex_unlock+0x54>
    cf18:	2000148c 	.word	0x2000148c
    cf1c:	200015b8 	.word	0x200015b8

0000cf20 <_add_timeout>:

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
    cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    cf22:	60ca      	str	r2, [r1, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    cf24:	4a12      	ldr	r2, [pc, #72]	; (cf70 <_add_timeout+0x50>)
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
    cf26:	6088      	str	r0, [r1, #8]
    cf28:	4610      	mov	r0, r2
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    cf2a:	610b      	str	r3, [r1, #16]
    cf2c:	f850 3f0c 	ldr.w	r3, [r0, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cf30:	4283      	cmp	r3, r0

static inline void _add_timeout(struct k_thread *thread,
				struct _timeout *timeout,
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
    cf32:	af00      	add	r7, sp, #0
    cf34:	d106      	bne.n	cf44 <_add_timeout+0x24>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    cf36:	6008      	str	r0, [r1, #0]
	node->prev = list->tail;
    cf38:	6913      	ldr	r3, [r2, #16]
    cf3a:	604b      	str	r3, [r1, #4]

	list->tail->next = node;
    cf3c:	6913      	ldr	r3, [r2, #16]
    cf3e:	6019      	str	r1, [r3, #0]
	list->tail = node;
    cf40:	6111      	str	r1, [r2, #16]
    cf42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    cf44:	6916      	ldr	r6, [r2, #16]
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(&_timeout_q, node) {
    cf46:	2b00      	cmp	r3, #0
    cf48:	d0f5      	beq.n	cf36 <_add_timeout+0x16>
		struct _timeout *in_q = (struct _timeout *)node;

		if (*delta <= in_q->delta_ticks_from_prev) {
    cf4a:	690c      	ldr	r4, [r1, #16]
    cf4c:	691d      	ldr	r5, [r3, #16]
    cf4e:	42ac      	cmp	r4, r5
    cf50:	dc08      	bgt.n	cf64 <_add_timeout+0x44>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    cf52:	685a      	ldr	r2, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    cf54:	1b2c      	subs	r4, r5, r4
    cf56:	611c      	str	r4, [r3, #16]
    cf58:	604a      	str	r2, [r1, #4]
		node->next = insert_point;
    cf5a:	600b      	str	r3, [r1, #0]
		insert_point->prev->next = node;
    cf5c:	685a      	ldr	r2, [r3, #4]
    cf5e:	6011      	str	r1, [r2, #0]
		insert_point->prev = node;
    cf60:	6059      	str	r1, [r3, #4]
    cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sys_dlist_insert_before(&_timeout_q, node,
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    cf64:	1b64      	subs	r4, r4, r5
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    cf66:	42b3      	cmp	r3, r6
    cf68:	610c      	str	r4, [r1, #16]
    cf6a:	d0e4      	beq.n	cf36 <_add_timeout+0x16>
    cf6c:	681b      	ldr	r3, [r3, #0]
    cf6e:	e7ea      	b.n	cf46 <_add_timeout+0x26>
    cf70:	2000148c 	.word	0x2000148c

0000cf74 <_add_thread_to_ready_q>:
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    cf74:	7a83      	ldrb	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];

	_set_ready_q_prio_bit(thread->base.prio);
    cf76:	7a82      	ldrb	r2, [r0, #10]
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    cf78:	b252      	sxtb	r2, r2
    cf7a:	3210      	adds	r2, #16
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    cf7c:	b5b0      	push	{r4, r5, r7, lr}
    cf7e:	1151      	asrs	r1, r2, #5
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    cf80:	4c10      	ldr	r4, [pc, #64]	; (cfc4 <_add_thread_to_ready_q+0x50>)
    cf82:	3106      	adds	r1, #6
    cf84:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    cf88:	2501      	movs	r5, #1
    cf8a:	f002 021f 	and.w	r2, r2, #31
    cf8e:	fa05 f202 	lsl.w	r2, r5, r2
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    cf92:	b25b      	sxtb	r3, r3
    cf94:	684d      	ldr	r5, [r1, #4]

void _add_thread_to_ready_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    cf96:	3314      	adds	r3, #20
    cf98:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    cf9c:	4315      	orrs	r5, r2
    cf9e:	604d      	str	r5, [r1, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    cfa0:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    cfa2:	685a      	ldr	r2, [r3, #4]
    cfa4:	6042      	str	r2, [r0, #4]

	list->tail->next = node;
    cfa6:	685a      	ldr	r2, [r3, #4]
    cfa8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    cfaa:	6058      	str	r0, [r3, #4]
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    cfac:	69a3      	ldr	r3, [r4, #24]
}

static inline int _is_t1_higher_prio_than_t2(struct k_thread *t1,
					     struct k_thread *t2)
{
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
    cfae:	7a81      	ldrb	r1, [r0, #10]
    cfb0:	7a9a      	ldrb	r2, [r3, #10]
    cfb2:	b249      	sxtb	r1, r1
    cfb4:	b252      	sxtb	r2, r2
    cfb6:	4291      	cmp	r1, r2
    cfb8:	bfb8      	it	lt
    cfba:	4603      	movlt	r3, r0
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    cfbc:	af00      	add	r7, sp, #0
	_set_ready_q_prio_bit(thread->base.prio);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
    cfbe:	61a3      	str	r3, [r4, #24]
    cfc0:	bdb0      	pop	{r4, r5, r7, pc}
    cfc2:	bf00      	nop
    cfc4:	2000148c 	.word	0x2000148c

0000cfc8 <_remove_thread_from_ready_q>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    cfc8:	e890 000a 	ldmia.w	r0, {r1, r3}
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    cfcc:	b590      	push	{r4, r7, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    cfce:	7a82      	ldrb	r2, [r0, #10]
    cfd0:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    cfd2:	6801      	ldr	r1, [r0, #0]
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    cfd4:	b252      	sxtb	r2, r2
    cfd6:	604b      	str	r3, [r1, #4]
	sys_dlist_t *q = &_ready_q.q[q_index];
    cfd8:	3214      	adds	r2, #20
    cfda:	4b15      	ldr	r3, [pc, #84]	; (d030 <_remove_thread_from_ready_q+0x68>)
    cfdc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    cfe0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    cfe4:	428a      	cmp	r2, r1
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    cfe6:	af00      	add	r7, sp, #0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
    cfe8:	d10f      	bne.n	d00a <_remove_thread_from_ready_q+0x42>
		_clear_ready_q_prio_bit(thread->base.prio);
    cfea:	7a82      	ldrb	r2, [r0, #10]
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + _NUM_COOP_PRIO) >> 5;
    cfec:	b252      	sxtb	r2, r2
    cfee:	3210      	adds	r2, #16
    cff0:	1151      	asrs	r1, r2, #5
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
    cff2:	3106      	adds	r1, #6
    cff4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    cff8:	2401      	movs	r4, #1
    cffa:	f002 021f 	and.w	r2, r2, #31
    cffe:	fa04 f202 	lsl.w	r2, r4, r2
    d002:	684c      	ldr	r4, [r1, #4]
    d004:	ea24 0402 	bic.w	r4, r4, r2
    d008:	604c      	str	r4, [r1, #4]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    d00a:	699a      	ldr	r2, [r3, #24]
    d00c:	4290      	cmp	r0, r2
    d00e:	d10c      	bne.n	d02a <_remove_thread_from_ready_q+0x62>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d010:	4a07      	ldr	r2, [pc, #28]	; (d030 <_remove_thread_from_ready_q+0x68>)
    d012:	69d1      	ldr	r1, [r2, #28]
    d014:	fa91 f2a1 	rbit	r2, r1
    d018:	2900      	cmp	r1, #0
    d01a:	fab2 f282 	clz	r2, r2
    d01e:	bf08      	it	eq
    d020:	f04f 32ff 	moveq.w	r2, #4294967295
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    d024:	3204      	adds	r2, #4
    d026:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    d02a:	619a      	str	r2, [r3, #24]
    d02c:	bd90      	pop	{r4, r7, pc}
    d02e:	bf00      	nop
    d030:	2000148c 	.word	0x2000148c

0000d034 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, int32_t timeout)
{
    d034:	b4b0      	push	{r4, r5, r7}
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d036:	680c      	ldr	r4, [r1, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d038:	42a1      	cmp	r1, r4
    d03a:	af00      	add	r7, sp, #0
    d03c:	d012      	beq.n	d064 <_pend_thread+0x30>
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(wait_q_list, node) {
    d03e:	b18c      	cbz	r4, d064 <_pend_thread+0x30>
}

static inline int _is_t1_higher_prio_than_t2(struct k_thread *t1,
					     struct k_thread *t2)
{
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
    d040:	7a85      	ldrb	r5, [r0, #10]
    d042:	7aa3      	ldrb	r3, [r4, #10]
		struct k_thread *pending = (struct k_thread *)node;

		if (_is_t1_higher_prio_than_t2(thread, pending)) {
    d044:	b26d      	sxtb	r5, r5
    d046:	b25b      	sxtb	r3, r3
    d048:	429d      	cmp	r5, r3
    d04a:	da06      	bge.n	d05a <_pend_thread+0x26>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    d04c:	6863      	ldr	r3, [r4, #4]
    d04e:	6043      	str	r3, [r0, #4]
		node->next = insert_point;
    d050:	6004      	str	r4, [r0, #0]
		insert_point->prev->next = node;
    d052:	6863      	ldr	r3, [r4, #4]
    d054:	6018      	str	r0, [r3, #0]
		insert_point->prev = node;
    d056:	6060      	str	r0, [r4, #4]
    d058:	e00a      	b.n	d070 <_pend_thread+0x3c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d05a:	684b      	ldr	r3, [r1, #4]
    d05c:	429c      	cmp	r4, r3
    d05e:	d001      	beq.n	d064 <_pend_thread+0x30>
    d060:	6824      	ldr	r4, [r4, #0]
    d062:	e7ec      	b.n	d03e <_pend_thread+0xa>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d064:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    d066:	684b      	ldr	r3, [r1, #4]
    d068:	6043      	str	r3, [r0, #4]

	list->tail->next = node;
    d06a:	684b      	ldr	r3, [r1, #4]
    d06c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    d06e:	6048      	str	r0, [r1, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->base.thread_state |= K_PENDING;
    d070:	7a43      	ldrb	r3, [r0, #9]
    d072:	f043 0302 	orr.w	r3, r3, #2
    d076:	7243      	strb	r3, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    d078:	1c53      	adds	r3, r2, #1
    d07a:	d00b      	beq.n	d094 <_pend_thread+0x60>

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q,
				       int32_t timeout_in_ticks)
{
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
    d07c:	3209      	adds	r2, #9
    d07e:	230a      	movs	r3, #10
    d080:	fbb2 f3f3 	udiv	r3, r2, r3
    d084:	460a      	mov	r2, r1
    d086:	3301      	adds	r3, #1
    d088:	f100 0110 	add.w	r1, r0, #16
		int32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);

		_add_thread_timeout(thread, wait_q, ticks);
	}
#endif
}
    d08c:	46bd      	mov	sp, r7
    d08e:	bcb0      	pop	{r4, r5, r7}
    d090:	f7ff bf46 	b.w	cf20 <_add_timeout>
    d094:	46bd      	mov	sp, r7
    d096:	bcb0      	pop	{r4, r5, r7}
    d098:	4770      	bx	lr
	...

0000d09c <_pend_current_thread>:

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
    d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_remove_thread_from_ready_q(_current);
    d09e:	4c07      	ldr	r4, [pc, #28]	; (d0bc <_pend_current_thread+0x20>)
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
    d0a0:	4605      	mov	r5, r0
    d0a2:	af00      	add	r7, sp, #0
	_remove_thread_from_ready_q(_current);
    d0a4:	68a0      	ldr	r0, [r4, #8]
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
    d0a6:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
    d0a8:	f7ff ff8e 	bl	cfc8 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    d0ac:	68a0      	ldr	r0, [r4, #8]
    d0ae:	4632      	mov	r2, r6
    d0b0:	4629      	mov	r1, r5
}
    d0b2:	46bd      	mov	sp, r7
    d0b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
	_remove_thread_from_ready_q(_current);
	_pend_thread(_current, wait_q, timeout);
    d0b8:	f7ff bfbc 	b.w	d034 <_pend_thread>
    d0bc:	2000148c 	.word	0x2000148c

0000d0c0 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    d0c0:	b580      	push	{r7, lr}
{
	int bitmap = 0;
	uint32_t ready_range;

#if (K_NUM_PRIORITIES <= 32)
	ready_range = _ready_q.prio_bmap[0];
    d0c2:	4a0a      	ldr	r2, [pc, #40]	; (d0ec <__must_switch_threads+0x2c>)
    d0c4:	69d1      	ldr	r1, [r2, #28]
		_current->base.prio, _get_highest_ready_prio());

	extern void _dump_ready_q(void);
	_dump_ready_q();

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
    d0c6:	6892      	ldr	r2, [r2, #8]
    d0c8:	2900      	cmp	r1, #0
    d0ca:	fa91 f3a1 	rbit	r3, r1
    d0ce:	7a90      	ldrb	r0, [r2, #10]
    d0d0:	fab3 f383 	clz	r3, r3
    d0d4:	bf08      	it	eq
    d0d6:	f04f 33ff 	moveq.w	r3, #4294967295
    d0da:	b240      	sxtb	r0, r0
    d0dc:	3b10      	subs	r3, #16
#else
	return 0;
#endif
}
    d0de:	4298      	cmp	r0, r3
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    d0e0:	af00      	add	r7, sp, #0

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
#else
	return 0;
#endif
}
    d0e2:	bfd4      	ite	le
    d0e4:	2000      	movle	r0, #0
    d0e6:	2001      	movgt	r0, #1
    d0e8:	bd80      	pop	{r7, pc}
    d0ea:	bf00      	nop
    d0ec:	2000148c 	.word	0x2000148c

0000d0f0 <_reschedule_threads>:

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
    d0f0:	b598      	push	{r3, r4, r7, lr}
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d0f2:	4b09      	ldr	r3, [pc, #36]	; (d118 <_reschedule_threads+0x28>)
/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
#ifdef CONFIG_PREEMPT_ENABLED
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d0f4:	689b      	ldr	r3, [r3, #8]
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d0f6:	895b      	ldrh	r3, [r3, #10]
    d0f8:	2b7f      	cmp	r3, #127	; 0x7f
    d0fa:	af00      	add	r7, sp, #0
    d0fc:	4604      	mov	r4, r0
    d0fe:	d802      	bhi.n	d106 <_reschedule_threads+0x16>
    d100:	f7ff ffde 	bl	d0c0 <__must_switch_threads>
    d104:	b910      	cbnz	r0, d10c <_reschedule_threads+0x1c>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d106:	f384 8811 	msr	BASEPRI, r4
    d10a:	bd98      	pop	{r3, r4, r7, pc}
#ifdef CONFIG_PREEMPT_ENABLED
	K_DEBUG("rescheduling threads\n");

	if (_must_switch_threads()) {
		K_DEBUG("context-switching out %p\n", _current);
		_Swap(key);
    d10c:	4620      	mov	r0, r4
		irq_unlock(key);
	}
#else
	irq_unlock(key);
#endif
}
    d10e:	46bd      	mov	sp, r7
    d110:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
#ifdef CONFIG_PREEMPT_ENABLED
	K_DEBUG("rescheduling threads\n");

	if (_must_switch_threads()) {
		K_DEBUG("context-switching out %p\n", _current);
		_Swap(key);
    d114:	f7ff b852 	b.w	c1bc <_Swap>
    d118:	2000148c 	.word	0x2000148c

0000d11c <k_sched_unlock>:
		_current, _current->base.sched_locked);
#endif
}

void k_sched_unlock(void)
{
    d11c:	b480      	push	{r7}
    d11e:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d120:	f04f 0320 	mov.w	r3, #32
    d124:	f3ef 8011 	mrs	r0, BASEPRI
    d128:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(_current->base.sched_locked != 0, "");
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	++_current->base.sched_locked;
    d12c:	4b04      	ldr	r3, [pc, #16]	; (d140 <k_sched_unlock+0x24>)
    d12e:	689a      	ldr	r2, [r3, #8]
    d130:	7ad3      	ldrb	r3, [r2, #11]
    d132:	3301      	adds	r3, #1
    d134:	72d3      	strb	r3, [r2, #11]
	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
#endif
}
    d136:	46bd      	mov	sp, r7
    d138:	bc80      	pop	{r7}
	++_current->base.sched_locked;

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->base.sched_locked);

	_reschedule_threads(key);
    d13a:	f7ff bfd9 	b.w	d0f0 <_reschedule_threads>
    d13e:	bf00      	nop
    d140:	2000148c 	.word	0x2000148c

0000d144 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
    d144:	7a83      	ldrb	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
    d146:	4a13      	ldr	r2, [pc, #76]	; (d194 <_move_thread_to_end_of_prio_q+0x50>)
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + _NUM_COOP_PRIO;
    d148:	b25b      	sxtb	r3, r3
    d14a:	3314      	adds	r3, #20
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    d14c:	b590      	push	{r4, r7, lr}
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];
    d14e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    d152:	af00      	add	r7, sp, #0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
    d154:	6859      	ldr	r1, [r3, #4]
    d156:	4288      	cmp	r0, r1
    d158:	d01a      	beq.n	d190 <_move_thread_to_end_of_prio_q+0x4c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d15a:	6841      	ldr	r1, [r0, #4]
    d15c:	6804      	ldr	r4, [r0, #0]
    d15e:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
    d160:	6804      	ldr	r4, [r0, #0]
    d162:	6061      	str	r1, [r4, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d164:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
    d166:	6859      	ldr	r1, [r3, #4]
    d168:	6041      	str	r1, [r0, #4]

	list->tail->next = node;
    d16a:	6859      	ldr	r1, [r3, #4]
    d16c:	6008      	str	r0, [r1, #0]
	list->tail = node;
    d16e:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    d170:	6993      	ldr	r3, [r2, #24]
    d172:	4298      	cmp	r0, r3
    d174:	d10b      	bne.n	d18e <_move_thread_to_end_of_prio_q+0x4a>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d176:	69d1      	ldr	r1, [r2, #28]
    d178:	fa91 f3a1 	rbit	r3, r1
    d17c:	2900      	cmp	r1, #0
    d17e:	fab3 f383 	clz	r3, r3
    d182:	bf08      	it	eq
    d184:	f04f 33ff 	moveq.w	r3, #4294967295
 */
static struct k_thread *_get_ready_q_head(void)
{
	int prio = _get_highest_ready_prio();
	int q_index = _get_ready_q_q_index(prio);
	sys_dlist_t *list = &_ready_q.q[q_index];
    d188:	3304      	adds	r3, #4
    d18a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
    d18e:	6193      	str	r3, [r2, #24]
    d190:	bd90      	pop	{r4, r7, pc}
    d192:	bf00      	nop
    d194:	2000148c 	.word	0x2000148c

0000d198 <k_yield>:
#endif
}

void k_yield(void)
{
    d198:	b5b0      	push	{r4, r5, r7, lr}
    d19a:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d19c:	f04f 0320 	mov.w	r3, #32
    d1a0:	f3ef 8511 	mrs	r5, BASEPRI
    d1a4:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
    d1a8:	4c08      	ldr	r4, [pc, #32]	; (d1cc <k_yield+0x34>)
    d1aa:	68a0      	ldr	r0, [r4, #8]
    d1ac:	f7ff ffca 	bl	d144 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
    d1b0:	68a2      	ldr	r2, [r4, #8]
    d1b2:	69a3      	ldr	r3, [r4, #24]
    d1b4:	429a      	cmp	r2, r3
    d1b6:	d102      	bne.n	d1be <k_yield+0x26>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d1b8:	f385 8811 	msr	BASEPRI, r5
    d1bc:	bdb0      	pop	{r4, r5, r7, pc}
		irq_unlock(key);
	} else {
		_Swap(key);
    d1be:	4628      	mov	r0, r5
	}
}
    d1c0:	46bd      	mov	sp, r7
    d1c2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
	_move_thread_to_end_of_prio_q(_current);

	if (_current == _get_next_ready_thread()) {
		irq_unlock(key);
	} else {
		_Swap(key);
    d1c6:	f7fe bff9 	b.w	c1bc <_Swap>
    d1ca:	bf00      	nop
    d1cc:	2000148c 	.word	0x2000148c

0000d1d0 <k_current_get>:
		_reschedule_threads(key);
	}
}

k_tid_t k_current_get(void)
{
    d1d0:	b580      	push	{r7, lr}
	return _current;
}
    d1d2:	4b02      	ldr	r3, [pc, #8]	; (d1dc <k_current_get+0xc>)
		_reschedule_threads(key);
	}
}

k_tid_t k_current_get(void)
{
    d1d4:	af00      	add	r7, sp, #0
	return _current;
}
    d1d6:	6898      	ldr	r0, [r3, #8]
    d1d8:	bd80      	pop	{r7, pc}
    d1da:	bf00      	nop
    d1dc:	2000148c 	.word	0x2000148c

0000d1e0 <sys_dlist_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d1e0:	e890 000c 	ldmia.w	r0, {r2, r3}
 *
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
    d1e4:	b580      	push	{r7, lr}
	node->prev->next = node->next;
    d1e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    d1e8:	6802      	ldr	r2, [r0, #0]
    d1ea:	6053      	str	r3, [r2, #4]
 *
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
    d1ec:	af00      	add	r7, sp, #0
	node->prev->next = node->next;
	node->next->prev = node->prev;
    d1ee:	bd80      	pop	{r7, pc}

0000d1f0 <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    d1f0:	b580      	push	{r7, lr}
    d1f2:	4601      	mov	r1, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    d1f4:	6900      	ldr	r0, [r0, #16]
    d1f6:	1c43      	adds	r3, r0, #1
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    d1f8:	af00      	add	r7, sp, #0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    d1fa:	d00e      	beq.n	d21a <_abort_timeout+0x2a>
    d1fc:	4b07      	ldr	r3, [pc, #28]	; (d21c <_abort_timeout+0x2c>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    d1fe:	691b      	ldr	r3, [r3, #16]
    d200:	4299      	cmp	r1, r3
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d202:	bf1f      	itttt	ne
    d204:	680b      	ldrne	r3, [r1, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    d206:	691a      	ldrne	r2, [r3, #16]
    d208:	1880      	addne	r0, r0, r2
    d20a:	6118      	strne	r0, [r3, #16]
	}
	sys_dlist_remove(&timeout->node);
    d20c:	4608      	mov	r0, r1
    d20e:	f7ff ffe7 	bl	d1e0 <sys_dlist_remove>
	timeout->delta_ticks_from_prev = _INACTIVE;
    d212:	f04f 33ff 	mov.w	r3, #4294967295
    d216:	610b      	str	r3, [r1, #16]

	return 0;
    d218:	2000      	movs	r0, #0
}
    d21a:	bd80      	pop	{r7, pc}
    d21c:	2000148c 	.word	0x2000148c

0000d220 <_ready_thread>:
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    d220:	b480      	push	{r7}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    d222:	7a42      	ldrb	r2, [r0, #9]
    d224:	f022 0104 	bic.w	r1, r2, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d228:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 * blocked for another reason (eg. suspended).
 *
 * Must be called with interrupts locked.
 */
static inline void _ready_thread(struct k_thread *thread)
{
    d22c:	af00      	add	r7, sp, #0
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    d22e:	7241      	strb	r1, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d230:	d106      	bne.n	d240 <_ready_thread+0x20>
    d232:	6a03      	ldr	r3, [r0, #32]
    d234:	3301      	adds	r3, #1
    d236:	d103      	bne.n	d240 <_ready_thread+0x20>
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
	}
}
    d238:	46bd      	mov	sp, r7
    d23a:	bc80      	pop	{r7}

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    d23c:	f7ff be9a 	b.w	cf74 <_add_thread_to_ready_q>
	}
}
    d240:	46bd      	mov	sp, r7
    d242:	bc80      	pop	{r7}
    d244:	4770      	bx	lr
	...

0000d248 <_get_thread_to_unpend>:
{
	return (struct k_thread *)sys_dlist_peek_head(wait_q);
}

static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
    d248:	b580      	push	{r7, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    d24a:	4b12      	ldr	r3, [pc, #72]	; (d294 <_get_thread_to_unpend+0x4c>)
    d24c:	6801      	ldr	r1, [r0, #0]
    d24e:	681b      	ldr	r3, [r3, #0]
{
	return (struct k_thread *)sys_dlist_peek_head(wait_q);
}

static inline struct k_thread *_get_thread_to_unpend(_wait_q_t *wait_q)
{
    d250:	af00      	add	r7, sp, #0
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
    d252:	b1bb      	cbz	r3, d284 <_get_thread_to_unpend+0x3c>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d254:	4288      	cmp	r0, r1
    d256:	d101      	bne.n	d25c <_get_thread_to_unpend+0x14>
			}

			sys_dlist_remove(cur);
			return thread;
		}
		return NULL;
    d258:	2000      	movs	r0, #0
    d25a:	bd80      	pop	{r7, pc}
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d25c:	2900      	cmp	r1, #0
    d25e:	d0fb      	beq.n	d258 <_get_thread_to_unpend+0x10>
    d260:	6840      	ldr	r0, [r0, #4]
    d262:	4281      	cmp	r1, r0
    d264:	bf14      	ite	ne
    d266:	680b      	ldrne	r3, [r1, #0]
    d268:	2300      	moveq	r3, #0

		/* skip threads that have an expired timeout */
		SYS_DLIST_FOR_EACH_NODE_SAFE(q, cur, next) {
			struct k_thread *thread = (struct k_thread *)cur;

			if (_is_thread_timeout_expired(thread)) {
    d26a:	6a0a      	ldr	r2, [r1, #32]
    d26c:	3202      	adds	r2, #2
    d26e:	d10b      	bne.n	d288 <_get_thread_to_unpend+0x40>
    d270:	2b00      	cmp	r3, #0
    d272:	d0f1      	beq.n	d258 <_get_thread_to_unpend+0x10>
    d274:	4283      	cmp	r3, r0
    d276:	d103      	bne.n	d280 <_get_thread_to_unpend+0x38>
    d278:	2200      	movs	r2, #0
    d27a:	4619      	mov	r1, r3
    d27c:	4613      	mov	r3, r2
    d27e:	e7f4      	b.n	d26a <_get_thread_to_unpend+0x22>
    d280:	681a      	ldr	r2, [r3, #0]
    d282:	e7fa      	b.n	d27a <_get_thread_to_unpend+0x32>

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    d284:	4288      	cmp	r0, r1
    d286:	d0e7      	beq.n	d258 <_get_thread_to_unpend+0x10>
		return NULL;
	}

	node = list->head;
	sys_dlist_remove(node);
    d288:	4608      	mov	r0, r1
    d28a:	f7ff ffa9 	bl	d1e0 <sys_dlist_remove>
    d28e:	4608      	mov	r0, r1
		return NULL;
	}
#endif

	return (struct k_thread *)sys_dlist_get(wait_q);
}
    d290:	bd80      	pop	{r7, pc}
    d292:	bf00      	nop
    d294:	200015b8 	.word	0x200015b8

0000d298 <sem_give_common>:
 * @brief Common semaphore give code
 *
 * @return true if _Swap() will need to be invoked; false if not
 */
static bool sem_give_common(struct k_sem *sem)
{
    d298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d29c:	af00      	add	r7, sp, #0
    d29e:	4605      	mov	r5, r0

/* unpend the first thread from a wait queue */
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _get_thread_to_unpend(wait_q);
    d2a0:	f7ff ffd2 	bl	d248 <_get_thread_to_unpend>

	if (thread) {
    d2a4:	4604      	mov	r4, r0
    d2a6:	2800      	cmp	r0, #0
    d2a8:	d05e      	beq.n	d368 <sem_give_common+0xd0>
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    d2aa:	7a43      	ldrb	r3, [r0, #9]
    d2ac:	f023 0302 	bic.w	r3, r3, #2
    d2b0:	7243      	strb	r3, [r0, #9]

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    d2b2:	3010      	adds	r0, #16
    d2b4:	f7ff ff9c 	bl	d1f0 <_abort_timeout>
	struct _sem_desc *desc = NULL;
	sys_dlist_t  *list;
	sys_dnode_t  *node;
	sys_dnode_t  *next;

	if (!(thread->base.thread_state & K_DUMMY)) {
    d2b8:	7a63      	ldrb	r3, [r4, #9]
    d2ba:	f003 0320 	and.w	r3, r3, #32
    d2be:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    d2c2:	2b00      	cmp	r3, #0
    d2c4:	d05d      	beq.n	d382 <sem_give_common+0xea>
	/*
	 * The awakened thread is a dummy thread and thus was involved
	 * in a semaphore group operation.
	 */

	list = (sys_dlist_t *)dummy->desc.thread->base.swap_data;
    d2c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d2c8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d2cc:	f8d8 4000 	ldr.w	r4, [r8]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d2d0:	45a0      	cmp	r8, r4
    d2d2:	bf08      	it	eq
    d2d4:	2400      	moveq	r4, #0
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d2d6:	b12c      	cbz	r4, d2e4 <sem_give_common+0x4c>
    d2d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d2dc:	42a3      	cmp	r3, r4
    d2de:	d003      	beq.n	d2e8 <sem_give_common+0x50>
    d2e0:	6826      	ldr	r6, [r4, #0]
    d2e2:	e002      	b.n	d2ea <sem_give_common+0x52>
    d2e4:	4626      	mov	r6, r4
    d2e6:	e000      	b.n	d2ea <sem_give_common+0x52>
    d2e8:	2600      	movs	r6, #0
	do {
		next = sys_dlist_peek_next(list, node);

		desc = (struct _sem_desc *)node;

		if (desc->sem != sem) {
    d2ea:	68e3      	ldr	r3, [r4, #12]
    d2ec:	429d      	cmp	r5, r3
    d2ee:	d015      	beq.n	d31c <sem_give_common+0x84>
			sem_thread = CONTAINER_OF(desc, struct _sem_thread,
						  desc);
			struct k_thread *dummy_thread =
				(struct k_thread *)&sem_thread->dummy;

			if (_is_thread_timeout_expired(dummy_thread)) {
    d2f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d2f4:	3302      	adds	r3, #2
    d2f6:	d0ee      	beq.n	d2d6 <sem_give_common+0x3e>
    d2f8:	f1a4 0928 	sub.w	r9, r4, #40	; 0x28
    d2fc:	f1a4 0018 	sub.w	r0, r4, #24
    d300:	f7ff ff76 	bl	d1f0 <_abort_timeout>
/* must be called with interrupts locked */
static inline void _unpend_thread(struct k_thread *thread)
{
	__ASSERT(thread->base.thread_state & K_PENDING, "");

	sys_dlist_remove(&thread->base.k_q_node);
    d304:	4648      	mov	r0, r9
    d306:	f7ff ff6b 	bl	d1e0 <sys_dlist_remove>
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    d30a:	f814 3c1f 	ldrb.w	r3, [r4, #-31]
    d30e:	f023 0302 	bic.w	r3, r3, #2
    d312:	f804 3c1f 	strb.w	r3, [r4, #-31]
				continue;
			}
			_abort_thread_timeout(dummy_thread);
			_unpend_thread(dummy_thread);

			sys_dlist_remove(node);
    d316:	4620      	mov	r0, r4
    d318:	f7ff ff62 	bl	d1e0 <sys_dlist_remove>
		}
		node = next;
	} while (node != NULL);
    d31c:	b10e      	cbz	r6, d322 <sem_give_common+0x8a>
    d31e:	4634      	mov	r4, r6
    d320:	e7d9      	b.n	d2d6 <sem_give_common+0x3e>
	 * As this code may be executed several times by a semaphore group give
	 * operation, it is important to ensure that the attempt to ready the
	 * master thread is done only once.
	 */

	if (!_is_thread_ready(desc->thread)) {
    d322:	68a0      	ldr	r0, [r4, #8]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d324:	7a43      	ldrb	r3, [r0, #9]
    d326:	f013 0f3e 	tst.w	r3, #62	; 0x3e
    d32a:	d102      	bne.n	d332 <sem_give_common+0x9a>
    d32c:	6a03      	ldr	r3, [r0, #32]
    d32e:	3301      	adds	r3, #1
    d330:	d00c      	beq.n	d34c <sem_give_common+0xb4>
    d332:	3010      	adds	r0, #16
    d334:	f7ff ff5c 	bl	d1f0 <_abort_timeout>
		_abort_thread_timeout(desc->thread);
		_mark_thread_as_not_pending(desc->thread);
    d338:	68a2      	ldr	r2, [r4, #8]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    d33a:	7a53      	ldrb	r3, [r2, #9]
    d33c:	f023 0302 	bic.w	r3, r3, #2
    d340:	7253      	strb	r3, [r2, #9]
		if (_is_thread_ready(desc->thread)) {
    d342:	68a0      	ldr	r0, [r4, #8]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d344:	7a43      	ldrb	r3, [r0, #9]
    d346:	f013 0f3e 	tst.w	r3, #62	; 0x3e
    d34a:	d014      	beq.n	d376 <sem_give_common+0xde>
    d34c:	68a3      	ldr	r3, [r4, #8]
    d34e:	2200      	movs	r2, #0
    d350:	65da      	str	r2, [r3, #92]	; 0x5c
    d352:	f3ef 8305 	mrs	r3, IPSR
    d356:	2b0a      	cmp	r3, #10
    d358:	d823      	bhi.n	d3a2 <sem_give_common+0x10a>
    d35a:	b1bb      	cbz	r3, d38c <sem_give_common+0xf4>
    d35c:	4b12      	ldr	r3, [pc, #72]	; (d3a8 <sem_give_common+0x110>)
    d35e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    d362:	051b      	lsls	r3, r3, #20
    d364:	d412      	bmi.n	d38c <sem_give_common+0xf4>
    d366:	e01c      	b.n	d3a2 <sem_give_common+0x10a>
		/*
		 * No thread is waiting on the semaphore.
		 * Increment the semaphore's count unless
		 * its limit has already been reached.
		 */
		sem->count += (sem->count != sem->limit);
    d368:	68ab      	ldr	r3, [r5, #8]
    d36a:	68ea      	ldr	r2, [r5, #12]
    d36c:	429a      	cmp	r2, r3
    d36e:	bf18      	it	ne
    d370:	3301      	addne	r3, #1
    d372:	60ab      	str	r3, [r5, #8]
    d374:	e015      	b.n	d3a2 <sem_give_common+0x10a>
    d376:	6a03      	ldr	r3, [r0, #32]
    d378:	3301      	adds	r3, #1
    d37a:	d1e7      	bne.n	d34c <sem_give_common+0xb4>

	if (!_is_thread_ready(desc->thread)) {
		_abort_thread_timeout(desc->thread);
		_mark_thread_as_not_pending(desc->thread);
		if (_is_thread_ready(desc->thread)) {
			_add_thread_to_ready_q(desc->thread);
    d37c:	f7ff fdfa 	bl	cf74 <_add_thread_to_ready_q>
    d380:	e7e4      	b.n	d34c <sem_give_common+0xb4>

	_abort_thread_timeout(thread);

	if (!handle_sem_group(sem, thread)) {
		/* Handle the non-group case */
		_ready_thread(thread);
    d382:	4620      	mov	r0, r4
    d384:	f7ff ff4c 	bl	d220 <_ready_thread>
    d388:	65e6      	str	r6, [r4, #92]	; 0x5c
    d38a:	e7e2      	b.n	d352 <sem_give_common+0xba>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d38c:	4b07      	ldr	r3, [pc, #28]	; (d3ac <sem_give_common+0x114>)
/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
#ifdef CONFIG_PREEMPT_ENABLED
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d38e:	689b      	ldr	r3, [r3, #8]
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d390:	895b      	ldrh	r3, [r3, #10]
    d392:	2b7f      	cmp	r3, #127	; 0x7f
    d394:	d805      	bhi.n	d3a2 <sem_give_common+0x10a>
    d396:	f7ff fe93 	bl	d0c0 <__must_switch_threads>
    d39a:	b110      	cbz	r0, d3a2 <sem_give_common+0x10a>
		_set_thread_return_value(thread, 0);
	}

	return !_is_in_isr() && _must_switch_threads();
    d39c:	2001      	movs	r0, #1
    d39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3a2:	2000      	movs	r0, #0
}
    d3a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d3a8:	e000e000 	.word	0xe000e000
    d3ac:	2000148c 	.word	0x2000148c

0000d3b0 <k_sem_init>:

#endif /* CONFIG_OBJECT_TRACING */

void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
    d3b0:	b580      	push	{r7, lr}
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
    d3b2:	6081      	str	r1, [r0, #8]

#endif /* CONFIG_OBJECT_TRACING */

void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
    d3b4:	af00      	add	r7, sp, #0
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
	sem->limit = limit;
    d3b6:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    d3b8:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    d3ba:	6040      	str	r0, [r0, #4]
    d3bc:	bd80      	pop	{r7, pc}

0000d3be <k_sem_give>:
	irq_unlock(key);
}
#endif

void k_sem_give(struct k_sem *sem)
{
    d3be:	b598      	push	{r3, r4, r7, lr}
    d3c0:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d3c2:	f04f 0320 	mov.w	r3, #32
    d3c6:	f3ef 8411 	mrs	r4, BASEPRI
    d3ca:	f383 8811 	msr	BASEPRI, r3
	unsigned int   key;

	key = irq_lock();

	if (sem_give_common(sem)) {
    d3ce:	f7ff ff63 	bl	d298 <sem_give_common>
    d3d2:	b128      	cbz	r0, d3e0 <k_sem_give+0x22>
		_Swap(key);
    d3d4:	4620      	mov	r0, r4
	} else {
		irq_unlock(key);
	}
}
    d3d6:	46bd      	mov	sp, r7
    d3d8:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
	unsigned int   key;

	key = irq_lock();

	if (sem_give_common(sem)) {
		_Swap(key);
    d3dc:	f7fe beee 	b.w	c1bc <_Swap>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d3e0:	f384 8811 	msr	BASEPRI, r4
    d3e4:	bd98      	pop	{r3, r4, r7, pc}

0000d3e6 <k_sem_take>:
		irq_unlock(key);
	}
}

int k_sem_take(struct k_sem *sem, int32_t timeout)
{
    d3e6:	b5b0      	push	{r4, r5, r7, lr}
    d3e8:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d3ea:	f04f 0320 	mov.w	r3, #32
    d3ee:	f3ef 8411 	mrs	r4, BASEPRI
    d3f2:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    d3f6:	6883      	ldr	r3, [r0, #8]
    d3f8:	b12b      	cbz	r3, d406 <k_sem_take+0x20>
		sem->count--;
    d3fa:	3b01      	subs	r3, #1
    d3fc:	6083      	str	r3, [r0, #8]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d3fe:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    d402:	2000      	movs	r0, #0
    d404:	bdb0      	pop	{r4, r5, r7, pc}
	}

	if (timeout == K_NO_WAIT) {
    d406:	b921      	cbnz	r1, d412 <k_sem_take+0x2c>
    d408:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    d40c:	f06f 000f 	mvn.w	r0, #15
    d410:	bdb0      	pop	{r4, r5, r7, pc}
	}

	_pend_current_thread(&sem->wait_q, timeout);
    d412:	f7ff fe43 	bl	d09c <_pend_current_thread>

	return _Swap(key);
    d416:	4620      	mov	r0, r4
}
    d418:	46bd      	mov	sp, r7
    d41a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);

	return _Swap(key);
    d41e:	f7fe becd 	b.w	c1bc <_Swap>
	...

0000d424 <_tick_get>:
 *
 * @return the current system tick count
 *
 */
int64_t _tick_get(void)
{
    d424:	b580      	push	{r7, lr}
    d426:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d428:	f04f 0220 	mov.w	r2, #32
    d42c:	f3ef 8311 	mrs	r3, BASEPRI
    d430:	f382 8811 	msr	BASEPRI, r2
	 * so we have to lock the timer interrupt that causes change of
	 * _sys_clock_tick_count
	 */
	unsigned int imask = irq_lock();

	tmp_sys_clock_tick_count = _sys_clock_tick_count;
    d434:	4a02      	ldr	r2, [pc, #8]	; (d440 <_tick_get+0x1c>)
    d436:	e9d2 0100 	ldrd	r0, r1, [r2]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d43a:	f383 8811 	msr	BASEPRI, r3
	irq_unlock(imask);
	return tmp_sys_clock_tick_count;
}
    d43e:	bd80      	pop	{r7, pc}
    d440:	200015c0 	.word	0x200015c0

0000d444 <k_uptime_get>:
FUNC_ALIAS(_tick_get, sys_tick_get, int64_t);

int64_t k_uptime_get(void)
{
    d444:	b598      	push	{r3, r4, r7, lr}
    d446:	af00      	add	r7, sp, #0
	return __ticks_to_ms(_tick_get());
    d448:	f7ff ffec 	bl	d424 <_tick_get>
    d44c:	240a      	movs	r4, #10
    d44e:	fba0 2304 	umull	r2, r3, r0, r4
    d452:	fb04 3301 	mla	r3, r4, r1, r3
}
    d456:	4610      	mov	r0, r2
    d458:	4619      	mov	r1, r3
    d45a:	bd98      	pop	{r3, r4, r7, pc}

0000d45c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(int32_t ticks)
{
    d45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d460:	b083      	sub	sp, #12
    d462:	4680      	mov	r8, r0
    d464:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d466:	f04f 0320 	mov.w	r3, #32
    d46a:	f3ef 8011 	mrs	r0, BASEPRI
    d46e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
    d472:	495e      	ldr	r1, [pc, #376]	; (d5ec <_nano_sys_clock_tick_announce+0x190>)
    d474:	e9d1 2300 	ldrd	r2, r3, [r1]
    d478:	eb12 0408 	adds.w	r4, r2, r8
    d47c:	eb43 75e8 	adc.w	r5, r3, r8, asr #31
    d480:	e9c1 4500 	strd	r4, r5, [r1]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d484:	f380 8811 	msr	BASEPRI, r0
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    d488:	4638      	mov	r0, r7
    d48a:	603f      	str	r7, [r7, #0]
	list->tail = (sys_dnode_t *)list;
    d48c:	607f      	str	r7, [r7, #4]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d48e:	f04f 0320 	mov.w	r3, #32
    d492:	f3ef 8411 	mrs	r4, BASEPRI
    d496:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d49a:	4d55      	ldr	r5, [pc, #340]	; (d5f0 <_nano_sys_clock_tick_announce+0x194>)
    d49c:	462a      	mov	r2, r5
    d49e:	4621      	mov	r1, r4
    d4a0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d4a4:	4293      	cmp	r3, r2
    d4a6:	4696      	mov	lr, r2
    d4a8:	d000      	beq.n	d4ac <_nano_sys_clock_tick_announce+0x50>
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (!head) {
    d4aa:	b913      	cbnz	r3, d4b2 <_nano_sys_clock_tick_announce+0x56>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d4ac:	f384 8811 	msr	BASEPRI, r4
    d4b0:	e072      	b.n	d598 <_nano_sys_clock_tick_announce+0x13c>
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    d4b2:	691c      	ldr	r4, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    d4b4:	4e4f      	ldr	r6, [pc, #316]	; (d5f4 <_nano_sys_clock_tick_announce+0x198>)
	if (!head) {
		irq_unlock(key);
		return;
	}

	head->delta_ticks_from_prev -= ticks;
    d4b6:	ebc8 0404 	rsb	r4, r8, r4
    d4ba:	611c      	str	r4, [r3, #16]
	 * prohibited.
	 */
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;
    d4bc:	2401      	movs	r4, #1
    d4be:	6034      	str	r4, [r6, #0]

	while (timeout && timeout->delta_ticks_from_prev == 0) {

		sys_dlist_remove(next);
		sys_dlist_append(&expired, next);
		timeout->delta_ticks_from_prev = _EXPIRED;
    d4c0:	f06f 0401 	mvn.w	r4, #1
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    d4c4:	691a      	ldr	r2, [r3, #16]
    d4c6:	b9d2      	cbnz	r2, d4fe <_nano_sys_clock_tick_announce+0xa2>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d4c8:	e893 1004 	ldmia.w	r3, {r2, ip}
    d4cc:	f8cc 2000 	str.w	r2, [ip]
	node->next->prev = node->prev;
    d4d0:	681a      	ldr	r2, [r3, #0]
    d4d2:	f8c2 c004 	str.w	ip, [r2, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d4d6:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    d4d8:	687a      	ldr	r2, [r7, #4]
    d4da:	605a      	str	r2, [r3, #4]

	list->tail->next = node;
    d4dc:	687a      	ldr	r2, [r7, #4]
    d4de:	6013      	str	r3, [r2, #0]
	list->tail = node;
    d4e0:	607b      	str	r3, [r7, #4]

		sys_dlist_remove(next);
		sys_dlist_append(&expired, next);
		timeout->delta_ticks_from_prev = _EXPIRED;
    d4e2:	611c      	str	r4, [r3, #16]
    d4e4:	f381 8811 	msr	BASEPRI, r1
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d4e8:	f04f 0320 	mov.w	r3, #32
    d4ec:	f3ef 8111 	mrs	r1, BASEPRI
    d4f0:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d4f4:	68eb      	ldr	r3, [r5, #12]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d4f6:	4573      	cmp	r3, lr
    d4f8:	d001      	beq.n	d4fe <_nano_sys_clock_tick_announce+0xa2>
	sys_dnode_t *next = &head->node;
	struct _timeout *timeout = (struct _timeout *)next;

	_handling_timeouts = 1;

	while (timeout && timeout->delta_ticks_from_prev == 0) {
    d4fa:	2b00      	cmp	r3, #0
    d4fc:	d1e2      	bne.n	d4c4 <_nano_sys_clock_tick_announce+0x68>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d4fe:	f381 8811 	msr	BASEPRI, r1
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d502:	683b      	ldr	r3, [r7, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d504:	4283      	cmp	r3, r0
    d506:	d102      	bne.n	d50e <_nano_sys_clock_tick_announce+0xb2>

	irq_unlock(key);

	_handle_expired_timeouts(&expired);

	_handling_timeouts = 0;
    d508:	2300      	movs	r3, #0
    d50a:	6033      	str	r3, [r6, #0]
    d50c:	e044      	b.n	d598 <_nano_sys_clock_tick_announce+0x13c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d50e:	2b00      	cmp	r3, #0
    d510:	d0fa      	beq.n	d508 <_nano_sys_clock_tick_announce+0xac>
    d512:	687a      	ldr	r2, [r7, #4]
    d514:	4293      	cmp	r3, r2
    d516:	bf14      	ite	ne
    d518:	681c      	ldrne	r4, [r3, #0]
    d51a:	2400      	moveq	r4, #0
static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
    d51c:	f04f 39ff 	mov.w	r9, #4294967295
static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
    d520:	f04f 0a00 	mov.w	sl, #0
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d524:	6859      	ldr	r1, [r3, #4]
    d526:	681a      	ldr	r2, [r3, #0]
    d528:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
    d52a:	681a      	ldr	r2, [r3, #0]
    d52c:	6051      	str	r1, [r2, #4]
 * kept as -EAGAIN, set previously in _Swap().
 */

static inline void _handle_one_expired_timeout(struct _timeout *timeout)
{
	struct k_thread *thread = timeout->thread;
    d52e:	6898      	ldr	r0, [r3, #8]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d530:	f04f 0220 	mov.w	r2, #32
    d534:	f3ef 8b11 	mrs	fp, BASEPRI
    d538:	f382 8811 	msr	BASEPRI, r2
	unsigned int key = irq_lock();

	timeout->delta_ticks_from_prev = _INACTIVE;
    d53c:	f8c3 9010 	str.w	r9, [r3, #16]

	K_DEBUG("timeout %p\n", timeout);
	if (thread) {
    d540:	b1c8      	cbz	r0, d576 <_nano_sys_clock_tick_announce+0x11a>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
    d542:	68db      	ldr	r3, [r3, #12]
    d544:	b153      	cbz	r3, d55c <_nano_sys_clock_tick_announce+0x100>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d546:	6842      	ldr	r2, [r0, #4]
    d548:	6803      	ldr	r3, [r0, #0]
    d54a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    d54c:	6803      	ldr	r3, [r0, #0]
    d54e:	605a      	str	r2, [r3, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    d550:	7a43      	ldrb	r3, [r0, #9]
		_unpend_thread(thread);
		thread->base.timeout.wait_q = NULL;
    d552:	f8c0 a01c 	str.w	sl, [r0, #28]
    d556:	f023 0302 	bic.w	r3, r3, #2
    d55a:	7243      	strb	r3, [r0, #9]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    d55c:	7a43      	ldrb	r3, [r0, #9]
    d55e:	f023 0204 	bic.w	r2, r3, #4
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d562:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    d566:	7242      	strb	r2, [r0, #9]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return !(_is_thread_prevented_from_running(thread) ||
    d568:	d102      	bne.n	d570 <_nano_sys_clock_tick_announce+0x114>
    d56a:	6a03      	ldr	r3, [r0, #32]
    d56c:	3301      	adds	r3, #1
    d56e:	d035      	beq.n	d5dc <_nano_sys_clock_tick_announce+0x180>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d570:	f38b 8811 	msr	BASEPRI, fp
    d574:	e005      	b.n	d582 <_nano_sys_clock_tick_announce+0x126>
    d576:	f38b 8811 	msr	BASEPRI, fp
		_unpend_thread_timing_out(thread, timeout);
		_ready_thread(thread);
		irq_unlock(key);
	} else {
		irq_unlock(key);
		if (timeout->func) {
    d57a:	695a      	ldr	r2, [r3, #20]
    d57c:	b10a      	cbz	r2, d582 <_nano_sys_clock_tick_announce+0x126>
			timeout->func(timeout);
    d57e:	4618      	mov	r0, r3
    d580:	4790      	blx	r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d582:	2c00      	cmp	r4, #0
    d584:	d0c0      	beq.n	d508 <_nano_sys_clock_tick_announce+0xac>
    d586:	687b      	ldr	r3, [r7, #4]
    d588:	429c      	cmp	r4, r3
    d58a:	d103      	bne.n	d594 <_nano_sys_clock_tick_announce+0x138>
    d58c:	2200      	movs	r2, #0
    d58e:	4623      	mov	r3, r4
    d590:	4614      	mov	r4, r2
    d592:	e7c7      	b.n	d524 <_nano_sys_clock_tick_announce+0xc8>
    d594:	6822      	ldr	r2, [r4, #0]
    d596:	e7fa      	b.n	d58e <_nano_sys_clock_tick_announce+0x132>
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(int32_t ticks)
{
	if (_time_slice_duration == 0) {
    d598:	4b17      	ldr	r3, [pc, #92]	; (d5f8 <_nano_sys_clock_tick_announce+0x19c>)
    d59a:	6819      	ldr	r1, [r3, #0]
    d59c:	b309      	cbz	r1, d5e2 <_nano_sys_clock_tick_announce+0x186>
		return;
	}

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
    d59e:	68ab      	ldr	r3, [r5, #8]
    d5a0:	4a16      	ldr	r2, [pc, #88]	; (d5fc <_nano_sys_clock_tick_announce+0x1a0>)
    d5a2:	7a9b      	ldrb	r3, [r3, #10]
    d5a4:	6812      	ldr	r2, [r2, #0]
    d5a6:	b25b      	sxtb	r3, r3
    d5a8:	4293      	cmp	r3, r2
    d5aa:	db1a      	blt.n	d5e2 <_nano_sys_clock_tick_announce+0x186>
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    d5ac:	4a14      	ldr	r2, [pc, #80]	; (d600 <_nano_sys_clock_tick_announce+0x1a4>)
    d5ae:	6810      	ldr	r0, [r2, #0]
    d5b0:	230a      	movs	r3, #10
    d5b2:	fb08 0303 	mla	r3, r8, r3, r0
	if (_time_slice_elapsed >= _time_slice_duration) {
    d5b6:	4299      	cmp	r1, r3
    d5b8:	dd01      	ble.n	d5be <_nano_sys_clock_tick_announce+0x162>

	if (_is_prio_higher(_current->base.prio, _time_slice_prio_ceiling)) {
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
    d5ba:	6013      	str	r3, [r2, #0]
    d5bc:	e011      	b.n	d5e2 <_nano_sys_clock_tick_announce+0x186>
	if (_time_slice_elapsed >= _time_slice_duration) {

		unsigned int key;

		_time_slice_elapsed = 0;
    d5be:	2300      	movs	r3, #0
    d5c0:	6013      	str	r3, [r2, #0]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d5c2:	f04f 0320 	mov.w	r3, #32
    d5c6:	f3ef 8411 	mrs	r4, BASEPRI
    d5ca:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
    d5ce:	4b08      	ldr	r3, [pc, #32]	; (d5f0 <_nano_sys_clock_tick_announce+0x194>)
    d5d0:	6898      	ldr	r0, [r3, #8]
    d5d2:	f7ff fdb7 	bl	d144 <_move_thread_to_end_of_prio_q>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d5d6:	f384 8811 	msr	BASEPRI, r4

	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
}
    d5da:	e002      	b.n	d5e2 <_nano_sys_clock_tick_announce+0x186>

	/* needed to handle the start-with-delay case */
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    d5dc:	f7ff fcca 	bl	cf74 <_add_thread_to_ready_q>
    d5e0:	e7c6      	b.n	d570 <_nano_sys_clock_tick_announce+0x114>
    d5e2:	370c      	adds	r7, #12
    d5e4:	46bd      	mov	sp, r7
    d5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5ea:	bf00      	nop
    d5ec:	200015c0 	.word	0x200015c0
    d5f0:	2000148c 	.word	0x2000148c
    d5f4:	200015b8 	.word	0x200015b8
    d5f8:	200015b0 	.word	0x200015b0
    d5fc:	200015ac 	.word	0x200015ac
    d600:	200015bc 	.word	0x200015bc

0000d604 <k_sys_work_q_init>:
char __noinit __stack sys_work_q_stack[CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE];

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    d604:	b580      	push	{r7, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    d606:	f04f 33ff 	mov.w	r3, #4294967295
char __noinit __stack sys_work_q_stack[CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE];

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
    d60a:	af00      	add	r7, sp, #0
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
    d60c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d610:	4902      	ldr	r1, [pc, #8]	; (d61c <k_sys_work_q_init+0x18>)
    d612:	4803      	ldr	r0, [pc, #12]	; (d620 <k_sys_work_q_init+0x1c>)
    d614:	f000 f9d4 	bl	d9c0 <k_work_q_start>
		       sys_work_q_stack,
		       sizeof(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
    d618:	2000      	movs	r0, #0
    d61a:	bd80      	pop	{r7, pc}
    d61c:	2000313c 	.word	0x2000313c
    d620:	200015c8 	.word	0x200015c8

0000d624 <_is_thread_ready>:

}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
    d624:	b580      	push	{r7, lr}
	return !(_is_thread_prevented_from_running(thread) ||
    d626:	7a43      	ldrb	r3, [r0, #9]
    d628:	f013 0f3e 	tst.w	r3, #62	; 0x3e

}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
    d62c:	af00      	add	r7, sp, #0
	return !(_is_thread_prevented_from_running(thread) ||
    d62e:	d104      	bne.n	d63a <_is_thread_ready+0x16>
    d630:	6a00      	ldr	r0, [r0, #32]
    d632:	1c43      	adds	r3, r0, #1
    d634:	4258      	negs	r0, r3
    d636:	4158      	adcs	r0, r3
    d638:	bd80      	pop	{r7, pc}
    d63a:	2000      	movs	r0, #0
		 _is_thread_timeout_active(thread));
}
    d63c:	bd80      	pop	{r7, pc}

0000d63e <_k_thread_single_start>:
	_sched_unlock_no_reschedule();
	_Swap(key);
}

void _k_thread_single_start(struct k_thread *thread)
{
    d63e:	b580      	push	{r7, lr}
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PRESTART;
    d640:	7a43      	ldrb	r3, [r0, #9]
    d642:	f023 0304 	bic.w	r3, r3, #4
    d646:	af00      	add	r7, sp, #0
    d648:	7243      	strb	r3, [r0, #9]
    d64a:	4602      	mov	r2, r0
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    d64c:	f7ff ffea 	bl	d624 <_is_thread_ready>
    d650:	b128      	cbz	r0, d65e <_k_thread_single_start+0x20>
		_add_thread_to_ready_q(thread);
    d652:	4610      	mov	r0, r2
	}
}
    d654:	46bd      	mov	sp, r7
    d656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
void _k_thread_single_start(struct k_thread *thread)
{
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    d65a:	f7ff bc8b 	b.w	cf74 <_add_thread_to_ready_q>
    d65e:	bd80      	pop	{r7, pc}

0000d660 <start_thread>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
static void start_thread(struct k_thread *thread)
{
    d660:	b598      	push	{r3, r4, r7, lr}
    d662:	4602      	mov	r2, r0
    d664:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d666:	f04f 0320 	mov.w	r3, #32
    d66a:	f3ef 8411 	mrs	r4, BASEPRI
    d66e:	f383 8811 	msr	BASEPRI, r3
    d672:	7a43      	ldrb	r3, [r0, #9]
    d674:	f023 0304 	bic.w	r3, r3, #4
    d678:	7243      	strb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    d67a:	f7ff ffd3 	bl	d624 <_is_thread_ready>
    d67e:	b180      	cbz	r0, d6a2 <start_thread+0x42>
		_add_thread_to_ready_q(thread);
    d680:	4610      	mov	r0, r2
    d682:	f7ff fc77 	bl	cf74 <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d686:	4b08      	ldr	r3, [pc, #32]	; (d6a8 <start_thread+0x48>)
/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
#ifdef CONFIG_PREEMPT_ENABLED
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    d688:	689b      	ldr	r3, [r3, #8]
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    d68a:	895b      	ldrh	r3, [r3, #10]
    d68c:	2b7f      	cmp	r3, #127	; 0x7f
    d68e:	d808      	bhi.n	d6a2 <start_thread+0x42>
    d690:	f7ff fd16 	bl	d0c0 <__must_switch_threads>
    d694:	b128      	cbz	r0, d6a2 <start_thread+0x42>
		if (_must_switch_threads()) {
			_Swap(key);
    d696:	4620      	mov	r0, r4
			return;
		}
	}

	irq_unlock(key);
}
    d698:	46bd      	mov	sp, r7
    d69a:	e8bd 4098 	ldmia.w	sp!, {r3, r4, r7, lr}
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
		if (_must_switch_threads()) {
			_Swap(key);
    d69e:	f7fe bd8d 	b.w	c1bc <_Swap>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d6a2:	f384 8811 	msr	BASEPRI, r4
    d6a6:	bd98      	pop	{r3, r4, r7, pc}
    d6a8:	2000148c 	.word	0x2000148c

0000d6ac <_abort_timeout>:
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    d6ac:	b580      	push	{r7, lr}
    d6ae:	4603      	mov	r3, r0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    d6b0:	6900      	ldr	r0, [r0, #16]
    d6b2:	1c42      	adds	r2, r0, #1
	}
}

/* returns _INACTIVE if the timer is not active */
static inline int _abort_timeout(struct _timeout *timeout)
{
    d6b4:	af00      	add	r7, sp, #0
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
    d6b6:	d010      	beq.n	d6da <_abort_timeout+0x2e>
    d6b8:	4a08      	ldr	r2, [pc, #32]	; (d6dc <_abort_timeout+0x30>)
		return _INACTIVE;
	}

	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
    d6ba:	6912      	ldr	r2, [r2, #16]
    d6bc:	4293      	cmp	r3, r2
    d6be:	bf1f      	itttt	ne
    d6c0:	681a      	ldrne	r2, [r3, #0]
		sys_dnode_t *next_node =
			sys_dlist_peek_next(&_timeout_q, &timeout->node);
		struct _timeout *next = (struct _timeout *)next_node;

		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
    d6c2:	6911      	ldrne	r1, [r2, #16]
    d6c4:	1840      	addne	r0, r0, r1
    d6c6:	6110      	strne	r0, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d6c8:	e893 0006 	ldmia.w	r3, {r1, r2}
    d6cc:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    d6ce:	6819      	ldr	r1, [r3, #0]
    d6d0:	604a      	str	r2, [r1, #4]
	}
	sys_dlist_remove(&timeout->node);
	timeout->delta_ticks_from_prev = _INACTIVE;
    d6d2:	f04f 32ff 	mov.w	r2, #4294967295
    d6d6:	611a      	str	r2, [r3, #16]

	return 0;
    d6d8:	2000      	movs	r0, #0
}
    d6da:	bd80      	pop	{r7, pc}
    d6dc:	2000148c 	.word	0x2000148c

0000d6e0 <schedule_new_thread.part.4>:
	irq_unlock(key);
}
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, int32_t delay)
    d6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6e2:	af00      	add	r7, sp, #0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d6e4:	f04f 0320 	mov.w	r3, #32
    d6e8:	f3ef 8511 	mrs	r5, BASEPRI
    d6ec:	f383 8811 	msr	BASEPRI, r3
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    d6f0:	4a19      	ldr	r2, [pc, #100]	; (d758 <schedule_new_thread.part.4+0x78>)
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
	timeout->thread = thread;
    d6f2:	6180      	str	r0, [r0, #24]
				_wait_q_t *wait_q,
				int32_t timeout_in_ticks)
{
	__ASSERT(timeout_in_ticks > 0, "");

	timeout->delta_ticks_from_prev = timeout_in_ticks;
    d6f4:	230a      	movs	r3, #10
    d6f6:	3109      	adds	r1, #9
    d6f8:	fbb1 f1f3 	udiv	r1, r1, r3
    d6fc:	3101      	adds	r1, #1
    d6fe:	6201      	str	r1, [r0, #32]
    d700:	4611      	mov	r1, r2
	timeout->thread = thread;
	timeout->wait_q = (sys_dlist_t *)wait_q;
    d702:	2300      	movs	r3, #0
    d704:	61c3      	str	r3, [r0, #28]
    d706:	f851 3f0c 	ldr.w	r3, [r1, #12]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d70a:	428b      	cmp	r3, r1
    d70c:	d107      	bne.n	d71e <schedule_new_thread.part.4+0x3e>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    d70e:	6101      	str	r1, [r0, #16]
	node->prev = list->tail;
    d710:	6911      	ldr	r1, [r2, #16]
    d712:	6141      	str	r1, [r0, #20]
		}

		*delta -= in_q->delta_ticks_from_prev;
	}

	sys_dlist_append(&_timeout_q, &timeout->node);
    d714:	f100 0310 	add.w	r3, r0, #16

	list->tail->next = node;
    d718:	600b      	str	r3, [r1, #0]
	list->tail = node;
    d71a:	6113      	str	r3, [r2, #16]
    d71c:	e018      	b.n	d750 <schedule_new_thread.part.4+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d71e:	f8d2 e010 	ldr.w	lr, [r2, #16]
	_dump_timeout_q();

	int32_t *delta = &timeout->delta_ticks_from_prev;
	sys_dnode_t *node;

	SYS_DLIST_FOR_EACH_NODE(&_timeout_q, node) {
    d722:	2b00      	cmp	r3, #0
    d724:	d0f3      	beq.n	d70e <schedule_new_thread.part.4+0x2e>
		struct _timeout *in_q = (struct _timeout *)node;

		if (*delta <= in_q->delta_ticks_from_prev) {
    d726:	6a04      	ldr	r4, [r0, #32]
    d728:	691e      	ldr	r6, [r3, #16]
    d72a:	42b4      	cmp	r4, r6
    d72c:	dc0a      	bgt.n	d744 <schedule_new_thread.part.4+0x64>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    d72e:	6859      	ldr	r1, [r3, #4]
			in_q->delta_ticks_from_prev -= *delta;
    d730:	1b34      	subs	r4, r6, r4
    d732:	611c      	str	r4, [r3, #16]
    d734:	6141      	str	r1, [r0, #20]
		node->next = insert_point;
    d736:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
    d738:	6859      	ldr	r1, [r3, #4]
			sys_dlist_insert_before(&_timeout_q, node,
    d73a:	f100 0210 	add.w	r2, r0, #16
    d73e:	600a      	str	r2, [r1, #0]
		insert_point->prev = node;
    d740:	605a      	str	r2, [r3, #4]
    d742:	e005      	b.n	d750 <schedule_new_thread.part.4+0x70>
						&timeout->node);
			goto inserted;
		}

		*delta -= in_q->delta_ticks_from_prev;
    d744:	1ba4      	subs	r4, r4, r6
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (!node || node == list->tail) ? NULL : node->next;
    d746:	4573      	cmp	r3, lr
    d748:	6204      	str	r4, [r0, #32]
    d74a:	d0e0      	beq.n	d70e <schedule_new_thread.part.4+0x2e>
    d74c:	681b      	ldr	r3, [r3, #0]
    d74e:	e7e8      	b.n	d722 <schedule_new_thread.part.4+0x42>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d750:	f385 8811 	msr	BASEPRI, r5
    d754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d756:	bf00      	nop
    d758:	2000148c 	.word	0x2000148c

0000d75c <k_is_in_isr>:
	return NANO_CTX_TASK;
}
#endif

int k_is_in_isr(void)
{
    d75c:	b580      	push	{r7, lr}
    d75e:	af00      	add	r7, sp, #0
    d760:	f3ef 8005 	mrs	r0, IPSR
    d764:	280a      	cmp	r0, #10
    d766:	d808      	bhi.n	d77a <k_is_in_isr+0x1e>
    d768:	b140      	cbz	r0, d77c <k_is_in_isr+0x20>
    d76a:	4b05      	ldr	r3, [pc, #20]	; (d780 <k_is_in_isr+0x24>)
    d76c:	f8d3 0d04 	ldr.w	r0, [r3, #3332]	; 0xd04
    d770:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    d774:	f080 0001 	eor.w	r0, r0, #1
    d778:	bd80      	pop	{r7, pc}
    d77a:	2001      	movs	r0, #1
	return _is_in_isr();
}
    d77c:	bd80      	pop	{r7, pc}
    d77e:	bf00      	nop
    d780:	e000e000 	.word	0xe000e000

0000d784 <_is_thread_essential>:
 * This routine indicates if the current thread is an essential system thread.
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
    d784:	b580      	push	{r7, lr}
	return _current->base.thread_state & K_ESSENTIAL;
    d786:	4b03      	ldr	r3, [pc, #12]	; (d794 <_is_thread_essential+0x10>)
    d788:	689b      	ldr	r3, [r3, #8]
    d78a:	7a58      	ldrb	r0, [r3, #9]
 * This routine indicates if the current thread is an essential system thread.
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
    d78c:	af00      	add	r7, sp, #0
	return _current->base.thread_state & K_ESSENTIAL;
}
    d78e:	f000 0001 	and.w	r0, r0, #1
    d792:	bd80      	pop	{r7, pc}
    d794:	2000148c 	.word	0x2000148c

0000d798 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
    d798:	b580      	push	{r7, lr}
    d79a:	4604      	mov	r4, r0
    d79c:	af00      	add	r7, sp, #0
    d79e:	4608      	mov	r0, r1
    d7a0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    d7a2:	461a      	mov	r2, r3
    d7a4:	47a0      	blx	r4

#ifdef CONFIG_MULTITHREADING
	if (_is_thread_essential()) {
    d7a6:	f7ff ffed 	bl	d784 <_is_thread_essential>
    d7aa:	b118      	cbz	r0, d7b4 <_thread_entry+0x1c>
		_NanoFatalErrorHandler(_NANO_ERR_INVALID_TASK_EXIT,
    d7ac:	4903      	ldr	r1, [pc, #12]	; (d7bc <_thread_entry+0x24>)
    d7ae:	2001      	movs	r0, #1
    d7b0:	f7fe ff28 	bl	c604 <_NanoFatalErrorHandler>
				       &_default_esf);
	}

	k_thread_abort(_current);
    d7b4:	4b02      	ldr	r3, [pc, #8]	; (d7c0 <_thread_entry+0x28>)
    d7b6:	6898      	ldr	r0, [r3, #8]
    d7b8:	f7fe ff72 	bl	c6a0 <k_thread_abort>
    d7bc:	0000f87c 	.word	0x0000f87c
    d7c0:	2000148c 	.word	0x2000148c

0000d7c4 <k_thread_spawn>:
#ifdef CONFIG_MULTITHREADING
k_tid_t k_thread_spawn(char *stack, size_t stack_size,
			void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, uint32_t options, int32_t delay)
{
    d7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7c6:	b085      	sub	sp, #20
    d7c8:	af04      	add	r7, sp, #16
    d7ca:	4604      	mov	r4, r0
	__ASSERT(!_is_in_isr(), "");

	struct k_thread *new_thread = (struct k_thread *)stack;

	_new_thread(stack, stack_size, entry, p1, p2, p3, prio, options);
    d7cc:	6a7e      	ldr	r6, [r7, #36]	; 0x24
    d7ce:	9603      	str	r6, [sp, #12]
    d7d0:	6a3e      	ldr	r6, [r7, #32]
    d7d2:	9602      	str	r6, [sp, #8]
    d7d4:	69fe      	ldr	r6, [r7, #28]
#ifdef CONFIG_MULTITHREADING
k_tid_t k_thread_spawn(char *stack, size_t stack_size,
			void (*entry)(void *, void *, void*),
			void *p1, void *p2, void *p3,
			int prio, uint32_t options, int32_t delay)
{
    d7d6:	6abd      	ldr	r5, [r7, #40]	; 0x28
	__ASSERT(!_is_in_isr(), "");

	struct k_thread *new_thread = (struct k_thread *)stack;

	_new_thread(stack, stack_size, entry, p1, p2, p3, prio, options);
    d7d8:	9601      	str	r6, [sp, #4]
    d7da:	69be      	ldr	r6, [r7, #24]
    d7dc:	9600      	str	r6, [sp, #0]
    d7de:	f7fe feab 	bl	c538 <_new_thread>

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, int32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    d7e2:	b91d      	cbnz	r5, d7ec <k_thread_spawn+0x28>
		start_thread(thread);
    d7e4:	4620      	mov	r0, r4
    d7e6:	f7ff ff3b 	bl	d660 <start_thread>
    d7ea:	e003      	b.n	d7f4 <k_thread_spawn+0x30>
    d7ec:	4629      	mov	r1, r5
    d7ee:	4620      	mov	r0, r4
    d7f0:	f7ff ff76 	bl	d6e0 <schedule_new_thread.part.4>
	_new_thread(stack, stack_size, entry, p1, p2, p3, prio, options);

	schedule_new_thread(new_thread, delay);

	return new_thread;
}
    d7f4:	4620      	mov	r0, r4
    d7f6:	3704      	adds	r7, #4
    d7f8:	46bd      	mov	sp, r7
    d7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d7fc <_k_thread_group_op>:
{
	return !!(thread_data->init_groups & groups);
}

void _k_thread_group_op(uint32_t groups, void (*func)(struct k_thread *))
{
    d7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    d800:	4b1a      	ldr	r3, [pc, #104]	; (d86c <_k_thread_group_op+0x70>)

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
    d802:	4c1b      	ldr	r4, [pc, #108]	; (d870 <_k_thread_group_op+0x74>)
    d804:	4e1b      	ldr	r6, [pc, #108]	; (d874 <_k_thread_group_op+0x78>)
{
	return !!(thread_data->init_groups & groups);
}

void _k_thread_group_op(uint32_t groups, void (*func)(struct k_thread *))
{
    d806:	4680      	mov	r8, r0
    d808:	6898      	ldr	r0, [r3, #8]
    d80a:	7ac2      	ldrb	r2, [r0, #11]
    d80c:	3a01      	subs	r2, #1
    d80e:	af00      	add	r7, sp, #0
    d810:	4689      	mov	r9, r1
    d812:	72c2      	strb	r2, [r0, #11]
    d814:	461d      	mov	r5, r3

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
    d816:	42b4      	cmp	r4, r6
    d818:	d20f      	bcs.n	d83a <_k_thread_group_op+0x3e>
		if (is_in_any_group(thread_data, groups)) {
    d81a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d81c:	ea18 0f03 	tst.w	r8, r3
    d820:	d009      	beq.n	d836 <_k_thread_group_op+0x3a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d822:	f04f 0320 	mov.w	r3, #32
    d826:	f3ef 8a11 	mrs	sl, BASEPRI
    d82a:	f383 8811 	msr	BASEPRI, r3
			key = irq_lock();
			func(thread_data->thread);
    d82e:	6820      	ldr	r0, [r4, #0]
    d830:	47c8      	blx	r9
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d832:	f38a 8811 	msr	BASEPRI, sl

	_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
    d836:	342c      	adds	r4, #44	; 0x2c
    d838:	e7ed      	b.n	d816 <_k_thread_group_op+0x1a>

	/*
	 * If the current thread is still in a ready state, then let the
	 * "unlock scheduler" code determine if any rescheduling is needed.
	 */
	if (_is_thread_ready(_current)) {
    d83a:	68a8      	ldr	r0, [r5, #8]
    d83c:	f7ff fef2 	bl	d624 <_is_thread_ready>
    d840:	b120      	cbz	r0, d84c <_k_thread_group_op+0x50>

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
}
    d842:	46bd      	mov	sp, r7
    d844:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/*
	 * If the current thread is still in a ready state, then let the
	 * "unlock scheduler" code determine if any rescheduling is needed.
	 */
	if (_is_thread_ready(_current)) {
		k_sched_unlock();
    d848:	f7ff bc68 	b.w	d11c <k_sched_unlock>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    d84c:	f04f 0320 	mov.w	r3, #32
    d850:	f3ef 8011 	mrs	r0, BASEPRI
    d854:	f383 8811 	msr	BASEPRI, r3
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 0, "");

	++_current->base.sched_locked;
    d858:	4b04      	ldr	r3, [pc, #16]	; (d86c <_k_thread_group_op+0x70>)
    d85a:	689a      	ldr	r2, [r3, #8]
    d85c:	7ad3      	ldrb	r3, [r2, #11]
    d85e:	3301      	adds	r3, #1
    d860:	72d3      	strb	r3, [r2, #11]

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
}
    d862:	46bd      	mov	sp, r7
    d864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
    d868:	f7fe bca8 	b.w	c1bc <_Swap>
    d86c:	2000148c 	.word	0x2000148c
    d870:	20000338 	.word	0x20000338
    d874:	20000338 	.word	0x20000338

0000d878 <_k_thread_single_abort>:

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    d878:	b598      	push	{r3, r4, r7, lr}
	if (thread->fn_abort != NULL) {
    d87a:	6d03      	ldr	r3, [r0, #80]	; 0x50

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    d87c:	af00      	add	r7, sp, #0
    d87e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    d880:	b103      	cbz	r3, d884 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    d882:	4798      	blx	r3
	}

	if (_is_thread_ready(thread)) {
    d884:	4620      	mov	r0, r4
    d886:	f7ff fecd 	bl	d624 <_is_thread_ready>
    d88a:	b118      	cbz	r0, d894 <_k_thread_single_abort+0x1c>
		_remove_thread_from_ready_q(thread);
    d88c:	4620      	mov	r0, r4
    d88e:	f7ff fb9b 	bl	cfc8 <_remove_thread_from_ready_q>
    d892:	e012      	b.n	d8ba <_k_thread_single_abort+0x42>
	} else {
		if (_is_thread_pending(thread)) {
    d894:	7a63      	ldrb	r3, [r4, #9]
    d896:	079b      	lsls	r3, r3, #30
    d898:	d508      	bpl.n	d8ac <_k_thread_single_abort+0x34>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    d89a:	e894 000c 	ldmia.w	r4, {r2, r3}
    d89e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    d8a0:	6822      	ldr	r2, [r4, #0]
    d8a2:	6053      	str	r3, [r2, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->base.thread_state &= ~K_PENDING;
    d8a4:	7a63      	ldrb	r3, [r4, #9]
    d8a6:	f023 0302 	bic.w	r3, r3, #2
    d8aa:	7263      	strb	r3, [r4, #9]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
    d8ac:	6a23      	ldr	r3, [r4, #32]
    d8ae:	3301      	adds	r3, #1
    d8b0:	d003      	beq.n	d8ba <_k_thread_single_abort+0x42>
}

/* returns _INACTIVE if the timer has already expired */
static inline int _abort_thread_timeout(struct k_thread *thread)
{
	return _abort_timeout(&thread->base.timeout);
    d8b2:	f104 0010 	add.w	r0, r4, #16
    d8b6:	f7ff fef9 	bl	d6ac <_abort_timeout>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->base.thread_state |= K_DEAD;
    d8ba:	7a63      	ldrb	r3, [r4, #9]
    d8bc:	f043 0308 	orr.w	r3, r3, #8
    d8c0:	7263      	strb	r3, [r4, #9]
    d8c2:	bd98      	pop	{r3, r4, r7, pc}

0000d8c4 <_init_static_threads>:
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    d8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8c8:	4d22      	ldr	r5, [pc, #136]	; (d954 <_init_static_threads+0x90>)
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    d8ca:	f8df 808c 	ldr.w	r8, [pc, #140]	; d958 <_init_static_threads+0x94>
	_mark_thread_as_dead(thread);
}

#ifdef CONFIG_MULTITHREADING
void _init_static_threads(void)
{
    d8ce:	b084      	sub	sp, #16
    d8d0:	af04      	add	r7, sp, #16
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    d8d2:	4545      	cmp	r5, r8
    d8d4:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    d8d8:	4e1f      	ldr	r6, [pc, #124]	; (d958 <_init_static_threads+0x94>)
    d8da:	d215      	bcs.n	d908 <_init_static_threads+0x44>
		_task_group_adjust(thread_data);
		_new_thread(
    d8dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    d8e0:	9303      	str	r3, [sp, #12]
    d8e2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    d8e6:	9302      	str	r3, [sp, #8]
    d8e8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    d8ec:	9301      	str	r3, [sp, #4]
    d8ee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    d8f2:	9300      	str	r3, [sp, #0]
    d8f4:	f1a4 002c 	sub.w	r0, r4, #44	; 0x2c
    d8f8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
    d8fa:	f7fe fe1d 	bl	c538 <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->thread->init_data = thread_data;
    d8fe:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    d902:	64dd      	str	r5, [r3, #76]	; 0x4c
    d904:	4625      	mov	r5, r4
    d906:	e7e4      	b.n	d8d2 <_init_static_threads+0xe>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    d908:	4b14      	ldr	r3, [pc, #80]	; (d95c <_init_static_threads+0x98>)
	}

	_sched_lock();
#if defined(CONFIG_LEGACY_KERNEL)
	/* Start all (legacy) threads that are part of the EXE task group */
	_k_thread_group_op(K_TASK_GROUP_EXE, _k_thread_single_start);
    d90a:	4915      	ldr	r1, [pc, #84]	; (d960 <_init_static_threads+0x9c>)
    d90c:	689a      	ldr	r2, [r3, #8]
    d90e:	7ad3      	ldrb	r3, [r2, #11]
    d910:	3b01      	subs	r3, #1
    d912:	72d3      	strb	r3, [r2, #11]
    d914:	2001      	movs	r0, #1
    d916:	f7ff ff71 	bl	d7fc <_k_thread_group_op>
    d91a:	f04f 0320 	mov.w	r3, #32
    d91e:	f3ef 8511 	mrs	r5, BASEPRI
    d922:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    d926:	4c0b      	ldr	r4, [pc, #44]	; (d954 <_init_static_threads+0x90>)
    d928:	42b4      	cmp	r4, r6
    d92a:	d20b      	bcs.n	d944 <_init_static_threads+0x80>
		if (thread_data->init_delay != K_FOREVER) {
    d92c:	6a21      	ldr	r1, [r4, #32]
    d92e:	1c4b      	adds	r3, r1, #1
    d930:	d006      	beq.n	d940 <_init_static_threads+0x7c>
			schedule_new_thread(thread_data->thread,
    d932:	6820      	ldr	r0, [r4, #0]

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, int32_t delay)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    d934:	b911      	cbnz	r1, d93c <_init_static_threads+0x78>
		start_thread(thread);
    d936:	f7ff fe93 	bl	d660 <start_thread>
    d93a:	e001      	b.n	d940 <_init_static_threads+0x7c>
    d93c:	f7ff fed0 	bl	d6e0 <schedule_new_thread.part.4>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    d940:	342c      	adds	r4, #44	; 0x2c
    d942:	e7f1      	b.n	d928 <_init_static_threads+0x64>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    d944:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
}
    d948:	46bd      	mov	sp, r7
    d94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			schedule_new_thread(thread_data->thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    d94e:	f7ff bbe5 	b.w	d11c <k_sched_unlock>
    d952:	bf00      	nop
    d954:	20000338 	.word	0x20000338
    d958:	20000338 	.word	0x20000338
    d95c:	2000148c 	.word	0x2000148c
    d960:	0000d63f 	.word	0x0000d63f

0000d964 <_init_thread_base>:
}
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    d964:	b580      	push	{r7, lr}
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->execution_flags = (uint8_t)options;
    d966:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (uint8_t)initial_state;
    d968:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;

	thread_base->sched_locked = 0;
    d96a:	2300      	movs	r3, #0
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->execution_flags = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    d96c:	b2c9      	uxtb	r1, r1
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = _INACTIVE;
    d96e:	f04f 32ff 	mov.w	r2, #4294967295
}
#endif

void _init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    d972:	af00      	add	r7, sp, #0
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->execution_flags = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    d974:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
    d976:	72c3      	strb	r3, [r0, #11]
    d978:	6202      	str	r2, [r0, #32]

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    d97a:	61c3      	str	r3, [r0, #28]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
    d97c:	6183      	str	r3, [r0, #24]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    d97e:	6243      	str	r3, [r0, #36]	; 0x24
    d980:	bd80      	pop	{r7, pc}

0000d982 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    d982:	b598      	push	{r3, r4, r7, lr}
    d984:	4604      	mov	r4, r0
    d986:	af00      	add	r7, sp, #0

	while (1) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_fifo_get(&work_q->fifo, K_FOREVER);
    d988:	f04f 31ff 	mov.w	r1, #4294967295
    d98c:	4620      	mov	r0, r4
    d98e:	f7ff f80f 	bl	c9b0 <k_fifo_get>
    d992:	4603      	mov	r3, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d994:	3308      	adds	r3, #8

		handler = work->handler;
    d996:	6842      	ldr	r2, [r0, #4]
    d998:	f3bf 8f5f 	dmb	sy
    d99c:	e853 1f00 	ldrex	r1, [r3]
    d9a0:	f021 0e01 	bic.w	lr, r1, #1
    d9a4:	e843 ec00 	strex	ip, lr, [r3]
    d9a8:	f1bc 0f00 	cmp.w	ip, #0
    d9ac:	d1f6      	bne.n	d99c <work_q_main+0x1a>
    d9ae:	f3bf 8f5f 	dmb	sy

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    d9b2:	07cb      	lsls	r3, r1, #31
    d9b4:	d500      	bpl.n	d9b8 <work_q_main+0x36>
					       K_WORK_STATE_PENDING)) {
			handler(work);
    d9b6:	4790      	blx	r2
		}

		/* Make sure we don't hog up the CPU if the FIFO never (or
		 * very rarely) gets empty.
		 */
		k_yield();
    d9b8:	f7ff fbee 	bl	d198 <k_yield>
	}
    d9bc:	e7e4      	b.n	d988 <work_q_main+0x6>
	...

0000d9c0 <k_work_q_start>:
}

void k_work_q_start(struct k_work_q *work_q, char *stack,
		    size_t stack_size, int prio)
{
    d9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9c4:	b086      	sub	sp, #24
    d9c6:	af06      	add	r7, sp, #24
    d9c8:	4606      	mov	r6, r0
    d9ca:	460c      	mov	r4, r1
    d9cc:	4615      	mov	r5, r2
    d9ce:	4698      	mov	r8, r3
	k_fifo_init(&work_q->fifo);
    d9d0:	f7fe ff58 	bl	c884 <k_fifo_init>

	k_thread_spawn(stack, stack_size,
    d9d4:	2200      	movs	r2, #0
    d9d6:	9204      	str	r2, [sp, #16]
    d9d8:	9203      	str	r2, [sp, #12]
    d9da:	9201      	str	r2, [sp, #4]
    d9dc:	9200      	str	r2, [sp, #0]
    d9de:	f8cd 8008 	str.w	r8, [sp, #8]
    d9e2:	4633      	mov	r3, r6
    d9e4:	4a03      	ldr	r2, [pc, #12]	; (d9f4 <k_work_q_start+0x34>)
    d9e6:	4629      	mov	r1, r5
    d9e8:	4620      	mov	r0, r4
    d9ea:	f7ff feeb 	bl	d7c4 <k_thread_spawn>
		       work_q_main, work_q, 0, 0,
		       prio, 0, 0);
}
    d9ee:	46bd      	mov	sp, r7
    d9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9f4:	0000d983 	.word	0x0000d983

0000d9f8 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    d9f8:	b580      	push	{r7, lr}
    d9fa:	af00      	add	r7, sp, #0

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
    d9fc:	bd80      	pop	{r7, pc}
